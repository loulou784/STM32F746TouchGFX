
STM32F746TouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026208  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003368  080263d8  080263d8  000363d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08029740  08029740  00039740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  080298e8  080298e8  000398e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000c  080298f4  080298f4  000398f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08029900  08029900  00040120  2**0
                  CONTENTS
  7 .ARM          00000008  08029900  08029900  00039900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08029908  08029908  00040120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08029908  08029908  00039908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0802991c  0802991c  0003991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000120  20000000  08029924  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000aa1c  20000120  08029a44  00040120  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ab3c  08029a44  0004ab3c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00040120  2**0
                  CONTENTS, READONLY
 15 .debug_info   0009ed6c  00000000  00000000  00040150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00014761  00000000  00000000  000deebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000047a0  00000000  00000000  000f3620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00004110  00000000  00000000  000f7dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00042545  00000000  00000000  000fbed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00062185  00000000  00000000  0013e415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00143f78  00000000  00000000  001a059a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000d2  00000000  00000000  002e4512  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013218  00000000  00000000  002e45e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000120 	.word	0x20000120
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080263c0 	.word	0x080263c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000124 	.word	0x20000124
 800020c:	080263c0 	.word	0x080263c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_ADC3_Init+0x98>)
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <MX_ADC3_Init+0x9c>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_ADC3_Init+0x98>)
 80005c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC3_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_ADC3_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC3_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_ADC3_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC3_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC3_Init+0x98>)
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <MX_ADC3_Init+0xa0>)
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC3_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC3_Init+0x98>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_ADC3_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC3_Init+0x98>)
 8000604:	2201      	movs	r2, #1
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC3_Init+0x98>)
 800060a:	f002 fee1 	bl	80033d0 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000614:	f001 f9d0 	bl	80019b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000618:	2304      	movs	r3, #4
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	2301      	movs	r3, #1
 800061e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC3_Init+0x98>)
 800062a:	f002 ff15 	bl	8003458 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000634:	f001 f9c0 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20009754 	.word	0x20009754
 8000644:	40012200 	.word	0x40012200
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <HAL_ADC_MspInit+0xa4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d13c      	bne.n	80006e8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0xa8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80006b6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80006ba:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006bc:	2303      	movs	r3, #3
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <HAL_ADC_MspInit+0xac>)
 80006cc:	f004 fa3e 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80006d0:	2301      	movs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <HAL_ADC_MspInit+0xb0>)
 80006e4:	f004 fa32 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40012200 	.word	0x40012200
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40021400 	.word	0x40021400
 80006fc:	40020000 	.word	0x40020000

08000700 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_CRC_Init+0x3c>)
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <MX_CRC_Init+0x40>)
 8000708:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_CRC_Init+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_CRC_Init+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_CRC_Init+0x3c>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_CRC_Init+0x3c>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_CRC_Init+0x3c>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_CRC_Init+0x3c>)
 800072a:	f003 f9bb 	bl	8003aa4 <HAL_CRC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000734:	f001 f940 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000979c 	.word	0x2000979c
 8000740:	40023000 	.word	0x40023000

08000744 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_CRC_MspInit+0x38>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d10b      	bne.n	800076e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <HAL_CRC_MspInit+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <HAL_CRC_MspInit+0x3c>)
 800075c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_CRC_MspInit+0x3c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023000 	.word	0x40023000
 8000780:	40023800 	.word	0x40023800

08000784 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_DCMI_Init+0x60>)
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <MX_DCMI_Init+0x64>)
 800078c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_DCMI_Init+0x60>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_DCMI_Init+0x60>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_DCMI_Init+0x60>)
 80007d2:	f003 fa51 	bl	8003c78 <HAL_DCMI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f001 f8ec 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200097c0 	.word	0x200097c0
 80007e8:	50050000 	.word	0x50050000

080007ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a50      	ldr	r2, [pc, #320]	; (800094c <HAL_DCMI_MspInit+0x160>)
 800080a:	4293      	cmp	r3, r2
 800080c:	f040 809a 	bne.w	8000944 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000810:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	4a4e      	ldr	r2, [pc, #312]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6353      	str	r3, [r2, #52]	; 0x34
 800081c:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800081e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	623b      	str	r3, [r7, #32]
 8000826:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000828:	4b49      	ldr	r3, [pc, #292]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	4a48      	ldr	r2, [pc, #288]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6313      	str	r3, [r2, #48]	; 0x30
 8000834:	4b46      	ldr	r3, [pc, #280]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a42      	ldr	r2, [pc, #264]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a3c      	ldr	r2, [pc, #240]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
 8000864:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000870:	4b37      	ldr	r3, [pc, #220]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	4a36      	ldr	r2, [pc, #216]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	6313      	str	r3, [r2, #48]	; 0x30
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a30      	ldr	r2, [pc, #192]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <HAL_DCMI_MspInit+0x164>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b0:	230d      	movs	r3, #13
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4826      	ldr	r0, [pc, #152]	; (8000954 <HAL_DCMI_MspInit+0x168>)
 80008bc:	f004 f946 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80008c0:	2308      	movs	r3, #8
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d0:	230d      	movs	r3, #13
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	481f      	ldr	r0, [pc, #124]	; (8000958 <HAL_DCMI_MspInit+0x16c>)
 80008dc:	f004 f936 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80008e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f2:	230d      	movs	r3, #13
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <HAL_DCMI_MspInit+0x170>)
 80008fe:	f004 f925 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000902:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000914:	230d      	movs	r3, #13
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4810      	ldr	r0, [pc, #64]	; (8000960 <HAL_DCMI_MspInit+0x174>)
 8000920:	f004 f914 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000924:	2350      	movs	r3, #80	; 0x50
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000934:	230d      	movs	r3, #13
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <HAL_DCMI_MspInit+0x178>)
 8000940:	f004 f904 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000944:	bf00      	nop
 8000946:	3738      	adds	r7, #56	; 0x38
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	50050000 	.word	0x50050000
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021800 	.word	0x40021800
 8000960:	40021c00 	.word	0x40021c00
 8000964:	40020000 	.word	0x40020000

08000968 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <MX_DMA2D_Init+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 800099e:	f003 fa7f 	bl	8003ea0 <HAL_DMA2D_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009a8:	f001 f806 	bl	80019b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009ac:	2101      	movs	r1, #1
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_DMA2D_Init+0x5c>)
 80009b0:	f003 fbd0 	bl	8004154 <HAL_DMA2D_ConfigLayer>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009ba:	f000 fffd 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20009810 	.word	0x20009810
 80009c8:	4002b000 	.word	0x4002b000

080009cc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_DMA2D_MspInit+0x44>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d113      	bne.n	8000a06 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	205a      	movs	r0, #90	; 0x5a
 80009fc:	f003 f828 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a00:	205a      	movs	r0, #90	; 0x5a
 8000a02:	f003 f841 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	4002b000 	.word	0x4002b000
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a1e:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a20:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a36:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	3302      	adds	r3, #2
 8000a56:	22e1      	movs	r2, #225	; 0xe1
 8000a58:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	3303      	adds	r3, #3
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	3305      	adds	r3, #5
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a8a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a8e:	f003 fbf3 	bl	8004278 <HAL_ETH_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ETH_Init+0x84>
  {
    Error_Handler();
 8000a98:	f000 ff8e 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20009850 	.word	0x20009850
 8000aa4:	40028000 	.word	0x40028000

08000aa8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a3f      	ldr	r2, [pc, #252]	; (8000bc4 <HAL_ETH_MspInit+0x11c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d178      	bne.n	8000bbc <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a38      	ldr	r2, [pc, #224]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_ETH_MspInit+0x120>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000b5a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4815      	ldr	r0, [pc, #84]	; (8000bcc <HAL_ETH_MspInit+0x124>)
 8000b78:	f003 ffe8 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b7c:	2332      	movs	r3, #50	; 0x32
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <HAL_ETH_MspInit+0x128>)
 8000b98:	f003 ffd8 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b9c:	2386      	movs	r3, #134	; 0x86
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bac:	230b      	movs	r3, #11
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <HAL_ETH_MspInit+0x12c>)
 8000bb8:	f003 ffc8 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	; 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40028000 	.word	0x40028000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bf0:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000bf2:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <MX_FMC_Init+0x150>)
 8000bf4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c02:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c08:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c10:	2240      	movs	r2, #64	; 0x40
 8000c12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c14:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c16:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c1a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c28:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c2a:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c40:	2304      	movs	r3, #4
 8000c42:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c44:	2307      	movs	r3, #7
 8000c46:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4832      	ldr	r0, [pc, #200]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c5a:	f00a fa2c 	bl	800b0b6 <HAL_SDRAM_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c64:	f000 fea8 	bl	80019b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	603b      	str	r3, [r7, #0]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <MX_FMC_Init+0x154>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <MX_FMC_Init+0x154>)
 8000c74:	2210      	movs	r2, #16
 8000c76:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <MX_FMC_Init+0x154>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <MX_FMC_Init+0x154>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c88:	4928      	ldr	r1, [pc, #160]	; (8000d2c <MX_FMC_Init+0x154>)
 8000c8a:	4826      	ldr	r0, [pc, #152]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000c8c:	f00a fa47 	bl	800b11e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f002 fb79 	bl	8003388 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_FMC_Init+0x154>)
 8000c98:	2202      	movs	r2, #2
 8000c9a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_FMC_Init+0x154>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_FMC_Init+0x154>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_FMC_Init+0x154>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	491e      	ldr	r1, [pc, #120]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000cb6:	f00a fa32 	bl	800b11e <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cc8:	2208      	movs	r2, #8
 8000cca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd6:	4915      	ldr	r1, [pc, #84]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000cda:	f00a fa20 	bl	800b11e <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8000cde:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000ce2:	603b      	str	r3, [r7, #0]
		   SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
		   SDRAM_MODEREG_CAS_LATENCY_3            | \
		   SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
		   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_FMC_Init+0x154>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cec:	2210      	movs	r2, #16
 8000cee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <MX_FMC_Init+0x154>)
 8000cfa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d00:	490a      	ldr	r1, [pc, #40]	; (8000d2c <MX_FMC_Init+0x154>)
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000d04:	f00a fa0b 	bl	800b11e <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000d08:	f240 712b 	movw	r1, #1835	; 0x72b
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_FMC_Init+0x14c>)
 8000d0e:	f00a fa31 	bl	800b174 <HAL_SDRAM_ProgramRefreshRate>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8000d12:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000d16:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d1a:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20009898 	.word	0x20009898
 8000d28:	a0000140 	.word	0xa0000140
 8000d2c:	2000013c 	.word	0x2000013c

08000d30 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <HAL_FMC_MspInit+0x100>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d16d      	bne.n	8000e28 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_FMC_MspInit+0x100>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <HAL_FMC_MspInit+0x104>)
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	4a37      	ldr	r2, [pc, #220]	; (8000e34 <HAL_FMC_MspInit+0x104>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6393      	str	r3, [r2, #56]	; 0x38
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <HAL_FMC_MspInit+0x104>)
 8000d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d6a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d6e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	482c      	ldr	r0, [pc, #176]	; (8000e38 <HAL_FMC_MspInit+0x108>)
 8000d86:	f003 fee1 	bl	8004b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000d8a:	f248 1333 	movw	r3, #33075	; 0x8133
 8000d8e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4825      	ldr	r0, [pc, #148]	; (8000e3c <HAL_FMC_MspInit+0x10c>)
 8000da6:	f003 fed1 	bl	8004b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000daa:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000dae:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	481e      	ldr	r0, [pc, #120]	; (8000e40 <HAL_FMC_MspInit+0x110>)
 8000dc6:	f003 fec1 	bl	8004b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000dca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000dce:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <HAL_FMC_MspInit+0x114>)
 8000de6:	f003 feb1 	bl	8004b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000dea:	2328      	movs	r3, #40	; 0x28
 8000dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <HAL_FMC_MspInit+0x118>)
 8000e04:	f003 fea2 	bl	8004b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <HAL_FMC_MspInit+0x11c>)
 8000e22:	f003 fe93 	bl	8004b4c <HAL_GPIO_Init>
 8000e26:	e000      	b.n	8000e2a <HAL_FMC_MspInit+0xfa>
    return;
 8000e28:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000014c 	.word	0x2000014c
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40021800 	.word	0x40021800
 8000e40:	40020c00 	.word	0x40020c00
 8000e44:	40021400 	.word	0x40021400
 8000e48:	40021c00 	.word	0x40021c00
 8000e4c:	40020800 	.word	0x40020800

08000e50 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e58:	f7ff ff6a 	bl	8000d30 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <vApplicationGetIdleTaskMemory+0x30>)
 8000eae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000150 	.word	0x20000150
 8000ec8:	200001a8 	.word	0x200001a8

08000ecc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_FREERTOS_Init+0x30>)
 8000ed4:	1d3c      	adds	r4, r7, #4
 8000ed6:	461d      	mov	r5, r3
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f010 f9a1 	bl	8011230 <osThreadCreate>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <MX_FREERTOS_Init+0x34>)
 8000ef2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bdb0      	pop	{r4, r5, r7, pc}
 8000efc:	080263e4 	.word	0x080263e4
 8000f00:	200098cc 	.word	0x200098cc

08000f04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000f0c:	f016 fea4 	bl	8017c58 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  MX_TouchGFX_Process();
 8000f10:	f013 f888 	bl	8014024 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f010 f9d7 	bl	80112c8 <osDelay>
 8000f1a:	e7fb      	b.n	8000f14 <StartDefaultTask+0x10>

08000f1c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b090      	sub	sp, #64	; 0x40
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4baf      	ldr	r3, [pc, #700]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4aae      	ldr	r2, [pc, #696]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4bac      	ldr	r3, [pc, #688]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f4a:	4ba9      	ldr	r3, [pc, #676]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4aa8      	ldr	r2, [pc, #672]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4ba6      	ldr	r3, [pc, #664]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4ba3      	ldr	r3, [pc, #652]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4aa2      	ldr	r2, [pc, #648]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4ba0      	ldr	r3, [pc, #640]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4b9d      	ldr	r3, [pc, #628]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a9c      	ldr	r2, [pc, #624]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b9a      	ldr	r3, [pc, #616]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	4b97      	ldr	r3, [pc, #604]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a96      	ldr	r2, [pc, #600]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b94      	ldr	r3, [pc, #592]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b91      	ldr	r3, [pc, #580]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a90      	ldr	r2, [pc, #576]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fc2:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a8a      	ldr	r2, [pc, #552]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fda:	4b85      	ldr	r3, [pc, #532]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a84      	ldr	r2, [pc, #528]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b82      	ldr	r3, [pc, #520]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	4b7f      	ldr	r3, [pc, #508]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a7e      	ldr	r2, [pc, #504]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8000ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b7c      	ldr	r3, [pc, #496]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100a:	4b79      	ldr	r3, [pc, #484]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a78      	ldr	r2, [pc, #480]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a72      	ldr	r2, [pc, #456]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <MX_GPIO_Init+0x2d4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2120      	movs	r1, #32
 800103e:	486d      	ldr	r0, [pc, #436]	; (80011f4 <MX_GPIO_Init+0x2d8>)
 8001040:	f004 f854 	bl	80050ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	210c      	movs	r1, #12
 8001048:	486b      	ldr	r0, [pc, #428]	; (80011f8 <MX_GPIO_Init+0x2dc>)
 800104a:	f004 f84f 	bl	80050ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2108      	movs	r1, #8
 8001052:	486a      	ldr	r0, [pc, #424]	; (80011fc <MX_GPIO_Init+0x2e0>)
 8001054:	f004 f84a 	bl	80050ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105e:	4866      	ldr	r0, [pc, #408]	; (80011f8 <MX_GPIO_Init+0x2dc>)
 8001060:	f004 f844 	bl	80050ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4865      	ldr	r0, [pc, #404]	; (8001200 <MX_GPIO_Init+0x2e4>)
 800106c:	f004 f83e 	bl	80050ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	21c8      	movs	r1, #200	; 0xc8
 8001074:	4863      	ldr	r0, [pc, #396]	; (8001204 <MX_GPIO_Init+0x2e8>)
 8001076:	f004 f839 	bl	80050ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800107a:	2308      	movs	r3, #8
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	485e      	ldr	r0, [pc, #376]	; (8001208 <MX_GPIO_Init+0x2ec>)
 800108e:	f003 fd5d 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001092:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010a4:	230a      	movs	r3, #10
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4857      	ldr	r0, [pc, #348]	; (800120c <MX_GPIO_Init+0x2f0>)
 80010b0:	f003 fd4c 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	4851      	ldr	r0, [pc, #324]	; (8001210 <MX_GPIO_Init+0x2f4>)
 80010ca:	f003 fd3f 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <MX_GPIO_Init+0x2f8>)
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010de:	4619      	mov	r1, r3
 80010e0:	4844      	ldr	r0, [pc, #272]	; (80011f4 <MX_GPIO_Init+0x2d8>)
 80010e2:	f003 fd33 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80010e6:	2320      	movs	r3, #32
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fa:	4619      	mov	r1, r3
 80010fc:	483d      	ldr	r0, [pc, #244]	; (80011f4 <MX_GPIO_Init+0x2d8>)
 80010fe:	f003 fd25 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001102:	f241 030c 	movw	r3, #4108	; 0x100c
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	4837      	ldr	r0, [pc, #220]	; (80011f8 <MX_GPIO_Init+0x2dc>)
 800111c:	f003 fd16 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	4619      	mov	r1, r3
 8001134:	4838      	ldr	r0, [pc, #224]	; (8001218 <MX_GPIO_Init+0x2fc>)
 8001136:	f003 fd09 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800113a:	2308      	movs	r3, #8
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	4619      	mov	r1, r3
 8001150:	482a      	ldr	r0, [pc, #168]	; (80011fc <MX_GPIO_Init+0x2e0>)
 8001152:	f003 fcfb 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001156:	2310      	movs	r3, #16
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <MX_GPIO_Init+0x2d8>)
 800116a:	f003 fcef 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800116e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800117c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <MX_GPIO_Init+0x2e4>)
 8001184:	f003 fce2 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119e:	4619      	mov	r1, r3
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <MX_GPIO_Init+0x2e4>)
 80011a2:	f003 fcd3 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_GPIO_Init+0x2f8>)
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b8:	4619      	mov	r1, r3
 80011ba:	480f      	ldr	r0, [pc, #60]	; (80011f8 <MX_GPIO_Init+0x2dc>)
 80011bc:	f003 fcc6 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011c0:	2310      	movs	r3, #16
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011d0:	230a      	movs	r3, #10
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <MX_GPIO_Init+0x2e4>)
 80011dc:	f003 fcb6 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011e0:	23c8      	movs	r3, #200	; 0xc8
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
 80011ec:	e016      	b.n	800121c <MX_GPIO_Init+0x300>
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40022000 	.word	0x40022000
 80011fc:	40022800 	.word	0x40022800
 8001200:	40021c00 	.word	0x40021c00
 8001204:	40021800 	.word	0x40021800
 8001208:	40021000 	.word	0x40021000
 800120c:	40020400 	.word	0x40020400
 8001210:	40022400 	.word	0x40022400
 8001214:	10120000 	.word	0x10120000
 8001218:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	4819      	ldr	r0, [pc, #100]	; (800128c <MX_GPIO_Init+0x370>)
 8001228:	f003 fc90 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800122c:	2305      	movs	r3, #5
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800123c:	230a      	movs	r3, #10
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001244:	4619      	mov	r1, r3
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <MX_GPIO_Init+0x374>)
 8001248:	f003 fc80 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800124c:	2304      	movs	r3, #4
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <MX_GPIO_Init+0x370>)
 8001260:	f003 fc74 	bl	8004b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001264:	2328      	movs	r3, #40	; 0x28
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001274:	230a      	movs	r3, #10
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_GPIO_Init+0x378>)
 8001280:	f003 fc64 	bl	8004b4c <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3740      	adds	r7, #64	; 0x40
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021800 	.word	0x40021800
 8001290:	40020800 	.word	0x40020800
 8001294:	40020000 	.word	0x40020000

08001298 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_I2C1_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <MX_I2C1_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_I2C1_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_I2C1_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <MX_I2C1_Init+0x74>)
 80012d4:	f005 fc88 	bl	8006be8 <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 fb6b 	bl	80019b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <MX_I2C1_Init+0x74>)
 80012e6:	f006 f989 	bl	80075fc <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f000 fb62 	bl	80019b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_I2C1_Init+0x74>)
 80012f8:	f006 f9cb 	bl	8007692 <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001302:	f000 fb59 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000991c 	.word	0x2000991c
 8001310:	40005400 	.word	0x40005400
 8001314:	00c0eaff 	.word	0x00c0eaff

08001318 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_I2C3_Init+0x74>)
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <MX_I2C3_Init+0x78>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_I2C3_Init+0x74>)
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <MX_I2C3_Init+0x7c>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_I2C3_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_I2C3_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_I2C3_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_I2C3_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_I2C3_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_I2C3_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_I2C3_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <MX_I2C3_Init+0x74>)
 8001354:	f005 fc48 	bl	8006be8 <HAL_I2C_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800135e:	f000 fb2b 	bl	80019b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <MX_I2C3_Init+0x74>)
 8001366:	f006 f949 	bl	80075fc <HAL_I2CEx_ConfigAnalogFilter>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001370:	f000 fb22 	bl	80019b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_I2C3_Init+0x74>)
 8001378:	f006 f98b 	bl	8007692 <HAL_I2CEx_ConfigDigitalFilter>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 fb19 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200098d0 	.word	0x200098d0
 8001390:	40005c00 	.word	0x40005c00
 8001394:	00c0eaff 	.word	0x00c0eaff

08001398 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <HAL_I2C_MspInit+0xdc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d129      	bne.n	800140e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80013d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d8:	2312      	movs	r3, #18
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e4:	2304      	movs	r3, #4
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4823      	ldr	r0, [pc, #140]	; (800147c <HAL_I2C_MspInit+0xe4>)
 80013f0:	f003 fbac 	bl	8004b4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 80013fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800140c:	e02d      	b.n	800146a <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_I2C_MspInit+0xe8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d128      	bne.n	800146a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 800141e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001430:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001442:	2304      	movs	r3, #4
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <HAL_I2C_MspInit+0xec>)
 800144e:	f003 fb7d 	bl	8004b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 8001458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_I2C_MspInit+0xe0>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400
 8001480:	40005c00 	.word	0x40005c00
 8001484:	40021c00 	.word	0x40021c00

08001488 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a15      	ldr	r2, [pc, #84]	; (80014ec <HAL_I2C_MspDeInit+0x64>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d110      	bne.n	80014bc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_I2C_MspDeInit+0x68>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <HAL_I2C_MspDeInit+0x68>)
 80014a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80014a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <HAL_I2C_MspDeInit+0x6c>)
 80014ac:	f003 fcfa 	bl	8004ea4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	480f      	ldr	r0, [pc, #60]	; (80014f4 <HAL_I2C_MspDeInit+0x6c>)
 80014b6:	f003 fcf5 	bl	8004ea4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80014ba:	e013      	b.n	80014e4 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <HAL_I2C_MspDeInit+0x70>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10e      	bne.n	80014e4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_I2C_MspDeInit+0x68>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_I2C_MspDeInit+0x68>)
 80014cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <HAL_I2C_MspDeInit+0x74>)
 80014d6:	f003 fce5 	bl	8004ea4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80014da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <HAL_I2C_MspDeInit+0x74>)
 80014e0:	f003 fce0 	bl	8004ea4 <HAL_GPIO_DeInit>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40005400 	.word	0x40005400
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40005c00 	.word	0x40005c00
 80014fc:	40021c00 	.word	0x40021c00

08001500 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2234      	movs	r2, #52	; 0x34
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f023 ff69 	bl	80253e4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001514:	4a3a      	ldr	r2, [pc, #232]	; (8001600 <MX_LTDC_Init+0x100>)
 8001516:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <MX_LTDC_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <MX_LTDC_Init+0xfc>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001538:	2209      	movs	r2, #9
 800153a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_LTDC_Init+0xfc>)
 800153e:	2235      	movs	r2, #53	; 0x35
 8001540:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001544:	220b      	movs	r2, #11
 8001546:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_LTDC_Init+0xfc>)
 800154a:	f240 2215 	movw	r2, #533	; 0x215
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001552:	f240 121b 	movw	r2, #283	; 0x11b
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <MX_LTDC_Init+0xfc>)
 800155a:	f240 2235 	movw	r2, #565	; 0x235
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001562:	f240 121d 	movw	r2, #285	; 0x11d
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <MX_LTDC_Init+0xfc>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_LTDC_Init+0xfc>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001582:	f006 f8d3 	bl	800772c <HAL_LTDC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800158c:	f000 fa14 	bl	80019b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001594:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001598:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800159e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015a2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015b6:	2305      	movs	r3, #5
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80015ba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80015c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80015c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_LTDC_Init+0xfc>)
 80015e6:	f006 fa29 	bl	8007a3c <HAL_LTDC_ConfigLayer>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80015f0:	f000 f9e2 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20009968 	.word	0x20009968
 8001600:	40016800 	.word	0x40016800

08001604 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a55      	ldr	r2, [pc, #340]	; (8001778 <HAL_LTDC_MspInit+0x174>)
 8001622:	4293      	cmp	r3, r2
 8001624:	f040 80a3 	bne.w	800176e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001628:	4b54      	ldr	r3, [pc, #336]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	4a53      	ldr	r2, [pc, #332]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800162e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001632:	6453      	str	r3, [r2, #68]	; 0x44
 8001634:	4b51      	ldr	r3, [pc, #324]	; (800177c <HAL_LTDC_MspInit+0x178>)
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001640:	4b4e      	ldr	r3, [pc, #312]	; (800177c <HAL_LTDC_MspInit+0x178>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_LTDC_MspInit+0x178>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b4b      	ldr	r3, [pc, #300]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001658:	4b48      	ldr	r3, [pc, #288]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a47      	ldr	r2, [pc, #284]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <HAL_LTDC_MspInit+0x178>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <HAL_LTDC_MspInit+0x178>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	4a41      	ldr	r2, [pc, #260]	; (800177c <HAL_LTDC_MspInit+0x178>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167a:	6313      	str	r3, [r2, #48]	; 0x30
 800167c:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a3b      	ldr	r2, [pc, #236]	; (800177c <HAL_LTDC_MspInit+0x178>)
 800168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_LTDC_MspInit+0x178>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_LTDC_MspInit+0x178>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	4a35      	ldr	r2, [pc, #212]	; (800177c <HAL_LTDC_MspInit+0x178>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6313      	str	r3, [r2, #48]	; 0x30
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_LTDC_MspInit+0x178>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80016b8:	2310      	movs	r3, #16
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c8:	230e      	movs	r3, #14
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	482b      	ldr	r0, [pc, #172]	; (8001780 <HAL_LTDC_MspInit+0x17c>)
 80016d4:	f003 fa3a 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80016d8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016ea:	230e      	movs	r3, #14
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <HAL_LTDC_MspInit+0x180>)
 80016f6:	f003 fa29 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80016fa:	23f7      	movs	r3, #247	; 0xf7
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800170a:	230e      	movs	r3, #14
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	481c      	ldr	r0, [pc, #112]	; (8001788 <HAL_LTDC_MspInit+0x184>)
 8001716:	f003 fa19 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800172c:	2309      	movs	r3, #9
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4815      	ldr	r0, [pc, #84]	; (800178c <HAL_LTDC_MspInit+0x188>)
 8001738:	f003 fa08 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800173c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800174e:	230e      	movs	r3, #14
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <HAL_LTDC_MspInit+0x18c>)
 800175a:	f003 f9f7 	bl	8004b4c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2105      	movs	r1, #5
 8001762:	2058      	movs	r0, #88	; 0x58
 8001764:	f002 f974 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001768:	2058      	movs	r0, #88	; 0x58
 800176a:	f002 f98d 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3738      	adds	r7, #56	; 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40016800 	.word	0x40016800
 800177c:	40023800 	.word	0x40023800
 8001780:	40021000 	.word	0x40021000
 8001784:	40022400 	.word	0x40022400
 8001788:	40022800 	.word	0x40022800
 800178c:	40021800 	.word	0x40021800
 8001790:	40022000 	.word	0x40022000

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001798:	f001 fdc8 	bl	800332c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179c:	f000 f83a 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a0:	f7ff fbbc 	bl	8000f1c <MX_GPIO_Init>
  MX_ADC3_Init();
 80017a4:	f7fe ff00 	bl	80005a8 <MX_ADC3_Init>
  MX_CRC_Init();
 80017a8:	f7fe ffaa 	bl	8000700 <MX_CRC_Init>
  MX_DCMI_Init();
 80017ac:	f7fe ffea 	bl	8000784 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80017b0:	f7ff f8da 	bl	8000968 <MX_DMA2D_Init>
  MX_ETH_Init();
 80017b4:	f7ff f930 	bl	8000a18 <MX_ETH_Init>
  MX_FMC_Init();
 80017b8:	f7ff fa0e 	bl	8000bd8 <MX_FMC_Init>
  MX_I2C1_Init();
 80017bc:	f7ff fd6c 	bl	8001298 <MX_I2C1_Init>
  MX_I2C3_Init();
 80017c0:	f7ff fdaa 	bl	8001318 <MX_I2C3_Init>
  MX_LTDC_Init();
 80017c4:	f7ff fe9c 	bl	8001500 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80017c8:	f000 f8fc 	bl	80019c4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80017cc:	f000 f9b6 	bl	8001b3c <MX_RTC_Init>
  MX_SAI2_Init();
 80017d0:	f000 fa74 	bl	8001cbc <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80017d4:	f000 fb84 	bl	8001ee0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80017d8:	f000 fc04 	bl	8001fe4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80017dc:	f000 fc74 	bl	80020c8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80017e0:	f000 fea8 	bl	8002534 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017e4:	f000 ff52 	bl	800268c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017e8:	f000 ffc6 	bl	8002778 <MX_TIM3_Init>
  MX_TIM5_Init();
 80017ec:	f001 f83c 	bl	8002868 <MX_TIM5_Init>
  MX_TIM8_Init();
 80017f0:	f001 f8b2 	bl	8002958 <MX_TIM8_Init>
  MX_TIM12_Init();
 80017f4:	f001 f904 	bl	8002a00 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80017f8:	f001 faa4 	bl	8002d44 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80017fc:	f001 fad2 	bl	8002da4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001800:	f00d f8cc 	bl	800e99c <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8001804:	f012 fc08 	bl	8014018 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001808:	f7ff fb60 	bl	8000ecc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800180c:	f00f fced 	bl	80111ea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001810:	e7fe      	b.n	8001810 <main+0x7c>
	...

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0b4      	sub	sp, #208	; 0xd0
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800181e:	2230      	movs	r2, #48	; 0x30
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f023 fdde 	bl	80253e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	2284      	movs	r2, #132	; 0x84
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f023 fdcf 	bl	80253e4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001846:	f006 fb09 	bl	8007e5c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b4f      	ldr	r3, [pc, #316]	; (8001988 <SystemClock_Config+0x174>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a4e      	ldr	r2, [pc, #312]	; (8001988 <SystemClock_Config+0x174>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <SystemClock_Config+0x174>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <SystemClock_Config+0x178>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a49      	ldr	r2, [pc, #292]	; (800198c <SystemClock_Config+0x178>)
 8001868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <SystemClock_Config+0x178>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800187a:	2309      	movs	r3, #9
 800187c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001888:	2301      	movs	r3, #1
 800188a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800189c:	2319      	movs	r3, #25
 800189e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80018a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80018a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80018b0:	2309      	movs	r3, #9
 80018b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 fbf0 	bl	80080a0 <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80018c6:	f000 f877 	bl	80019b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018ca:	f006 fad7 	bl	8007e7c <HAL_PWREx_EnableOverDrive>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018d4:	f000 f870 	bl	80019b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	230f      	movs	r3, #15
 80018da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80018fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018fe:	2106      	movs	r1, #6
 8001900:	4618      	mov	r0, r3
 8001902:	f006 fe71 	bl	80085e8 <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800190c:	f000 f854 	bl	80019b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <SystemClock_Config+0x17c>)
 8001912:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800191c:	2302      	movs	r3, #2
 800191e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001920:	2302      	movs	r3, #2
 8001922:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001924:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001928:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800192a:	2305      	movs	r3, #5
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800192e:	2302      	movs	r3, #2
 8001930:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001932:	2303      	movs	r3, #3
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001936:	2301      	movs	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800193e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800194a:	2300      	movs	r3, #0
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800194e:	2300      	movs	r3, #0
 8001950:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001952:	2300      	movs	r3, #0
 8001954:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001956:	2300      	movs	r3, #0
 8001958:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800195a:	2300      	movs	r3, #0
 800195c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800195e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4618      	mov	r0, r3
 8001972:	f007 f841 	bl	80089f8 <HAL_RCCEx_PeriphCLKConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 800197c:	f000 f81c 	bl	80019b8 <Error_Handler>
  }
}
 8001980:	bf00      	nop
 8001982:	37d0      	adds	r7, #208	; 0xd0
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
 8001990:	01b14868 	.word	0x01b14868

08001994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019a6:	f001 fccf 	bl	8003348 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40001000 	.word	0x40001000

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <Error_Handler+0x8>
	...

080019c4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <MX_QUADSPI_Init+0x54>)
 80019cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019d6:	2204      	movs	r2, #4
 80019d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019dc:	2210      	movs	r2, #16
 80019de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019e2:	2218      	movs	r2, #24
 80019e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019e8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80019ec:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_QUADSPI_Init+0x50>)
 8001a02:	f006 fa8b 	bl	8007f1c <HAL_QSPI_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001a0c:	f7ff ffd4 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20009a10 	.word	0x20009a10
 8001a18:	a0001000 	.word	0xa0001000

08001a1c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	; 0x30
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a3b      	ldr	r2, [pc, #236]	; (8001b28 <HAL_QSPI_MspInit+0x10c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d170      	bne.n	8001b20 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	4a3a      	ldr	r2, [pc, #232]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6393      	str	r3, [r2, #56]	; 0x38
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a34      	ldr	r2, [pc, #208]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a2e      	ldr	r2, [pc, #184]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_QSPI_MspInit+0x110>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001aae:	2309      	movs	r3, #9
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481d      	ldr	r0, [pc, #116]	; (8001b30 <HAL_QSPI_MspInit+0x114>)
 8001aba:	f003 f847 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001abe:	2340      	movs	r3, #64	; 0x40
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ace:	230a      	movs	r3, #10
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4816      	ldr	r0, [pc, #88]	; (8001b34 <HAL_QSPI_MspInit+0x118>)
 8001ada:	f003 f837 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001aee:	2309      	movs	r3, #9
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	480e      	ldr	r0, [pc, #56]	; (8001b34 <HAL_QSPI_MspInit+0x118>)
 8001afa:	f003 f827 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001afe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b10:	2309      	movs	r3, #9
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <HAL_QSPI_MspInit+0x11c>)
 8001b1c:	f003 f816 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	3730      	adds	r7, #48	; 0x30
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	a0001000 	.word	0xa0001000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020c00 	.word	0x40020c00

08001b3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b092      	sub	sp, #72	; 0x48
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	222c      	movs	r2, #44	; 0x2c
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f023 fc40 	bl	80253e4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b64:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b66:	4a47      	ldr	r2, [pc, #284]	; (8001c84 <MX_RTC_Init+0x148>)
 8001b68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b6a:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b70:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b72:	227f      	movs	r2, #127	; 0x7f
 8001b74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b76:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b78:	22ff      	movs	r2, #255	; 0xff
 8001b7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b7c:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b88:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b8e:	483c      	ldr	r0, [pc, #240]	; (8001c80 <MX_RTC_Init+0x144>)
 8001b90:	f007 fc66 	bl	8009460 <HAL_RTC_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001b9a:	f7ff ff0d 	bl	80019b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	482f      	ldr	r0, [pc, #188]	; (8001c80 <MX_RTC_Init+0x144>)
 8001bc2:	f007 fcdf 	bl	8009584 <HAL_RTC_SetTime>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001bcc:	f7ff fef4 	bl	80019b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4823      	ldr	r0, [pc, #140]	; (8001c80 <MX_RTC_Init+0x144>)
 8001bf2:	f007 fd85 	bl	8009700 <HAL_RTC_SetDate>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001bfc:	f7ff fedc 	bl	80019b8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	2201      	movs	r2, #1
 8001c34:	4619      	mov	r1, r3
 8001c36:	4812      	ldr	r0, [pc, #72]	; (8001c80 <MX_RTC_Init+0x144>)
 8001c38:	f007 fe0a 	bl	8009850 <HAL_RTC_SetAlarm>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001c42:	f7ff feb9 	bl	80019b8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4619      	mov	r1, r3
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <MX_RTC_Init+0x144>)
 8001c54:	f007 fdfc 	bl	8009850 <HAL_RTC_SetAlarm>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001c5e:	f7ff feab 	bl	80019b8 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001c62:	2202      	movs	r2, #2
 8001c64:	2100      	movs	r1, #0
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <MX_RTC_Init+0x144>)
 8001c68:	f007 ff7c 	bl	8009b64 <HAL_RTCEx_SetTimeStamp>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001c72:	f7ff fea1 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	3748      	adds	r7, #72	; 0x48
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20009a5c 	.word	0x20009a5c
 8001c84:	40002800 	.word	0x40002800

08001c88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_RTC_MspInit+0x2c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d105      	bne.n	8001ca6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_RTC_MspInit+0x30>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_RTC_MspInit+0x30>)
 8001ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40002800 	.word	0x40002800
 8001cb8:	40023800 	.word	0x40023800

08001cbc <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cc2:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <MX_SAI2_Init+0x140>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001cf0:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001cfe:	4a40      	ldr	r2, [pc, #256]	; (8001e00 <MX_SAI2_Init+0x144>)
 8001d00:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d14:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001d20:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d2c:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001d50:	4829      	ldr	r0, [pc, #164]	; (8001df8 <MX_SAI2_Init+0x13c>)
 8001d52:	f007 ff5d 	bl	8009c10 <HAL_SAI_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001d5c:	f7ff fe2c 	bl	80019b8 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d62:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <MX_SAI2_Init+0x14c>)
 8001d64:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d6e:	2203      	movs	r2, #3
 8001d70:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001db0:	2208      	movs	r2, #8
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <MX_SAI2_Init+0x148>)
 8001de6:	f007 ff13 	bl	8009c10 <HAL_SAI_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001df0:	f7ff fde2 	bl	80019b8 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20009b00 	.word	0x20009b00
 8001dfc:	40015c04 	.word	0x40015c04
 8001e00:	0002ee00 	.word	0x0002ee00
 8001e04:	20009a7c 	.word	0x20009a7c
 8001e08:	40015c24 	.word	0x40015c24

08001e0c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <HAL_SAI_MspInit+0xbc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d124      	bne.n	8001e68 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_SAI_MspInit+0xc0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10b      	bne.n	8001e3e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_SAI_MspInit+0xc4>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <HAL_SAI_MspInit+0xc4>)
 8001e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_SAI_MspInit+0xc4>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_SAI_MspInit+0xc0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <HAL_SAI_MspInit+0xc0>)
 8001e46:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001e48:	23f0      	movs	r3, #240	; 0xf0
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e58:	230a      	movs	r3, #10
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <HAL_SAI_MspInit+0xc8>)
 8001e64:	f002 fe72 	bl	8004b4c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_SAI_MspInit+0xcc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d125      	bne.n	8001ebe <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_SAI_MspInit+0xc0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_SAI_MspInit+0xc4>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_SAI_MspInit+0xc4>)
 8001e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e84:	6453      	str	r3, [r2, #68]	; 0x44
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_SAI_MspInit+0xc4>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_SAI_MspInit+0xc0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3301      	adds	r3, #1
 8001e98:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_SAI_MspInit+0xc0>)
 8001e9a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001eae:	230a      	movs	r3, #10
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4808      	ldr	r0, [pc, #32]	; (8001edc <HAL_SAI_MspInit+0xd0>)
 8001eba:	f002 fe47 	bl	8004b4c <HAL_GPIO_Init>

    }
}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40015c04 	.word	0x40015c04
 8001ecc:	200003a8 	.word	0x200003a8
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40015c24 	.word	0x40015c24
 8001edc:	40021800 	.word	0x40021800

08001ee0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_SDMMC1_SD_Init+0x38>)
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <MX_SDMMC1_SD_Init+0x3c>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_SDMMC1_SD_Init+0x38>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_SDMMC1_SD_Init+0x38>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_SDMMC1_SD_Init+0x38>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_SDMMC1_SD_Init+0x38>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <MX_SDMMC1_SD_Init+0x38>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <MX_SDMMC1_SD_Init+0x38>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	20009b84 	.word	0x20009b84
 8001f1c:	40012c00 	.word	0x40012c00

08001f20 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <HAL_SD_MspInit+0xb4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d144      	bne.n	8001fcc <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f42:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <HAL_SD_MspInit+0xb8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001f8a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480d      	ldr	r0, [pc, #52]	; (8001fdc <HAL_SD_MspInit+0xbc>)
 8001fa8:	f002 fdd0 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001fac:	2304      	movs	r3, #4
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <HAL_SD_MspInit+0xc0>)
 8001fc8:	f002 fdc0 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	; 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00

08001fe4 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8001fea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001fee:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_SPDIFRX_Init+0x5c>)
 800202e:	f009 f8c1 	bl	800b1b4 <HAL_SPDIFRX_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002038:	f7ff fcbe 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20009c08 	.word	0x20009c08

08002044 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(spdifrxHandle->Instance==SPDIFRX)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002064:	d127      	bne.n	80020b6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <HAL_SPDIFRX_MspInit+0x7c>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_SPDIFRX_MspInit+0x7c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80020a6:	2308      	movs	r3, #8
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <HAL_SPDIFRX_MspInit+0x80>)
 80020b2:	f002 fd4b 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020c00 	.word	0x40020c00

080020c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <MX_SPI2_Init+0x74>)
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <MX_SPI2_Init+0x78>)
 80020d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <MX_SPI2_Init+0x74>)
 80020d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <MX_SPI2_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80020e0:	4b16      	ldr	r3, [pc, #88]	; (800213c <MX_SPI2_Init+0x74>)
 80020e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80020e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_SPI2_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <MX_SPI2_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_SPI2_Init+0x74>)
 80020f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_SPI2_Init+0x74>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_SPI2_Init+0x74>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_SPI2_Init+0x74>)
 800210a:	2200      	movs	r2, #0
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_SPI2_Init+0x74>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_SPI2_Init+0x74>)
 8002116:	2207      	movs	r2, #7
 8002118:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_SPI2_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_SPI2_Init+0x74>)
 8002122:	2208      	movs	r2, #8
 8002124:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_SPI2_Init+0x74>)
 8002128:	f009 f8a0 	bl	800b26c <HAL_SPI_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002132:	f7ff fc41 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20009c54 	.word	0x20009c54
 8002140:	40003800 	.word	0x40003800

08002144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <HAL_SPI_MspInit+0xb4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d144      	bne.n	80021f0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a24      	ldr	r2, [pc, #144]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a18      	ldr	r2, [pc, #96]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_SPI_MspInit+0xb8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80021ae:	2302      	movs	r3, #2
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021be:	2305      	movs	r3, #5
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <HAL_SPI_MspInit+0xbc>)
 80021ca:	f002 fcbf 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80021ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e0:	2305      	movs	r3, #5
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <HAL_SPI_MspInit+0xc0>)
 80021ec:	f002 fcae 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40003800 	.word	0x40003800
 80021fc:	40023800 	.word	0x40023800
 8002200:	40022000 	.word	0x40022000
 8002204:	40020400 	.word	0x40020400

08002208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_MspInit+0x4c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_MspInit+0x4c>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_MspInit+0x4c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_MspInit+0x4c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_MspInit+0x4c>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	210f      	movs	r1, #15
 8002242:	f06f 0001 	mvn.w	r0, #1
 8002246:	f001 fc03 	bl	8003a50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2036      	movs	r0, #54	; 0x36
 800226e:	f001 fbef 	bl	8003a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002272:	2036      	movs	r0, #54	; 0x36
 8002274:	f001 fc08 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_InitTick+0xa0>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <HAL_InitTick+0xa0>)
 800227e:	f043 0310 	orr.w	r3, r3, #16
 8002282:	6413      	str	r3, [r2, #64]	; 0x40
 8002284:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_InitTick+0xa0>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002290:	f107 0210 	add.w	r2, r7, #16
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f006 fb7a 	bl	8008994 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022a0:	f006 fb50 	bl	8008944 <HAL_RCC_GetPCLK1Freq>
 80022a4:	4603      	mov	r3, r0
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_InitTick+0xa4>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9b      	lsrs	r3, r3, #18
 80022b4:	3b01      	subs	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_InitTick+0xa8>)
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_InitTick+0xac>)
 80022bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_InitTick+0xa8>)
 80022c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_InitTick+0xa8>)
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <HAL_InitTick+0xa8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_InitTick+0xa8>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022d8:	4809      	ldr	r0, [pc, #36]	; (8002300 <HAL_InitTick+0xa8>)
 80022da:	f009 f872 	bl	800b3c2 <HAL_TIM_Base_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022e4:	4806      	ldr	r0, [pc, #24]	; (8002300 <HAL_InitTick+0xa8>)
 80022e6:	f009 f8c3 	bl	800b470 <HAL_TIM_Base_Start_IT>
 80022ea:	4603      	mov	r3, r0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3730      	adds	r7, #48	; 0x30
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40023800 	.word	0x40023800
 80022fc:	431bde83 	.word	0x431bde83
 8002300:	20009cb8 	.word	0x20009cb8
 8002304:	40001000 	.word	0x40001000

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <TIM6_DAC_IRQHandler+0x10>)
 800233a:	f009 f968 	bl	800b60e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20009cb8 	.word	0x20009cb8

08002348 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <OTG_FS_IRQHandler+0x10>)
 800234e:	f003 f951 	bl	80055f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000a828 	.word	0x2000a828

0800235c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <LTDC_IRQHandler+0x10>)
 8002362:	f005 fab3 	bl	80078cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20009968 	.word	0x20009968

08002370 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA2D_IRQHandler+0x10>)
 8002376:	f001 fddd 	bl	8003f34 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20009810 	.word	0x20009810

08002384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
	return 1;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_kill>:

int _kill(int pid, int sig)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800239e:	f022 ffc7 	bl	8025330 <__errno>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2216      	movs	r2, #22
 80023a6:	601a      	str	r2, [r3, #0]
	return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_exit>:

void _exit (int status)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffe7 	bl	8002394 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023c6:	e7fe      	b.n	80023c6 <_exit+0x12>

080023c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e00a      	b.n	80023f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023da:	f3af 8000 	nop.w
 80023de:	4601      	mov	r1, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	60ba      	str	r2, [r7, #8]
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbf0      	blt.n	80023da <_read+0x12>
	}

return len;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e009      	b.n	8002428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbf1      	blt.n	8002414 <_write+0x12>
	}
	return len;
 8002430:	687b      	ldr	r3, [r7, #4]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_close>:

int _close(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
	return -1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002462:	605a      	str	r2, [r3, #4]
	return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_isatty>:

int _isatty(int file)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d4:	f022 ff2c 	bl	8025330 <__errno>
 80024d8:	4603      	mov	r3, r0
 80024da:	220c      	movs	r2, #12
 80024dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e009      	b.n	80024f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_sbrk+0x64>)
 80024f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20050000 	.word	0x20050000
 8002504:	00000400 	.word	0x00000400
 8002508:	200003ac 	.word	0x200003ac
 800250c:	2000ab40 	.word	0x2000ab40

08002510 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <SystemInit+0x20>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <SystemInit+0x20>)
 800251c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b09a      	sub	sp, #104	; 0x68
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002554:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
 8002564:	615a      	str	r2, [r3, #20]
 8002566:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	222c      	movs	r2, #44	; 0x2c
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f022 ff38 	bl	80253e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <MX_TIM1_Init+0x150>)
 8002576:	4a44      	ldr	r2, [pc, #272]	; (8002688 <MX_TIM1_Init+0x154>)
 8002578:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800257a:	4b42      	ldr	r3, [pc, #264]	; (8002684 <MX_TIM1_Init+0x150>)
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <MX_TIM1_Init+0x150>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <MX_TIM1_Init+0x150>)
 8002588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800258c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <MX_TIM1_Init+0x150>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002594:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <MX_TIM1_Init+0x150>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <MX_TIM1_Init+0x150>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025a0:	4838      	ldr	r0, [pc, #224]	; (8002684 <MX_TIM1_Init+0x150>)
 80025a2:	f008 ff0e 	bl	800b3c2 <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80025ac:	f7ff fa04 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025ba:	4619      	mov	r1, r3
 80025bc:	4831      	ldr	r0, [pc, #196]	; (8002684 <MX_TIM1_Init+0x150>)
 80025be:	f009 fa55 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025c8:	f7ff f9f6 	bl	80019b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025cc:	482d      	ldr	r0, [pc, #180]	; (8002684 <MX_TIM1_Init+0x150>)
 80025ce:	f008 ffc7 	bl	800b560 <HAL_TIM_PWM_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80025d8:	f7ff f9ee 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ec:	4619      	mov	r1, r3
 80025ee:	4825      	ldr	r0, [pc, #148]	; (8002684 <MX_TIM1_Init+0x150>)
 80025f0:	f009 fec2 	bl	800c378 <HAL_TIMEx_MasterConfigSynchronization>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80025fa:	f7ff f9dd 	bl	80019b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fe:	2360      	movs	r3, #96	; 0x60
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002606:	2300      	movs	r3, #0
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800260a:	2300      	movs	r3, #0
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800261a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800261e:	2200      	movs	r2, #0
 8002620:	4619      	mov	r1, r3
 8002622:	4818      	ldr	r0, [pc, #96]	; (8002684 <MX_TIM1_Init+0x150>)
 8002624:	f009 f912 	bl	800b84c <HAL_TIM_PWM_ConfigChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800262e:	f7ff f9c3 	bl	80019b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <MX_TIM1_Init+0x150>)
 8002668:	f009 ff14 	bl	800c494 <HAL_TIMEx_ConfigBreakDeadTime>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002672:	f7ff f9a1 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <MX_TIM1_Init+0x150>)
 8002678:	f000 fa96 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 800267c:	bf00      	nop
 800267e:	3768      	adds	r7, #104	; 0x68
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20009de8 	.word	0x20009de8
 8002688:	40010000 	.word	0x40010000

0800268c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08e      	sub	sp, #56	; 0x38
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ac:	463b      	mov	r3, r7
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	615a      	str	r2, [r3, #20]
 80026bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <MX_TIM2_Init+0xe8>)
 80026c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <MX_TIM2_Init+0xe8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <MX_TIM2_Init+0xe8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <MX_TIM2_Init+0xe8>)
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <MX_TIM2_Init+0xe8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <MX_TIM2_Init+0xe8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026e6:	4823      	ldr	r0, [pc, #140]	; (8002774 <MX_TIM2_Init+0xe8>)
 80026e8:	f008 fe6b 	bl	800b3c2 <HAL_TIM_Base_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80026f2:	f7ff f961 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002700:	4619      	mov	r1, r3
 8002702:	481c      	ldr	r0, [pc, #112]	; (8002774 <MX_TIM2_Init+0xe8>)
 8002704:	f009 f9b2 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800270e:	f7ff f953 	bl	80019b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002712:	4818      	ldr	r0, [pc, #96]	; (8002774 <MX_TIM2_Init+0xe8>)
 8002714:	f008 ff24 	bl	800b560 <HAL_TIM_PWM_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800271e:	f7ff f94b 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800272a:	f107 031c 	add.w	r3, r7, #28
 800272e:	4619      	mov	r1, r3
 8002730:	4810      	ldr	r0, [pc, #64]	; (8002774 <MX_TIM2_Init+0xe8>)
 8002732:	f009 fe21 	bl	800c378 <HAL_TIMEx_MasterConfigSynchronization>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800273c:	f7ff f93c 	bl	80019b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002740:	2360      	movs	r3, #96	; 0x60
 8002742:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002750:	463b      	mov	r3, r7
 8002752:	2200      	movs	r2, #0
 8002754:	4619      	mov	r1, r3
 8002756:	4807      	ldr	r0, [pc, #28]	; (8002774 <MX_TIM2_Init+0xe8>)
 8002758:	f009 f878 	bl	800b84c <HAL_TIM_PWM_ConfigChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002762:	f7ff f929 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002766:	4803      	ldr	r0, [pc, #12]	; (8002774 <MX_TIM2_Init+0xe8>)
 8002768:	f000 fa1e 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 800276c:	bf00      	nop
 800276e:	3738      	adds	r7, #56	; 0x38
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20009e34 	.word	0x20009e34

08002778 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08e      	sub	sp, #56	; 0x38
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002798:	463b      	mov	r3, r7
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	615a      	str	r2, [r3, #20]
 80027a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027ac:	4a2d      	ldr	r2, [pc, #180]	; (8002864 <MX_TIM3_Init+0xec>)
 80027ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027bc:	4b28      	ldr	r3, [pc, #160]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027d0:	4823      	ldr	r0, [pc, #140]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027d2:	f008 fdf6 	bl	800b3c2 <HAL_TIM_Base_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80027dc:	f7ff f8ec 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ea:	4619      	mov	r1, r3
 80027ec:	481c      	ldr	r0, [pc, #112]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027ee:	f009 f93d 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80027f8:	f7ff f8de 	bl	80019b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027fc:	4818      	ldr	r0, [pc, #96]	; (8002860 <MX_TIM3_Init+0xe8>)
 80027fe:	f008 feaf 	bl	800b560 <HAL_TIM_PWM_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002808:	f7ff f8d6 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4811      	ldr	r0, [pc, #68]	; (8002860 <MX_TIM3_Init+0xe8>)
 800281c:	f009 fdac 	bl	800c378 <HAL_TIMEx_MasterConfigSynchronization>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002826:	f7ff f8c7 	bl	80019b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282a:	2360      	movs	r3, #96	; 0x60
 800282c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283a:	463b      	mov	r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	4619      	mov	r1, r3
 8002840:	4807      	ldr	r0, [pc, #28]	; (8002860 <MX_TIM3_Init+0xe8>)
 8002842:	f009 f803 	bl	800b84c <HAL_TIM_PWM_ConfigChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800284c:	f7ff f8b4 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002850:	4803      	ldr	r0, [pc, #12]	; (8002860 <MX_TIM3_Init+0xe8>)
 8002852:	f000 f9a9 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8002856:	bf00      	nop
 8002858:	3738      	adds	r7, #56	; 0x38
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20009d9c 	.word	0x20009d9c
 8002864:	40000400 	.word	0x40000400

08002868 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002888:	463b      	mov	r3, r7
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <MX_TIM5_Init+0xe8>)
 800289c:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <MX_TIM5_Init+0xec>)
 800289e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295
 80028b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b25      	ldr	r3, [pc, #148]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80028c0:	4823      	ldr	r0, [pc, #140]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028c2:	f008 fd7e 	bl	800b3c2 <HAL_TIM_Base_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80028cc:	f7ff f874 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80028d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028da:	4619      	mov	r1, r3
 80028dc:	481c      	ldr	r0, [pc, #112]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028de:	f009 f8c5 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80028e8:	f7ff f866 	bl	80019b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80028ec:	4818      	ldr	r0, [pc, #96]	; (8002950 <MX_TIM5_Init+0xe8>)
 80028ee:	f008 fe37 	bl	800b560 <HAL_TIM_PWM_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80028f8:	f7ff f85e 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	4811      	ldr	r0, [pc, #68]	; (8002950 <MX_TIM5_Init+0xe8>)
 800290c:	f009 fd34 	bl	800c378 <HAL_TIMEx_MasterConfigSynchronization>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002916:	f7ff f84f 	bl	80019b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291a:	2360      	movs	r3, #96	; 0x60
 800291c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800292a:	463b      	mov	r3, r7
 800292c:	220c      	movs	r2, #12
 800292e:	4619      	mov	r1, r3
 8002930:	4807      	ldr	r0, [pc, #28]	; (8002950 <MX_TIM5_Init+0xe8>)
 8002932:	f008 ff8b 	bl	800b84c <HAL_TIM_PWM_ConfigChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800293c:	f7ff f83c 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002940:	4803      	ldr	r0, [pc, #12]	; (8002950 <MX_TIM5_Init+0xe8>)
 8002942:	f000 f931 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8002946:	bf00      	nop
 8002948:	3738      	adds	r7, #56	; 0x38
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20009d50 	.word	0x20009d50
 8002954:	40000c00 	.word	0x40000c00

08002958 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295e:	f107 0310 	add.w	r3, r7, #16
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <MX_TIM8_Init+0xa0>)
 8002978:	4a20      	ldr	r2, [pc, #128]	; (80029fc <MX_TIM8_Init+0xa4>)
 800297a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <MX_TIM8_Init+0xa0>)
 800297e:	2200      	movs	r2, #0
 8002980:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <MX_TIM8_Init+0xa0>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <MX_TIM8_Init+0xa0>)
 800298a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <MX_TIM8_Init+0xa0>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <MX_TIM8_Init+0xa0>)
 8002998:	2200      	movs	r2, #0
 800299a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_TIM8_Init+0xa0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80029a2:	4815      	ldr	r0, [pc, #84]	; (80029f8 <MX_TIM8_Init+0xa0>)
 80029a4:	f008 fd0d 	bl	800b3c2 <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80029ae:	f7ff f803 	bl	80019b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	4619      	mov	r1, r3
 80029be:	480e      	ldr	r0, [pc, #56]	; (80029f8 <MX_TIM8_Init+0xa0>)
 80029c0:	f009 f854 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80029ca:	f7fe fff5 	bl	80019b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4806      	ldr	r0, [pc, #24]	; (80029f8 <MX_TIM8_Init+0xa0>)
 80029e0:	f009 fcca 	bl	800c378 <HAL_TIMEx_MasterConfigSynchronization>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80029ea:	f7fe ffe5 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20009d04 	.word	0x20009d04
 80029fc:	40010400 	.word	0x40010400

08002a00 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <MX_TIM12_Init+0x88>)
 8002a1c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a30:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002a3e:	4811      	ldr	r0, [pc, #68]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a40:	f008 fd8e 	bl	800b560 <HAL_TIM_PWM_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002a4a:	f7fe ffb5 	bl	80019b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a4e:	2360      	movs	r3, #96	; 0x60
 8002a50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2200      	movs	r2, #0
 8002a62:	4619      	mov	r1, r3
 8002a64:	4807      	ldr	r0, [pc, #28]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a66:	f008 fef1 	bl	800b84c <HAL_TIM_PWM_ConfigChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002a70:	f7fe ffa2 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002a74:	4803      	ldr	r0, [pc, #12]	; (8002a84 <MX_TIM12_Init+0x84>)
 8002a76:	f000 f897 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8002a7a:	bf00      	nop
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20009e80 	.word	0x20009e80
 8002a88:	40001800 	.word	0x40001800

08002a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a2e      	ldr	r2, [pc, #184]	; (8002b54 <HAL_TIM_Base_MspInit+0xc8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002ab6:	e046      	b.n	8002b46 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac0:	d10c      	bne.n	8002adc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
}
 8002ada:	e034      	b.n	8002b46 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_TIM_Base_MspInit+0xd0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10c      	bne.n	8002b00 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
}
 8002afe:	e022      	b.n	8002b46 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_TIM_Base_MspInit+0xd4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10c      	bne.n	8002b24 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002b10:	f043 0308 	orr.w	r3, r3, #8
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
}
 8002b22:	e010      	b.n	8002b46 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_TIM_Base_MspInit+0xd8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10b      	bne.n	8002b46 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_TIM_Base_MspInit+0xcc>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
}
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x38>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10b      	bne.n	8002b92 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40001800 	.word	0x40001800
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	; 0x30
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a56      	ldr	r2, [pc, #344]	; (8002d20 <HAL_TIM_MspPostInit+0x178>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d11d      	bne.n	8002c06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a55      	ldr	r2, [pc, #340]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	f107 031c 	add.w	r3, r7, #28
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	484a      	ldr	r0, [pc, #296]	; (8002d28 <HAL_TIM_MspPostInit+0x180>)
 8002c00:	f001 ffa4 	bl	8004b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002c04:	e087      	b.n	8002d16 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d11d      	bne.n	8002c4c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	4a43      	ldr	r2, [pc, #268]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4838      	ldr	r0, [pc, #224]	; (8002d28 <HAL_TIM_MspPostInit+0x180>)
 8002c46:	f001 ff81 	bl	8004b4c <HAL_GPIO_Init>
}
 8002c4a:	e064      	b.n	8002d16 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a36      	ldr	r2, [pc, #216]	; (8002d2c <HAL_TIM_MspPostInit+0x184>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d11c      	bne.n	8002c90 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002c6e:	2310      	movs	r3, #16
 8002c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c72:	2302      	movs	r3, #2
 8002c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4619      	mov	r1, r3
 8002c88:	4829      	ldr	r0, [pc, #164]	; (8002d30 <HAL_TIM_MspPostInit+0x188>)
 8002c8a:	f001 ff5f 	bl	8004b4c <HAL_GPIO_Init>
}
 8002c8e:	e042      	b.n	8002d16 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <HAL_TIM_MspPostInit+0x18c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d11c      	bne.n	8002cd4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c9a:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481a      	ldr	r0, [pc, #104]	; (8002d38 <HAL_TIM_MspPostInit+0x190>)
 8002cce:	f001 ff3d 	bl	8004b4c <HAL_GPIO_Init>
}
 8002cd2:	e020      	b.n	8002d16 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_TIM_MspPostInit+0x194>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d11b      	bne.n	8002d16 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_TIM_MspPostInit+0x17c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002cf6:	2340      	movs	r3, #64	; 0x40
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d06:	2309      	movs	r3, #9
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <HAL_TIM_MspPostInit+0x198>)
 8002d12:	f001 ff1b 	bl	8004b4c <HAL_GPIO_Init>
}
 8002d16:	bf00      	nop
 8002d18:	3730      	adds	r7, #48	; 0x30
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40000c00 	.word	0x40000c00
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40001800 	.word	0x40001800
 8002d40:	40021c00 	.word	0x40021c00

08002d44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <MX_USART1_UART_Init+0x5c>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_USART1_UART_Init+0x58>)
 8002d88:	f009 fc20 	bl	800c5cc <HAL_UART_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d92:	f7fe fe11 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20009ecc 	.word	0x20009ecc
 8002da0:	40011000 	.word	0x40011000

08002da4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <MX_USART6_UART_Init+0x5c>)
 8002dac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002db4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002dca:	220c      	movs	r2, #12
 8002dcc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_USART6_UART_Init+0x58>)
 8002de8:	f009 fbf0 	bl	800c5cc <HAL_UART_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002df2:	f7fe fde1 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20009f50 	.word	0x20009f50
 8002e00:	40011400 	.word	0x40011400

08002e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3c      	ldr	r2, [pc, #240]	; (8002f14 <HAL_UART_MspInit+0x110>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d145      	bne.n	8002eb2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e26:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a3b      	ldr	r2, [pc, #236]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e2c:	f043 0310 	orr.w	r3, r3, #16
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	4b30      	ldr	r3, [pc, #192]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a2f      	ldr	r2, [pc, #188]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e7e:	2307      	movs	r3, #7
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 031c 	add.w	r3, r7, #28
 8002e86:	4619      	mov	r1, r3
 8002e88:	4824      	ldr	r0, [pc, #144]	; (8002f1c <HAL_UART_MspInit+0x118>)
 8002e8a:	f001 fe5f 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ea0:	2307      	movs	r3, #7
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	481d      	ldr	r0, [pc, #116]	; (8002f20 <HAL_UART_MspInit+0x11c>)
 8002eac:	f001 fe4e 	bl	8004b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002eb0:	e02c      	b.n	8002f0c <HAL_UART_MspInit+0x108>
  else if(uartHandle->Instance==USART6)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_UART_MspInit+0x120>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d127      	bne.n	8002f0c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002ec2:	f043 0320 	orr.w	r3, r3, #32
 8002ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed4:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_UART_MspInit+0x114>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002eec:	23c0      	movs	r3, #192	; 0xc0
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002efc:	2308      	movs	r3, #8
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	4808      	ldr	r0, [pc, #32]	; (8002f28 <HAL_UART_MspInit+0x124>)
 8002f08:	f001 fe20 	bl	8004b4c <HAL_GPIO_Init>
}
 8002f0c:	bf00      	nop
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40011000 	.word	0x40011000
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40011400 	.word	0x40011400
 8002f28:	40020800 	.word	0x40020800

08002f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f30:	480d      	ldr	r0, [pc, #52]	; (8002f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f32:	490e      	ldr	r1, [pc, #56]	; (8002f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f48:	4c0b      	ldr	r4, [pc, #44]	; (8002f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f56:	f7ff fadb 	bl	8002510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f022 fa01 	bl	8025360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7fe fc19 	bl	8001794 <main>
  bx  lr    
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f6c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8002f70:	08029924 	.word	0x08029924
  ldr r2, =_sbss
 8002f74:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8002f78:	2000ab3c 	.word	0x2000ab3c

08002f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC_IRQHandler>

08002f7e <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002f88:	f000 f9b4 	bl	80032f4 <ft5336_I2C_InitializeIfRequired>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002fc0:	f000 f998 	bl	80032f4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e010      	b.n	8002fec <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	21a8      	movs	r1, #168	; 0xa8
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f013 f829 	bl	8016028 <TS_IO_Read>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002fda:	7b7b      	ldrb	r3, [r7, #13]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b51      	cmp	r3, #81	; 0x51
 8002fe0:	d101      	bne.n	8002fe6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d802      	bhi.n	8002ff8 <ft5336_ReadID+0x4e>
 8002ff2:	7bbb      	ldrb	r3, [r7, #14]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0e8      	beq.n	8002fca <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002ff8:	7b7b      	ldrb	r3, [r7, #13]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	b29b      	uxth	r3, r3
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f97c 	bl	8003310 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f932 	bl	8003284 <ft5336_TS_DisableIT>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f012 fff3 	bl	8016028 <TS_IO_Read>
 8003042:	4603      	mov	r3, r0
 8003044:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	b2db      	uxtb	r3, r3
 8003050:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b05      	cmp	r3, #5
 8003058:	d901      	bls.n	800305e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <ft5336_TS_DetectTouch+0x50>)
 8003064:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <ft5336_TS_DetectTouch+0x50>)
 8003068:	2200      	movs	r2, #0
 800306a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	b2db      	uxtb	r3, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200003b0 	.word	0x200003b0

0800307c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800309e:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <ft5336_TS_GetXY+0x1d8>)
 80030a0:	789a      	ldrb	r2, [r3, #2]
 80030a2:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <ft5336_TS_GetXY+0x1d8>)
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	f080 80cf 	bcs.w	800324a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80030ac:	4b69      	ldr	r3, [pc, #420]	; (8003254 <ft5336_TS_GetXY+0x1d8>)
 80030ae:	789b      	ldrb	r3, [r3, #2]
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d871      	bhi.n	8003198 <ft5336_TS_GetXY+0x11c>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <ft5336_TS_GetXY+0x40>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030e5 	.word	0x080030e5
 80030c0:	080030f7 	.word	0x080030f7
 80030c4:	08003109 	.word	0x08003109
 80030c8:	0800311b 	.word	0x0800311b
 80030cc:	0800312d 	.word	0x0800312d
 80030d0:	0800313f 	.word	0x0800313f
 80030d4:	08003151 	.word	0x08003151
 80030d8:	08003163 	.word	0x08003163
 80030dc:	08003175 	.word	0x08003175
 80030e0:	08003187 	.word	0x08003187
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80030e4:	2304      	movs	r3, #4
 80030e6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80030e8:	2303      	movs	r3, #3
 80030ea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80030ec:	2306      	movs	r3, #6
 80030ee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80030f0:	2305      	movs	r3, #5
 80030f2:	753b      	strb	r3, [r7, #20]
      break;
 80030f4:	e051      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80030f6:	230a      	movs	r3, #10
 80030f8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80030fa:	2309      	movs	r3, #9
 80030fc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80030fe:	230c      	movs	r3, #12
 8003100:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8003102:	230b      	movs	r3, #11
 8003104:	753b      	strb	r3, [r7, #20]
      break;
 8003106:	e048      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003108:	2310      	movs	r3, #16
 800310a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800310c:	230f      	movs	r3, #15
 800310e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003110:	2312      	movs	r3, #18
 8003112:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8003114:	2311      	movs	r3, #17
 8003116:	753b      	strb	r3, [r7, #20]
      break;
 8003118:	e03f      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800311a:	2316      	movs	r3, #22
 800311c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800311e:	2315      	movs	r3, #21
 8003120:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8003122:	2318      	movs	r3, #24
 8003124:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8003126:	2317      	movs	r3, #23
 8003128:	753b      	strb	r3, [r7, #20]
      break;
 800312a:	e036      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800312c:	231c      	movs	r3, #28
 800312e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8003130:	231b      	movs	r3, #27
 8003132:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8003134:	231e      	movs	r3, #30
 8003136:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8003138:	231d      	movs	r3, #29
 800313a:	753b      	strb	r3, [r7, #20]
      break;
 800313c:	e02d      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800313e:	2322      	movs	r3, #34	; 0x22
 8003140:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8003142:	2321      	movs	r3, #33	; 0x21
 8003144:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8003146:	2324      	movs	r3, #36	; 0x24
 8003148:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800314a:	2323      	movs	r3, #35	; 0x23
 800314c:	753b      	strb	r3, [r7, #20]
      break;
 800314e:	e024      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8003150:	2328      	movs	r3, #40	; 0x28
 8003152:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8003154:	2327      	movs	r3, #39	; 0x27
 8003156:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8003158:	232a      	movs	r3, #42	; 0x2a
 800315a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800315c:	2329      	movs	r3, #41	; 0x29
 800315e:	753b      	strb	r3, [r7, #20]
      break;
 8003160:	e01b      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8003162:	232e      	movs	r3, #46	; 0x2e
 8003164:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8003166:	232d      	movs	r3, #45	; 0x2d
 8003168:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800316a:	2330      	movs	r3, #48	; 0x30
 800316c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800316e:	232f      	movs	r3, #47	; 0x2f
 8003170:	753b      	strb	r3, [r7, #20]
      break;
 8003172:	e012      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8003174:	2334      	movs	r3, #52	; 0x34
 8003176:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8003178:	2333      	movs	r3, #51	; 0x33
 800317a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800317c:	2336      	movs	r3, #54	; 0x36
 800317e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8003180:	2335      	movs	r3, #53	; 0x35
 8003182:	753b      	strb	r3, [r7, #20]
      break;
 8003184:	e009      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8003186:	233a      	movs	r3, #58	; 0x3a
 8003188:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800318a:	2339      	movs	r3, #57	; 0x39
 800318c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800318e:	233c      	movs	r3, #60	; 0x3c
 8003190:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8003192:	233b      	movs	r3, #59	; 0x3b
 8003194:	753b      	strb	r3, [r7, #20]
      break;
 8003196:	e000      	b.n	800319a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003198:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800319a:	89fb      	ldrh	r3, [r7, #14]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	7dfa      	ldrb	r2, [r7, #23]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f012 ff40 	bl	8016028 <TS_IO_Read>
 80031a8:	4603      	mov	r3, r0
 80031aa:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 80031b4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	7dba      	ldrb	r2, [r7, #22]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f012 ff32 	bl	8016028 <TS_IO_Read>
 80031c4:	4603      	mov	r3, r0
 80031c6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031d2:	b21a      	sxth	r2, r3
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	b21b      	sxth	r3, r3
 80031da:	4313      	orrs	r3, r2
 80031dc:	b21b      	sxth	r3, r3
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 80031e2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	7d7a      	ldrb	r2, [r7, #21]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f012 ff17 	bl	8016028 <TS_IO_Read>
 80031fa:	4603      	mov	r3, r0
 80031fc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	b29a      	uxth	r2, r3
 8003204:	4b14      	ldr	r3, [pc, #80]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 8003206:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	7d3a      	ldrb	r2, [r7, #20]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f012 ff09 	bl	8016028 <TS_IO_Read>
 8003216:	4603      	mov	r3, r0
 8003218:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003224:	b21a      	sxth	r2, r3
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b21b      	sxth	r3, r3
 800322c:	4313      	orrs	r3, r2
 800322e:	b21b      	sxth	r3, r3
 8003230:	b29a      	uxth	r2, r3
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 8003234:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8003236:	4b08      	ldr	r3, [pc, #32]	; (8003258 <ft5336_TS_GetXY+0x1dc>)
 8003238:	881a      	ldrh	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800323e:	4b05      	ldr	r3, [pc, #20]	; (8003254 <ft5336_TS_GetXY+0x1d8>)
 8003240:	789b      	ldrb	r3, [r3, #2]
 8003242:	3301      	adds	r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4b03      	ldr	r3, [pc, #12]	; (8003254 <ft5336_TS_GetXY+0x1d8>)
 8003248:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	200003b0 	.word	0x200003b0
 8003258:	200003b4 	.word	0x200003b4

0800325c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	21a4      	movs	r1, #164	; 0xa4
 8003276:	4618      	mov	r0, r3
 8003278:	f012 febc 	bl	8015ff4 <TS_IO_Write>
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	21a4      	movs	r1, #164	; 0xa4
 800329e:	4618      	mov	r0, r3
 80032a0:	f012 fea8 	bl	8015ff4 <TS_IO_Write>
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	200003b0 	.word	0x200003b0

080032f4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80032f8:	f7ff fff0 	bl	80032dc <ft5336_Get_I2C_InitializedStatus>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003302:	4b02      	ldr	r3, [pc, #8]	; (800330c <ft5336_I2C_InitializeIfRequired+0x18>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
  }
}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200003b0 	.word	0x200003b0

08003310 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003330:	2003      	movs	r0, #3
 8003332:	f000 fb82 	bl	8003a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003336:	2000      	movs	r0, #0
 8003338:	f7fe ff8e 	bl	8002258 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800333c:	f7fe ff64 	bl	8002208 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_IncTick+0x20>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_IncTick+0x24>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4413      	add	r3, r2
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_IncTick+0x24>)
 800335a:	6013      	str	r3, [r2, #0]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000034 	.word	0x20000034
 800336c:	20009fd4 	.word	0x20009fd4

08003370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return uwTick;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_GetTick+0x14>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20009fd4 	.word	0x20009fd4

08003388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff ffee 	bl	8003370 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d005      	beq.n	80033ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <HAL_Delay+0x44>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ae:	bf00      	nop
 80033b0:	f7ff ffde 	bl	8003370 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d8f7      	bhi.n	80033b0 <HAL_Delay+0x28>
  {
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000034 	.word	0x20000034

080033d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e031      	b.n	800344a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd f92c 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_ADC_Init+0x84>)
 8003414:	4013      	ands	r3, r2
 8003416:	f043 0202 	orr.w	r2, r3, #2
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f964 	bl	80036ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f023 0303 	bic.w	r3, r3, #3
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
 800343a:	e001      	b.n	8003440 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	ffffeefd 	.word	0xffffeefd

08003458 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x1c>
 8003470:	2302      	movs	r3, #2
 8003472:	e12a      	b.n	80036ca <HAL_ADC_ConfigChannel+0x272>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b09      	cmp	r3, #9
 8003482:	d93a      	bls.n	80034fa <HAL_ADC_ConfigChannel+0xa2>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348c:	d035      	beq.n	80034fa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	3b1e      	subs	r3, #30
 80034a4:	2207      	movs	r2, #7
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	400a      	ands	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a87      	ldr	r2, [pc, #540]	; (80036d8 <HAL_ADC_ConfigChannel+0x280>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10a      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	061a      	lsls	r2, r3, #24
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d2:	e035      	b.n	8003540 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68d9      	ldr	r1, [r3, #12]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4618      	mov	r0, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4403      	add	r3, r0
 80034ec:	3b1e      	subs	r3, #30
 80034ee:	409a      	lsls	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f8:	e022      	b.n	8003540 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6919      	ldr	r1, [r3, #16]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	2207      	movs	r2, #7
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43da      	mvns	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	400a      	ands	r2, r1
 800351c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6919      	ldr	r1, [r3, #16]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4618      	mov	r0, r3
 8003530:	4603      	mov	r3, r0
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4403      	add	r3, r0
 8003536:	409a      	lsls	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b06      	cmp	r3, #6
 8003546:	d824      	bhi.n	8003592 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	3b05      	subs	r3, #5
 800355a:	221f      	movs	r2, #31
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43da      	mvns	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	400a      	ands	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	3b05      	subs	r3, #5
 8003584:	fa00 f203 	lsl.w	r2, r0, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	635a      	str	r2, [r3, #52]	; 0x34
 8003590:	e04c      	b.n	800362c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d824      	bhi.n	80035e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	3b23      	subs	r3, #35	; 0x23
 80035ac:	221f      	movs	r2, #31
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	400a      	ands	r2, r1
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4618      	mov	r0, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	3b23      	subs	r3, #35	; 0x23
 80035d6:	fa00 f203 	lsl.w	r2, r0, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
 80035e2:	e023      	b.n	800362c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	3b41      	subs	r3, #65	; 0x41
 80035f6:	221f      	movs	r2, #31
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43da      	mvns	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	400a      	ands	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	4618      	mov	r0, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	3b41      	subs	r3, #65	; 0x41
 8003620:	fa00 f203 	lsl.w	r2, r0, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <HAL_ADC_ConfigChannel+0x284>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1f4>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363e:	d105      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003640:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <HAL_ADC_ConfigChannel+0x288>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <HAL_ADC_ConfigChannel+0x288>)
 8003646:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800364a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <HAL_ADC_ConfigChannel+0x284>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d109      	bne.n	800366a <HAL_ADC_ConfigChannel+0x212>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b12      	cmp	r3, #18
 800365c:	d105      	bne.n	800366a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_ADC_ConfigChannel+0x288>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <HAL_ADC_ConfigChannel+0x288>)
 8003664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003668:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <HAL_ADC_ConfigChannel+0x284>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d125      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x268>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_ADC_ConfigChannel+0x280>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d003      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x22e>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b11      	cmp	r3, #17
 8003684:	d11c      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_ADC_ConfigChannel+0x288>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <HAL_ADC_ConfigChannel+0x288>)
 800368c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003690:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_ADC_ConfigChannel+0x280>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d111      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_ADC_ConfigChannel+0x28c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <HAL_ADC_ConfigChannel+0x290>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0c9a      	lsrs	r2, r3, #18
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036b2:	e002      	b.n	80036ba <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f9      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	10000012 	.word	0x10000012
 80036dc:	40012000 	.word	0x40012000
 80036e0:	40012300 	.word	0x40012300
 80036e4:	20000004 	.word	0x20000004
 80036e8:	431bde83 	.word	0x431bde83

080036ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80036f4:	4b78      	ldr	r3, [pc, #480]	; (80038d8 <ADC_Init+0x1ec>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a77      	ldr	r2, [pc, #476]	; (80038d8 <ADC_Init+0x1ec>)
 80036fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036fe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003700:	4b75      	ldr	r3, [pc, #468]	; (80038d8 <ADC_Init+0x1ec>)
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4973      	ldr	r1, [pc, #460]	; (80038d8 <ADC_Init+0x1ec>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	4a58      	ldr	r2, [pc, #352]	; (80038dc <ADC_Init+0x1f0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800378e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6899      	ldr	r1, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	e00f      	b.n	80037e6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0202 	bic.w	r2, r2, #2
 80037f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	005a      	lsls	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003822:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003832:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	035a      	lsls	r2, r3, #13
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	e007      	b.n	800385c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	3b01      	subs	r3, #1
 8003878:	051a      	lsls	r2, r3, #20
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800389e:	025a      	lsls	r2, r3, #9
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6899      	ldr	r1, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	029a      	lsls	r2, r3, #10
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40012300 	.word	0x40012300
 80038dc:	0f000001 	.word	0x0f000001

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <__NVIC_SetPriorityGrouping+0x40>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 800390a:	4313      	orrs	r3, r2
 800390c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800390e:	4a04      	ldr	r2, [pc, #16]	; (8003920 <__NVIC_SetPriorityGrouping+0x40>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	60d3      	str	r3, [r2, #12]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00
 8003924:	05fa0000 	.word	0x05fa0000

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <__NVIC_EnableIRQ+0x38>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff4c 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a62:	f7ff ff61 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	6978      	ldr	r0, [r7, #20]
 8003a6e:	f7ff ffb1 	bl	80039d4 <NVIC_EncodePriority>
 8003a72:	4602      	mov	r2, r0
 8003a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff80 	bl	8003980 <__NVIC_SetPriority>
}
 8003a80:	bf00      	nop
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff54 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e054      	b.n	8003b60 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7f5b      	ldrb	r3, [r3, #29]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fc fe3c 	bl	8000744 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10c      	bne.n	8003af4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <HAL_CRC_Init+0xc4>)
 8003ae0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0218 	bic.w	r2, r2, #24
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	e00c      	b.n	8003b0e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f834 	bl	8003b6c <HAL_CRCEx_Polynomial_Set>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e028      	b.n	8003b60 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	795b      	ldrb	r3, [r3, #5]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d105      	bne.n	8003b22 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1e:	611a      	str	r2, [r3, #16]
 8003b20:	e004      	b.n	8003b2c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6912      	ldr	r2, [r2, #16]
 8003b2a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	04c11db7 	.word	0x04c11db7

08003b6c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003b7c:	231f      	movs	r3, #31
 8003b7e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b80:	bf00      	nop
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1e5a      	subs	r2, r3, #1
 8003b86:	613a      	str	r2, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_CRCEx_Polynomial_Set+0x34>
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_CRCEx_Polynomial_Set+0x16>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b18      	cmp	r3, #24
 8003ba4:	d846      	bhi.n	8003c34 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <HAL_CRCEx_Polynomial_Set+0x40>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003c3b 	.word	0x08003c3b
 8003bb0:	08003c35 	.word	0x08003c35
 8003bb4:	08003c35 	.word	0x08003c35
 8003bb8:	08003c35 	.word	0x08003c35
 8003bbc:	08003c35 	.word	0x08003c35
 8003bc0:	08003c35 	.word	0x08003c35
 8003bc4:	08003c35 	.word	0x08003c35
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003c29 	.word	0x08003c29
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003c35 	.word	0x08003c35
 8003bd8:	08003c35 	.word	0x08003c35
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003c35 	.word	0x08003c35
 8003be8:	08003c35 	.word	0x08003c35
 8003bec:	08003c1d 	.word	0x08003c1d
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003c35 	.word	0x08003c35
 8003bf8:	08003c35 	.word	0x08003c35
 8003bfc:	08003c35 	.word	0x08003c35
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c35 	.word	0x08003c35
 8003c08:	08003c35 	.word	0x08003c35
 8003c0c:	08003c11 	.word	0x08003c11
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d913      	bls.n	8003c3e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c1a:	e010      	b.n	8003c3e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b07      	cmp	r3, #7
 8003c20:	d90f      	bls.n	8003c42 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c26:	e00c      	b.n	8003c42 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b0f      	cmp	r3, #15
 8003c2c:	d90b      	bls.n	8003c46 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c32:	e008      	b.n	8003c46 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
      break;
 8003c38:	e006      	b.n	8003c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e004      	b.n	8003c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003c46:	bf00      	nop
  }
  if (status == HAL_OK)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10d      	bne.n	8003c6a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 0118 	bic.w	r1, r3, #24
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e069      	b.n	8003d5e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fda8 	bl	80007ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <HAL_DCMI_Init+0xf0>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003cd6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ce2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003cee:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003cfa:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003d06:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d112      	bne.n	8003d3e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7f1b      	ldrb	r3, [r3, #28]
 8003d1c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7f5b      	ldrb	r3, [r3, #29]
 8003d22:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d24:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7f9b      	ldrb	r3, [r3, #30]
 8003d2a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003d2c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7fdb      	ldrb	r3, [r3, #31]
 8003d34:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003d3a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003d3c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 021e 	orr.w	r2, r2, #30
 8003d4c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	ffe0f007 	.word	0xffe0f007

08003d6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_DMA_Start_IT+0x26>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e048      	b.n	8003e24 <HAL_DMA_Start_IT+0xb8>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d137      	bne.n	8003e16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f842 	bl	8003e44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	223f      	movs	r2, #63	; 0x3f
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0216 	orr.w	r2, r2, #22
 8003dda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e005      	b.n	8003e22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d108      	bne.n	8003e84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e82:	e007      	b.n	8003e94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e039      	b.n	8003f26 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fc fd80 	bl	80009cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	f023 0107 	bic.w	r1, r3, #7
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_DMA2D_Init+0x90>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68d1      	ldr	r1, [r2, #12]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	430b      	orrs	r3, r1
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	ffffc000 	.word	0xffffc000

08003f34 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d026      	beq.n	8003fa4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d021      	beq.n	8003fa4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2201      	movs	r2, #1
 8003f82:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2204      	movs	r2, #4
 8003f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d026      	beq.n	8003ffc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	f043 0202 	orr.w	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d026      	beq.n	8004054 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400c:	2b00      	cmp	r3, #0
 800400e:	d021      	beq.n	8004054 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2204      	movs	r2, #4
 8004038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d013      	beq.n	8004086 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00e      	beq.n	8004086 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004076:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2204      	movs	r2, #4
 800407e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f853 	bl	800412c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d024      	beq.n	80040da <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01f      	beq.n	80040da <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2202      	movs	r2, #2
 80040b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01f      	beq.n	8004124 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01a      	beq.n	8004124 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040fc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2210      	movs	r2, #16
 8004104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f80e 	bl	8004140 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_DMA2D_ConfigLayer+0x20>
 8004170:	2302      	movs	r3, #2
 8004172:	e079      	b.n	8004268 <HAL_DMA2D_ConfigLayer+0x114>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	3318      	adds	r3, #24
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <HAL_DMA2D_ConfigLayer+0x120>)
 80041a0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b0a      	cmp	r3, #10
 80041a8:	d003      	beq.n	80041b2 <HAL_DMA2D_ConfigLayer+0x5e>
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b09      	cmp	r3, #9
 80041b0:	d107      	bne.n	80041c2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e005      	b.n	80041ce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d120      	bne.n	8004216 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	ea02 0103 	and.w	r1, r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b0a      	cmp	r3, #10
 80041fc:	d003      	beq.n	8004206 <HAL_DMA2D_ConfigLayer+0xb2>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b09      	cmp	r3, #9
 8004204:	d127      	bne.n	8004256 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
 8004214:	e01f      	b.n	8004256 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	43db      	mvns	r3, r3
 8004220:	ea02 0103 	and.w	r1, r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	430a      	orrs	r2, r1
 800422c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b0a      	cmp	r3, #10
 800423e:	d003      	beq.n	8004248 <HAL_DMA2D_ConfigLayer+0xf4>
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b09      	cmp	r3, #9
 8004246:	d106      	bne.n	8004256 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004254:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	ff03000f 	.word	0xff03000f

08004278 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004288:	4ba9      	ldr	r3, [pc, #676]	; (8004530 <HAL_ETH_Init+0x2b8>)
 800428a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e181      	b.n	80045a2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc fbf8 	bl	8000aa8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b8:	4b9e      	ldr	r3, [pc, #632]	; (8004534 <HAL_ETH_Init+0x2bc>)
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	4a9d      	ldr	r2, [pc, #628]	; (8004534 <HAL_ETH_Init+0x2bc>)
 80042be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c2:	6453      	str	r3, [r2, #68]	; 0x44
 80042c4:	4b9b      	ldr	r3, [pc, #620]	; (8004534 <HAL_ETH_Init+0x2bc>)
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80042d0:	4b99      	ldr	r3, [pc, #612]	; (8004538 <HAL_ETH_Init+0x2c0>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a98      	ldr	r2, [pc, #608]	; (8004538 <HAL_ETH_Init+0x2c0>)
 80042d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042da:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80042dc:	4b96      	ldr	r3, [pc, #600]	; (8004538 <HAL_ETH_Init+0x2c0>)
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4994      	ldr	r1, [pc, #592]	; (8004538 <HAL_ETH_Init+0x2c0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004300:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004302:	f7ff f835 	bl	8003370 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004308:	e011      	b.n	800432e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800430a:	f7ff f831 	bl	8003370 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004318:	d909      	bls.n	800432e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2203      	movs	r2, #3
 800431e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e139      	b.n	80045a2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e4      	bne.n	800430a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f023 031c 	bic.w	r3, r3, #28
 800434e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004350:	f004 faec 	bl	800892c <HAL_RCC_GetHCLKFreq>
 8004354:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4a78      	ldr	r2, [pc, #480]	; (800453c <HAL_ETH_Init+0x2c4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d908      	bls.n	8004370 <HAL_ETH_Init+0xf8>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4a77      	ldr	r2, [pc, #476]	; (8004540 <HAL_ETH_Init+0x2c8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d804      	bhi.n	8004370 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e027      	b.n	80043c0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4a73      	ldr	r2, [pc, #460]	; (8004540 <HAL_ETH_Init+0x2c8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d908      	bls.n	800438a <HAL_ETH_Init+0x112>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	4a6d      	ldr	r2, [pc, #436]	; (8004530 <HAL_ETH_Init+0x2b8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d204      	bcs.n	800438a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f043 030c 	orr.w	r3, r3, #12
 8004386:	61fb      	str	r3, [r7, #28]
 8004388:	e01a      	b.n	80043c0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4a68      	ldr	r2, [pc, #416]	; (8004530 <HAL_ETH_Init+0x2b8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d303      	bcc.n	800439a <HAL_ETH_Init+0x122>
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	4a6b      	ldr	r2, [pc, #428]	; (8004544 <HAL_ETH_Init+0x2cc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d911      	bls.n	80043be <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4a69      	ldr	r2, [pc, #420]	; (8004544 <HAL_ETH_Init+0x2cc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d908      	bls.n	80043b4 <HAL_ETH_Init+0x13c>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4a68      	ldr	r2, [pc, #416]	; (8004548 <HAL_ETH_Init+0x2d0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d804      	bhi.n	80043b4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e005      	b.n	80043c0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f043 0310 	orr.w	r3, r3, #16
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e000      	b.n	80043c0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80043be:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80043c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043cc:	2100      	movs	r1, #0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f954 	bl	800467c <HAL_ETH_WritePHYRegister>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80043de:	6939      	ldr	r1, [r7, #16]
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f9b1 	bl	8004748 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e0d7      	b.n	80045a2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80043f2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80043f6:	f7fe ffc7 	bl	8003388 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80a4 	beq.w	800454c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004404:	f7fe ffb4 	bl	8003370 <HAL_GetTick>
 8004408:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800440a:	f107 030c 	add.w	r3, r7, #12
 800440e:	461a      	mov	r2, r3
 8004410:	2101      	movs	r1, #1
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8ca 	bl	80045ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004418:	f7fe ffaa 	bl	8003370 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	; 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d90f      	bls.n	800444a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800442e:	6939      	ldr	r1, [r7, #16]
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f989 	bl	8004748 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0ab      	b.n	80045a2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0da      	beq.n	800440a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004458:	2100      	movs	r1, #0
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f90e 	bl	800467c <HAL_ETH_WritePHYRegister>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800446a:	6939      	ldr	r1, [r7, #16]
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f96b 	bl	8004748 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800447a:	2301      	movs	r3, #1
 800447c:	e091      	b.n	80045a2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800447e:	f7fe ff77 	bl	8003370 <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	461a      	mov	r2, r3
 800448a:	2101      	movs	r1, #1
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f88d 	bl	80045ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004492:	f7fe ff6d 	bl	8003370 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d90f      	bls.n	80044c4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80044a8:	6939      	ldr	r1, [r7, #16]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f94c 	bl	8004748 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e06e      	b.n	80045a2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0da      	beq.n	8004484 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	461a      	mov	r2, r3
 80044d4:	2110      	movs	r1, #16
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f868 	bl	80045ac <HAL_ETH_ReadPHYRegister>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80044e6:	6939      	ldr	r1, [r7, #16]
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f92d 	bl	8004748 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80044f6:	2301      	movs	r3, #1
 80044f8:	e053      	b.n	80045a2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800450a:	60da      	str	r2, [r3, #12]
 800450c:	e002      	b.n	8004514 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	e034      	b.n	8004590 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800452c:	609a      	str	r2, [r3, #8]
 800452e:	e02f      	b.n	8004590 <HAL_ETH_Init+0x318>
 8004530:	03938700 	.word	0x03938700
 8004534:	40023800 	.word	0x40023800
 8004538:	40013800 	.word	0x40013800
 800453c:	01312cff 	.word	0x01312cff
 8004540:	02160ebf 	.word	0x02160ebf
 8004544:	05f5e0ff 	.word	0x05f5e0ff
 8004548:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	08db      	lsrs	r3, r3, #3
 8004552:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800455c:	4313      	orrs	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	2100      	movs	r1, #0
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f889 	bl	800467c <HAL_ETH_WritePHYRegister>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004574:	6939      	ldr	r1, [r7, #16]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8e6 	bl	8004748 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e00c      	b.n	80045a2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004588:	f640 70ff 	movw	r0, #4095	; 0xfff
 800458c:	f7fe fefc 	bl	8003388 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004590:	6939      	ldr	r1, [r7, #16]
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8d8 	bl	8004748 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop

080045ac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	460b      	mov	r3, r1
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b82      	cmp	r3, #130	; 0x82
 80045cc:	d101      	bne.n	80045d2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80045ce:	2302      	movs	r3, #2
 80045d0:	e050      	b.n	8004674 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2282      	movs	r2, #130	; 0x82
 80045d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 031c 	and.w	r3, r3, #28
 80045e8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8a1b      	ldrh	r3, [r3, #16]
 80045ee:	02db      	lsls	r3, r3, #11
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	019b      	lsls	r3, r3, #6
 80045fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0302 	bic.w	r3, r3, #2
 800460c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800461e:	f7fe fea7 	bl	8003370 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004624:	e015      	b.n	8004652 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004626:	f7fe fea3 	bl	8003370 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004634:	d309      	bcc.n	800464a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e014      	b.n	8004674 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e4      	bne.n	8004626 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	460b      	mov	r3, r1
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b42      	cmp	r3, #66	; 0x42
 800469c:	d101      	bne.n	80046a2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
 80046a0:	e04e      	b.n	8004740 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2242      	movs	r2, #66	; 0x42
 80046a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 031c 	and.w	r3, r3, #28
 80046b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8a1b      	ldrh	r3, [r3, #16]
 80046be:	02db      	lsls	r3, r3, #11
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80046c8:	897b      	ldrh	r3, [r7, #10]
 80046ca:	019b      	lsls	r3, r3, #6
 80046cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f043 0302 	orr.w	r3, r3, #2
 80046dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80046f8:	f7fe fe3a 	bl	8003370 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80046fe:	e015      	b.n	800472c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004700:	f7fe fe36 	bl	8003370 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d309      	bcc.n	8004724 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e00d      	b.n	8004740 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e4      	bne.n	8004700 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0b0      	sub	sp, #192	; 0xc0
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004764:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800476c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800476e:	2300      	movs	r3, #0
 8004770:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004772:	2300      	movs	r3, #0
 8004774:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004776:	2300      	movs	r3, #0
 8004778:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800477e:	2300      	movs	r3, #0
 8004780:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004782:	2300      	movs	r3, #0
 8004784:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800478e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004792:	663b      	str	r3, [r7, #96]	; 0x60
 8004794:	e001      	b.n	800479a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004796:	2300      	movs	r3, #0
 8004798:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800479a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800479e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80047a4:	2300      	movs	r3, #0
 80047a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80047b4:	2340      	movs	r3, #64	; 0x40
 80047b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80047dc:	2300      	movs	r3, #0
 80047de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004800:	2300      	movs	r3, #0
 8004802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800481c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004820:	4bab      	ldr	r3, [pc, #684]	; (8004ad0 <ETH_MACDMAConfig+0x388>)
 8004822:	4013      	ands	r3, r2
 8004824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004828:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800482c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800482e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004830:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004834:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800483a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800483c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800483e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004842:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004848:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800484a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800484c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800484e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004850:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004854:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004858:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800485a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800485c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800485e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004870:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800487c:	2001      	movs	r0, #1
 800487e:	f7fe fd83 	bl	8003388 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800488a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800488c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800488e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004890:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004894:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004896:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800489a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800489c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80048a0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80048a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80048a6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80048a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80048ac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80048b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80048b8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80048ba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f7fe fd5e 	bl	8003388 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048d4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048de:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80048e8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80048f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048f8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80048fc:	4013      	ands	r3, r2
 80048fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004902:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004906:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800490c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800490e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004912:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004918:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800491a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800491e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004924:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004926:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004938:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004944:	2001      	movs	r0, #1
 8004946:	f7fe fd1f 	bl	8003388 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004952:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004954:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004958:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800496e:	2001      	movs	r0, #1
 8004970:	f7fe fd0a 	bl	8003388 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800497c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004986:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800498c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004990:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800499a:	2300      	movs	r3, #0
 800499c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80049a2:	2304      	movs	r3, #4
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80049a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80049ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80049b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80049b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80049c6:	2300      	movs	r3, #0
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80049d2:	4413      	add	r3, r2
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80049da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <ETH_MACDMAConfig+0x38c>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80049e6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80049e8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80049ea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80049ec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80049ee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80049f0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80049f2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80049f4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80049f6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80049f8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80049fa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80049fc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80049fe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004a02:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004a06:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	f241 0318 	movw	r3, #4120	; 0x1018
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a20:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f241 0318 	movw	r3, #4120	; 0x1018
 8004a2a:	4413      	add	r3, r2
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a32:	2001      	movs	r0, #1
 8004a34:	f7fe fca8 	bl	8003388 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004a40:	4413      	add	r3, r2
 8004a42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a46:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004a4c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004a50:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004a54:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004a58:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004a5e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004a62:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a70:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a80:	2001      	movs	r0, #1
 8004a82:	f7fe fc81 	bl	8003388 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a92:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10d      	bne.n	8004ab8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	f241 031c 	movw	r3, #4124	; 0x101c
 8004aa4:	4413      	add	r3, r2
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6811      	ldr	r1, [r2, #0]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <ETH_MACDMAConfig+0x390>)
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	f241 031c 	movw	r3, #4124	; 0x101c
 8004ab4:	440b      	add	r3, r1
 8004ab6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	461a      	mov	r2, r3
 8004abe:	2100      	movs	r1, #0
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f80b 	bl	8004adc <ETH_MACAddressConfig>
}
 8004ac6:	bf00      	nop
 8004ac8:	37c0      	adds	r7, #192	; 0xc0
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	ff20810f 	.word	0xff20810f
 8004ad4:	f8de3f23 	.word	0xf8de3f23
 8004ad8:	00010040 	.word	0x00010040

08004adc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3305      	adds	r3, #5
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	021b      	lsls	r3, r3, #8
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	3204      	adds	r2, #4
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <ETH_MACAddressConfig+0x68>)
 8004afe:	4413      	add	r3, r2
 8004b00:	461a      	mov	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3303      	adds	r3, #3
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	061a      	lsls	r2, r3, #24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3302      	adds	r3, #2
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	4313      	orrs	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	7812      	ldrb	r2, [r2, #0]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <ETH_MACAddressConfig+0x6c>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6013      	str	r3, [r2, #0]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40028040 	.word	0x40028040
 8004b48:	40028044 	.word	0x40028044

08004b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b089      	sub	sp, #36	; 0x24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	e175      	b.n	8004e58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	f040 8164 	bne.w	8004e52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d00b      	beq.n	8004baa <HAL_GPIO_Init+0x5e>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d007      	beq.n	8004baa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b9e:	2b11      	cmp	r3, #17
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b12      	cmp	r3, #18
 8004ba8:	d130      	bne.n	8004c0c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004be0:	2201      	movs	r2, #1
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	f003 0201 	and.w	r2, r3, #1
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	2203      	movs	r2, #3
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4013      	ands	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_Init+0x100>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b12      	cmp	r3, #18
 8004c4a:	d123      	bne.n	8004c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	08da      	lsrs	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3208      	adds	r2, #8
 8004c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	220f      	movs	r2, #15
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	08da      	lsrs	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3208      	adds	r2, #8
 8004c8e:	69b9      	ldr	r1, [r7, #24]
 8004c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0203 	and.w	r2, r3, #3
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80be 	beq.w	8004e52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd6:	4b66      	ldr	r3, [pc, #408]	; (8004e70 <HAL_GPIO_Init+0x324>)
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	4a65      	ldr	r2, [pc, #404]	; (8004e70 <HAL_GPIO_Init+0x324>)
 8004cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ce2:	4b63      	ldr	r3, [pc, #396]	; (8004e70 <HAL_GPIO_Init+0x324>)
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004cee:	4a61      	ldr	r2, [pc, #388]	; (8004e74 <HAL_GPIO_Init+0x328>)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	220f      	movs	r2, #15
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a58      	ldr	r2, [pc, #352]	; (8004e78 <HAL_GPIO_Init+0x32c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d037      	beq.n	8004d8a <HAL_GPIO_Init+0x23e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a57      	ldr	r2, [pc, #348]	; (8004e7c <HAL_GPIO_Init+0x330>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d031      	beq.n	8004d86 <HAL_GPIO_Init+0x23a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a56      	ldr	r2, [pc, #344]	; (8004e80 <HAL_GPIO_Init+0x334>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d02b      	beq.n	8004d82 <HAL_GPIO_Init+0x236>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a55      	ldr	r2, [pc, #340]	; (8004e84 <HAL_GPIO_Init+0x338>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d025      	beq.n	8004d7e <HAL_GPIO_Init+0x232>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a54      	ldr	r2, [pc, #336]	; (8004e88 <HAL_GPIO_Init+0x33c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01f      	beq.n	8004d7a <HAL_GPIO_Init+0x22e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a53      	ldr	r2, [pc, #332]	; (8004e8c <HAL_GPIO_Init+0x340>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d019      	beq.n	8004d76 <HAL_GPIO_Init+0x22a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a52      	ldr	r2, [pc, #328]	; (8004e90 <HAL_GPIO_Init+0x344>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <HAL_GPIO_Init+0x226>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a51      	ldr	r2, [pc, #324]	; (8004e94 <HAL_GPIO_Init+0x348>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00d      	beq.n	8004d6e <HAL_GPIO_Init+0x222>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a50      	ldr	r2, [pc, #320]	; (8004e98 <HAL_GPIO_Init+0x34c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d007      	beq.n	8004d6a <HAL_GPIO_Init+0x21e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a4f      	ldr	r2, [pc, #316]	; (8004e9c <HAL_GPIO_Init+0x350>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_GPIO_Init+0x21a>
 8004d62:	2309      	movs	r3, #9
 8004d64:	e012      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d66:	230a      	movs	r3, #10
 8004d68:	e010      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	e00e      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d6e:	2307      	movs	r3, #7
 8004d70:	e00c      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d72:	2306      	movs	r3, #6
 8004d74:	e00a      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d76:	2305      	movs	r3, #5
 8004d78:	e008      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	e006      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e004      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e002      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_GPIO_Init+0x240>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	f002 0203 	and.w	r2, r2, #3
 8004d92:	0092      	lsls	r2, r2, #2
 8004d94:	4093      	lsls	r3, r2
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d9c:	4935      	ldr	r1, [pc, #212]	; (8004e74 <HAL_GPIO_Init+0x328>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	3302      	adds	r3, #2
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004daa:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dce:	4a34      	ldr	r2, [pc, #208]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004dd4:	4b32      	ldr	r3, [pc, #200]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004df8:	4a29      	ldr	r2, [pc, #164]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dfe:	4b28      	ldr	r3, [pc, #160]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e22:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e4c:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <HAL_GPIO_Init+0x354>)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	f67f ae86 	bls.w	8004b6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	3724      	adds	r7, #36	; 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40013800 	.word	0x40013800
 8004e78:	40020000 	.word	0x40020000
 8004e7c:	40020400 	.word	0x40020400
 8004e80:	40020800 	.word	0x40020800
 8004e84:	40020c00 	.word	0x40020c00
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40021400 	.word	0x40021400
 8004e90:	40021800 	.word	0x40021800
 8004e94:	40021c00 	.word	0x40021c00
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	40022400 	.word	0x40022400
 8004ea0:	40013c00 	.word	0x40013c00

08004ea4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e0d9      	b.n	8005074 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	f040 80c9 	bne.w	800506e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004edc:	4a6b      	ldr	r2, [pc, #428]	; (800508c <HAL_GPIO_DeInit+0x1e8>)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a63      	ldr	r2, [pc, #396]	; (8005090 <HAL_GPIO_DeInit+0x1ec>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d037      	beq.n	8004f76 <HAL_GPIO_DeInit+0xd2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a62      	ldr	r2, [pc, #392]	; (8005094 <HAL_GPIO_DeInit+0x1f0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d031      	beq.n	8004f72 <HAL_GPIO_DeInit+0xce>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a61      	ldr	r2, [pc, #388]	; (8005098 <HAL_GPIO_DeInit+0x1f4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02b      	beq.n	8004f6e <HAL_GPIO_DeInit+0xca>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a60      	ldr	r2, [pc, #384]	; (800509c <HAL_GPIO_DeInit+0x1f8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d025      	beq.n	8004f6a <HAL_GPIO_DeInit+0xc6>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a5f      	ldr	r2, [pc, #380]	; (80050a0 <HAL_GPIO_DeInit+0x1fc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <HAL_GPIO_DeInit+0xc2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a5e      	ldr	r2, [pc, #376]	; (80050a4 <HAL_GPIO_DeInit+0x200>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d019      	beq.n	8004f62 <HAL_GPIO_DeInit+0xbe>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a5d      	ldr	r2, [pc, #372]	; (80050a8 <HAL_GPIO_DeInit+0x204>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_GPIO_DeInit+0xba>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a5c      	ldr	r2, [pc, #368]	; (80050ac <HAL_GPIO_DeInit+0x208>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00d      	beq.n	8004f5a <HAL_GPIO_DeInit+0xb6>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a5b      	ldr	r2, [pc, #364]	; (80050b0 <HAL_GPIO_DeInit+0x20c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <HAL_GPIO_DeInit+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a5a      	ldr	r2, [pc, #360]	; (80050b4 <HAL_GPIO_DeInit+0x210>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_GPIO_DeInit+0xae>
 8004f4e:	2309      	movs	r3, #9
 8004f50:	e012      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f52:	230a      	movs	r3, #10
 8004f54:	e010      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f56:	2308      	movs	r3, #8
 8004f58:	e00e      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f5a:	2307      	movs	r3, #7
 8004f5c:	e00c      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f5e:	2306      	movs	r3, #6
 8004f60:	e00a      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f62:	2305      	movs	r3, #5
 8004f64:	e008      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f66:	2304      	movs	r3, #4
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e004      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e002      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_GPIO_DeInit+0xd4>
 8004f76:	2300      	movs	r3, #0
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	f002 0203 	and.w	r2, r2, #3
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	4093      	lsls	r3, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d132      	bne.n	8004fee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f88:	4b4b      	ldr	r3, [pc, #300]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	4949      	ldr	r1, [pc, #292]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f96:	4b48      	ldr	r3, [pc, #288]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	4946      	ldr	r1, [pc, #280]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004fa4:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	4942      	ldr	r1, [pc, #264]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004fb2:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	493f      	ldr	r1, [pc, #252]	; (80050b8 <HAL_GPIO_DeInit+0x214>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	220f      	movs	r2, #15
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004fd0:	4a2e      	ldr	r2, [pc, #184]	; (800508c <HAL_GPIO_DeInit+0x1e8>)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	43da      	mvns	r2, r3
 8004fe0:	482a      	ldr	r0, [pc, #168]	; (800508c <HAL_GPIO_DeInit+0x1e8>)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	089b      	lsrs	r3, r3, #2
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	3302      	adds	r3, #2
 8004fea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	2103      	movs	r1, #3
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	401a      	ands	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	08da      	lsrs	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3208      	adds	r2, #8
 800500c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	220f      	movs	r2, #15
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	08d2      	lsrs	r2, r2, #3
 8005024:	4019      	ands	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3208      	adds	r2, #8
 800502a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	2103      	movs	r1, #3
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	2101      	movs	r1, #1
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	fa01 f303 	lsl.w	r3, r1, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	401a      	ands	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	2103      	movs	r1, #3
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	401a      	ands	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	3301      	adds	r3, #1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	f67f af22 	bls.w	8004ec0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40013800 	.word	0x40013800
 8005090:	40020000 	.word	0x40020000
 8005094:	40020400 	.word	0x40020400
 8005098:	40020800 	.word	0x40020800
 800509c:	40020c00 	.word	0x40020c00
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40021400 	.word	0x40021400
 80050a8:	40021800 	.word	0x40021800
 80050ac:	40021c00 	.word	0x40021c00
 80050b0:	40022000 	.word	0x40022000
 80050b4:	40022400 	.word	0x40022400
 80050b8:	40013c00 	.word	0x40013c00

080050bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	887b      	ldrh	r3, [r7, #2]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
 80050d8:	e001      	b.n	80050de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
 80050f8:	4613      	mov	r3, r2
 80050fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050fc:	787b      	ldrb	r3, [r7, #1]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005108:	e003      	b.n	8005112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	041a      	lsls	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	619a      	str	r2, [r3, #24]
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800511e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005120:	b08f      	sub	sp, #60	; 0x3c
 8005122:	af0a      	add	r7, sp, #40	; 0x28
 8005124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e054      	b.n	80051da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f012 fdd8 	bl	8017d00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2203      	movs	r2, #3
 8005154:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f008 fd27 	bl	800dbc2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	687e      	ldr	r6, [r7, #4]
 800517c:	466d      	mov	r5, sp
 800517e:	f106 0410 	add.w	r4, r6, #16
 8005182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800518a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800518e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005192:	1d33      	adds	r3, r6, #4
 8005194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005196:	6838      	ldr	r0, [r7, #0]
 8005198:	f008 fcaa 	bl	800daf0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2101      	movs	r1, #1
 80051a2:	4618      	mov	r0, r3
 80051a4:	f008 fd1e 	bl	800dbe4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	603b      	str	r3, [r7, #0]
 80051ae:	687e      	ldr	r6, [r7, #4]
 80051b0:	466d      	mov	r5, sp
 80051b2:	f106 0410 	add.w	r4, r6, #16
 80051b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80051c6:	1d33      	adds	r3, r6, #4
 80051c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ca:	6838      	ldr	r0, [r7, #0]
 80051cc:	f008 fe30 	bl	800de30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80051e2:	b590      	push	{r4, r7, lr}
 80051e4:	b089      	sub	sp, #36	; 0x24
 80051e6:	af04      	add	r7, sp, #16
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	4608      	mov	r0, r1
 80051ec:	4611      	mov	r1, r2
 80051ee:	461a      	mov	r2, r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	70fb      	strb	r3, [r7, #3]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70bb      	strb	r3, [r7, #2]
 80051f8:	4613      	mov	r3, r2
 80051fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_HCD_HC_Init+0x28>
 8005206:	2302      	movs	r3, #2
 8005208:	e076      	b.n	80052f8 <HAL_HCD_HC_Init+0x116>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	212c      	movs	r1, #44	; 0x2c
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	4413      	add	r3, r2
 800521e:	333d      	adds	r3, #61	; 0x3d
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	212c      	movs	r1, #44	; 0x2c
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	3338      	adds	r3, #56	; 0x38
 8005232:	787a      	ldrb	r2, [r7, #1]
 8005234:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	212c      	movs	r1, #44	; 0x2c
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	4413      	add	r3, r2
 8005242:	3340      	adds	r3, #64	; 0x40
 8005244:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005246:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	3339      	adds	r3, #57	; 0x39
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	212c      	movs	r1, #44	; 0x2c
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	4413      	add	r3, r2
 8005266:	333f      	adds	r3, #63	; 0x3f
 8005268:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800526c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	78ba      	ldrb	r2, [r7, #2]
 8005272:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005276:	b2d0      	uxtb	r0, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	212c      	movs	r1, #44	; 0x2c
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	333a      	adds	r3, #58	; 0x3a
 8005284:	4602      	mov	r2, r0
 8005286:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005288:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800528c:	2b00      	cmp	r3, #0
 800528e:	da09      	bge.n	80052a4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	212c      	movs	r1, #44	; 0x2c
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	333b      	adds	r3, #59	; 0x3b
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e008      	b.n	80052b6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	212c      	movs	r1, #44	; 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	333b      	adds	r3, #59	; 0x3b
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	212c      	movs	r1, #44	; 0x2c
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	333c      	adds	r3, #60	; 0x3c
 80052c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80052c8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	787c      	ldrb	r4, [r7, #1]
 80052d0:	78ba      	ldrb	r2, [r7, #2]
 80052d2:	78f9      	ldrb	r1, [r7, #3]
 80052d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4623      	mov	r3, r4
 80052e6:	f008 ff19 	bl	800e11c <USB_HC_Init>
 80052ea:	4603      	mov	r3, r0
 80052ec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd90      	pop	{r4, r7, pc}

08005300 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_HCD_HC_Halt+0x1e>
 800531a:	2302      	movs	r3, #2
 800531c:	e00f      	b.n	800533e <HAL_HCD_HC_Halt+0x3e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f009 f955 	bl	800e5de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4603      	mov	r3, r0
 8005358:	70fb      	strb	r3, [r7, #3]
 800535a:	460b      	mov	r3, r1
 800535c:	70bb      	strb	r3, [r7, #2]
 800535e:	4613      	mov	r3, r2
 8005360:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	212c      	movs	r1, #44	; 0x2c
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	4413      	add	r3, r2
 800536e:	333b      	adds	r3, #59	; 0x3b
 8005370:	78ba      	ldrb	r2, [r7, #2]
 8005372:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	212c      	movs	r1, #44	; 0x2c
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	4413      	add	r3, r2
 8005380:	333f      	adds	r3, #63	; 0x3f
 8005382:	787a      	ldrb	r2, [r7, #1]
 8005384:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005386:	7c3b      	ldrb	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d112      	bne.n	80053b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3342      	adds	r3, #66	; 0x42
 800539a:	2203      	movs	r2, #3
 800539c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	212c      	movs	r1, #44	; 0x2c
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	4413      	add	r3, r2
 80053aa:	333d      	adds	r3, #61	; 0x3d
 80053ac:	7f3a      	ldrb	r2, [r7, #28]
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	e008      	b.n	80053c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	212c      	movs	r1, #44	; 0x2c
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	4413      	add	r3, r2
 80053be:	3342      	adds	r3, #66	; 0x42
 80053c0:	2202      	movs	r2, #2
 80053c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80053c4:	787b      	ldrb	r3, [r7, #1]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	f200 80c6 	bhi.w	8005558 <HAL_HCD_HC_SubmitRequest+0x210>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	080053e5 	.word	0x080053e5
 80053d8:	08005545 	.word	0x08005545
 80053dc:	08005449 	.word	0x08005449
 80053e0:	080054c7 	.word	0x080054c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80053e4:	7c3b      	ldrb	r3, [r7, #16]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	f040 80b8 	bne.w	800555c <HAL_HCD_HC_SubmitRequest+0x214>
 80053ec:	78bb      	ldrb	r3, [r7, #2]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f040 80b4 	bne.w	800555c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80053f4:	8b3b      	ldrh	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3355      	adds	r3, #85	; 0x55
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	212c      	movs	r1, #44	; 0x2c
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	3355      	adds	r3, #85	; 0x55
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	212c      	movs	r1, #44	; 0x2c
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	4413      	add	r3, r2
 800542c:	3342      	adds	r3, #66	; 0x42
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005432:	e093      	b.n	800555c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	212c      	movs	r1, #44	; 0x2c
 800543a:	fb01 f303 	mul.w	r3, r1, r3
 800543e:	4413      	add	r3, r2
 8005440:	3342      	adds	r3, #66	; 0x42
 8005442:	2202      	movs	r2, #2
 8005444:	701a      	strb	r2, [r3, #0]
      break;
 8005446:	e089      	b.n	800555c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005448:	78bb      	ldrb	r3, [r7, #2]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11d      	bne.n	800548a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	212c      	movs	r1, #44	; 0x2c
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	4413      	add	r3, r2
 800545a:	3355      	adds	r3, #85	; 0x55
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005462:	78fb      	ldrb	r3, [r7, #3]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	212c      	movs	r1, #44	; 0x2c
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	3342      	adds	r3, #66	; 0x42
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005474:	e073      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	3342      	adds	r3, #66	; 0x42
 8005484:	2202      	movs	r2, #2
 8005486:	701a      	strb	r2, [r3, #0]
      break;
 8005488:	e069      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	212c      	movs	r1, #44	; 0x2c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	3354      	adds	r3, #84	; 0x54
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	212c      	movs	r1, #44	; 0x2c
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	4413      	add	r3, r2
 80054aa:	3342      	adds	r3, #66	; 0x42
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
      break;
 80054b0:	e055      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	212c      	movs	r1, #44	; 0x2c
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	4413      	add	r3, r2
 80054be:	3342      	adds	r3, #66	; 0x42
 80054c0:	2202      	movs	r2, #2
 80054c2:	701a      	strb	r2, [r3, #0]
      break;
 80054c4:	e04b      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80054c6:	78bb      	ldrb	r3, [r7, #2]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11d      	bne.n	8005508 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	212c      	movs	r1, #44	; 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3355      	adds	r3, #85	; 0x55
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	212c      	movs	r1, #44	; 0x2c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3342      	adds	r3, #66	; 0x42
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80054f2:	e034      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3342      	adds	r3, #66	; 0x42
 8005502:	2202      	movs	r2, #2
 8005504:	701a      	strb	r2, [r3, #0]
      break;
 8005506:	e02a      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3354      	adds	r3, #84	; 0x54
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	212c      	movs	r1, #44	; 0x2c
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	4413      	add	r3, r2
 8005528:	3342      	adds	r3, #66	; 0x42
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
      break;
 800552e:	e016      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	212c      	movs	r1, #44	; 0x2c
 8005536:	fb01 f303 	mul.w	r3, r1, r3
 800553a:	4413      	add	r3, r2
 800553c:	3342      	adds	r3, #66	; 0x42
 800553e:	2202      	movs	r2, #2
 8005540:	701a      	strb	r2, [r3, #0]
      break;
 8005542:	e00c      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	212c      	movs	r1, #44	; 0x2c
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	4413      	add	r3, r2
 8005550:	3342      	adds	r3, #66	; 0x42
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
      break;
 8005556:	e002      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800555c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	212c      	movs	r1, #44	; 0x2c
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	3344      	adds	r3, #68	; 0x44
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	8b3a      	ldrh	r2, [r7, #24]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	202c      	movs	r0, #44	; 0x2c
 8005578:	fb00 f303 	mul.w	r3, r0, r3
 800557c:	440b      	add	r3, r1
 800557e:	334c      	adds	r3, #76	; 0x4c
 8005580:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	212c      	movs	r1, #44	; 0x2c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	3360      	adds	r3, #96	; 0x60
 8005590:	2200      	movs	r2, #0
 8005592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	212c      	movs	r1, #44	; 0x2c
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	3350      	adds	r3, #80	; 0x50
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	212c      	movs	r1, #44	; 0x2c
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	3339      	adds	r3, #57	; 0x39
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	3361      	adds	r3, #97	; 0x61
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	222c      	movs	r2, #44	; 0x2c
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	3338      	adds	r3, #56	; 0x38
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	18d1      	adds	r1, r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	f008 fea8 	bl	800e338 <USB_HC_StartXfer>
 80055e8:	4603      	mov	r3, r0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop

080055f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f008 fbcd 	bl	800ddaa <USB_GetMode>
 8005610:	4603      	mov	r3, r0
 8005612:	2b01      	cmp	r3, #1
 8005614:	f040 80ef 	bne.w	80057f6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f008 fbb1 	bl	800dd84 <USB_ReadInterrupts>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80e5 	beq.w	80057f4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f008 fba8 	bl	800dd84 <USB_ReadInterrupts>
 8005634:	4603      	mov	r3, r0
 8005636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563e:	d104      	bne.n	800564a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005648:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f008 fb98 	bl	800dd84 <USB_ReadInterrupts>
 8005654:	4603      	mov	r3, r0
 8005656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800565a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565e:	d104      	bne.n	800566a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005668:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f008 fb88 	bl	800dd84 <USB_ReadInterrupts>
 8005674:	4603      	mov	r3, r0
 8005676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800567a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800567e:	d104      	bne.n	800568a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005688:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f008 fb78 	bl	800dd84 <USB_ReadInterrupts>
 8005694:	4603      	mov	r3, r0
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b02      	cmp	r3, #2
 800569c:	d103      	bne.n	80056a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2202      	movs	r2, #2
 80056a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f008 fb6a 	bl	800dd84 <USB_ReadInterrupts>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ba:	d115      	bne.n	80056e8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80056c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d108      	bne.n	80056e8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f012 fb84 	bl	8017de4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2101      	movs	r1, #1
 80056e2:	4618      	mov	r0, r3
 80056e4:	f008 fc54 	bl	800df90 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f008 fb49 	bl	800dd84 <USB_ReadInterrupts>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056fc:	d102      	bne.n	8005704 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 f9ff 	bl	8006b02 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f008 fb3b 	bl	800dd84 <USB_ReadInterrupts>
 800570e:	4603      	mov	r3, r0
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b08      	cmp	r3, #8
 8005716:	d106      	bne.n	8005726 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f012 fb47 	bl	8017dac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2208      	movs	r2, #8
 8005724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f008 fb2a 	bl	800dd84 <USB_ReadInterrupts>
 8005730:	4603      	mov	r3, r0
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b10      	cmp	r3, #16
 8005738:	d101      	bne.n	800573e <HAL_HCD_IRQHandler+0x14a>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <HAL_HCD_IRQHandler+0x14c>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d012      	beq.n	800576a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0210 	bic.w	r2, r2, #16
 8005752:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 f902 	bl	800695e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0210 	orr.w	r2, r2, #16
 8005768:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f008 fb08 	bl	800dd84 <USB_ReadInterrupts>
 8005774:	4603      	mov	r3, r0
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800577e:	d13a      	bne.n	80057f6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f008 ff19 	bl	800e5bc <USB_HC_ReadInterrupt>
 800578a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e025      	b.n	80057de <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d018      	beq.n	80057d8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057bc:	d106      	bne.n	80057cc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f8ab 	bl	8005920 <HCD_HC_IN_IRQHandler>
 80057ca:	e005      	b.n	80057d8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fcc6 	bl	8006164 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3301      	adds	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d3d4      	bcc.n	8005792 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057f0:	615a      	str	r2, [r3, #20]
 80057f2:	e000      	b.n	80057f6 <HAL_HCD_IRQHandler+0x202>
      return;
 80057f4:	bf00      	nop
    }
  }
}
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_HCD_Start+0x16>
 800580e:	2302      	movs	r3, #2
 8005810:	e013      	b.n	800583a <HAL_HCD_Start+0x3e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f008 f9be 	bl	800dba0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2101      	movs	r1, #1
 800582a:	4618      	mov	r0, r3
 800582c:	f008 fc14 	bl	800e058 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_HCD_Stop+0x16>
 8005854:	2302      	movs	r3, #2
 8005856:	e00d      	b.n	8005874 <HAL_HCD_Stop+0x32>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f009 f813 	bl	800e890 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f008 fbbb 	bl	800e004 <USB_ResetPort>
 800588e:	4603      	mov	r3, r0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	212c      	movs	r1, #44	; 0x2c
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	3360      	adds	r3, #96	; 0x60
 80058b2:	781b      	ldrb	r3, [r3, #0]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	212c      	movs	r1, #44	; 0x2c
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	4413      	add	r3, r2
 80058d8:	3350      	adds	r3, #80	; 0x50
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f008 fbff 	bl	800e0f8 <USB_GetCurrentFrame>
 80058fa:	4603      	mov	r3, r0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f008 fbda 	bl	800e0ca <USB_GetHostSpeed>
 8005916:	4603      	mov	r3, r0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d119      	bne.n	8005984 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595c:	461a      	mov	r2, r3
 800595e:	2304      	movs	r3, #4
 8005960:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	440a      	add	r2, r1
 8005978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597c:	f043 0302 	orr.w	r3, r3, #2
 8005980:	60d3      	str	r3, [r2, #12]
 8005982:	e101      	b.n	8005b88 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599a:	d12b      	bne.n	80059f4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a8:	461a      	mov	r2, r3
 80059aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	212c      	movs	r1, #44	; 0x2c
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	4413      	add	r3, r2
 80059bc:	3361      	adds	r3, #97	; 0x61
 80059be:	2207      	movs	r2, #7
 80059c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059dc:	f043 0302 	orr.w	r3, r3, #2
 80059e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f008 fdf6 	bl	800e5de <USB_HC_Halt>
 80059f2:	e0c9      	b.n	8005b88 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d109      	bne.n	8005a1e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	461a      	mov	r2, r3
 8005a18:	2320      	movs	r3, #32
 8005a1a:	6093      	str	r3, [r2, #8]
 8005a1c:	e0b4      	b.n	8005b88 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d133      	bne.n	8005a9c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4e:	f043 0302 	orr.w	r3, r3, #2
 8005a52:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	212c      	movs	r1, #44	; 0x2c
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	4413      	add	r3, r2
 8005a60:	3361      	adds	r3, #97	; 0x61
 8005a62:	2205      	movs	r2, #5
 8005a64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	461a      	mov	r2, r3
 8005a74:	2310      	movs	r3, #16
 8005a76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a84:	461a      	mov	r2, r3
 8005a86:	2308      	movs	r3, #8
 8005a88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f008 fda2 	bl	800e5de <USB_HC_Halt>
 8005a9a:	e075      	b.n	8005b88 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d134      	bne.n	8005b1e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ace:	f043 0302 	orr.w	r3, r3, #2
 8005ad2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	212c      	movs	r1, #44	; 0x2c
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	3361      	adds	r3, #97	; 0x61
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	461a      	mov	r2, r3
 8005af4:	2310      	movs	r3, #16
 8005af6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b04:	461a      	mov	r2, r3
 8005b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b0a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f008 fd61 	bl	800e5de <USB_HC_Halt>
 8005b1c:	e034      	b.n	8005b88 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b80      	cmp	r3, #128	; 0x80
 8005b32:	d129      	bne.n	8005b88 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b4e:	f043 0302 	orr.w	r3, r3, #2
 8005b52:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	212c      	movs	r1, #44	; 0x2c
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	3361      	adds	r3, #97	; 0x61
 8005b62:	2206      	movs	r2, #6
 8005b64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f008 fd34 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	461a      	mov	r2, r3
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9e:	d122      	bne.n	8005be6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bba:	f043 0302 	orr.w	r3, r3, #2
 8005bbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f008 fd07 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005be2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005be4:	e2ba      	b.n	800615c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	f040 811b 	bne.w	8005e34 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d019      	beq.n	8005c3a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	212c      	movs	r1, #44	; 0x2c
 8005c0c:	fb01 f303 	mul.w	r3, r1, r3
 8005c10:	4413      	add	r3, r2
 8005c12:	3348      	adds	r3, #72	; 0x48
 8005c14:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	0159      	lsls	r1, r3, #5
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	440b      	add	r3, r1
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005c28:	1ad2      	subs	r2, r2, r3
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	202c      	movs	r0, #44	; 0x2c
 8005c30:	fb00 f303 	mul.w	r3, r0, r3
 8005c34:	440b      	add	r3, r1
 8005c36:	3350      	adds	r3, #80	; 0x50
 8005c38:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	212c      	movs	r1, #44	; 0x2c
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	4413      	add	r3, r2
 8005c46:	3361      	adds	r3, #97	; 0x61
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	212c      	movs	r1, #44	; 0x2c
 8005c52:	fb01 f303 	mul.w	r3, r1, r3
 8005c56:	4413      	add	r3, r2
 8005c58:	335c      	adds	r3, #92	; 0x5c
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	212c      	movs	r1, #44	; 0x2c
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	333f      	adds	r3, #63	; 0x3f
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	212c      	movs	r1, #44	; 0x2c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	333f      	adds	r3, #63	; 0x3f
 8005c92:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d121      	bne.n	8005cdc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb2:	f043 0302 	orr.w	r3, r3, #2
 8005cb6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f008 fc8b 	bl	800e5de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	6093      	str	r3, [r2, #8]
 8005cda:	e066      	b.n	8005daa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	212c      	movs	r1, #44	; 0x2c
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	333f      	adds	r3, #63	; 0x3f
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d127      	bne.n	8005d40 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d0e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	212c      	movs	r1, #44	; 0x2c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3360      	adds	r3, #96	; 0x60
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	b2d9      	uxtb	r1, r3
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	202c      	movs	r0, #44	; 0x2c
 8005d2c:	fb00 f303 	mul.w	r3, r0, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	3360      	adds	r3, #96	; 0x60
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f012 f861 	bl	8017e00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d3e:	e034      	b.n	8005daa <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	212c      	movs	r1, #44	; 0x2c
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	4413      	add	r3, r2
 8005d4c:	333f      	adds	r3, #63	; 0x3f
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d12a      	bne.n	8005daa <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	212c      	movs	r1, #44	; 0x2c
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	3360      	adds	r3, #96	; 0x60
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	212c      	movs	r1, #44	; 0x2c
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	4413      	add	r3, r2
 8005d72:	3354      	adds	r3, #84	; 0x54
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	f083 0301 	eor.w	r3, r3, #1
 8005d7a:	b2d8      	uxtb	r0, r3
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	212c      	movs	r1, #44	; 0x2c
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	3354      	adds	r3, #84	; 0x54
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	b2d9      	uxtb	r1, r3
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	202c      	movs	r0, #44	; 0x2c
 8005d98:	fb00 f303 	mul.w	r3, r0, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3360      	adds	r3, #96	; 0x60
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f012 f82b 	bl	8017e00 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d12b      	bne.n	8005e0a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	212c      	movs	r1, #44	; 0x2c
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3348      	adds	r3, #72	; 0x48
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	202c      	movs	r0, #44	; 0x2c
 8005dc8:	fb00 f202 	mul.w	r2, r0, r2
 8005dcc:	440a      	add	r2, r1
 8005dce:	3240      	adds	r2, #64	; 0x40
 8005dd0:	8812      	ldrh	r2, [r2, #0]
 8005dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 81be 	beq.w	800615c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	212c      	movs	r1, #44	; 0x2c
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	3354      	adds	r3, #84	; 0x54
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f083 0301 	eor.w	r3, r3, #1
 8005df4:	b2d8      	uxtb	r0, r3
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	212c      	movs	r1, #44	; 0x2c
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	3354      	adds	r3, #84	; 0x54
 8005e04:	4602      	mov	r2, r0
 8005e06:	701a      	strb	r2, [r3, #0]
}
 8005e08:	e1a8      	b.n	800615c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	212c      	movs	r1, #44	; 0x2c
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	4413      	add	r3, r2
 8005e16:	3354      	adds	r3, #84	; 0x54
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	f083 0301 	eor.w	r3, r3, #1
 8005e1e:	b2d8      	uxtb	r0, r3
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	212c      	movs	r1, #44	; 0x2c
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3354      	adds	r3, #84	; 0x54
 8005e2e:	4602      	mov	r2, r0
 8005e30:	701a      	strb	r2, [r3, #0]
}
 8005e32:	e193      	b.n	800615c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	f040 8106 	bne.w	8006058 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e66:	f023 0302 	bic.w	r3, r3, #2
 8005e6a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	212c      	movs	r1, #44	; 0x2c
 8005e72:	fb01 f303 	mul.w	r3, r1, r3
 8005e76:	4413      	add	r3, r2
 8005e78:	3361      	adds	r3, #97	; 0x61
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d109      	bne.n	8005e94 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	212c      	movs	r1, #44	; 0x2c
 8005e86:	fb01 f303 	mul.w	r3, r1, r3
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3360      	adds	r3, #96	; 0x60
 8005e8e:	2201      	movs	r2, #1
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	e0c9      	b.n	8006028 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	212c      	movs	r1, #44	; 0x2c
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3361      	adds	r3, #97	; 0x61
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	d109      	bne.n	8005ebc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	212c      	movs	r1, #44	; 0x2c
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3360      	adds	r3, #96	; 0x60
 8005eb6:	2205      	movs	r2, #5
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	e0b5      	b.n	8006028 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	212c      	movs	r1, #44	; 0x2c
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3361      	adds	r3, #97	; 0x61
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b06      	cmp	r3, #6
 8005ece:	d009      	beq.n	8005ee4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	212c      	movs	r1, #44	; 0x2c
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	3361      	adds	r3, #97	; 0x61
 8005ede:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d150      	bne.n	8005f86 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	212c      	movs	r1, #44	; 0x2c
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	335c      	adds	r3, #92	; 0x5c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	202c      	movs	r0, #44	; 0x2c
 8005efc:	fb00 f303 	mul.w	r3, r0, r3
 8005f00:	440b      	add	r3, r1
 8005f02:	335c      	adds	r3, #92	; 0x5c
 8005f04:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	212c      	movs	r1, #44	; 0x2c
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	4413      	add	r3, r2
 8005f12:	335c      	adds	r3, #92	; 0x5c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d912      	bls.n	8005f40 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	212c      	movs	r1, #44	; 0x2c
 8005f20:	fb01 f303 	mul.w	r3, r1, r3
 8005f24:	4413      	add	r3, r2
 8005f26:	335c      	adds	r3, #92	; 0x5c
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	212c      	movs	r1, #44	; 0x2c
 8005f32:	fb01 f303 	mul.w	r3, r1, r3
 8005f36:	4413      	add	r3, r2
 8005f38:	3360      	adds	r3, #96	; 0x60
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f3e:	e073      	b.n	8006028 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	212c      	movs	r1, #44	; 0x2c
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3360      	adds	r3, #96	; 0x60
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f68:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f70:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f84:	e050      	b.n	8006028 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	212c      	movs	r1, #44	; 0x2c
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	3361      	adds	r3, #97	; 0x61
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d122      	bne.n	8005fe0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	212c      	movs	r1, #44	; 0x2c
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3360      	adds	r3, #96	; 0x60
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fc2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e023      	b.n	8006028 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	212c      	movs	r1, #44	; 0x2c
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	3361      	adds	r3, #97	; 0x61
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b07      	cmp	r3, #7
 8005ff2:	d119      	bne.n	8006028 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	212c      	movs	r1, #44	; 0x2c
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	335c      	adds	r3, #92	; 0x5c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	202c      	movs	r0, #44	; 0x2c
 800600c:	fb00 f303 	mul.w	r3, r0, r3
 8006010:	440b      	add	r3, r1
 8006012:	335c      	adds	r3, #92	; 0x5c
 8006014:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	212c      	movs	r1, #44	; 0x2c
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	4413      	add	r3, r2
 8006022:	3360      	adds	r3, #96	; 0x60
 8006024:	2204      	movs	r2, #4
 8006026:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4413      	add	r3, r2
 8006030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006034:	461a      	mov	r2, r3
 8006036:	2302      	movs	r3, #2
 8006038:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	b2d9      	uxtb	r1, r3
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	202c      	movs	r0, #44	; 0x2c
 8006044:	fb00 f303 	mul.w	r3, r0, r3
 8006048:	4413      	add	r3, r2
 800604a:	3360      	adds	r3, #96	; 0x60
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f011 fed5 	bl	8017e00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006056:	e081      	b.n	800615c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	4413      	add	r3, r2
 8006060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b10      	cmp	r3, #16
 800606c:	d176      	bne.n	800615c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	212c      	movs	r1, #44	; 0x2c
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	4413      	add	r3, r2
 800607a:	333f      	adds	r3, #63	; 0x3f
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d121      	bne.n	80060c6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	212c      	movs	r1, #44	; 0x2c
 8006088:	fb01 f303 	mul.w	r3, r1, r3
 800608c:	4413      	add	r3, r2
 800608e:	335c      	adds	r3, #92	; 0x5c
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ae:	f043 0302 	orr.w	r3, r3, #2
 80060b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f008 fa8d 	bl	800e5de <USB_HC_Halt>
 80060c4:	e041      	b.n	800614a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	212c      	movs	r1, #44	; 0x2c
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	333f      	adds	r3, #63	; 0x3f
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	212c      	movs	r1, #44	; 0x2c
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	4413      	add	r3, r2
 80060e6:	333f      	adds	r3, #63	; 0x3f
 80060e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d12d      	bne.n	800614a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	212c      	movs	r1, #44	; 0x2c
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	335c      	adds	r3, #92	; 0x5c
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d120      	bne.n	800614a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	212c      	movs	r1, #44	; 0x2c
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	4413      	add	r3, r2
 8006114:	3361      	adds	r3, #97	; 0x61
 8006116:	2203      	movs	r2, #3
 8006118:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	440a      	add	r2, r1
 8006130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006134:	f043 0302 	orr.w	r3, r3, #2
 8006138:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f008 fa4a 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	461a      	mov	r2, r3
 8006158:	2310      	movs	r3, #16
 800615a:	6093      	str	r3, [r2, #8]
}
 800615c:	bf00      	nop
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d119      	bne.n	80061c8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	461a      	mov	r2, r3
 80061a2:	2304      	movs	r3, #4
 80061a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80061c6:	e3c6      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d13e      	bne.n	800625c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	461a      	mov	r2, r3
 80061ec:	2320      	movs	r3, #32
 80061ee:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	212c      	movs	r1, #44	; 0x2c
 80061f6:	fb01 f303 	mul.w	r3, r1, r3
 80061fa:	4413      	add	r3, r2
 80061fc:	333d      	adds	r3, #61	; 0x3d
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	f040 83a8 	bne.w	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	212c      	movs	r1, #44	; 0x2c
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	4413      	add	r3, r2
 8006212:	333d      	adds	r3, #61	; 0x3d
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	212c      	movs	r1, #44	; 0x2c
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	3360      	adds	r3, #96	; 0x60
 8006226:	2202      	movs	r2, #2
 8006228:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	440a      	add	r2, r1
 8006240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006244:	f043 0302 	orr.w	r3, r3, #2
 8006248:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f008 f9c2 	bl	800e5de <USB_HC_Halt>
}
 800625a:	e37c      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800626e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006272:	d122      	bne.n	80062ba <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	440a      	add	r2, r1
 800628a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800628e:	f043 0302 	orr.w	r3, r3, #2
 8006292:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	4611      	mov	r1, r2
 800629e:	4618      	mov	r0, r3
 80062a0:	f008 f99d 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	461a      	mov	r2, r3
 80062b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b6:	6093      	str	r3, [r2, #8]
}
 80062b8:	e34d      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d150      	bne.n	8006372 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	212c      	movs	r1, #44	; 0x2c
 80062d6:	fb01 f303 	mul.w	r3, r1, r3
 80062da:	4413      	add	r3, r2
 80062dc:	335c      	adds	r3, #92	; 0x5c
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d111      	bne.n	800631c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	212c      	movs	r1, #44	; 0x2c
 80062fe:	fb01 f303 	mul.w	r3, r1, r3
 8006302:	4413      	add	r3, r2
 8006304:	333d      	adds	r3, #61	; 0x3d
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	461a      	mov	r2, r3
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	440a      	add	r2, r1
 8006332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006336:	f043 0302 	orr.w	r3, r3, #2
 800633a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f008 f949 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	4413      	add	r3, r2
 8006354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006358:	461a      	mov	r2, r3
 800635a:	2301      	movs	r3, #1
 800635c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	212c      	movs	r1, #44	; 0x2c
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	4413      	add	r3, r2
 800636a:	3361      	adds	r3, #97	; 0x61
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
}
 8006370:	e2f1      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d13c      	bne.n	8006402 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	212c      	movs	r1, #44	; 0x2c
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	4413      	add	r3, r2
 8006394:	3361      	adds	r3, #97	; 0x61
 8006396:	2204      	movs	r2, #4
 8006398:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	212c      	movs	r1, #44	; 0x2c
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	4413      	add	r3, r2
 80063a6:	333d      	adds	r3, #61	; 0x3d
 80063a8:	2201      	movs	r2, #1
 80063aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	212c      	movs	r1, #44	; 0x2c
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	4413      	add	r3, r2
 80063b8:	335c      	adds	r3, #92	; 0x5c
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	4611      	mov	r1, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f008 f8f8 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	461a      	mov	r2, r3
 80063fc:	2340      	movs	r3, #64	; 0x40
 80063fe:	6093      	str	r3, [r2, #8]
}
 8006400:	e2a9      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d12a      	bne.n	800646e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	461a      	mov	r2, r3
 8006426:	2308      	movs	r3, #8
 8006428:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	440a      	add	r2, r1
 8006440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006444:	f043 0302 	orr.w	r3, r3, #2
 8006448:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f008 f8c2 	bl	800e5de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	212c      	movs	r1, #44	; 0x2c
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	4413      	add	r3, r2
 8006466:	3361      	adds	r3, #97	; 0x61
 8006468:	2205      	movs	r2, #5
 800646a:	701a      	strb	r2, [r3, #0]
}
 800646c:	e273      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d150      	bne.n	8006526 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	212c      	movs	r1, #44	; 0x2c
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	4413      	add	r3, r2
 8006490:	335c      	adds	r3, #92	; 0x5c
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	212c      	movs	r1, #44	; 0x2c
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	4413      	add	r3, r2
 80064a2:	3361      	adds	r3, #97	; 0x61
 80064a4:	2203      	movs	r2, #3
 80064a6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	212c      	movs	r1, #44	; 0x2c
 80064ae:	fb01 f303 	mul.w	r3, r1, r3
 80064b2:	4413      	add	r3, r2
 80064b4:	333d      	adds	r3, #61	; 0x3d
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d112      	bne.n	80064e2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	212c      	movs	r1, #44	; 0x2c
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	333c      	adds	r3, #60	; 0x3c
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	212c      	movs	r1, #44	; 0x2c
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	4413      	add	r3, r2
 80064dc:	333d      	adds	r3, #61	; 0x3d
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fc:	f043 0302 	orr.w	r3, r3, #2
 8006500:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f008 f866 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	461a      	mov	r2, r3
 8006520:	2310      	movs	r3, #16
 8006522:	6093      	str	r3, [r2, #8]
}
 8006524:	e217      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d174      	bne.n	8006626 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d121      	bne.n	8006588 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	212c      	movs	r1, #44	; 0x2c
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	3361      	adds	r3, #97	; 0x61
 8006552:	2206      	movs	r2, #6
 8006554:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	440a      	add	r2, r1
 800656c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006570:	f043 0302 	orr.w	r3, r3, #2
 8006574:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f008 f82c 	bl	800e5de <USB_HC_Halt>
 8006586:	e044      	b.n	8006612 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	212c      	movs	r1, #44	; 0x2c
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	335c      	adds	r3, #92	; 0x5c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	202c      	movs	r0, #44	; 0x2c
 80065a0:	fb00 f303 	mul.w	r3, r0, r3
 80065a4:	440b      	add	r3, r1
 80065a6:	335c      	adds	r3, #92	; 0x5c
 80065a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	212c      	movs	r1, #44	; 0x2c
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	4413      	add	r3, r2
 80065b6:	335c      	adds	r3, #92	; 0x5c
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d920      	bls.n	8006600 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	212c      	movs	r1, #44	; 0x2c
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	335c      	adds	r3, #92	; 0x5c
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	212c      	movs	r1, #44	; 0x2c
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	4413      	add	r3, r2
 80065dc:	3360      	adds	r3, #96	; 0x60
 80065de:	2204      	movs	r2, #4
 80065e0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	b2d9      	uxtb	r1, r3
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	202c      	movs	r0, #44	; 0x2c
 80065ec:	fb00 f303 	mul.w	r3, r0, r3
 80065f0:	4413      	add	r3, r2
 80065f2:	3360      	adds	r3, #96	; 0x60
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f011 fc01 	bl	8017e00 <HAL_HCD_HC_NotifyURBChange_Callback>
 80065fe:	e008      	b.n	8006612 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	212c      	movs	r1, #44	; 0x2c
 8006606:	fb01 f303 	mul.w	r3, r1, r3
 800660a:	4413      	add	r3, r2
 800660c:	3360      	adds	r3, #96	; 0x60
 800660e:	2202      	movs	r2, #2
 8006610:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	4413      	add	r3, r2
 800661a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661e:	461a      	mov	r2, r3
 8006620:	2380      	movs	r3, #128	; 0x80
 8006622:	6093      	str	r3, [r2, #8]
}
 8006624:	e197      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d134      	bne.n	80066a8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	4413      	add	r3, r2
 8006646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	440a      	add	r2, r1
 8006654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f007 ffb8 	bl	800e5de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	461a      	mov	r2, r3
 800667c:	2310      	movs	r3, #16
 800667e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668c:	461a      	mov	r2, r3
 800668e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006692:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	212c      	movs	r1, #44	; 0x2c
 800669a:	fb01 f303 	mul.w	r3, r1, r3
 800669e:	4413      	add	r3, r2
 80066a0:	3361      	adds	r3, #97	; 0x61
 80066a2:	2208      	movs	r2, #8
 80066a4:	701a      	strb	r2, [r3, #0]
}
 80066a6:	e156      	b.n	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	f040 814b 	bne.w	8006956 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066da:	f023 0302 	bic.w	r3, r3, #2
 80066de:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3361      	adds	r3, #97	; 0x61
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d179      	bne.n	80067e8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	212c      	movs	r1, #44	; 0x2c
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	3360      	adds	r3, #96	; 0x60
 8006702:	2201      	movs	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	212c      	movs	r1, #44	; 0x2c
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	4413      	add	r3, r2
 8006712:	333f      	adds	r3, #63	; 0x3f
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d00a      	beq.n	8006730 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	212c      	movs	r1, #44	; 0x2c
 8006720:	fb01 f303 	mul.w	r3, r1, r3
 8006724:	4413      	add	r3, r2
 8006726:	333f      	adds	r3, #63	; 0x3f
 8006728:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800672a:	2b03      	cmp	r3, #3
 800672c:	f040 80fc 	bne.w	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d142      	bne.n	80067be <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	212c      	movs	r1, #44	; 0x2c
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	4413      	add	r3, r2
 8006744:	334c      	adds	r3, #76	; 0x4c
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80ed 	beq.w	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	212c      	movs	r1, #44	; 0x2c
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	334c      	adds	r3, #76	; 0x4c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	202c      	movs	r0, #44	; 0x2c
 8006764:	fb00 f202 	mul.w	r2, r0, r2
 8006768:	440a      	add	r2, r1
 800676a:	3240      	adds	r2, #64	; 0x40
 800676c:	8812      	ldrh	r2, [r2, #0]
 800676e:	4413      	add	r3, r2
 8006770:	3b01      	subs	r3, #1
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	202c      	movs	r0, #44	; 0x2c
 8006778:	fb00 f202 	mul.w	r2, r0, r2
 800677c:	440a      	add	r2, r1
 800677e:	3240      	adds	r2, #64	; 0x40
 8006780:	8812      	ldrh	r2, [r2, #0]
 8006782:	fbb3 f3f2 	udiv	r3, r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80ca 	beq.w	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	212c      	movs	r1, #44	; 0x2c
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	3355      	adds	r3, #85	; 0x55
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f083 0301 	eor.w	r3, r3, #1
 80067a8:	b2d8      	uxtb	r0, r3
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	212c      	movs	r1, #44	; 0x2c
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4413      	add	r3, r2
 80067b6:	3355      	adds	r3, #85	; 0x55
 80067b8:	4602      	mov	r2, r0
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e0b4      	b.n	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	212c      	movs	r1, #44	; 0x2c
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	3355      	adds	r3, #85	; 0x55
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	f083 0301 	eor.w	r3, r3, #1
 80067d2:	b2d8      	uxtb	r0, r3
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	212c      	movs	r1, #44	; 0x2c
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	4413      	add	r3, r2
 80067e0:	3355      	adds	r3, #85	; 0x55
 80067e2:	4602      	mov	r2, r0
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e09f      	b.n	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	212c      	movs	r1, #44	; 0x2c
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	4413      	add	r3, r2
 80067f4:	3361      	adds	r3, #97	; 0x61
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d109      	bne.n	8006810 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	212c      	movs	r1, #44	; 0x2c
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	3360      	adds	r3, #96	; 0x60
 800680a:	2202      	movs	r2, #2
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e08b      	b.n	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	212c      	movs	r1, #44	; 0x2c
 8006816:	fb01 f303 	mul.w	r3, r1, r3
 800681a:	4413      	add	r3, r2
 800681c:	3361      	adds	r3, #97	; 0x61
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d109      	bne.n	8006838 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	212c      	movs	r1, #44	; 0x2c
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	4413      	add	r3, r2
 8006830:	3360      	adds	r3, #96	; 0x60
 8006832:	2202      	movs	r2, #2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e077      	b.n	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	212c      	movs	r1, #44	; 0x2c
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	4413      	add	r3, r2
 8006844:	3361      	adds	r3, #97	; 0x61
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b05      	cmp	r3, #5
 800684a:	d109      	bne.n	8006860 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	212c      	movs	r1, #44	; 0x2c
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	4413      	add	r3, r2
 8006858:	3360      	adds	r3, #96	; 0x60
 800685a:	2205      	movs	r2, #5
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e063      	b.n	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	212c      	movs	r1, #44	; 0x2c
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	3361      	adds	r3, #97	; 0x61
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b06      	cmp	r3, #6
 8006872:	d009      	beq.n	8006888 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	212c      	movs	r1, #44	; 0x2c
 800687a:	fb01 f303 	mul.w	r3, r1, r3
 800687e:	4413      	add	r3, r2
 8006880:	3361      	adds	r3, #97	; 0x61
 8006882:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006884:	2b08      	cmp	r3, #8
 8006886:	d14f      	bne.n	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	212c      	movs	r1, #44	; 0x2c
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	335c      	adds	r3, #92	; 0x5c
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	202c      	movs	r0, #44	; 0x2c
 80068a0:	fb00 f303 	mul.w	r3, r0, r3
 80068a4:	440b      	add	r3, r1
 80068a6:	335c      	adds	r3, #92	; 0x5c
 80068a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	212c      	movs	r1, #44	; 0x2c
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	4413      	add	r3, r2
 80068b6:	335c      	adds	r3, #92	; 0x5c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d912      	bls.n	80068e4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	212c      	movs	r1, #44	; 0x2c
 80068c4:	fb01 f303 	mul.w	r3, r1, r3
 80068c8:	4413      	add	r3, r2
 80068ca:	335c      	adds	r3, #92	; 0x5c
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	212c      	movs	r1, #44	; 0x2c
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	3360      	adds	r3, #96	; 0x60
 80068de:	2204      	movs	r2, #4
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e021      	b.n	8006928 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	212c      	movs	r1, #44	; 0x2c
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	3360      	adds	r3, #96	; 0x60
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800690c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006914:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	461a      	mov	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	4413      	add	r3, r2
 8006930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006934:	461a      	mov	r2, r3
 8006936:	2302      	movs	r3, #2
 8006938:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	b2d9      	uxtb	r1, r3
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	202c      	movs	r0, #44	; 0x2c
 8006944:	fb00 f303 	mul.w	r3, r0, r3
 8006948:	4413      	add	r3, r2
 800694a:	3360      	adds	r3, #96	; 0x60
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f011 fa55 	bl	8017e00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006956:	bf00      	nop
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08a      	sub	sp, #40	; 0x28
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	0c5b      	lsrs	r3, r3, #17
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	091b      	lsrs	r3, r3, #4
 800698e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006992:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d004      	beq.n	80069a4 <HCD_RXQLVL_IRQHandler+0x46>
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b05      	cmp	r3, #5
 800699e:	f000 80a9 	beq.w	8006af4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80069a2:	e0aa      	b.n	8006afa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 80a6 	beq.w	8006af8 <HCD_RXQLVL_IRQHandler+0x19a>
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	212c      	movs	r1, #44	; 0x2c
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	3344      	adds	r3, #68	; 0x44
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 809b 	beq.w	8006af8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	212c      	movs	r1, #44	; 0x2c
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	3350      	adds	r3, #80	; 0x50
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	441a      	add	r2, r3
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	202c      	movs	r0, #44	; 0x2c
 80069dc:	fb00 f303 	mul.w	r3, r0, r3
 80069e0:	440b      	add	r3, r1
 80069e2:	334c      	adds	r3, #76	; 0x4c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d87a      	bhi.n	8006ae0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	212c      	movs	r1, #44	; 0x2c
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	3344      	adds	r3, #68	; 0x44
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	b292      	uxth	r2, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	f007 f995 	bl	800dd32 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	212c      	movs	r1, #44	; 0x2c
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	4413      	add	r3, r2
 8006a14:	3344      	adds	r3, #68	; 0x44
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	441a      	add	r2, r3
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	202c      	movs	r0, #44	; 0x2c
 8006a22:	fb00 f303 	mul.w	r3, r0, r3
 8006a26:	440b      	add	r3, r1
 8006a28:	3344      	adds	r3, #68	; 0x44
 8006a2a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	212c      	movs	r1, #44	; 0x2c
 8006a32:	fb01 f303 	mul.w	r3, r1, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	3350      	adds	r3, #80	; 0x50
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	441a      	add	r2, r3
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	202c      	movs	r0, #44	; 0x2c
 8006a46:	fb00 f303 	mul.w	r3, r0, r3
 8006a4a:	440b      	add	r3, r1
 8006a4c:	3350      	adds	r3, #80	; 0x50
 8006a4e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	0cdb      	lsrs	r3, r3, #19
 8006a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a64:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	212c      	movs	r1, #44	; 0x2c
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	3340      	adds	r3, #64	; 0x40
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d13c      	bne.n	8006af8 <HCD_RXQLVL_IRQHandler+0x19a>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d039      	beq.n	8006af8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a9a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	212c      	movs	r1, #44	; 0x2c
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3354      	adds	r3, #84	; 0x54
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f083 0301 	eor.w	r3, r3, #1
 8006aca:	b2d8      	uxtb	r0, r3
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	212c      	movs	r1, #44	; 0x2c
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3354      	adds	r3, #84	; 0x54
 8006ada:	4602      	mov	r2, r0
 8006adc:	701a      	strb	r2, [r3, #0]
      break;
 8006ade:	e00b      	b.n	8006af8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	212c      	movs	r1, #44	; 0x2c
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	3360      	adds	r3, #96	; 0x60
 8006aee:	2204      	movs	r2, #4
 8006af0:	701a      	strb	r2, [r3, #0]
      break;
 8006af2:	e001      	b.n	8006af8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006af8:	bf00      	nop
  }
}
 8006afa:	bf00      	nop
 8006afc:	3728      	adds	r7, #40	; 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b2e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d10b      	bne.n	8006b52 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d102      	bne.n	8006b4a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f011 f93f 	bl	8017dc8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f043 0302 	orr.w	r3, r3, #2
 8006b50:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f003 0308 	and.w	r3, r3, #8
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d132      	bne.n	8006bc2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f043 0308 	orr.w	r3, r3, #8
 8006b62:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d126      	bne.n	8006bbc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d113      	bne.n	8006b9e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b80:	d106      	bne.n	8006b90 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2102      	movs	r1, #2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f007 fa01 	bl	800df90 <USB_InitFSLSPClkSel>
 8006b8e:	e011      	b.n	8006bb4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2101      	movs	r1, #1
 8006b96:	4618      	mov	r0, r3
 8006b98:	f007 f9fa 	bl	800df90 <USB_InitFSLSPClkSel>
 8006b9c:	e00a      	b.n	8006bb4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d106      	bne.n	8006bb4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bac:	461a      	mov	r2, r3
 8006bae:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006bb2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f011 f935 	bl	8017e24 <HAL_HCD_PortEnabled_Callback>
 8006bba:	e002      	b.n	8006bc2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f011 f93f 	bl	8017e40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d103      	bne.n	8006bd4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f043 0320 	orr.w	r3, r3, #32
 8006bd2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e07f      	b.n	8006cfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fa fbc2 	bl	8001398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	; 0x24
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d107      	bne.n	8006c62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c5e:	609a      	str	r2, [r3, #8]
 8006c60:	e006      	b.n	8006c70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d104      	bne.n	8006c82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6859      	ldr	r1, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <HAL_I2C_Init+0x11c>)
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ca0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	ea42 0103 	orr.w	r1, r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	021a      	lsls	r2, r3, #8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69d9      	ldr	r1, [r3, #28]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1a      	ldr	r2, [r3, #32]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	02008000 	.word	0x02008000

08006d08 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e021      	b.n	8006d5e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2224      	movs	r2, #36	; 0x24
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fa fba8 	bl	8001488 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	817b      	strh	r3, [r7, #10]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	813b      	strh	r3, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	f040 80f9 	bne.w	8006f82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_I2C_Mem_Write+0x34>
 8006d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d105      	bne.n	8006da8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0ed      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_I2C_Mem_Write+0x4e>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e0e6      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dbe:	f7fc fad7 	bl	8003370 <HAL_GetTick>
 8006dc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2319      	movs	r3, #25
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fac3 	bl	800735c <I2C_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0d1      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2221      	movs	r2, #33	; 0x21
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2240      	movs	r2, #64	; 0x40
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e08:	88f8      	ldrh	r0, [r7, #6]
 8006e0a:	893a      	ldrh	r2, [r7, #8]
 8006e0c:	8979      	ldrh	r1, [r7, #10]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4603      	mov	r3, r0
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f9d3 	bl	80071c4 <I2C_RequestMemoryWrite>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0a9      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2bff      	cmp	r3, #255	; 0xff
 8006e38:	d90e      	bls.n	8006e58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	22ff      	movs	r2, #255	; 0xff
 8006e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	8979      	ldrh	r1, [r7, #10]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fba5 	bl	80075a0 <I2C_TransferConfig>
 8006e56:	e00f      	b.n	8006e78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	8979      	ldrh	r1, [r7, #10]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fb94 	bl	80075a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 faad 	bl	80073dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e07b      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d034      	beq.n	8006f30 <HAL_I2C_Mem_Write+0x1c8>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d130      	bne.n	8006f30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2180      	movs	r1, #128	; 0x80
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fa3f 	bl	800735c <I2C_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e04d      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2bff      	cmp	r3, #255	; 0xff
 8006ef0:	d90e      	bls.n	8006f10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	8979      	ldrh	r1, [r7, #10]
 8006f00:	2300      	movs	r3, #0
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fb49 	bl	80075a0 <I2C_TransferConfig>
 8006f0e:	e00f      	b.n	8006f30 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	8979      	ldrh	r1, [r7, #10]
 8006f22:	2300      	movs	r3, #0
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fb38 	bl	80075a0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d19e      	bne.n	8006e78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fa8c 	bl	800745c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e01a      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2220      	movs	r2, #32
 8006f54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4b0a      	ldr	r3, [pc, #40]	; (8006f8c <HAL_I2C_Mem_Write+0x224>)
 8006f62:	400b      	ands	r3, r1
 8006f64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e000      	b.n	8006f84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006f82:	2302      	movs	r3, #2
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	fe00e800 	.word	0xfe00e800

08006f90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	4608      	mov	r0, r1
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	817b      	strh	r3, [r7, #10]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	813b      	strh	r3, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	f040 80fd 	bne.w	80071b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_I2C_Mem_Read+0x34>
 8006fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0f1      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_I2C_Mem_Read+0x4e>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e0ea      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fe6:	f7fc f9c3 	bl	8003370 <HAL_GetTick>
 8006fea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2319      	movs	r3, #25
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f9af 	bl	800735c <I2C_WaitOnFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0d5      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2222      	movs	r2, #34	; 0x22
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2240      	movs	r2, #64	; 0x40
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a3a      	ldr	r2, [r7, #32]
 8007022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007030:	88f8      	ldrh	r0, [r7, #6]
 8007032:	893a      	ldrh	r2, [r7, #8]
 8007034:	8979      	ldrh	r1, [r7, #10]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4603      	mov	r3, r0
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f913 	bl	800726c <I2C_RequestMemoryRead>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0ad      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	2bff      	cmp	r3, #255	; 0xff
 8007060:	d90e      	bls.n	8007080 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	22ff      	movs	r2, #255	; 0xff
 8007066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706c:	b2da      	uxtb	r2, r3
 800706e:	8979      	ldrh	r1, [r7, #10]
 8007070:	4b52      	ldr	r3, [pc, #328]	; (80071bc <HAL_I2C_Mem_Read+0x22c>)
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fa91 	bl	80075a0 <I2C_TransferConfig>
 800707e:	e00f      	b.n	80070a0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708e:	b2da      	uxtb	r2, r3
 8007090:	8979      	ldrh	r1, [r7, #10]
 8007092:	4b4a      	ldr	r3, [pc, #296]	; (80071bc <HAL_I2C_Mem_Read+0x22c>)
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fa80 	bl	80075a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	2200      	movs	r2, #0
 80070a8:	2104      	movs	r1, #4
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f956 	bl	800735c <I2C_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e07c      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d034      	beq.n	8007160 <HAL_I2C_Mem_Read+0x1d0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d130      	bne.n	8007160 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	2200      	movs	r2, #0
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f927 	bl	800735c <I2C_WaitOnFlagUntilTimeout>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e04d      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711c:	b29b      	uxth	r3, r3
 800711e:	2bff      	cmp	r3, #255	; 0xff
 8007120:	d90e      	bls.n	8007140 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	22ff      	movs	r2, #255	; 0xff
 8007126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	b2da      	uxtb	r2, r3
 800712e:	8979      	ldrh	r1, [r7, #10]
 8007130:	2300      	movs	r3, #0
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fa31 	bl	80075a0 <I2C_TransferConfig>
 800713e:	e00f      	b.n	8007160 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714e:	b2da      	uxtb	r2, r3
 8007150:	8979      	ldrh	r1, [r7, #10]
 8007152:	2300      	movs	r3, #0
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fa20 	bl	80075a0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d19a      	bne.n	80070a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f974 	bl	800745c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e01a      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2220      	movs	r2, #32
 8007184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <HAL_I2C_Mem_Read+0x230>)
 8007192:	400b      	ands	r3, r1
 8007194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e000      	b.n	80071b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80071b2:	2302      	movs	r3, #2
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	80002400 	.word	0x80002400
 80071c0:	fe00e800 	.word	0xfe00e800

080071c4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	817b      	strh	r3, [r7, #10]
 80071d6:	460b      	mov	r3, r1
 80071d8:	813b      	strh	r3, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	8979      	ldrh	r1, [r7, #10]
 80071e4:	4b20      	ldr	r3, [pc, #128]	; (8007268 <I2C_RequestMemoryWrite+0xa4>)
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f9d7 	bl	80075a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	69b9      	ldr	r1, [r7, #24]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f8f0 	bl	80073dc <I2C_WaitOnTXISFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e02c      	b.n	8007260 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d105      	bne.n	8007218 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800720c:	893b      	ldrh	r3, [r7, #8]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	629a      	str	r2, [r3, #40]	; 0x28
 8007216:	e015      	b.n	8007244 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007218:	893b      	ldrh	r3, [r7, #8]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b29b      	uxth	r3, r3
 800721e:	b2da      	uxtb	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	69b9      	ldr	r1, [r7, #24]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f8d6 	bl	80073dc <I2C_WaitOnTXISFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e012      	b.n	8007260 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800723a:	893b      	ldrh	r3, [r7, #8]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2200      	movs	r2, #0
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f884 	bl	800735c <I2C_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	80002000 	.word	0x80002000

0800726c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af02      	add	r7, sp, #8
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	461a      	mov	r2, r3
 800727a:	4603      	mov	r3, r0
 800727c:	817b      	strh	r3, [r7, #10]
 800727e:	460b      	mov	r3, r1
 8007280:	813b      	strh	r3, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	8979      	ldrh	r1, [r7, #10]
 800728c:	4b20      	ldr	r3, [pc, #128]	; (8007310 <I2C_RequestMemoryRead+0xa4>)
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	2300      	movs	r3, #0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f984 	bl	80075a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	69b9      	ldr	r1, [r7, #24]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f89d 	bl	80073dc <I2C_WaitOnTXISFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e02c      	b.n	8007306 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d105      	bne.n	80072be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072b2:	893b      	ldrh	r3, [r7, #8]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28
 80072bc:	e015      	b.n	80072ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072be:	893b      	ldrh	r3, [r7, #8]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	69b9      	ldr	r1, [r7, #24]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f883 	bl	80073dc <I2C_WaitOnTXISFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e012      	b.n	8007306 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2140      	movs	r1, #64	; 0x40
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f831 	bl	800735c <I2C_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	80002000 	.word	0x80002000

08007314 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d103      	bne.n	8007332 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2200      	movs	r2, #0
 8007330:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b01      	cmp	r3, #1
 800733e:	d007      	beq.n	8007350 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	619a      	str	r2, [r3, #24]
  }
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	603b      	str	r3, [r7, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800736c:	e022      	b.n	80073b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d01e      	beq.n	80073b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007376:	f7fb fffb 	bl	8003370 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d302      	bcc.n	800738c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d113      	bne.n	80073b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007390:	f043 0220 	orr.w	r2, r3, #32
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e00f      	b.n	80073d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4013      	ands	r3, r2
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	bf0c      	ite	eq
 80073c4:	2301      	moveq	r3, #1
 80073c6:	2300      	movne	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d0cd      	beq.n	800736e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073e8:	e02c      	b.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f870 	bl	80074d4 <I2C_IsAcknowledgeFailed>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e02a      	b.n	8007454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d01e      	beq.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007406:	f7fb ffb3 	bl	8003370 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	429a      	cmp	r2, r3
 8007414:	d302      	bcc.n	800741c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d113      	bne.n	8007444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007420:	f043 0220 	orr.w	r2, r3, #32
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e007      	b.n	8007454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b02      	cmp	r3, #2
 8007450:	d1cb      	bne.n	80073ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007468:	e028      	b.n	80074bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f830 	bl	80074d4 <I2C_IsAcknowledgeFailed>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e026      	b.n	80074cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747e:	f7fb ff77 	bl	8003370 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	429a      	cmp	r2, r3
 800748c:	d302      	bcc.n	8007494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d113      	bne.n	80074bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007498:	f043 0220 	orr.w	r2, r3, #32
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e007      	b.n	80074cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d1cf      	bne.n	800746a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d151      	bne.n	8007592 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074ee:	e022      	b.n	8007536 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d01e      	beq.n	8007536 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f8:	f7fb ff3a 	bl	8003370 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	429a      	cmp	r2, r3
 8007506:	d302      	bcc.n	800750e <I2C_IsAcknowledgeFailed+0x3a>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d113      	bne.n	8007536 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e02e      	b.n	8007594 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b20      	cmp	r3, #32
 8007542:	d1d5      	bne.n	80074f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2210      	movs	r2, #16
 800754a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2220      	movs	r2, #32
 8007552:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f7ff fedd 	bl	8007314 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6859      	ldr	r1, [r3, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	4b0d      	ldr	r3, [pc, #52]	; (800759c <I2C_IsAcknowledgeFailed+0xc8>)
 8007566:	400b      	ands	r3, r1
 8007568:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756e:	f043 0204 	orr.w	r2, r3, #4
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	fe00e800 	.word	0xfe00e800

080075a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	607b      	str	r3, [r7, #4]
 80075aa:	460b      	mov	r3, r1
 80075ac:	817b      	strh	r3, [r7, #10]
 80075ae:	4613      	mov	r3, r2
 80075b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	0d5b      	lsrs	r3, r3, #21
 80075bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <I2C_TransferConfig+0x58>)
 80075c2:	430b      	orrs	r3, r1
 80075c4:	43db      	mvns	r3, r3
 80075c6:	ea02 0103 	and.w	r1, r2, r3
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075d0:	7a7b      	ldrb	r3, [r7, #9]
 80075d2:	041b      	lsls	r3, r3, #16
 80075d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	431a      	orrs	r2, r3
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	03ff63ff 	.word	0x03ff63ff

080075fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b20      	cmp	r3, #32
 8007610:	d138      	bne.n	8007684 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800761c:	2302      	movs	r3, #2
 800761e:	e032      	b.n	8007686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2224      	movs	r2, #36	; 0x24
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800764e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6819      	ldr	r1, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	e000      	b.n	8007686 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007684:	2302      	movs	r3, #2
  }
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b20      	cmp	r3, #32
 80076a6:	d139      	bne.n	800771c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e033      	b.n	800771e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2224      	movs	r2, #36	; 0x24
 80076c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0201 	bic.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	e000      	b.n	800771e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800771c:	2302      	movs	r3, #2
  }
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e0bf      	b.n	80078be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7f9 ff56 	bl	8001604 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800776e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6999      	ldr	r1, [r3, #24]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007784:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6899      	ldr	r1, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b4a      	ldr	r3, [pc, #296]	; (80078c8 <HAL_LTDC_Init+0x19c>)
 80077a0:	400b      	ands	r3, r1
 80077a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	041b      	lsls	r3, r3, #16
 80077aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6899      	ldr	r1, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699a      	ldr	r2, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68d9      	ldr	r1, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4b3e      	ldr	r3, [pc, #248]	; (80078c8 <HAL_LTDC_Init+0x19c>)
 80077ce:	400b      	ands	r3, r1
 80077d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68d9      	ldr	r1, [r3, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1a      	ldr	r2, [r3, #32]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6919      	ldr	r1, [r3, #16]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4b33      	ldr	r3, [pc, #204]	; (80078c8 <HAL_LTDC_Init+0x19c>)
 80077fc:	400b      	ands	r3, r1
 80077fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	041b      	lsls	r3, r3, #16
 8007806:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6919      	ldr	r1, [r3, #16]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6959      	ldr	r1, [r3, #20]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	4b27      	ldr	r3, [pc, #156]	; (80078c8 <HAL_LTDC_Init+0x19c>)
 800782a:	400b      	ands	r3, r1
 800782c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	041b      	lsls	r3, r3, #16
 8007834:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6959      	ldr	r1, [r3, #20]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800786e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0206 	orr.w	r2, r2, #6
 800789a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	f000f800 	.word	0xf000f800

080078cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d023      	beq.n	8007936 <HAL_LTDC_IRQHandler+0x6a>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01e      	beq.n	8007936 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0204 	bic.w	r2, r2, #4
 8007906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2204      	movs	r2, #4
 800790e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007916:	f043 0201 	orr.w	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2204      	movs	r2, #4
 8007924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f86f 	bl	8007a14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d023      	beq.n	8007988 <HAL_LTDC_IRQHandler+0xbc>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01e      	beq.n	8007988 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0202 	bic.w	r2, r2, #2
 8007958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2202      	movs	r2, #2
 8007960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007968:	f043 0202 	orr.w	r2, r3, #2
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2204      	movs	r2, #4
 8007976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f846 	bl	8007a14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01b      	beq.n	80079ca <HAL_LTDC_IRQHandler+0xfe>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d016      	beq.n	80079ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2201      	movs	r2, #1
 80079b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f010 f907 	bl	8017bd8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01b      	beq.n	8007a0c <HAL_LTDC_IRQHandler+0x140>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 0308 	and.w	r3, r3, #8
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d016      	beq.n	8007a0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0208 	bic.w	r2, r2, #8
 80079ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2208      	movs	r2, #8
 80079f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f80e 	bl	8007a28 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a3c:	b5b0      	push	{r4, r5, r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_LTDC_ConfigLayer+0x1a>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e02c      	b.n	8007ab0 <HAL_LTDC_ConfigLayer+0x74>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2134      	movs	r1, #52	; 0x34
 8007a6c:	fb01 f303 	mul.w	r3, r1, r3
 8007a70:	4413      	add	r3, r2
 8007a72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4614      	mov	r4, r2
 8007a7a:	461d      	mov	r5, r3
 8007a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f849 	bl	8007b28 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bdb0      	pop	{r4, r5, r7, pc}

08007ab8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_LTDC_ProgramLineEvent+0x18>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e023      	b.n	8007b18 <HAL_LTDC_ProgramLineEvent+0x60>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007af0:	4a0c      	ldr	r2, [pc, #48]	; (8007b24 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0201 	orr.w	r2, r2, #1
 8007b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	40016800 	.word	0x40016800

08007b28 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b089      	sub	sp, #36	; 0x24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	0c1b      	lsrs	r3, r3, #16
 8007b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b44:	4413      	add	r3, r2
 8007b46:	041b      	lsls	r3, r3, #16
 8007b48:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	01db      	lsls	r3, r3, #7
 8007b54:	4413      	add	r3, r2
 8007b56:	3384      	adds	r3, #132	; 0x84
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	01d2      	lsls	r2, r2, #7
 8007b64:	440a      	add	r2, r1
 8007b66:	3284      	adds	r2, #132	; 0x84
 8007b68:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007b6c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b7e:	4413      	add	r3, r2
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4619      	mov	r1, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	01db      	lsls	r3, r3, #7
 8007b8c:	440b      	add	r3, r1
 8007b8e:	3384      	adds	r3, #132	; 0x84
 8007b90:	4619      	mov	r1, r3
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ba6:	4413      	add	r3, r2
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	01db      	lsls	r3, r3, #7
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3384      	adds	r3, #132	; 0x84
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	01d2      	lsls	r2, r2, #7
 8007bc6:	440a      	add	r2, r1
 8007bc8:	3284      	adds	r2, #132	; 0x84
 8007bca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007bce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bde:	4413      	add	r3, r2
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4619      	mov	r1, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	01db      	lsls	r3, r3, #7
 8007bec:	440b      	add	r3, r1
 8007bee:	3384      	adds	r3, #132	; 0x84
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	01db      	lsls	r3, r3, #7
 8007c02:	4413      	add	r3, r2
 8007c04:	3384      	adds	r3, #132	; 0x84
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	01d2      	lsls	r2, r2, #7
 8007c12:	440a      	add	r2, r1
 8007c14:	3284      	adds	r2, #132	; 0x84
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	01db      	lsls	r3, r3, #7
 8007c26:	4413      	add	r3, r2
 8007c28:	3384      	adds	r3, #132	; 0x84
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	01db      	lsls	r3, r3, #7
 8007c58:	4413      	add	r3, r2
 8007c5a:	3384      	adds	r3, #132	; 0x84
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	01db      	lsls	r3, r3, #7
 8007c68:	4413      	add	r3, r2
 8007c6a:	3384      	adds	r3, #132	; 0x84
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c78:	461a      	mov	r2, r3
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4619      	mov	r1, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	01db      	lsls	r3, r3, #7
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3384      	adds	r3, #132	; 0x84
 8007c90:	4619      	mov	r1, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	01db      	lsls	r3, r3, #7
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3384      	adds	r3, #132	; 0x84
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	4611      	mov	r1, r2
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	01d2      	lsls	r2, r2, #7
 8007cb2:	440a      	add	r2, r1
 8007cb4:	3284      	adds	r2, #132	; 0x84
 8007cb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	01db      	lsls	r3, r3, #7
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3384      	adds	r3, #132	; 0x84
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	01db      	lsls	r3, r3, #7
 8007cdc:	4413      	add	r3, r2
 8007cde:	3384      	adds	r3, #132	; 0x84
 8007ce0:	69da      	ldr	r2, [r3, #28]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	01db      	lsls	r3, r3, #7
 8007cec:	440b      	add	r3, r1
 8007cee:	3384      	adds	r3, #132	; 0x84
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4b58      	ldr	r3, [pc, #352]	; (8007e54 <LTDC_SetConfig+0x32c>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	69da      	ldr	r2, [r3, #28]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	68f9      	ldr	r1, [r7, #12]
 8007d02:	6809      	ldr	r1, [r1, #0]
 8007d04:	4608      	mov	r0, r1
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	01c9      	lsls	r1, r1, #7
 8007d0a:	4401      	add	r1, r0
 8007d0c:	3184      	adds	r1, #132	; 0x84
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	01db      	lsls	r3, r3, #7
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3384      	adds	r3, #132	; 0x84
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	01db      	lsls	r3, r3, #7
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3384      	adds	r3, #132	; 0x84
 8007d30:	461a      	mov	r2, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	01db      	lsls	r3, r3, #7
 8007d40:	4413      	add	r3, r2
 8007d42:	3384      	adds	r3, #132	; 0x84
 8007d44:	461a      	mov	r2, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007d54:	2304      	movs	r3, #4
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	e01b      	b.n	8007d92 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d102      	bne.n	8007d68 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007d62:	2303      	movs	r3, #3
 8007d64:	61fb      	str	r3, [r7, #28]
 8007d66:	e014      	b.n	8007d92 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d00b      	beq.n	8007d88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d007      	beq.n	8007d88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d003      	beq.n	8007d88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	d102      	bne.n	8007d8e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	e001      	b.n	8007d92 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	01db      	lsls	r3, r3, #7
 8007d9c:	4413      	add	r3, r2
 8007d9e:	3384      	adds	r3, #132	; 0x84
 8007da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	6812      	ldr	r2, [r2, #0]
 8007da6:	4611      	mov	r1, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	01d2      	lsls	r2, r2, #7
 8007dac:	440a      	add	r2, r1
 8007dae:	3284      	adds	r2, #132	; 0x84
 8007db0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007db4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	fb02 f303 	mul.w	r3, r2, r3
 8007dc0:	041a      	lsls	r2, r3, #16
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	6859      	ldr	r1, [r3, #4]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	1acb      	subs	r3, r1, r3
 8007dcc:	69f9      	ldr	r1, [r7, #28]
 8007dce:	fb01 f303 	mul.w	r3, r1, r3
 8007dd2:	3303      	adds	r3, #3
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	6809      	ldr	r1, [r1, #0]
 8007dd8:	4608      	mov	r0, r1
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	01c9      	lsls	r1, r1, #7
 8007dde:	4401      	add	r1, r0
 8007de0:	3184      	adds	r1, #132	; 0x84
 8007de2:	4313      	orrs	r3, r2
 8007de4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	01db      	lsls	r3, r3, #7
 8007df0:	4413      	add	r3, r2
 8007df2:	3384      	adds	r3, #132	; 0x84
 8007df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	01db      	lsls	r3, r3, #7
 8007e00:	440b      	add	r3, r1
 8007e02:	3384      	adds	r3, #132	; 0x84
 8007e04:	4619      	mov	r1, r3
 8007e06:	4b14      	ldr	r3, [pc, #80]	; (8007e58 <LTDC_SetConfig+0x330>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	01db      	lsls	r3, r3, #7
 8007e16:	4413      	add	r3, r2
 8007e18:	3384      	adds	r3, #132	; 0x84
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	01db      	lsls	r3, r3, #7
 8007e2c:	4413      	add	r3, r2
 8007e2e:	3384      	adds	r3, #132	; 0x84
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	6812      	ldr	r2, [r2, #0]
 8007e36:	4611      	mov	r1, r2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	01d2      	lsls	r2, r2, #7
 8007e3c:	440a      	add	r2, r1
 8007e3e:	3284      	adds	r2, #132	; 0x84
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	6013      	str	r3, [r2, #0]
}
 8007e46:	bf00      	nop
 8007e48:	3724      	adds	r7, #36	; 0x24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	fffff8f8 	.word	0xfffff8f8
 8007e58:	fffff800 	.word	0xfffff800

08007e5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e6a:	6013      	str	r3, [r2, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40007000 	.word	0x40007000

08007e7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007e86:	4b23      	ldr	r3, [pc, #140]	; (8007f14 <HAL_PWREx_EnableOverDrive+0x98>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	4a22      	ldr	r2, [pc, #136]	; (8007f14 <HAL_PWREx_EnableOverDrive+0x98>)
 8007e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e90:	6413      	str	r3, [r2, #64]	; 0x40
 8007e92:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <HAL_PWREx_EnableOverDrive+0x98>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	; (8007f18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1d      	ldr	r2, [pc, #116]	; (8007f18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007eaa:	f7fb fa61 	bl	8003370 <HAL_GetTick>
 8007eae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007eb0:	e009      	b.n	8007ec6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007eb2:	f7fb fa5d 	bl	8003370 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ec0:	d901      	bls.n	8007ec6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e022      	b.n	8007f0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed2:	d1ee      	bne.n	8007eb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ede:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ee0:	f7fb fa46 	bl	8003370 <HAL_GetTick>
 8007ee4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ee6:	e009      	b.n	8007efc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ee8:	f7fb fa42 	bl	8003370 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ef6:	d901      	bls.n	8007efc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e007      	b.n	8007f0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f08:	d1ee      	bne.n	8007ee8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40023800 	.word	0x40023800
 8007f18:	40007000 	.word	0x40007000

08007f1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007f24:	f7fb fa24 	bl	8003370 <HAL_GetTick>
 8007f28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e067      	b.n	8008004 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10b      	bne.n	8007f58 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7f9 fd67 	bl	8001a1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007f4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f85e 	bl	8008014 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	021a      	lsls	r2, r3, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2120      	movs	r1, #32
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f856 	bl	8008030 <QSPI_WaitFlagStateUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d135      	bne.n	8007ffa <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4b1d      	ldr	r3, [pc, #116]	; (800800c <HAL_QSPI_Init+0xf0>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6852      	ldr	r2, [r2, #4]
 8007f9c:	0611      	lsls	r1, r2, #24
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	68d2      	ldr	r2, [r2, #12]
 8007fa2:	4311      	orrs	r1, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	69d2      	ldr	r2, [r2, #28]
 8007fa8:	4311      	orrs	r1, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6a12      	ldr	r2, [r2, #32]
 8007fae:	4311      	orrs	r1, r2
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	4b14      	ldr	r3, [pc, #80]	; (8008010 <HAL_QSPI_Init+0xf4>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6912      	ldr	r2, [r2, #16]
 8007fc6:	0411      	lsls	r1, r2, #16
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6952      	ldr	r2, [r2, #20]
 8007fcc:	4311      	orrs	r1, r2
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6992      	ldr	r2, [r2, #24]
 8007fd2:	4311      	orrs	r1, r2
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008002:	7afb      	ldrb	r3, [r7, #11]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	00ffff2f 	.word	0x00ffff2f
 8008010:	ffe0f8fe 	.word	0xffe0f8fe

08008014 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008040:	e01a      	b.n	8008078 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d016      	beq.n	8008078 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804a:	f7fb f991 	bl	8003370 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	429a      	cmp	r2, r3
 8008058:	d302      	bcc.n	8008060 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10b      	bne.n	8008078 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2204      	movs	r2, #4
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	f043 0201 	orr.w	r2, r3, #1
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e00e      	b.n	8008096 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	bf14      	ite	ne
 8008086:	2301      	movne	r3, #1
 8008088:	2300      	moveq	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	429a      	cmp	r2, r3
 8008092:	d1d6      	bne.n	8008042 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80080a8:	2300      	movs	r3, #0
 80080aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e291      	b.n	80085da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8087 	beq.w	80081d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080c4:	4b96      	ldr	r3, [pc, #600]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 030c 	and.w	r3, r3, #12
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d00c      	beq.n	80080ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080d0:	4b93      	ldr	r3, [pc, #588]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 030c 	and.w	r3, r3, #12
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d112      	bne.n	8008102 <HAL_RCC_OscConfig+0x62>
 80080dc:	4b90      	ldr	r3, [pc, #576]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080e8:	d10b      	bne.n	8008102 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ea:	4b8d      	ldr	r3, [pc, #564]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d06c      	beq.n	80081d0 <HAL_RCC_OscConfig+0x130>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d168      	bne.n	80081d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e26b      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800810a:	d106      	bne.n	800811a <HAL_RCC_OscConfig+0x7a>
 800810c:	4b84      	ldr	r3, [pc, #528]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a83      	ldr	r2, [pc, #524]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	e02e      	b.n	8008178 <HAL_RCC_OscConfig+0xd8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10c      	bne.n	800813c <HAL_RCC_OscConfig+0x9c>
 8008122:	4b7f      	ldr	r3, [pc, #508]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a7e      	ldr	r2, [pc, #504]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4b7c      	ldr	r3, [pc, #496]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a7b      	ldr	r2, [pc, #492]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	e01d      	b.n	8008178 <HAL_RCC_OscConfig+0xd8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008144:	d10c      	bne.n	8008160 <HAL_RCC_OscConfig+0xc0>
 8008146:	4b76      	ldr	r3, [pc, #472]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a75      	ldr	r2, [pc, #468]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800814c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	4b73      	ldr	r3, [pc, #460]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a72      	ldr	r2, [pc, #456]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	e00b      	b.n	8008178 <HAL_RCC_OscConfig+0xd8>
 8008160:	4b6f      	ldr	r3, [pc, #444]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a6e      	ldr	r2, [pc, #440]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	4b6c      	ldr	r3, [pc, #432]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a6b      	ldr	r2, [pc, #428]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d013      	beq.n	80081a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008180:	f7fb f8f6 	bl	8003370 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008188:	f7fb f8f2 	bl	8003370 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b64      	cmp	r3, #100	; 0x64
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e21f      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800819a:	4b61      	ldr	r3, [pc, #388]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f0      	beq.n	8008188 <HAL_RCC_OscConfig+0xe8>
 80081a6:	e014      	b.n	80081d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a8:	f7fb f8e2 	bl	8003370 <HAL_GetTick>
 80081ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081ae:	e008      	b.n	80081c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081b0:	f7fb f8de 	bl	8003370 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b64      	cmp	r3, #100	; 0x64
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e20b      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081c2:	4b57      	ldr	r3, [pc, #348]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f0      	bne.n	80081b0 <HAL_RCC_OscConfig+0x110>
 80081ce:	e000      	b.n	80081d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d069      	beq.n	80082b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80081de:	4b50      	ldr	r3, [pc, #320]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 030c 	and.w	r3, r3, #12
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ea:	4b4d      	ldr	r3, [pc, #308]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 030c 	and.w	r3, r3, #12
 80081f2:	2b08      	cmp	r3, #8
 80081f4:	d11c      	bne.n	8008230 <HAL_RCC_OscConfig+0x190>
 80081f6:	4b4a      	ldr	r3, [pc, #296]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d116      	bne.n	8008230 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008202:	4b47      	ldr	r3, [pc, #284]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <HAL_RCC_OscConfig+0x17a>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d001      	beq.n	800821a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e1df      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800821a:	4b41      	ldr	r3, [pc, #260]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	493d      	ldr	r1, [pc, #244]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800822a:	4313      	orrs	r3, r2
 800822c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800822e:	e040      	b.n	80082b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d023      	beq.n	8008280 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008238:	4b39      	ldr	r3, [pc, #228]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a38      	ldr	r2, [pc, #224]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008244:	f7fb f894 	bl	8003370 <HAL_GetTick>
 8008248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800824c:	f7fb f890 	bl	8003370 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e1bd      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825e:	4b30      	ldr	r3, [pc, #192]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800826a:	4b2d      	ldr	r3, [pc, #180]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	4929      	ldr	r1, [pc, #164]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 800827a:	4313      	orrs	r3, r2
 800827c:	600b      	str	r3, [r1, #0]
 800827e:	e018      	b.n	80082b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008280:	4b27      	ldr	r3, [pc, #156]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a26      	ldr	r2, [pc, #152]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800828c:	f7fb f870 	bl	8003370 <HAL_GetTick>
 8008290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008294:	f7fb f86c 	bl	8003370 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e199      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082a6:	4b1e      	ldr	r3, [pc, #120]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1f0      	bne.n	8008294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0308 	and.w	r3, r3, #8
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d038      	beq.n	8008330 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d019      	beq.n	80082fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082c6:	4b16      	ldr	r3, [pc, #88]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80082c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ca:	4a15      	ldr	r2, [pc, #84]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80082cc:	f043 0301 	orr.w	r3, r3, #1
 80082d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d2:	f7fb f84d 	bl	8003370 <HAL_GetTick>
 80082d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082d8:	e008      	b.n	80082ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082da:	f7fb f849 	bl	8003370 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e176      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ec:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80082ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0f0      	beq.n	80082da <HAL_RCC_OscConfig+0x23a>
 80082f8:	e01a      	b.n	8008330 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 80082fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fe:	4a08      	ldr	r2, [pc, #32]	; (8008320 <HAL_RCC_OscConfig+0x280>)
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008306:	f7fb f833 	bl	8003370 <HAL_GetTick>
 800830a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800830c:	e00a      	b.n	8008324 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800830e:	f7fb f82f 	bl	8003370 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d903      	bls.n	8008324 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e15c      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
 8008320:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008324:	4b91      	ldr	r3, [pc, #580]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1ee      	bne.n	800830e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 80a4 	beq.w	8008486 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800833e:	4b8b      	ldr	r3, [pc, #556]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10d      	bne.n	8008366 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800834a:	4b88      	ldr	r3, [pc, #544]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	4a87      	ldr	r2, [pc, #540]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008354:	6413      	str	r3, [r2, #64]	; 0x40
 8008356:	4b85      	ldr	r3, [pc, #532]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800835e:	60bb      	str	r3, [r7, #8]
 8008360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008362:	2301      	movs	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008366:	4b82      	ldr	r3, [pc, #520]	; (8008570 <HAL_RCC_OscConfig+0x4d0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836e:	2b00      	cmp	r3, #0
 8008370:	d118      	bne.n	80083a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008372:	4b7f      	ldr	r3, [pc, #508]	; (8008570 <HAL_RCC_OscConfig+0x4d0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a7e      	ldr	r2, [pc, #504]	; (8008570 <HAL_RCC_OscConfig+0x4d0>)
 8008378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800837c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800837e:	f7fa fff7 	bl	8003370 <HAL_GetTick>
 8008382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008386:	f7fa fff3 	bl	8003370 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b64      	cmp	r3, #100	; 0x64
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e120      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008398:	4b75      	ldr	r3, [pc, #468]	; (8008570 <HAL_RCC_OscConfig+0x4d0>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0f0      	beq.n	8008386 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d106      	bne.n	80083ba <HAL_RCC_OscConfig+0x31a>
 80083ac:	4b6f      	ldr	r3, [pc, #444]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b0:	4a6e      	ldr	r2, [pc, #440]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	6713      	str	r3, [r2, #112]	; 0x70
 80083b8:	e02d      	b.n	8008416 <HAL_RCC_OscConfig+0x376>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10c      	bne.n	80083dc <HAL_RCC_OscConfig+0x33c>
 80083c2:	4b6a      	ldr	r3, [pc, #424]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c6:	4a69      	ldr	r2, [pc, #420]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083c8:	f023 0301 	bic.w	r3, r3, #1
 80083cc:	6713      	str	r3, [r2, #112]	; 0x70
 80083ce:	4b67      	ldr	r3, [pc, #412]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d2:	4a66      	ldr	r2, [pc, #408]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083d4:	f023 0304 	bic.w	r3, r3, #4
 80083d8:	6713      	str	r3, [r2, #112]	; 0x70
 80083da:	e01c      	b.n	8008416 <HAL_RCC_OscConfig+0x376>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b05      	cmp	r3, #5
 80083e2:	d10c      	bne.n	80083fe <HAL_RCC_OscConfig+0x35e>
 80083e4:	4b61      	ldr	r3, [pc, #388]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e8:	4a60      	ldr	r2, [pc, #384]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083ea:	f043 0304 	orr.w	r3, r3, #4
 80083ee:	6713      	str	r3, [r2, #112]	; 0x70
 80083f0:	4b5e      	ldr	r3, [pc, #376]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f4:	4a5d      	ldr	r2, [pc, #372]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	6713      	str	r3, [r2, #112]	; 0x70
 80083fc:	e00b      	b.n	8008416 <HAL_RCC_OscConfig+0x376>
 80083fe:	4b5b      	ldr	r3, [pc, #364]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008402:	4a5a      	ldr	r2, [pc, #360]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	6713      	str	r3, [r2, #112]	; 0x70
 800840a:	4b58      	ldr	r3, [pc, #352]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800840c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840e:	4a57      	ldr	r2, [pc, #348]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008410:	f023 0304 	bic.w	r3, r3, #4
 8008414:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d015      	beq.n	800844a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841e:	f7fa ffa7 	bl	8003370 <HAL_GetTick>
 8008422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008424:	e00a      	b.n	800843c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008426:	f7fa ffa3 	bl	8003370 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	f241 3288 	movw	r2, #5000	; 0x1388
 8008434:	4293      	cmp	r3, r2
 8008436:	d901      	bls.n	800843c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e0ce      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800843c:	4b4b      	ldr	r3, [pc, #300]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0ee      	beq.n	8008426 <HAL_RCC_OscConfig+0x386>
 8008448:	e014      	b.n	8008474 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800844a:	f7fa ff91 	bl	8003370 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008450:	e00a      	b.n	8008468 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008452:	f7fa ff8d 	bl	8003370 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008460:	4293      	cmp	r3, r2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e0b8      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008468:	4b40      	ldr	r3, [pc, #256]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800846a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1ee      	bne.n	8008452 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008474:	7dfb      	ldrb	r3, [r7, #23]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d105      	bne.n	8008486 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800847a:	4b3c      	ldr	r3, [pc, #240]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	4a3b      	ldr	r2, [pc, #236]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008484:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80a4 	beq.w	80085d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008490:	4b36      	ldr	r3, [pc, #216]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 030c 	and.w	r3, r3, #12
 8008498:	2b08      	cmp	r3, #8
 800849a:	d06b      	beq.n	8008574 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d149      	bne.n	8008538 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084a4:	4b31      	ldr	r3, [pc, #196]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a30      	ldr	r2, [pc, #192]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80084aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b0:	f7fa ff5e 	bl	8003370 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084b8:	f7fa ff5a 	bl	8003370 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e087      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ca:	4b28      	ldr	r3, [pc, #160]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1f0      	bne.n	80084b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	019b      	lsls	r3, r3, #6
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	3b01      	subs	r3, #1
 80084f0:	041b      	lsls	r3, r3, #16
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	061b      	lsls	r3, r3, #24
 80084fa:	4313      	orrs	r3, r2
 80084fc:	4a1b      	ldr	r2, [pc, #108]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 80084fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008502:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008504:	4b19      	ldr	r3, [pc, #100]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a18      	ldr	r2, [pc, #96]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800850a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800850e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008510:	f7fa ff2e 	bl	8003370 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008518:	f7fa ff2a 	bl	8003370 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e057      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800852a:	4b10      	ldr	r3, [pc, #64]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <HAL_RCC_OscConfig+0x478>
 8008536:	e04f      	b.n	80085d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008538:	4b0c      	ldr	r3, [pc, #48]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0b      	ldr	r2, [pc, #44]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 800853e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7fa ff14 	bl	8003370 <HAL_GetTick>
 8008548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800854c:	f7fa ff10 	bl	8003370 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e03d      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <HAL_RCC_OscConfig+0x4cc>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x4ac>
 800856a:	e035      	b.n	80085d8 <HAL_RCC_OscConfig+0x538>
 800856c:	40023800 	.word	0x40023800
 8008570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008574:	4b1b      	ldr	r3, [pc, #108]	; (80085e4 <HAL_RCC_OscConfig+0x544>)
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d028      	beq.n	80085d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800858c:	429a      	cmp	r2, r3
 800858e:	d121      	bne.n	80085d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800859a:	429a      	cmp	r2, r3
 800859c:	d11a      	bne.n	80085d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80085a4:	4013      	ands	r3, r2
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d111      	bne.n	80085d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ba:	085b      	lsrs	r3, r3, #1
 80085bc:	3b01      	subs	r3, #1
 80085be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d107      	bne.n	80085d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d001      	beq.n	80085d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	40023800 	.word	0x40023800

080085e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e0d0      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008600:	4b6a      	ldr	r3, [pc, #424]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 030f 	and.w	r3, r3, #15
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d910      	bls.n	8008630 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800860e:	4b67      	ldr	r3, [pc, #412]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f023 020f 	bic.w	r2, r3, #15
 8008616:	4965      	ldr	r1, [pc, #404]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	4313      	orrs	r3, r2
 800861c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800861e:	4b63      	ldr	r3, [pc, #396]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d001      	beq.n	8008630 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e0b8      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d020      	beq.n	800867e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008648:	4b59      	ldr	r3, [pc, #356]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4a58      	ldr	r2, [pc, #352]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 800864e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008660:	4b53      	ldr	r3, [pc, #332]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	4a52      	ldr	r2, [pc, #328]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800866a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800866c:	4b50      	ldr	r3, [pc, #320]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	494d      	ldr	r1, [pc, #308]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 800867a:	4313      	orrs	r3, r2
 800867c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d040      	beq.n	800870c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d107      	bne.n	80086a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008692:	4b47      	ldr	r3, [pc, #284]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d115      	bne.n	80086ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e07f      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d107      	bne.n	80086ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086aa:	4b41      	ldr	r3, [pc, #260]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e073      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ba:	4b3d      	ldr	r3, [pc, #244]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e06b      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086ca:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f023 0203 	bic.w	r2, r3, #3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4936      	ldr	r1, [pc, #216]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086dc:	f7fa fe48 	bl	8003370 <HAL_GetTick>
 80086e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e2:	e00a      	b.n	80086fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086e4:	f7fa fe44 	bl	8003370 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e053      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086fa:	4b2d      	ldr	r3, [pc, #180]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 020c 	and.w	r2, r3, #12
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	429a      	cmp	r2, r3
 800870a:	d1eb      	bne.n	80086e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800870c:	4b27      	ldr	r3, [pc, #156]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d210      	bcs.n	800873c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800871a:	4b24      	ldr	r3, [pc, #144]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f023 020f 	bic.w	r2, r3, #15
 8008722:	4922      	ldr	r1, [pc, #136]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	4313      	orrs	r3, r2
 8008728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800872a:	4b20      	ldr	r3, [pc, #128]	; (80087ac <HAL_RCC_ClockConfig+0x1c4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d001      	beq.n	800873c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e032      	b.n	80087a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008748:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4916      	ldr	r1, [pc, #88]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008756:	4313      	orrs	r3, r2
 8008758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008766:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	490e      	ldr	r1, [pc, #56]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008776:	4313      	orrs	r3, r2
 8008778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800877a:	f000 f821 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 800877e:	4602      	mov	r2, r0
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	490a      	ldr	r1, [pc, #40]	; (80087b4 <HAL_RCC_ClockConfig+0x1cc>)
 800878c:	5ccb      	ldrb	r3, [r1, r3]
 800878e:	fa22 f303 	lsr.w	r3, r2, r3
 8008792:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <HAL_RCC_ClockConfig+0x1d0>)
 8008794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008796:	4b09      	ldr	r3, [pc, #36]	; (80087bc <HAL_RCC_ClockConfig+0x1d4>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f7f9 fd5c 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	40023c00 	.word	0x40023c00
 80087b0:	40023800 	.word	0x40023800
 80087b4:	08026e30 	.word	0x08026e30
 80087b8:	20000004 	.word	0x20000004
 80087bc:	20000030 	.word	0x20000030

080087c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087c0:	b5b0      	push	{r4, r5, r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80087c6:	2100      	movs	r1, #0
 80087c8:	6079      	str	r1, [r7, #4]
 80087ca:	2100      	movs	r1, #0
 80087cc:	60f9      	str	r1, [r7, #12]
 80087ce:	2100      	movs	r1, #0
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80087d2:	2100      	movs	r1, #0
 80087d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087d6:	4952      	ldr	r1, [pc, #328]	; (8008920 <HAL_RCC_GetSysClockFreq+0x160>)
 80087d8:	6889      	ldr	r1, [r1, #8]
 80087da:	f001 010c 	and.w	r1, r1, #12
 80087de:	2908      	cmp	r1, #8
 80087e0:	d00d      	beq.n	80087fe <HAL_RCC_GetSysClockFreq+0x3e>
 80087e2:	2908      	cmp	r1, #8
 80087e4:	f200 8094 	bhi.w	8008910 <HAL_RCC_GetSysClockFreq+0x150>
 80087e8:	2900      	cmp	r1, #0
 80087ea:	d002      	beq.n	80087f2 <HAL_RCC_GetSysClockFreq+0x32>
 80087ec:	2904      	cmp	r1, #4
 80087ee:	d003      	beq.n	80087f8 <HAL_RCC_GetSysClockFreq+0x38>
 80087f0:	e08e      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087f2:	4b4c      	ldr	r3, [pc, #304]	; (8008924 <HAL_RCC_GetSysClockFreq+0x164>)
 80087f4:	60bb      	str	r3, [r7, #8]
      break;
 80087f6:	e08e      	b.n	8008916 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087f8:	4b4b      	ldr	r3, [pc, #300]	; (8008928 <HAL_RCC_GetSysClockFreq+0x168>)
 80087fa:	60bb      	str	r3, [r7, #8]
      break;
 80087fc:	e08b      	b.n	8008916 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087fe:	4948      	ldr	r1, [pc, #288]	; (8008920 <HAL_RCC_GetSysClockFreq+0x160>)
 8008800:	6849      	ldr	r1, [r1, #4]
 8008802:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008806:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008808:	4945      	ldr	r1, [pc, #276]	; (8008920 <HAL_RCC_GetSysClockFreq+0x160>)
 800880a:	6849      	ldr	r1, [r1, #4]
 800880c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008810:	2900      	cmp	r1, #0
 8008812:	d024      	beq.n	800885e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008814:	4942      	ldr	r1, [pc, #264]	; (8008920 <HAL_RCC_GetSysClockFreq+0x160>)
 8008816:	6849      	ldr	r1, [r1, #4]
 8008818:	0989      	lsrs	r1, r1, #6
 800881a:	4608      	mov	r0, r1
 800881c:	f04f 0100 	mov.w	r1, #0
 8008820:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008824:	f04f 0500 	mov.w	r5, #0
 8008828:	ea00 0204 	and.w	r2, r0, r4
 800882c:	ea01 0305 	and.w	r3, r1, r5
 8008830:	493d      	ldr	r1, [pc, #244]	; (8008928 <HAL_RCC_GetSysClockFreq+0x168>)
 8008832:	fb01 f003 	mul.w	r0, r1, r3
 8008836:	2100      	movs	r1, #0
 8008838:	fb01 f102 	mul.w	r1, r1, r2
 800883c:	1844      	adds	r4, r0, r1
 800883e:	493a      	ldr	r1, [pc, #232]	; (8008928 <HAL_RCC_GetSysClockFreq+0x168>)
 8008840:	fba2 0101 	umull	r0, r1, r2, r1
 8008844:	1863      	adds	r3, r4, r1
 8008846:	4619      	mov	r1, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	461a      	mov	r2, r3
 800884c:	f04f 0300 	mov.w	r3, #0
 8008850:	f7f7 fd2e 	bl	80002b0 <__aeabi_uldivmod>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4613      	mov	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e04a      	b.n	80088f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800885e:	4b30      	ldr	r3, [pc, #192]	; (8008920 <HAL_RCC_GetSysClockFreq+0x160>)
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	099b      	lsrs	r3, r3, #6
 8008864:	461a      	mov	r2, r3
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800886e:	f04f 0100 	mov.w	r1, #0
 8008872:	ea02 0400 	and.w	r4, r2, r0
 8008876:	ea03 0501 	and.w	r5, r3, r1
 800887a:	4620      	mov	r0, r4
 800887c:	4629      	mov	r1, r5
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	014b      	lsls	r3, r1, #5
 8008888:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800888c:	0142      	lsls	r2, r0, #5
 800888e:	4610      	mov	r0, r2
 8008890:	4619      	mov	r1, r3
 8008892:	1b00      	subs	r0, r0, r4
 8008894:	eb61 0105 	sbc.w	r1, r1, r5
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	f04f 0300 	mov.w	r3, #0
 80088a0:	018b      	lsls	r3, r1, #6
 80088a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80088a6:	0182      	lsls	r2, r0, #6
 80088a8:	1a12      	subs	r2, r2, r0
 80088aa:	eb63 0301 	sbc.w	r3, r3, r1
 80088ae:	f04f 0000 	mov.w	r0, #0
 80088b2:	f04f 0100 	mov.w	r1, #0
 80088b6:	00d9      	lsls	r1, r3, #3
 80088b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088bc:	00d0      	lsls	r0, r2, #3
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	1912      	adds	r2, r2, r4
 80088c4:	eb45 0303 	adc.w	r3, r5, r3
 80088c8:	f04f 0000 	mov.w	r0, #0
 80088cc:	f04f 0100 	mov.w	r1, #0
 80088d0:	0299      	lsls	r1, r3, #10
 80088d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80088d6:	0290      	lsls	r0, r2, #10
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4610      	mov	r0, r2
 80088de:	4619      	mov	r1, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	f7f7 fce2 	bl	80002b0 <__aeabi_uldivmod>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4613      	mov	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <HAL_RCC_GetSysClockFreq+0x160>)
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	3301      	adds	r3, #1
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	fbb2 f3f3 	udiv	r3, r2, r3
 800890c:	60bb      	str	r3, [r7, #8]
      break;
 800890e:	e002      	b.n	8008916 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <HAL_RCC_GetSysClockFreq+0x164>)
 8008912:	60bb      	str	r3, [r7, #8]
      break;
 8008914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008916:	68bb      	ldr	r3, [r7, #8]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bdb0      	pop	{r4, r5, r7, pc}
 8008920:	40023800 	.word	0x40023800
 8008924:	00f42400 	.word	0x00f42400
 8008928:	017d7840 	.word	0x017d7840

0800892c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008930:	4b03      	ldr	r3, [pc, #12]	; (8008940 <HAL_RCC_GetHCLKFreq+0x14>)
 8008932:	681b      	ldr	r3, [r3, #0]
}
 8008934:	4618      	mov	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000004 	.word	0x20000004

08008944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008948:	f7ff fff0 	bl	800892c <HAL_RCC_GetHCLKFreq>
 800894c:	4602      	mov	r2, r0
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	0a9b      	lsrs	r3, r3, #10
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	4903      	ldr	r1, [pc, #12]	; (8008968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800895a:	5ccb      	ldrb	r3, [r1, r3]
 800895c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008960:	4618      	mov	r0, r3
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40023800 	.word	0x40023800
 8008968:	08026e40 	.word	0x08026e40

0800896c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008970:	f7ff ffdc 	bl	800892c <HAL_RCC_GetHCLKFreq>
 8008974:	4602      	mov	r2, r0
 8008976:	4b05      	ldr	r3, [pc, #20]	; (800898c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	0b5b      	lsrs	r3, r3, #13
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	4903      	ldr	r1, [pc, #12]	; (8008990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008982:	5ccb      	ldrb	r3, [r1, r3]
 8008984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008988:	4618      	mov	r0, r3
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40023800 	.word	0x40023800
 8008990:	08026e40 	.word	0x08026e40

08008994 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	220f      	movs	r2, #15
 80089a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80089a4:	4b12      	ldr	r3, [pc, #72]	; (80089f0 <HAL_RCC_GetClockConfig+0x5c>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 0203 	and.w	r2, r3, #3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80089b0:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <HAL_RCC_GetClockConfig+0x5c>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <HAL_RCC_GetClockConfig+0x5c>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80089c8:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <HAL_RCC_GetClockConfig+0x5c>)
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80089d6:	4b07      	ldr	r3, [pc, #28]	; (80089f4 <HAL_RCC_GetClockConfig+0x60>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 020f 	and.w	r2, r3, #15
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	601a      	str	r2, [r3, #0]
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	40023800 	.word	0x40023800
 80089f4:	40023c00 	.word	0x40023c00

080089f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d012      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008a20:	4b69      	ldr	r3, [pc, #420]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	4a68      	ldr	r2, [pc, #416]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a2a:	6093      	str	r3, [r2, #8]
 8008a2c:	4b66      	ldr	r3, [pc, #408]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	4964      	ldr	r1, [pc, #400]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008a42:	2301      	movs	r3, #1
 8008a44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d017      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a52:	4b5d      	ldr	r3, [pc, #372]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a60:	4959      	ldr	r1, [pc, #356]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a70:	d101      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008a72:	2301      	movs	r3, #1
 8008a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d017      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a8e:	4b4e      	ldr	r3, [pc, #312]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	494a      	ldr	r1, [pc, #296]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aac:	d101      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008aca:	2301      	movs	r3, #1
 8008acc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0320 	and.w	r3, r3, #32
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 808b 	beq.w	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008adc:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae0:	4a39      	ldr	r2, [pc, #228]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8008ae8:	4b37      	ldr	r3, [pc, #220]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af0:	60bb      	str	r3, [r7, #8]
 8008af2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008af4:	4b35      	ldr	r3, [pc, #212]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a34      	ldr	r2, [pc, #208]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b00:	f7fa fc36 	bl	8003370 <HAL_GetTick>
 8008b04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008b06:	e008      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b08:	f7fa fc32 	bl	8003370 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b64      	cmp	r3, #100	; 0x64
 8008b14:	d901      	bls.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e357      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008b1a:	4b2c      	ldr	r3, [pc, #176]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0f0      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b26:	4b28      	ldr	r3, [pc, #160]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d035      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d02e      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b44:	4b20      	ldr	r3, [pc, #128]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b4e:	4b1e      	ldr	r3, [pc, #120]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b52:	4a1d      	ldr	r2, [pc, #116]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b5a:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	4a1a      	ldr	r2, [pc, #104]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008b66:	4a18      	ldr	r2, [pc, #96]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b6c:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d114      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b78:	f7fa fbfa 	bl	8003370 <HAL_GetTick>
 8008b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b7e:	e00a      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b80:	f7fa fbf6 	bl	8003370 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d901      	bls.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e319      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b96:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0ee      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bae:	d111      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008bbe:	400b      	ands	r3, r1
 8008bc0:	4901      	ldr	r1, [pc, #4]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	608b      	str	r3, [r1, #8]
 8008bc6:	e00b      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	40007000 	.word	0x40007000
 8008bd0:	0ffffcff 	.word	0x0ffffcff
 8008bd4:	4bb1      	ldr	r3, [pc, #708]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	4ab0      	ldr	r2, [pc, #704]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008bde:	6093      	str	r3, [r2, #8]
 8008be0:	4bae      	ldr	r3, [pc, #696]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bec:	49ab      	ldr	r1, [pc, #684]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0310 	and.w	r3, r3, #16
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d010      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bfe:	4ba7      	ldr	r3, [pc, #668]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c04:	4aa5      	ldr	r2, [pc, #660]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008c0e:	4ba3      	ldr	r3, [pc, #652]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	49a0      	ldr	r1, [pc, #640]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00a      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c2c:	4b9b      	ldr	r3, [pc, #620]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c3a:	4998      	ldr	r1, [pc, #608]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c4e:	4b93      	ldr	r3, [pc, #588]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5c:	498f      	ldr	r1, [pc, #572]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00a      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c70:	4b8a      	ldr	r3, [pc, #552]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7e:	4987      	ldr	r1, [pc, #540]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00a      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c92:	4b82      	ldr	r3, [pc, #520]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca0:	497e      	ldr	r1, [pc, #504]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cb4:	4b79      	ldr	r3, [pc, #484]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cba:	f023 0203 	bic.w	r2, r3, #3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc2:	4976      	ldr	r1, [pc, #472]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008cd6:	4b71      	ldr	r3, [pc, #452]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cdc:	f023 020c 	bic.w	r2, r3, #12
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ce4:	496d      	ldr	r1, [pc, #436]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00a      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cf8:	4b68      	ldr	r3, [pc, #416]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d06:	4965      	ldr	r1, [pc, #404]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d1a:	4b60      	ldr	r3, [pc, #384]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d28:	495c      	ldr	r1, [pc, #368]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00a      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d3c:	4b57      	ldr	r3, [pc, #348]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4a:	4954      	ldr	r1, [pc, #336]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008d5e:	4b4f      	ldr	r3, [pc, #316]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6c:	494b      	ldr	r1, [pc, #300]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00a      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008d80:	4b46      	ldr	r3, [pc, #280]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8e:	4943      	ldr	r1, [pc, #268]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008da2:	4b3e      	ldr	r3, [pc, #248]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db0:	493a      	ldr	r1, [pc, #232]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008dc4:	4b35      	ldr	r3, [pc, #212]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dd2:	4932      	ldr	r1, [pc, #200]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d011      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008de6:	4b2d      	ldr	r3, [pc, #180]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df4:	4929      	ldr	r1, [pc, #164]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e04:	d101      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008e06:	2301      	movs	r3, #1
 8008e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0308 	and.w	r3, r3, #8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008e16:	2301      	movs	r3, #1
 8008e18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e26:	4b1d      	ldr	r3, [pc, #116]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e34:	4919      	ldr	r1, [pc, #100]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e48:	4b14      	ldr	r3, [pc, #80]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e58:	4910      	ldr	r1, [pc, #64]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d006      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80d9 	beq.w	8009026 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e74:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a08      	ldr	r2, [pc, #32]	; (8008e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e80:	f7fa fa76 	bl	8003370 <HAL_GetTick>
 8008e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e86:	e00b      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e88:	f7fa fa72 	bl	8003370 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b64      	cmp	r3, #100	; 0x64
 8008e94:	d904      	bls.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e197      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008e9a:	bf00      	nop
 8008e9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ea0:	4b6c      	ldr	r3, [pc, #432]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1ed      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d021      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11d      	bne.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008ec0:	4b64      	ldr	r3, [pc, #400]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec6:	0c1b      	lsrs	r3, r3, #16
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008ece:	4b61      	ldr	r3, [pc, #388]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ed4:	0e1b      	lsrs	r3, r3, #24
 8008ed6:	f003 030f 	and.w	r3, r3, #15
 8008eda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	019a      	lsls	r2, r3, #6
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	041b      	lsls	r3, r3, #16
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	061b      	lsls	r3, r3, #24
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	071b      	lsls	r3, r3, #28
 8008ef4:	4957      	ldr	r1, [pc, #348]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d004      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f10:	d00a      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d02e      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f26:	d129      	bne.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008f28:	4b4a      	ldr	r3, [pc, #296]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f2e:	0c1b      	lsrs	r3, r3, #16
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f36:	4b47      	ldr	r3, [pc, #284]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f3c:	0f1b      	lsrs	r3, r3, #28
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	019a      	lsls	r2, r3, #6
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	041b      	lsls	r3, r3, #16
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	431a      	orrs	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	071b      	lsls	r3, r3, #28
 8008f5c:	493d      	ldr	r1, [pc, #244]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008f64:	4b3b      	ldr	r3, [pc, #236]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f6a:	f023 021f 	bic.w	r2, r3, #31
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	3b01      	subs	r3, #1
 8008f74:	4937      	ldr	r1, [pc, #220]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01d      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f88:	4b32      	ldr	r3, [pc, #200]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f8e:	0e1b      	lsrs	r3, r3, #24
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f96:	4b2f      	ldr	r3, [pc, #188]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f9c:	0f1b      	lsrs	r3, r3, #28
 8008f9e:	f003 0307 	and.w	r3, r3, #7
 8008fa2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	019a      	lsls	r2, r3, #6
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	041b      	lsls	r3, r3, #16
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	061b      	lsls	r3, r3, #24
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	071b      	lsls	r3, r3, #28
 8008fbc:	4925      	ldr	r1, [pc, #148]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d011      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	019a      	lsls	r2, r3, #6
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	041b      	lsls	r3, r3, #16
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	061b      	lsls	r3, r3, #24
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	071b      	lsls	r3, r3, #28
 8008fec:	4919      	ldr	r1, [pc, #100]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ff4:	4b17      	ldr	r3, [pc, #92]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a16      	ldr	r2, [pc, #88]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009000:	f7fa f9b6 	bl	8003370 <HAL_GetTick>
 8009004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009006:	e008      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009008:	f7fa f9b2 	bl	8003370 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b64      	cmp	r3, #100	; 0x64
 8009014:	d901      	bls.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e0d7      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800901a:	4b0e      	ldr	r3, [pc, #56]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f0      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b01      	cmp	r3, #1
 800902a:	f040 80cd 	bne.w	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800903a:	f7fa f999 	bl	8003370 <HAL_GetTick>
 800903e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009040:	e00a      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009042:	f7fa f995 	bl	8003370 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b64      	cmp	r3, #100	; 0x64
 800904e:	d903      	bls.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e0ba      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009054:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009058:	4b5e      	ldr	r3, [pc, #376]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009064:	d0ed      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009076:	2b00      	cmp	r3, #0
 8009078:	d009      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009082:	2b00      	cmp	r3, #0
 8009084:	d02e      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d12a      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800908e:	4b51      	ldr	r3, [pc, #324]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009094:	0c1b      	lsrs	r3, r3, #16
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800909c:	4b4d      	ldr	r3, [pc, #308]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800909e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a2:	0f1b      	lsrs	r3, r3, #28
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	019a      	lsls	r2, r3, #6
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	041b      	lsls	r3, r3, #16
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	061b      	lsls	r3, r3, #24
 80090bc:	431a      	orrs	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	071b      	lsls	r3, r3, #28
 80090c2:	4944      	ldr	r1, [pc, #272]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80090ca:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d8:	3b01      	subs	r3, #1
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	493d      	ldr	r1, [pc, #244]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d022      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090f8:	d11d      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090fa:	4b36      	ldr	r3, [pc, #216]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009100:	0e1b      	lsrs	r3, r3, #24
 8009102:	f003 030f 	and.w	r3, r3, #15
 8009106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009108:	4b32      	ldr	r3, [pc, #200]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800910a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910e:	0f1b      	lsrs	r3, r3, #28
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	019a      	lsls	r2, r3, #6
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	041b      	lsls	r3, r3, #16
 8009122:	431a      	orrs	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	061b      	lsls	r3, r3, #24
 8009128:	431a      	orrs	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	071b      	lsls	r3, r3, #28
 800912e:	4929      	ldr	r1, [pc, #164]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009130:	4313      	orrs	r3, r2
 8009132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d028      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009148:	0e1b      	lsrs	r3, r3, #24
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009150:	4b20      	ldr	r3, [pc, #128]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009156:	0c1b      	lsrs	r3, r3, #16
 8009158:	f003 0303 	and.w	r3, r3, #3
 800915c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	019a      	lsls	r2, r3, #6
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	041b      	lsls	r3, r3, #16
 8009168:	431a      	orrs	r2, r3
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	061b      	lsls	r3, r3, #24
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	071b      	lsls	r3, r3, #28
 8009176:	4917      	ldr	r1, [pc, #92]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800917e:	4b15      	ldr	r3, [pc, #84]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918c:	4911      	ldr	r1, [pc, #68]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800918e:	4313      	orrs	r3, r2
 8009190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009194:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a0e      	ldr	r2, [pc, #56]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800919a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800919e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091a0:	f7fa f8e6 	bl	8003370 <HAL_GetTick>
 80091a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80091a6:	e008      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80091a8:	f7fa f8e2 	bl	8003370 <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	2b64      	cmp	r3, #100	; 0x64
 80091b4:	d901      	bls.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e007      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80091ba:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c6:	d1ef      	bne.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3720      	adds	r7, #32
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	40023800 	.word	0x40023800

080091d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091f6:	f040 808c 	bne.w	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80091fa:	4b95      	ldr	r3, [pc, #596]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009200:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009208:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009210:	d07c      	beq.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009218:	d87d      	bhi.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009226:	d039      	beq.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009228:	e075      	b.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800922a:	4b89      	ldr	r3, [pc, #548]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d108      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009236:	4b86      	ldr	r3, [pc, #536]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800923e:	4a85      	ldr	r2, [pc, #532]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009240:	fbb2 f3f3 	udiv	r3, r2, r3
 8009244:	613b      	str	r3, [r7, #16]
 8009246:	e007      	b.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009248:	4b81      	ldr	r3, [pc, #516]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009250:	4a81      	ldr	r2, [pc, #516]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009252:	fbb2 f3f3 	udiv	r3, r2, r3
 8009256:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009258:	4b7d      	ldr	r3, [pc, #500]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800925a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925e:	0e1b      	lsrs	r3, r3, #24
 8009260:	f003 030f 	and.w	r3, r3, #15
 8009264:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009266:	4b7a      	ldr	r3, [pc, #488]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926c:	099b      	lsrs	r3, r3, #6
 800926e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	fb02 f203 	mul.w	r2, r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	fbb2 f3f3 	udiv	r3, r2, r3
 800927e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009280:	4b73      	ldr	r3, [pc, #460]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	f003 031f 	and.w	r3, r3, #31
 800928c:	3301      	adds	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	fbb2 f3f3 	udiv	r3, r2, r3
 8009298:	617b      	str	r3, [r7, #20]
        break;
 800929a:	e03d      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800929c:	4b6c      	ldr	r3, [pc, #432]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d108      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80092a8:	4b69      	ldr	r3, [pc, #420]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092b0:	4a68      	ldr	r2, [pc, #416]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80092b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	e007      	b.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80092ba:	4b65      	ldr	r3, [pc, #404]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092c2:	4a65      	ldr	r2, [pc, #404]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80092c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80092ca:	4b61      	ldr	r3, [pc, #388]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d0:	0e1b      	lsrs	r3, r3, #24
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80092d8:	4b5d      	ldr	r3, [pc, #372]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092de:	099b      	lsrs	r3, r3, #6
 80092e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	fb02 f203 	mul.w	r2, r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80092f2:	4b57      	ldr	r3, [pc, #348]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	3301      	adds	r3, #1
 80092fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	fbb2 f3f3 	udiv	r3, r2, r3
 8009308:	617b      	str	r3, [r7, #20]
        break;
 800930a:	e005      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800930c:	4b53      	ldr	r3, [pc, #332]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800930e:	617b      	str	r3, [r7, #20]
        break;
 8009310:	e002      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8009312:	bf00      	nop
 8009314:	e000      	b.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8009316:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931e:	f040 808c 	bne.w	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009322:	4b4b      	ldr	r3, [pc, #300]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009328:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009330:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009338:	d07c      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009340:	d87d      	bhi.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800934e:	d039      	beq.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009350:	e075      	b.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009352:	4b3f      	ldr	r3, [pc, #252]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d108      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800935e:	4b3c      	ldr	r3, [pc, #240]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009366:	4a3b      	ldr	r2, [pc, #236]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009368:	fbb2 f3f3 	udiv	r3, r2, r3
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	e007      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009370:	4b37      	ldr	r3, [pc, #220]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009378:	4a37      	ldr	r2, [pc, #220]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800937a:	fbb2 f3f3 	udiv	r3, r2, r3
 800937e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009380:	4b33      	ldr	r3, [pc, #204]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009386:	0e1b      	lsrs	r3, r3, #24
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800938e:	4b30      	ldr	r3, [pc, #192]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	099b      	lsrs	r3, r3, #6
 8009396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	fb02 f203 	mul.w	r2, r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80093a8:	4b29      	ldr	r3, [pc, #164]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ae:	0a1b      	lsrs	r3, r3, #8
 80093b0:	f003 031f 	and.w	r3, r3, #31
 80093b4:	3301      	adds	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c0:	617b      	str	r3, [r7, #20]
        break;
 80093c2:	e03d      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80093c4:	4b22      	ldr	r3, [pc, #136]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d108      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80093d0:	4b1f      	ldr	r3, [pc, #124]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093d8:	4a1e      	ldr	r2, [pc, #120]	; (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80093da:	fbb2 f3f3 	udiv	r3, r2, r3
 80093de:	613b      	str	r3, [r7, #16]
 80093e0:	e007      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80093e2:	4b1b      	ldr	r3, [pc, #108]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ea:	4a1b      	ldr	r2, [pc, #108]	; (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80093ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093f8:	0e1b      	lsrs	r3, r3, #24
 80093fa:	f003 030f 	and.w	r3, r3, #15
 80093fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009400:	4b13      	ldr	r3, [pc, #76]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009406:	099b      	lsrs	r3, r3, #6
 8009408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	fb02 f203 	mul.w	r2, r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	fbb2 f3f3 	udiv	r3, r2, r3
 8009418:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800941c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009420:	f003 031f 	and.w	r3, r3, #31
 8009424:	3301      	adds	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009430:	617b      	str	r3, [r7, #20]
        break;
 8009432:	e005      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009434:	4b09      	ldr	r3, [pc, #36]	; (800945c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009436:	617b      	str	r3, [r7, #20]
        break;
 8009438:	e002      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800943a:	bf00      	nop
 800943c:	e000      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800943e:	bf00      	nop

  return frequency;
 8009440:	697b      	ldr	r3, [r7, #20]
}
 8009442:	4618      	mov	r0, r3
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	40023800 	.word	0x40023800
 8009454:	00f42400 	.word	0x00f42400
 8009458:	017d7840 	.word	0x017d7840
 800945c:	00bb8000 	.word	0x00bb8000

08009460 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e081      	b.n	8009576 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7f5b      	ldrb	r3, [r3, #29]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7f8 fc00 	bl	8001c88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	22ca      	movs	r2, #202	; 0xca
 8009494:	625a      	str	r2, [r3, #36]	; 0x24
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2253      	movs	r2, #83	; 0x53
 800949c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb16 	bl	8009ad0 <RTC_EnterInitMode>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d008      	beq.n	80094bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	22ff      	movs	r2, #255	; 0xff
 80094b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2204      	movs	r2, #4
 80094b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e05c      	b.n	8009576 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6899      	ldr	r1, [r3, #8]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	4b2e      	ldr	r3, [pc, #184]	; (8009580 <HAL_RTC_Init+0x120>)
 80094c8:	400b      	ands	r3, r1
 80094ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6899      	ldr	r1, [r3, #8]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	431a      	orrs	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68d2      	ldr	r2, [r2, #12]
 80094f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6919      	ldr	r1, [r3, #16]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	041a      	lsls	r2, r3, #16
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009516:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10e      	bne.n	8009544 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 faaa 	bl	8009a80 <HAL_RTC_WaitForSynchro>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d008      	beq.n	8009544 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	22ff      	movs	r2, #255	; 0xff
 8009538:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2204      	movs	r2, #4
 800953e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e018      	b.n	8009576 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0208 	bic.w	r2, r2, #8
 8009552:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	22ff      	movs	r2, #255	; 0xff
 800956c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009574:	2300      	movs	r3, #0
  }
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	ff8fffbf 	.word	0xff8fffbf

08009584 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009584:	b590      	push	{r4, r7, lr}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	7f1b      	ldrb	r3, [r3, #28]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_RTC_SetTime+0x1c>
 800959c:	2302      	movs	r3, #2
 800959e:	e0a8      	b.n	80096f2 <HAL_RTC_SetTime+0x16e>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2202      	movs	r2, #2
 80095aa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d126      	bne.n	8009600 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2200      	movs	r2, #0
 80095c4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 faac 	bl	8009b28 <RTC_ByteToBcd2>
 80095d0:	4603      	mov	r3, r0
 80095d2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 faa5 	bl	8009b28 <RTC_ByteToBcd2>
 80095de:	4603      	mov	r3, r0
 80095e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80095e2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	789b      	ldrb	r3, [r3, #2]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fa9d 	bl	8009b28 <RTC_ByteToBcd2>
 80095ee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80095f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	7b1b      	ldrb	r3, [r3, #12]
 80095f8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80095fa:	4313      	orrs	r3, r2
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	e018      	b.n	8009632 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2200      	movs	r2, #0
 8009612:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	785b      	ldrb	r3, [r3, #1]
 800961e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009620:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009626:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	7b1b      	ldrb	r3, [r3, #12]
 800962c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	22ca      	movs	r2, #202	; 0xca
 8009638:	625a      	str	r2, [r3, #36]	; 0x24
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2253      	movs	r2, #83	; 0x53
 8009640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fa44 	bl	8009ad0 <RTC_EnterInitMode>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	22ff      	movs	r2, #255	; 0xff
 8009654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2204      	movs	r2, #4
 800965a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e045      	b.n	80096f2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	6979      	ldr	r1, [r7, #20]
 800966c:	4b23      	ldr	r3, [pc, #140]	; (80096fc <HAL_RTC_SetTime+0x178>)
 800966e:	400b      	ands	r3, r1
 8009670:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009680:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6899      	ldr	r1, [r3, #8]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	691a      	ldr	r2, [r3, #16]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	431a      	orrs	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f003 0320 	and.w	r3, r3, #32
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d111      	bne.n	80096dc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 f9e1 	bl	8009a80 <HAL_RTC_WaitForSynchro>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	22ff      	movs	r2, #255	; 0xff
 80096ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2204      	movs	r2, #4
 80096d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e00a      	b.n	80096f2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	22ff      	movs	r2, #255	; 0xff
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2201      	movs	r2, #1
 80096e8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80096f0:	2300      	movs	r3, #0
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	371c      	adds	r7, #28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd90      	pop	{r4, r7, pc}
 80096fa:	bf00      	nop
 80096fc:	007f7f7f 	.word	0x007f7f7f

08009700 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009700:	b590      	push	{r4, r7, lr}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	7f1b      	ldrb	r3, [r3, #28]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d101      	bne.n	800971c <HAL_RTC_SetDate+0x1c>
 8009718:	2302      	movs	r3, #2
 800971a:	e092      	b.n	8009842 <HAL_RTC_SetDate+0x142>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2201      	movs	r2, #1
 8009720:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2202      	movs	r2, #2
 8009726:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10e      	bne.n	800974c <HAL_RTC_SetDate+0x4c>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	785b      	ldrb	r3, [r3, #1]
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	2b00      	cmp	r3, #0
 8009738:	d008      	beq.n	800974c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	f023 0310 	bic.w	r3, r3, #16
 8009742:	b2db      	uxtb	r3, r3
 8009744:	330a      	adds	r3, #10
 8009746:	b2da      	uxtb	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d11c      	bne.n	800978c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	78db      	ldrb	r3, [r3, #3]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f9e6 	bl	8009b28 <RTC_ByteToBcd2>
 800975c:	4603      	mov	r3, r0
 800975e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f9df 	bl	8009b28 <RTC_ByteToBcd2>
 800976a:	4603      	mov	r3, r0
 800976c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800976e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	789b      	ldrb	r3, [r3, #2]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 f9d7 	bl	8009b28 <RTC_ByteToBcd2>
 800977a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800977c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009786:	4313      	orrs	r3, r2
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	e00e      	b.n	80097aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	78db      	ldrb	r3, [r3, #3]
 8009790:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009798:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800979e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	22ca      	movs	r2, #202	; 0xca
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2253      	movs	r2, #83	; 0x53
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 f988 	bl	8009ad0 <RTC_EnterInitMode>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00b      	beq.n	80097de <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	22ff      	movs	r2, #255	; 0xff
 80097cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2204      	movs	r2, #4
 80097d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e031      	b.n	8009842 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	6979      	ldr	r1, [r7, #20]
 80097e4:	4b19      	ldr	r3, [pc, #100]	; (800984c <HAL_RTC_SetDate+0x14c>)
 80097e6:	400b      	ands	r3, r1
 80097e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	d111      	bne.n	800982c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f939 	bl	8009a80 <HAL_RTC_WaitForSynchro>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	22ff      	movs	r2, #255	; 0xff
 800981a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2204      	movs	r2, #4
 8009820:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e00a      	b.n	8009842 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	22ff      	movs	r2, #255	; 0xff
 8009832:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009840:	2300      	movs	r3, #0
  }
}
 8009842:	4618      	mov	r0, r3
 8009844:	371c      	adds	r7, #28
 8009846:	46bd      	mov	sp, r7
 8009848:	bd90      	pop	{r4, r7, pc}
 800984a:	bf00      	nop
 800984c:	00ffff3f 	.word	0x00ffff3f

08009850 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009850:	b590      	push	{r4, r7, lr}
 8009852:	b089      	sub	sp, #36	; 0x24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	7f1b      	ldrb	r3, [r3, #28]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d101      	bne.n	8009874 <HAL_RTC_SetAlarm+0x24>
 8009870:	2302      	movs	r3, #2
 8009872:	e101      	b.n	8009a78 <HAL_RTC_SetAlarm+0x228>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2201      	movs	r2, #1
 8009878:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2202      	movs	r2, #2
 800987e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d137      	bne.n	80098f6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f942 	bl	8009b28 <RTC_ByteToBcd2>
 80098a4:	4603      	mov	r3, r0
 80098a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 f93b 	bl	8009b28 <RTC_ByteToBcd2>
 80098b2:	4603      	mov	r3, r0
 80098b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80098b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	789b      	ldrb	r3, [r3, #2]
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 f933 	bl	8009b28 <RTC_ByteToBcd2>
 80098c2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80098c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	7b1b      	ldrb	r3, [r3, #12]
 80098cc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80098ce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f925 	bl	8009b28 <RTC_ByteToBcd2>
 80098de:	4603      	mov	r3, r0
 80098e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80098e2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80098ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80098f0:	4313      	orrs	r3, r2
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	e023      	b.n	800993e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2200      	movs	r2, #0
 8009908:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009916:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800991c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	7b1b      	ldrb	r3, [r3, #12]
 8009922:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009924:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800992c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800992e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009934:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800993a:	4313      	orrs	r3, r2
 800993c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	4313      	orrs	r3, r2
 8009948:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	22ca      	movs	r2, #202	; 0xca
 8009950:	625a      	str	r2, [r3, #36]	; 0x24
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2253      	movs	r2, #83	; 0x53
 8009958:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009962:	d13f      	bne.n	80099e4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009972:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009982:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009984:	f7f9 fcf4 	bl	8003370 <HAL_GetTick>
 8009988:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800998a:	e013      	b.n	80099b4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800998c:	f7f9 fcf0 	bl	8003370 <HAL_GetTick>
 8009990:	4602      	mov	r2, r0
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	1ad3      	subs	r3, r2, r3
 8009996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800999a:	d90b      	bls.n	80099b4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	22ff      	movs	r2, #255	; 0xff
 80099a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2203      	movs	r2, #3
 80099a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e061      	b.n	8009a78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0e4      	beq.n	800998c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099e0:	609a      	str	r2, [r3, #8]
 80099e2:	e03e      	b.n	8009a62 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80099f2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a02:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a04:	f7f9 fcb4 	bl	8003370 <HAL_GetTick>
 8009a08:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009a0a:	e013      	b.n	8009a34 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009a0c:	f7f9 fcb0 	bl	8003370 <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a1a:	d90b      	bls.n	8009a34 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	22ff      	movs	r2, #255	; 0xff
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2203      	movs	r2, #3
 8009a28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e021      	b.n	8009a78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0e4      	beq.n	8009a0c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a60:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	22ff      	movs	r2, #255	; 0xff
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3724      	adds	r7, #36	; 0x24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd90      	pop	{r4, r7, pc}

08009a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a9c:	f7f9 fc68 	bl	8003370 <HAL_GetTick>
 8009aa0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009aa2:	e009      	b.n	8009ab8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009aa4:	f7f9 fc64 	bl	8003370 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ab2:	d901      	bls.n	8009ab8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e007      	b.n	8009ac8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0ee      	beq.n	8009aa4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d119      	bne.n	8009b1e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295
 8009af2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009af4:	f7f9 fc3c 	bl	8003370 <HAL_GetTick>
 8009af8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009afa:	e009      	b.n	8009b10 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009afc:	f7f9 fc38 	bl	8003370 <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b0a:	d901      	bls.n	8009b10 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e007      	b.n	8009b20 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d0ee      	beq.n	8009afc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009b36:	e005      	b.n	8009b44 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	3b0a      	subs	r3, #10
 8009b42:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	2b09      	cmp	r3, #9
 8009b48:	d8f6      	bhi.n	8009b38 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	b2db      	uxtb	r3, r3
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	7f1b      	ldrb	r3, [r3, #28]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e03e      	b.n	8009bfe <HAL_RTCEx_SetTimeStamp+0x9a>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2201      	movs	r2, #1
 8009b84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	4b1e      	ldr	r3, [pc, #120]	; (8009c0c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	22ca      	movs	r2, #202	; 0xca
 8009ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2253      	movs	r2, #83	; 0x53
 8009bae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0206 	bic.w	r2, r2, #6
 8009bbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689a      	ldr	r2, [r3, #8]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009be6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	22ff      	movs	r2, #255	; 0xff
 8009bee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	fffff7f7 	.word	0xfffff7f7

08009c10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e156      	b.n	8009edc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7f8 f8e2 	bl	8001e0c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f95b 	bl	8009f0c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d00c      	beq.n	8009c78 <HAL_SAI_Init+0x68>
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d80d      	bhi.n	8009c7e <HAL_SAI_Init+0x6e>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_SAI_Init+0x5c>
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d003      	beq.n	8009c72 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009c6a:	e008      	b.n	8009c7e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61fb      	str	r3, [r7, #28]
      break;
 8009c70:	e006      	b.n	8009c80 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009c72:	2310      	movs	r3, #16
 8009c74:	61fb      	str	r3, [r7, #28]
      break;
 8009c76:	e003      	b.n	8009c80 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009c78:	2320      	movs	r3, #32
 8009c7a:	61fb      	str	r3, [r7, #28]
      break;
 8009c7c:	e000      	b.n	8009c80 <HAL_SAI_Init+0x70>
      break;
 8009c7e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d81e      	bhi.n	8009cc6 <HAL_SAI_Init+0xb6>
 8009c88:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <HAL_SAI_Init+0x80>)
 8009c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8e:	bf00      	nop
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009ca7 	.word	0x08009ca7
 8009c98:	08009caf 	.word	0x08009caf
 8009c9c:	08009cb7 	.word	0x08009cb7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
    }
    break;
 8009ca4:	e010      	b.n	8009cc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009caa:	617b      	str	r3, [r7, #20]
    }
    break;
 8009cac:	e00c      	b.n	8009cc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cb2:	617b      	str	r3, [r7, #20]
    }
    break;
 8009cb4:	e008      	b.n	8009cc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cba:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009cc4:	e000      	b.n	8009cc8 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009cc6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a85      	ldr	r2, [pc, #532]	; (8009ee4 <HAL_SAI_Init+0x2d4>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d004      	beq.n	8009cdc <HAL_SAI_Init+0xcc>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a84      	ldr	r2, [pc, #528]	; (8009ee8 <HAL_SAI_Init+0x2d8>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d103      	bne.n	8009ce4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009cdc:	4a83      	ldr	r2, [pc, #524]	; (8009eec <HAL_SAI_Init+0x2dc>)
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	e002      	b.n	8009cea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009ce4:	4a82      	ldr	r2, [pc, #520]	; (8009ef0 <HAL_SAI_Init+0x2e0>)
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d04c      	beq.n	8009d8c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a7a      	ldr	r2, [pc, #488]	; (8009ee4 <HAL_SAI_Init+0x2d4>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d004      	beq.n	8009d0a <HAL_SAI_Init+0xfa>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a78      	ldr	r2, [pc, #480]	; (8009ee8 <HAL_SAI_Init+0x2d8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d104      	bne.n	8009d14 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009d0a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009d0e:	f7ff fa63 	bl	80091d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d12:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a76      	ldr	r2, [pc, #472]	; (8009ef4 <HAL_SAI_Init+0x2e4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d004      	beq.n	8009d28 <HAL_SAI_Init+0x118>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a75      	ldr	r2, [pc, #468]	; (8009ef8 <HAL_SAI_Init+0x2e8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d104      	bne.n	8009d32 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009d28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009d2c:	f7ff fa54 	bl	80091d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d30:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	025b      	lsls	r3, r3, #9
 8009d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d48:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4a6b      	ldr	r2, [pc, #428]	; (8009efc <HAL_SAI_Init+0x2ec>)
 8009d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d52:	08da      	lsrs	r2, r3, #3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009d58:	68f9      	ldr	r1, [r7, #12]
 8009d5a:	4b68      	ldr	r3, [pc, #416]	; (8009efc <HAL_SAI_Init+0x2ec>)
 8009d5c:	fba3 2301 	umull	r2, r3, r3, r1
 8009d60:	08da      	lsrs	r2, r3, #3
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	1aca      	subs	r2, r1, r3
 8009d6c:	2a08      	cmp	r2, #8
 8009d6e:	d904      	bls.n	8009d7a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d104      	bne.n	8009d8c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	085a      	lsrs	r2, r3, #1
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <HAL_SAI_Init+0x18c>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d109      	bne.n	8009db0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <HAL_SAI_Init+0x198>
 8009da4:	2300      	movs	r3, #0
 8009da6:	e001      	b.n	8009dac <HAL_SAI_Init+0x19c>
 8009da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dac:	61bb      	str	r3, [r7, #24]
 8009dae:	e008      	b.n	8009dc2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d102      	bne.n	8009dbe <HAL_SAI_Init+0x1ae>
 8009db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dbc:	e000      	b.n	8009dc0 <HAL_SAI_Init+0x1b0>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6819      	ldr	r1, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	4b4c      	ldr	r3, [pc, #304]	; (8009f00 <HAL_SAI_Init+0x2f0>)
 8009dce:	400b      	ands	r3, r1
 8009dd0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6819      	ldr	r1, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009de6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dec:	431a      	orrs	r2, r3
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8009dfa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e06:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	051b      	lsls	r3, r3, #20
 8009e0e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6859      	ldr	r1, [r3, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b38      	ldr	r3, [pc, #224]	; (8009f04 <HAL_SAI_Init+0x2f4>)
 8009e24:	400b      	ands	r3, r1
 8009e26:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6859      	ldr	r1, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699a      	ldr	r2, [r3, #24]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6899      	ldr	r1, [r3, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	4b2d      	ldr	r3, [pc, #180]	; (8009f08 <HAL_SAI_Init+0x2f8>)
 8009e52:	400b      	ands	r3, r1
 8009e54:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6899      	ldr	r1, [r3, #8]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e60:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009e66:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009e6c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009e72:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009e7c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68d9      	ldr	r1, [r3, #12]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009e94:	400b      	ands	r3, r1
 8009e96:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68d9      	ldr	r1, [r3, #12]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eac:	041b      	lsls	r3, r3, #16
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3720      	adds	r7, #32
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	40015804 	.word	0x40015804
 8009ee8:	40015824 	.word	0x40015824
 8009eec:	40015800 	.word	0x40015800
 8009ef0:	40015c00 	.word	0x40015c00
 8009ef4:	40015c04 	.word	0x40015c04
 8009ef8:	40015c24 	.word	0x40015c24
 8009efc:	cccccccd 	.word	0xcccccccd
 8009f00:	ff05c010 	.word	0xff05c010
 8009f04:	ffff1ff0 	.word	0xffff1ff0
 8009f08:	fff88000 	.word	0xfff88000

08009f0c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009f14:	4b17      	ldr	r3, [pc, #92]	; (8009f74 <SAI_Disable+0x68>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a17      	ldr	r2, [pc, #92]	; (8009f78 <SAI_Disable+0x6c>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	0b1b      	lsrs	r3, r3, #12
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f36:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	1e5a      	subs	r2, r3, #1
 8009f3c:	60fa      	str	r2, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	72fb      	strb	r3, [r7, #11]
      break;
 8009f56:	e006      	b.n	8009f66 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e8      	bne.n	8009f38 <SAI_Disable+0x2c>

  return status;
 8009f66:	7afb      	ldrb	r3, [r7, #11]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	20000004 	.word	0x20000004
 8009f78:	95cbec1b 	.word	0x95cbec1b

08009f7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e022      	b.n	8009fd4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d105      	bne.n	8009fa6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7f7 ffbd 	bl	8001f20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2203      	movs	r2, #3
 8009faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f814 	bl	8009fdc <HAL_SD_InitCard>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e00a      	b.n	8009fd4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fdc:	b5b0      	push	{r4, r5, r7, lr}
 8009fde:	b08e      	sub	sp, #56	; 0x38
 8009fe0:	af04      	add	r7, sp, #16
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009ff8:	2376      	movs	r3, #118	; 0x76
 8009ffa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681d      	ldr	r5, [r3, #0]
 800a000:	466c      	mov	r4, sp
 800a002:	f107 0314 	add.w	r3, r7, #20
 800a006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a00e:	f107 0308 	add.w	r3, r7, #8
 800a012:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a014:	4628      	mov	r0, r5
 800a016:	f003 f805 	bl	800d024 <SDMMC_Init>
 800a01a:	4603      	mov	r3, r0
 800a01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e056      	b.n	800a0da <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a03a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4618      	mov	r0, r3
 800a042:	f003 f828 	bl	800d096 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a054:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fe0e 	bl	800ac78 <SD_PowerON>
 800a05c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e02e      	b.n	800a0da <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fd2f 	bl	800aae0 <SD_InitCard>
 800a082:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00b      	beq.n	800a0a2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a096:	6a3b      	ldr	r3, [r7, #32]
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e01b      	b.n	800a0da <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f003 f886 	bl	800d1bc <SDMMC_CmdBlockLength>
 800a0b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00f      	beq.n	800a0d8 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <HAL_SD_InitCard+0x108>)
 800a0be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3728      	adds	r7, #40	; 0x28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	004005ff 	.word	0x004005ff

0800a0e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08c      	sub	sp, #48	; 0x30
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d107      	bne.n	800a110 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e0c3      	b.n	800a298 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	f040 80bc 	bne.w	800a296 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	441a      	add	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a12e:	429a      	cmp	r2, r3
 800a130:	d907      	bls.n	800a142 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e0aa      	b.n	800a298 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2203      	movs	r2, #3
 800a146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2200      	movs	r2, #0
 800a150:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	4a4e      	ldr	r2, [pc, #312]	; (800a2a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	4a4d      	ldr	r2, [pc, #308]	; (800a2a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a170:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	2200      	movs	r2, #0
 800a178:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	2200      	movs	r2, #0
 800a180:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	689a      	ldr	r2, [r3, #8]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3380      	adds	r3, #128	; 0x80
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	025b      	lsls	r3, r3, #9
 800a1b0:	089b      	lsrs	r3, r3, #2
 800a1b2:	f7f9 fddb 	bl	8003d6c <HAL_DMA_Start_IT>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d017      	beq.n	800a1ec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a1ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a35      	ldr	r2, [pc, #212]	; (800a2a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a1d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e055      	b.n	800a298 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0208 	orr.w	r2, r2, #8
 800a1fa:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a200:	2b01      	cmp	r3, #1
 800a202:	d002      	beq.n	800a20a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	025b      	lsls	r3, r3, #9
 800a208:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a20a:	f04f 33ff 	mov.w	r3, #4294967295
 800a20e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	025b      	lsls	r3, r3, #9
 800a214:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a216:	2390      	movs	r3, #144	; 0x90
 800a218:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a21a:	2302      	movs	r3, #2
 800a21c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a21e:	2300      	movs	r3, #0
 800a220:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a222:	2301      	movs	r3, #1
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f107 0210 	add.w	r2, r7, #16
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f002 ff97 	bl	800d164 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d90a      	bls.n	800a252 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2282      	movs	r2, #130	; 0x82
 800a240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a248:	4618      	mov	r0, r3
 800a24a:	f002 fffb 	bl	800d244 <SDMMC_CmdReadMultiBlock>
 800a24e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a250:	e009      	b.n	800a266 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2281      	movs	r2, #129	; 0x81
 800a256:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a25e:	4618      	mov	r0, r3
 800a260:	f002 ffce 	bl	800d200 <SDMMC_CmdReadSingleBlock>
 800a264:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d012      	beq.n	800a292 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a0d      	ldr	r2, [pc, #52]	; (800a2a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a272:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	431a      	orrs	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e002      	b.n	800a298 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	e000      	b.n	800a298 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a296:	2302      	movs	r3, #2
  }
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3730      	adds	r7, #48	; 0x30
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	0800a9cb 	.word	0x0800a9cb
 800a2a4:	0800aa3d 	.word	0x0800aa3d
 800a2a8:	004005ff 	.word	0x004005ff

0800a2ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08c      	sub	sp, #48	; 0x30
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d107      	bne.n	800a2d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e0c6      	b.n	800a462 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	f040 80bf 	bne.w	800a460 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	441a      	add	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d907      	bls.n	800a306 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e0ad      	b.n	800a462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2203      	movs	r2, #3
 800a30a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2200      	movs	r2, #0
 800a314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 021a 	orr.w	r2, r2, #26
 800a324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32a:	4a50      	ldr	r2, [pc, #320]	; (800a46c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a32c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a332:	4a4f      	ldr	r2, [pc, #316]	; (800a470 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a334:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33a:	2200      	movs	r2, #0
 800a33c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	2b01      	cmp	r3, #1
 800a344:	d002      	beq.n	800a34c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	025b      	lsls	r3, r3, #9
 800a34a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d90a      	bls.n	800a368 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	22a0      	movs	r2, #160	; 0xa0
 800a356:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a35e:	4618      	mov	r0, r3
 800a360:	f002 ffb4 	bl	800d2cc <SDMMC_CmdWriteMultiBlock>
 800a364:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a366:	e009      	b.n	800a37c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2290      	movs	r2, #144	; 0x90
 800a36c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a374:	4618      	mov	r0, r3
 800a376:	f002 ff87 	bl	800d288 <SDMMC_CmdWriteSingleBlock>
 800a37a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d012      	beq.n	800a3a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a3b      	ldr	r2, [pc, #236]	; (800a474 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a388:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	431a      	orrs	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e05c      	b.n	800a462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f042 0208 	orr.w	r2, r2, #8
 800a3b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3bc:	2240      	movs	r2, #64	; 0x40
 800a3be:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3380      	adds	r3, #128	; 0x80
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	025b      	lsls	r3, r3, #9
 800a3ee:	089b      	lsrs	r3, r3, #2
 800a3f0:	f7f9 fcbc 	bl	8003d6c <HAL_DMA_Start_IT>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01a      	beq.n	800a430 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 021a 	bic.w	r2, r2, #26
 800a408:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a19      	ldr	r2, [pc, #100]	; (800a474 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a410:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e018      	b.n	800a462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a430:	f04f 33ff 	mov.w	r3, #4294967295
 800a434:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	025b      	lsls	r3, r3, #9
 800a43a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a43c:	2390      	movs	r3, #144	; 0x90
 800a43e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a440:	2300      	movs	r3, #0
 800a442:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a444:	2300      	movs	r3, #0
 800a446:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a448:	2301      	movs	r3, #1
 800a44a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f107 0210 	add.w	r2, r7, #16
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f002 fe84 	bl	800d164 <SDMMC_ConfigData>

      return HAL_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	e000      	b.n	800a462 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a460:	2302      	movs	r3, #2
  }
}
 800a462:	4618      	mov	r0, r3
 800a464:	3730      	adds	r7, #48	; 0x30
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	0800a9a1 	.word	0x0800a9a1
 800a470:	0800aa3d 	.word	0x0800aa3d
 800a474:	004005ff 	.word	0x004005ff

0800a478 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a49a:	0f9b      	lsrs	r3, r3, #30
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4a6:	0e9b      	lsrs	r3, r3, #26
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	f003 030f 	and.w	r3, r3, #15
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4b8:	0e1b      	lsrs	r3, r3, #24
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4ca:	0c1b      	lsrs	r3, r3, #16
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d6:	0a1b      	lsrs	r3, r3, #8
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4ec:	0d1b      	lsrs	r3, r3, #20
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4f8:	0c1b      	lsrs	r3, r3, #16
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	f003 030f 	and.w	r3, r3, #15
 800a500:	b2da      	uxtb	r2, r3
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a50a:	0bdb      	lsrs	r3, r3, #15
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a51c:	0b9b      	lsrs	r3, r3, #14
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	b2da      	uxtb	r2, r3
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a52e:	0b5b      	lsrs	r3, r3, #13
 800a530:	b2db      	uxtb	r3, r3
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a540:	0b1b      	lsrs	r3, r3, #12
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2200      	movs	r2, #0
 800a552:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d163      	bne.n	800a624 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a560:	009a      	lsls	r2, r3, #2
 800a562:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a566:	4013      	ands	r3, r2
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a56c:	0f92      	lsrs	r2, r2, #30
 800a56e:	431a      	orrs	r2, r3
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a578:	0edb      	lsrs	r3, r3, #27
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	f003 0307 	and.w	r3, r3, #7
 800a580:	b2da      	uxtb	r2, r3
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a58a:	0e1b      	lsrs	r3, r3, #24
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	f003 0307 	and.w	r3, r3, #7
 800a592:	b2da      	uxtb	r2, r3
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a59c:	0d5b      	lsrs	r3, r3, #21
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f003 0307 	and.w	r3, r3, #7
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ae:	0c9b      	lsrs	r3, r3, #18
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c0:	0bdb      	lsrs	r3, r3, #15
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f003 0307 	and.w	r3, r3, #7
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	7e1b      	ldrb	r3, [r3, #24]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	f003 0307 	and.w	r3, r3, #7
 800a5e2:	3302      	adds	r3, #2
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a5ee:	fb02 f203 	mul.w	r2, r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	7a1b      	ldrb	r3, [r3, #8]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 030f 	and.w	r3, r3, #15
 800a600:	2201      	movs	r2, #1
 800a602:	409a      	lsls	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a610:	0a52      	lsrs	r2, r2, #9
 800a612:	fb02 f203 	mul.w	r2, r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a620:	661a      	str	r2, [r3, #96]	; 0x60
 800a622:	e031      	b.n	800a688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d11d      	bne.n	800a668 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a630:	041b      	lsls	r3, r3, #16
 800a632:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63a:	0c1b      	lsrs	r3, r3, #16
 800a63c:	431a      	orrs	r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	3301      	adds	r3, #1
 800a648:	029a      	lsls	r2, r3, #10
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a65c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	661a      	str	r2, [r3, #96]	; 0x60
 800a666:	e00f      	b.n	800a688 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a58      	ldr	r2, [pc, #352]	; (800a7d0 <HAL_SD_GetCardCSD+0x344>)
 800a66e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e09d      	b.n	800a7c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a68c:	0b9b      	lsrs	r3, r3, #14
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	b2da      	uxtb	r2, r3
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a69e:	09db      	lsrs	r3, r3, #7
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c0:	0fdb      	lsrs	r3, r3, #31
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6cc:	0f5b      	lsrs	r3, r3, #29
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	f003 0303 	and.w	r3, r3, #3
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6de:	0e9b      	lsrs	r3, r3, #26
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 0307 	and.w	r3, r3, #7
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f0:	0d9b      	lsrs	r3, r3, #22
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 030f 	and.w	r3, r3, #15
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a702:	0d5b      	lsrs	r3, r3, #21
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71e:	0c1b      	lsrs	r3, r3, #16
 800a720:	b2db      	uxtb	r3, r3
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	b2da      	uxtb	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a732:	0bdb      	lsrs	r3, r3, #15
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a746:	0b9b      	lsrs	r3, r3, #14
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75a:	0b5b      	lsrs	r3, r3, #13
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	b2da      	uxtb	r2, r3
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76e:	0b1b      	lsrs	r3, r3, #12
 800a770:	b2db      	uxtb	r3, r3
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	b2da      	uxtb	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	0a9b      	lsrs	r3, r3, #10
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a796:	0a1b      	lsrs	r3, r3, #8
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	004005ff 	.word	0x004005ff

0800a7d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a82c:	b5b0      	push	{r4, r5, r7, lr}
 800a82e:	b08e      	sub	sp, #56	; 0x38
 800a830:	af04      	add	r7, sp, #16
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2203      	movs	r2, #3
 800a840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d02e      	beq.n	800a8aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a852:	d106      	bne.n	800a862 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a858:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	639a      	str	r2, [r3, #56]	; 0x38
 800a860:	e029      	b.n	800a8b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a868:	d10a      	bne.n	800a880 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 faba 	bl	800ade4 <SD_WideBus_Enable>
 800a870:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	431a      	orrs	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	639a      	str	r2, [r3, #56]	; 0x38
 800a87e:	e01a      	b.n	800a8b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10a      	bne.n	800a89c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 faf7 	bl	800ae7a <SD_WideBus_Disable>
 800a88c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	431a      	orrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	639a      	str	r2, [r3, #56]	; 0x38
 800a89a:	e00c      	b.n	800a8b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	639a      	str	r2, [r3, #56]	; 0x38
 800a8a8:	e005      	b.n	800a8b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00b      	beq.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a26      	ldr	r2, [pc, #152]	; (800a95c <HAL_SD_ConfigWideBusOperation+0x130>)
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8d4:	e01f      	b.n	800a916 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681d      	ldr	r5, [r3, #0]
 800a8fc:	466c      	mov	r4, sp
 800a8fe:	f107 0314 	add.w	r3, r7, #20
 800a902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a910:	4628      	mov	r0, r5
 800a912:	f002 fb87 	bl	800d024 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a91e:	4618      	mov	r0, r3
 800a920:	f002 fc4c 	bl	800d1bc <SDMMC_CmdBlockLength>
 800a924:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00c      	beq.n	800a946 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a0a      	ldr	r2, [pc, #40]	; (800a95c <HAL_SD_ConfigWideBusOperation+0x130>)
 800a932:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	431a      	orrs	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a94e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a952:	4618      	mov	r0, r3
 800a954:	3728      	adds	r7, #40	; 0x28
 800a956:	46bd      	mov	sp, r7
 800a958:	bdb0      	pop	{r4, r5, r7, pc}
 800a95a:	bf00      	nop
 800a95c:	004005ff 	.word	0x004005ff

0800a960 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a96c:	f107 030c 	add.w	r3, r7, #12
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa0e 	bl	800ad94 <SD_SendStatus>
 800a978:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	431a      	orrs	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	0a5b      	lsrs	r3, r3, #9
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a996:	693b      	ldr	r3, [r7, #16]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a9be:	bf00      	nop
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9dc:	2b82      	cmp	r3, #130	; 0x82
 800a9de:	d111      	bne.n	800aa04 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f002 fc93 	bl	800d310 <SDMMC_CmdStopTransfer>
 800a9ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d008      	beq.n	800aa04 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f7ff fd3a 	bl	800a478 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f022 0208 	bic.w	r2, r2, #8
 800aa12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f004 f83f 	bl	800eab0 <HAL_SD_RxCpltCallback>
#endif
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7f9 f9ee 	bl	8003e2c <HAL_DMA_GetError>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d03e      	beq.n	800aad4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa64:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d002      	beq.n	800aa72 <SD_DMAError+0x36>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d12d      	bne.n	800aace <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a19      	ldr	r2, [pc, #100]	; (800aadc <SD_DMAError+0xa0>)
 800aa78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aa88:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aa96:	6978      	ldr	r0, [r7, #20]
 800aa98:	f7ff ff62 	bl	800a960 <HAL_SD_GetCardState>
 800aa9c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b06      	cmp	r3, #6
 800aaa2:	d002      	beq.n	800aaaa <SD_DMAError+0x6e>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	d10a      	bne.n	800aac0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f002 fc2e 	bl	800d310 <SDMMC_CmdStopTransfer>
 800aab4:	4602      	mov	r2, r0
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	431a      	orrs	r2, r3
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	2200      	movs	r2, #0
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aace:	6978      	ldr	r0, [r7, #20]
 800aad0:	f7ff fcd2 	bl	800a478 <HAL_SD_ErrorCallback>
#endif
  }
}
 800aad4:	bf00      	nop
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	004005ff 	.word	0x004005ff

0800aae0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aae0:	b5b0      	push	{r4, r5, r7, lr}
 800aae2:	b094      	sub	sp, #80	; 0x50
 800aae4:	af04      	add	r7, sp, #16
 800aae6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aae8:	2301      	movs	r3, #1
 800aaea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f002 fadf 	bl	800d0b4 <SDMMC_GetPowerState>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aafc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ab00:	e0b6      	b.n	800ac70 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d02f      	beq.n	800ab6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f002 fd09 	bl	800d526 <SDMMC_CmdSendCID>
 800ab14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <SD_InitCard+0x40>
    {
      return errorstate;
 800ab1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1e:	e0a7      	b.n	800ac70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f002 fb09 	bl	800d13e <SDMMC_GetResponse>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2104      	movs	r1, #4
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f002 fb00 	bl	800d13e <SDMMC_GetResponse>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2108      	movs	r1, #8
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 faf7 	bl	800d13e <SDMMC_GetResponse>
 800ab50:	4602      	mov	r2, r0
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	210c      	movs	r1, #12
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f002 faee 	bl	800d13e <SDMMC_GetResponse>
 800ab62:	4602      	mov	r2, r0
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d00d      	beq.n	800ab8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f107 020e 	add.w	r2, r7, #14
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f002 fd0f 	bl	800d5a0 <SDMMC_CmdSetRelAdd>
 800ab82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <SD_InitCard+0xae>
    {
      return errorstate;
 800ab8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab8c:	e070      	b.n	800ac70 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d036      	beq.n	800ac04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ab96:	89fb      	ldrh	r3, [r7, #14]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba6:	041b      	lsls	r3, r3, #16
 800aba8:	4619      	mov	r1, r3
 800abaa:	4610      	mov	r0, r2
 800abac:	f002 fcd9 	bl	800d562 <SDMMC_CmdSendCSD>
 800abb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800abb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <SD_InitCard+0xdc>
    {
      return errorstate;
 800abb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abba:	e059      	b.n	800ac70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2100      	movs	r1, #0
 800abc2:	4618      	mov	r0, r3
 800abc4:	f002 fabb 	bl	800d13e <SDMMC_GetResponse>
 800abc8:	4602      	mov	r2, r0
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2104      	movs	r1, #4
 800abd4:	4618      	mov	r0, r3
 800abd6:	f002 fab2 	bl	800d13e <SDMMC_GetResponse>
 800abda:	4602      	mov	r2, r0
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2108      	movs	r1, #8
 800abe6:	4618      	mov	r0, r3
 800abe8:	f002 faa9 	bl	800d13e <SDMMC_GetResponse>
 800abec:	4602      	mov	r2, r0
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	210c      	movs	r1, #12
 800abf8:	4618      	mov	r0, r3
 800abfa:	f002 faa0 	bl	800d13e <SDMMC_GetResponse>
 800abfe:	4602      	mov	r2, r0
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2104      	movs	r1, #4
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f002 fa97 	bl	800d13e <SDMMC_GetResponse>
 800ac10:	4603      	mov	r3, r0
 800ac12:	0d1a      	lsrs	r2, r3, #20
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ac18:	f107 0310 	add.w	r3, r7, #16
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff fc34 	bl	800a48c <HAL_SD_GetCardCSD>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d002      	beq.n	800ac30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac2e:	e01f      	b.n	800ac70 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6819      	ldr	r1, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac38:	041b      	lsls	r3, r3, #16
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f04f 0300 	mov.w	r3, #0
 800ac40:	4608      	mov	r0, r1
 800ac42:	f002 fb87 	bl	800d354 <SDMMC_CmdSelDesel>
 800ac46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <SD_InitCard+0x172>
  {
    return errorstate;
 800ac4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac50:	e00e      	b.n	800ac70 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681d      	ldr	r5, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	466c      	mov	r4, sp
 800ac5a:	f103 0210 	add.w	r2, r3, #16
 800ac5e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac64:	3304      	adds	r3, #4
 800ac66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac68:	4628      	mov	r0, r5
 800ac6a:	f002 f9db 	bl	800d024 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3740      	adds	r7, #64	; 0x40
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bdb0      	pop	{r4, r5, r7, pc}

0800ac78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f002 fb82 	bl	800d39a <SDMMC_CmdGoIdleState>
 800ac96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	e072      	b.n	800ad88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f002 fb95 	bl	800d3d6 <SDMMC_CmdOperCond>
 800acac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00d      	beq.n	800acd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f002 fb6b 	bl	800d39a <SDMMC_CmdGoIdleState>
 800acc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	e05b      	b.n	800ad88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d137      	bne.n	800ad4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2100      	movs	r1, #0
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 fb95 	bl	800d414 <SDMMC_CmdAppCommand>
 800acea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d02d      	beq.n	800ad4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acf6:	e047      	b.n	800ad88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2100      	movs	r1, #0
 800acfe:	4618      	mov	r0, r3
 800ad00:	f002 fb88 	bl	800d414 <SDMMC_CmdAppCommand>
 800ad04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <SD_PowerON+0x98>
    {
      return errorstate;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	e03b      	b.n	800ad88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	491e      	ldr	r1, [pc, #120]	; (800ad90 <SD_PowerON+0x118>)
 800ad16:	4618      	mov	r0, r3
 800ad18:	f002 fb9e 	bl	800d458 <SDMMC_CmdAppOperCommand>
 800ad1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad28:	e02e      	b.n	800ad88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f002 fa04 	bl	800d13e <SDMMC_GetResponse>
 800ad36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	0fdb      	lsrs	r3, r3, #31
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <SD_PowerON+0xcc>
 800ad40:	2301      	movs	r3, #1
 800ad42:	e000      	b.n	800ad46 <SD_PowerON+0xce>
 800ad44:	2300      	movs	r3, #0
 800ad46:	613b      	str	r3, [r7, #16]

    count++;
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d802      	bhi.n	800ad5e <SD_PowerON+0xe6>
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0cc      	beq.n	800acf8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d902      	bls.n	800ad6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad6c:	e00c      	b.n	800ad88 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	645a      	str	r2, [r3, #68]	; 0x44
 800ad7e:	e002      	b.n	800ad86 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	c1100000 	.word	0xc1100000

0800ad94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d102      	bne.n	800adaa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ada4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ada8:	e018      	b.n	800addc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	4619      	mov	r1, r3
 800adb6:	4610      	mov	r0, r2
 800adb8:	f002 fc13 	bl	800d5e2 <SDMMC_CmdSendStatus>
 800adbc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	e009      	b.n	800addc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2100      	movs	r1, #0
 800adce:	4618      	mov	r0, r3
 800add0:	f002 f9b5 	bl	800d13e <SDMMC_GetResponse>
 800add4:	4602      	mov	r2, r0
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800adec:	2300      	movs	r3, #0
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	2300      	movs	r3, #0
 800adf2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2100      	movs	r1, #0
 800adfa:	4618      	mov	r0, r3
 800adfc:	f002 f99f 	bl	800d13e <SDMMC_GetResponse>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae0a:	d102      	bne.n	800ae12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae10:	e02f      	b.n	800ae72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae12:	f107 030c 	add.w	r3, r7, #12
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f879 	bl	800af10 <SD_FindSCR>
 800ae1e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	e023      	b.n	800ae72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d01c      	beq.n	800ae6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3c:	041b      	lsls	r3, r3, #16
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4610      	mov	r0, r2
 800ae42:	f002 fae7 	bl	800d414 <SDMMC_CmdAppCommand>
 800ae46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	e00f      	b.n	800ae72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2102      	movs	r1, #2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 fb21 	bl	800d4a0 <SDMMC_CmdBusWidth>
 800ae5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	e003      	b.n	800ae72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e001      	b.n	800ae72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b086      	sub	sp, #24
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	2300      	movs	r3, #0
 800ae88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2100      	movs	r1, #0
 800ae90:	4618      	mov	r0, r3
 800ae92:	f002 f954 	bl	800d13e <SDMMC_GetResponse>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aea0:	d102      	bne.n	800aea8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aea6:	e02f      	b.n	800af08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aea8:	f107 030c 	add.w	r3, r7, #12
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f82e 	bl	800af10 <SD_FindSCR>
 800aeb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	e023      	b.n	800af08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d01c      	beq.n	800af04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed2:	041b      	lsls	r3, r3, #16
 800aed4:	4619      	mov	r1, r3
 800aed6:	4610      	mov	r0, r2
 800aed8:	f002 fa9c 	bl	800d414 <SDMMC_CmdAppCommand>
 800aedc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	e00f      	b.n	800af08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2100      	movs	r1, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f002 fad6 	bl	800d4a0 <SDMMC_CmdBusWidth>
 800aef4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	e003      	b.n	800af08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af00:	2300      	movs	r3, #0
 800af02:	e001      	b.n	800af08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b08f      	sub	sp, #60	; 0x3c
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af1a:	f7f8 fa29 	bl	8003370 <HAL_GetTick>
 800af1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800af24:	2300      	movs	r3, #0
 800af26:	60bb      	str	r3, [r7, #8]
 800af28:	2300      	movs	r3, #0
 800af2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2108      	movs	r1, #8
 800af36:	4618      	mov	r0, r3
 800af38:	f002 f940 	bl	800d1bc <SDMMC_CmdBlockLength>
 800af3c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <SD_FindSCR+0x38>
  {
    return errorstate;
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	e0b2      	b.n	800b0ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af50:	041b      	lsls	r3, r3, #16
 800af52:	4619      	mov	r1, r3
 800af54:	4610      	mov	r0, r2
 800af56:	f002 fa5d 	bl	800d414 <SDMMC_CmdAppCommand>
 800af5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <SD_FindSCR+0x56>
  {
    return errorstate;
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	e0a3      	b.n	800b0ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af66:	f04f 33ff 	mov.w	r3, #4294967295
 800af6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800af6c:	2308      	movs	r3, #8
 800af6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800af70:	2330      	movs	r3, #48	; 0x30
 800af72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800af74:	2302      	movs	r3, #2
 800af76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800af78:	2300      	movs	r3, #0
 800af7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800af7c:	2301      	movs	r3, #1
 800af7e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f107 0210 	add.w	r2, r7, #16
 800af88:	4611      	mov	r1, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f002 f8ea 	bl	800d164 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f002 faa5 	bl	800d4e4 <SDMMC_CmdSendSCR>
 800af9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d02a      	beq.n	800aff8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	e083      	b.n	800b0ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00f      	beq.n	800afd4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6819      	ldr	r1, [r3, #0]
 800afb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	f107 0208 	add.w	r2, r7, #8
 800afc0:	18d4      	adds	r4, r2, r3
 800afc2:	4608      	mov	r0, r1
 800afc4:	f002 f85a 	bl	800d07c <SDMMC_ReadFIFO>
 800afc8:	4603      	mov	r3, r0
 800afca:	6023      	str	r3, [r4, #0]
      index++;
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	3301      	adds	r3, #1
 800afd0:	637b      	str	r3, [r7, #52]	; 0x34
 800afd2:	e006      	b.n	800afe2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d012      	beq.n	800b008 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800afe2:	f7f8 f9c5 	bl	8003370 <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff0:	d102      	bne.n	800aff8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aff2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aff6:	e05a      	b.n	800b0ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0cf      	beq.n	800afa6 <SD_FindSCR+0x96>
 800b006:	e000      	b.n	800b00a <SD_FindSCR+0xfa>
      break;
 800b008:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b010:	f003 0308 	and.w	r3, r3, #8
 800b014:	2b00      	cmp	r3, #0
 800b016:	d005      	beq.n	800b024 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2208      	movs	r2, #8
 800b01e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b020:	2308      	movs	r3, #8
 800b022:	e044      	b.n	800b0ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2202      	movs	r2, #2
 800b038:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b03a:	2302      	movs	r3, #2
 800b03c:	e037      	b.n	800b0ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b044:	f003 0320 	and.w	r3, r3, #32
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d005      	beq.n	800b058 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2220      	movs	r2, #32
 800b052:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b054:	2320      	movs	r3, #32
 800b056:	e02a      	b.n	800b0ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f240 523a 	movw	r2, #1338	; 0x53a
 800b060:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	061a      	lsls	r2, r3, #24
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	021b      	lsls	r3, r3, #8
 800b06a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b06e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	0a1b      	lsrs	r3, r3, #8
 800b074:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b078:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	0e1b      	lsrs	r3, r3, #24
 800b07e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b082:	601a      	str	r2, [r3, #0]
    scr++;
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	3304      	adds	r3, #4
 800b088:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	061a      	lsls	r2, r3, #24
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b096:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	0a1b      	lsrs	r3, r3, #8
 800b09c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	0e1b      	lsrs	r3, r3, #24
 800b0a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	373c      	adds	r7, #60	; 0x3c
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd90      	pop	{r4, r7, pc}

0800b0b6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e025      	b.n	800b116 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7f5 feb6 	bl	8000e50 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2202      	movs	r2, #2
 800b0e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f001 fe6a 	bl	800cdd0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	461a      	mov	r2, r3
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	f001 fed4 	bl	800ceb4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	60f8      	str	r0, [r7, #12]
 800b126:	60b9      	str	r1, [r7, #8]
 800b128:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d101      	bne.n	800b13a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800b136:	2302      	movs	r3, #2
 800b138:	e018      	b.n	800b16c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2202      	movs	r2, #2
 800b13e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f001 ff32 	bl	800cfb4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b02      	cmp	r3, #2
 800b156:	d104      	bne.n	800b162 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2205      	movs	r2, #5
 800b15c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800b160:	e003      	b.n	800b16a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b02      	cmp	r3, #2
 800b188:	d101      	bne.n	800b18e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b18a:	2302      	movs	r3, #2
 800b18c:	e00e      	b.n	800b1ac <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2202      	movs	r2, #2
 800b192:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f001 ff2d 	bl	800cffc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e04c      	b.n	800b260 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7f6 ff32 	bl	8002044 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0203 	bic.w	r2, r2, #3
 800b1f6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4b19      	ldr	r3, [pc, #100]	; (800b268 <HAL_SPDIFRX_Init+0xb4>)
 800b204:	4013      	ands	r3, r2
 800b206:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b210:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b216:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b21c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b222:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b228:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b22e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b234:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800b23a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800b240:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	4313      	orrs	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	fff88407 	.word	0xfff88407

0800b26c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e09d      	b.n	800b3ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	2b00      	cmp	r3, #0
 800b284:	d108      	bne.n	800b298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b28e:	d009      	beq.n	800b2a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	61da      	str	r2, [r3, #28]
 800b296:	e005      	b.n	800b2a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7f6 ff40 	bl	8002144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2e4:	d902      	bls.n	800b2ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	e002      	b.n	800b2f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b2ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b2fa:	d007      	beq.n	800b30c <HAL_SPI_Init+0xa0>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b304:	d002      	beq.n	800b30c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b31c:	431a      	orrs	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	431a      	orrs	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b344:	431a      	orrs	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b34e:	ea42 0103 	orr.w	r1, r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b356:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	0c1b      	lsrs	r3, r3, #16
 800b368:	f003 0204 	and.w	r2, r3, #4
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b370:	f003 0310 	and.w	r3, r3, #16
 800b374:	431a      	orrs	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37a:	f003 0308 	and.w	r3, r3, #8
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b388:	ea42 0103 	orr.w	r1, r2, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69da      	ldr	r2, [r3, #28]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e049      	b.n	800b468 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7f7 fb4f 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4619      	mov	r1, r3
 800b400:	4610      	mov	r0, r2
 800b402:	f000 fc21 	bl	800bc48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b01      	cmp	r3, #1
 800b482:	d001      	beq.n	800b488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e054      	b.n	800b532 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2202      	movs	r2, #2
 800b48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68da      	ldr	r2, [r3, #12]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f042 0201 	orr.w	r2, r2, #1
 800b49e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a26      	ldr	r2, [pc, #152]	; (800b540 <HAL_TIM_Base_Start_IT+0xd0>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d022      	beq.n	800b4f0 <HAL_TIM_Base_Start_IT+0x80>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4b2:	d01d      	beq.n	800b4f0 <HAL_TIM_Base_Start_IT+0x80>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a22      	ldr	r2, [pc, #136]	; (800b544 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d018      	beq.n	800b4f0 <HAL_TIM_Base_Start_IT+0x80>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a21      	ldr	r2, [pc, #132]	; (800b548 <HAL_TIM_Base_Start_IT+0xd8>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d013      	beq.n	800b4f0 <HAL_TIM_Base_Start_IT+0x80>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a1f      	ldr	r2, [pc, #124]	; (800b54c <HAL_TIM_Base_Start_IT+0xdc>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d00e      	beq.n	800b4f0 <HAL_TIM_Base_Start_IT+0x80>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a1e      	ldr	r2, [pc, #120]	; (800b550 <HAL_TIM_Base_Start_IT+0xe0>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d009      	beq.n	800b4f0 <HAL_TIM_Base_Start_IT+0x80>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a1c      	ldr	r2, [pc, #112]	; (800b554 <HAL_TIM_Base_Start_IT+0xe4>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d004      	beq.n	800b4f0 <HAL_TIM_Base_Start_IT+0x80>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a1b      	ldr	r2, [pc, #108]	; (800b558 <HAL_TIM_Base_Start_IT+0xe8>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d115      	bne.n	800b51c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	689a      	ldr	r2, [r3, #8]
 800b4f6:	4b19      	ldr	r3, [pc, #100]	; (800b55c <HAL_TIM_Base_Start_IT+0xec>)
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b06      	cmp	r3, #6
 800b500:	d015      	beq.n	800b52e <HAL_TIM_Base_Start_IT+0xbe>
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b508:	d011      	beq.n	800b52e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f042 0201 	orr.w	r2, r2, #1
 800b518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b51a:	e008      	b.n	800b52e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0201 	orr.w	r2, r2, #1
 800b52a:	601a      	str	r2, [r3, #0]
 800b52c:	e000      	b.n	800b530 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b52e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	40010000 	.word	0x40010000
 800b544:	40000400 	.word	0x40000400
 800b548:	40000800 	.word	0x40000800
 800b54c:	40000c00 	.word	0x40000c00
 800b550:	40010400 	.word	0x40010400
 800b554:	40014000 	.word	0x40014000
 800b558:	40001800 	.word	0x40001800
 800b55c:	00010007 	.word	0x00010007

0800b560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d101      	bne.n	800b572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e049      	b.n	800b606 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7f7 faee 	bl	8002b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3304      	adds	r3, #4
 800b59c:	4619      	mov	r1, r3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	f000 fb52 	bl	800bc48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b082      	sub	sp, #8
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	f003 0302 	and.w	r3, r3, #2
 800b620:	2b02      	cmp	r3, #2
 800b622:	d122      	bne.n	800b66a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	f003 0302 	and.w	r3, r3, #2
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d11b      	bne.n	800b66a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f06f 0202 	mvn.w	r2, #2
 800b63a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	f003 0303 	and.w	r3, r3, #3
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d003      	beq.n	800b658 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fadb 	bl	800bc0c <HAL_TIM_IC_CaptureCallback>
 800b656:	e005      	b.n	800b664 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 facd 	bl	800bbf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fade 	bl	800bc20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f003 0304 	and.w	r3, r3, #4
 800b674:	2b04      	cmp	r3, #4
 800b676:	d122      	bne.n	800b6be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f003 0304 	and.w	r3, r3, #4
 800b682:	2b04      	cmp	r3, #4
 800b684:	d11b      	bne.n	800b6be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f06f 0204 	mvn.w	r2, #4
 800b68e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fab1 	bl	800bc0c <HAL_TIM_IC_CaptureCallback>
 800b6aa:	e005      	b.n	800b6b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 faa3 	bl	800bbf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fab4 	bl	800bc20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	f003 0308 	and.w	r3, r3, #8
 800b6c8:	2b08      	cmp	r3, #8
 800b6ca:	d122      	bne.n	800b712 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f003 0308 	and.w	r3, r3, #8
 800b6d6:	2b08      	cmp	r3, #8
 800b6d8:	d11b      	bne.n	800b712 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f06f 0208 	mvn.w	r2, #8
 800b6e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2204      	movs	r2, #4
 800b6e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	f003 0303 	and.w	r3, r3, #3
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fa87 	bl	800bc0c <HAL_TIM_IC_CaptureCallback>
 800b6fe:	e005      	b.n	800b70c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fa79 	bl	800bbf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fa8a 	bl	800bc20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f003 0310 	and.w	r3, r3, #16
 800b71c:	2b10      	cmp	r3, #16
 800b71e:	d122      	bne.n	800b766 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f003 0310 	and.w	r3, r3, #16
 800b72a:	2b10      	cmp	r3, #16
 800b72c:	d11b      	bne.n	800b766 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f06f 0210 	mvn.w	r2, #16
 800b736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2208      	movs	r2, #8
 800b73c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fa5d 	bl	800bc0c <HAL_TIM_IC_CaptureCallback>
 800b752:	e005      	b.n	800b760 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fa4f 	bl	800bbf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fa60 	bl	800bc20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	2b01      	cmp	r3, #1
 800b772:	d10e      	bne.n	800b792 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d107      	bne.n	800b792 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f06f 0201 	mvn.w	r2, #1
 800b78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7f6 f901 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79c:	2b80      	cmp	r3, #128	; 0x80
 800b79e:	d10e      	bne.n	800b7be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7aa:	2b80      	cmp	r3, #128	; 0x80
 800b7ac:	d107      	bne.n	800b7be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fef3 	bl	800c5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7cc:	d10e      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d8:	2b80      	cmp	r3, #128	; 0x80
 800b7da:	d107      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fee6 	bl	800c5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f6:	2b40      	cmp	r3, #64	; 0x40
 800b7f8:	d10e      	bne.n	800b818 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b804:	2b40      	cmp	r3, #64	; 0x40
 800b806:	d107      	bne.n	800b818 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fa0e 	bl	800bc34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	f003 0320 	and.w	r3, r3, #32
 800b822:	2b20      	cmp	r3, #32
 800b824:	d10e      	bne.n	800b844 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f003 0320 	and.w	r3, r3, #32
 800b830:	2b20      	cmp	r3, #32
 800b832:	d107      	bne.n	800b844 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f06f 0220 	mvn.w	r2, #32
 800b83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fea6 	bl	800c590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d101      	bne.n	800b866 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b862:	2302      	movs	r3, #2
 800b864:	e0fd      	b.n	800ba62 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b14      	cmp	r3, #20
 800b872:	f200 80f0 	bhi.w	800ba56 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b876:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87c:	0800b8d1 	.word	0x0800b8d1
 800b880:	0800ba57 	.word	0x0800ba57
 800b884:	0800ba57 	.word	0x0800ba57
 800b888:	0800ba57 	.word	0x0800ba57
 800b88c:	0800b911 	.word	0x0800b911
 800b890:	0800ba57 	.word	0x0800ba57
 800b894:	0800ba57 	.word	0x0800ba57
 800b898:	0800ba57 	.word	0x0800ba57
 800b89c:	0800b953 	.word	0x0800b953
 800b8a0:	0800ba57 	.word	0x0800ba57
 800b8a4:	0800ba57 	.word	0x0800ba57
 800b8a8:	0800ba57 	.word	0x0800ba57
 800b8ac:	0800b993 	.word	0x0800b993
 800b8b0:	0800ba57 	.word	0x0800ba57
 800b8b4:	0800ba57 	.word	0x0800ba57
 800b8b8:	0800ba57 	.word	0x0800ba57
 800b8bc:	0800b9d5 	.word	0x0800b9d5
 800b8c0:	0800ba57 	.word	0x0800ba57
 800b8c4:	0800ba57 	.word	0x0800ba57
 800b8c8:	0800ba57 	.word	0x0800ba57
 800b8cc:	0800ba15 	.word	0x0800ba15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68b9      	ldr	r1, [r7, #8]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fa56 	bl	800bd88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	699a      	ldr	r2, [r3, #24]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0208 	orr.w	r2, r2, #8
 800b8ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	699a      	ldr	r2, [r3, #24]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f022 0204 	bic.w	r2, r2, #4
 800b8fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6999      	ldr	r1, [r3, #24]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	691a      	ldr	r2, [r3, #16]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	619a      	str	r2, [r3, #24]
      break;
 800b90e:	e0a3      	b.n	800ba58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68b9      	ldr	r1, [r7, #8]
 800b916:	4618      	mov	r0, r3
 800b918:	f000 faa8 	bl	800be6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	699a      	ldr	r2, [r3, #24]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b92a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	699a      	ldr	r2, [r3, #24]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b93a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6999      	ldr	r1, [r3, #24]
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	021a      	lsls	r2, r3, #8
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	619a      	str	r2, [r3, #24]
      break;
 800b950:	e082      	b.n	800ba58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	4618      	mov	r0, r3
 800b95a:	f000 faff 	bl	800bf5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69da      	ldr	r2, [r3, #28]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f042 0208 	orr.w	r2, r2, #8
 800b96c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69da      	ldr	r2, [r3, #28]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0204 	bic.w	r2, r2, #4
 800b97c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	69d9      	ldr	r1, [r3, #28]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	691a      	ldr	r2, [r3, #16]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	61da      	str	r2, [r3, #28]
      break;
 800b990:	e062      	b.n	800ba58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68b9      	ldr	r1, [r7, #8]
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 fb55 	bl	800c048 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	69da      	ldr	r2, [r3, #28]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	69da      	ldr	r2, [r3, #28]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69d9      	ldr	r1, [r3, #28]
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	021a      	lsls	r2, r3, #8
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	61da      	str	r2, [r3, #28]
      break;
 800b9d2:	e041      	b.n	800ba58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68b9      	ldr	r1, [r7, #8]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 fb8c 	bl	800c0f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f042 0208 	orr.w	r2, r2, #8
 800b9ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f022 0204 	bic.w	r2, r2, #4
 800b9fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	691a      	ldr	r2, [r3, #16]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba12:	e021      	b.n	800ba58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 fbbe 	bl	800c19c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	021a      	lsls	r2, r3, #8
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba54:	e000      	b.n	800ba58 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ba56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop

0800ba6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <HAL_TIM_ConfigClockSource+0x18>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e0b3      	b.n	800bbec <HAL_TIM_ConfigClockSource+0x180>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2202      	movs	r2, #2
 800ba90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	4b55      	ldr	r3, [pc, #340]	; (800bbf4 <HAL_TIM_ConfigClockSource+0x188>)
 800baa0:	4013      	ands	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800baaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800babc:	d03e      	beq.n	800bb3c <HAL_TIM_ConfigClockSource+0xd0>
 800babe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac2:	f200 8087 	bhi.w	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800bac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baca:	f000 8085 	beq.w	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800bace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad2:	d87f      	bhi.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800bad4:	2b70      	cmp	r3, #112	; 0x70
 800bad6:	d01a      	beq.n	800bb0e <HAL_TIM_ConfigClockSource+0xa2>
 800bad8:	2b70      	cmp	r3, #112	; 0x70
 800bada:	d87b      	bhi.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800badc:	2b60      	cmp	r3, #96	; 0x60
 800bade:	d050      	beq.n	800bb82 <HAL_TIM_ConfigClockSource+0x116>
 800bae0:	2b60      	cmp	r3, #96	; 0x60
 800bae2:	d877      	bhi.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800bae4:	2b50      	cmp	r3, #80	; 0x50
 800bae6:	d03c      	beq.n	800bb62 <HAL_TIM_ConfigClockSource+0xf6>
 800bae8:	2b50      	cmp	r3, #80	; 0x50
 800baea:	d873      	bhi.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800baec:	2b40      	cmp	r3, #64	; 0x40
 800baee:	d058      	beq.n	800bba2 <HAL_TIM_ConfigClockSource+0x136>
 800baf0:	2b40      	cmp	r3, #64	; 0x40
 800baf2:	d86f      	bhi.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800baf4:	2b30      	cmp	r3, #48	; 0x30
 800baf6:	d064      	beq.n	800bbc2 <HAL_TIM_ConfigClockSource+0x156>
 800baf8:	2b30      	cmp	r3, #48	; 0x30
 800bafa:	d86b      	bhi.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800bafc:	2b20      	cmp	r3, #32
 800bafe:	d060      	beq.n	800bbc2 <HAL_TIM_ConfigClockSource+0x156>
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d867      	bhi.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d05c      	beq.n	800bbc2 <HAL_TIM_ConfigClockSource+0x156>
 800bb08:	2b10      	cmp	r3, #16
 800bb0a:	d05a      	beq.n	800bbc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bb0c:	e062      	b.n	800bbd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	6899      	ldr	r1, [r3, #8]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	685a      	ldr	r2, [r3, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	f000 fc0b 	bl	800c338 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	609a      	str	r2, [r3, #8]
      break;
 800bb3a:	e04e      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6818      	ldr	r0, [r3, #0]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	6899      	ldr	r1, [r3, #8]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f000 fbf4 	bl	800c338 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689a      	ldr	r2, [r3, #8]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb5e:	609a      	str	r2, [r3, #8]
      break;
 800bb60:	e03b      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6818      	ldr	r0, [r3, #0]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	6859      	ldr	r1, [r3, #4]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f000 fb68 	bl	800c244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2150      	movs	r1, #80	; 0x50
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 fbc1 	bl	800c302 <TIM_ITRx_SetConfig>
      break;
 800bb80:	e02b      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6818      	ldr	r0, [r3, #0]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	6859      	ldr	r1, [r3, #4]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	f000 fb87 	bl	800c2a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2160      	movs	r1, #96	; 0x60
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 fbb1 	bl	800c302 <TIM_ITRx_SetConfig>
      break;
 800bba0:	e01b      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6818      	ldr	r0, [r3, #0]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	6859      	ldr	r1, [r3, #4]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f000 fb48 	bl	800c244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2140      	movs	r1, #64	; 0x40
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 fba1 	bl	800c302 <TIM_ITRx_SetConfig>
      break;
 800bbc0:	e00b      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f000 fb98 	bl	800c302 <TIM_ITRx_SetConfig>
        break;
 800bbd2:	e002      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bbd4:	bf00      	nop
 800bbd6:	e000      	b.n	800bbda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bbd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	fffeff88 	.word	0xfffeff88

0800bbf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a40      	ldr	r2, [pc, #256]	; (800bd5c <TIM_Base_SetConfig+0x114>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d013      	beq.n	800bc88 <TIM_Base_SetConfig+0x40>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc66:	d00f      	beq.n	800bc88 <TIM_Base_SetConfig+0x40>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a3d      	ldr	r2, [pc, #244]	; (800bd60 <TIM_Base_SetConfig+0x118>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d00b      	beq.n	800bc88 <TIM_Base_SetConfig+0x40>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a3c      	ldr	r2, [pc, #240]	; (800bd64 <TIM_Base_SetConfig+0x11c>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d007      	beq.n	800bc88 <TIM_Base_SetConfig+0x40>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a3b      	ldr	r2, [pc, #236]	; (800bd68 <TIM_Base_SetConfig+0x120>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d003      	beq.n	800bc88 <TIM_Base_SetConfig+0x40>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a3a      	ldr	r2, [pc, #232]	; (800bd6c <TIM_Base_SetConfig+0x124>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d108      	bne.n	800bc9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a2f      	ldr	r2, [pc, #188]	; (800bd5c <TIM_Base_SetConfig+0x114>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d02b      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bca8:	d027      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a2c      	ldr	r2, [pc, #176]	; (800bd60 <TIM_Base_SetConfig+0x118>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d023      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a2b      	ldr	r2, [pc, #172]	; (800bd64 <TIM_Base_SetConfig+0x11c>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d01f      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4a2a      	ldr	r2, [pc, #168]	; (800bd68 <TIM_Base_SetConfig+0x120>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d01b      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a29      	ldr	r2, [pc, #164]	; (800bd6c <TIM_Base_SetConfig+0x124>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d017      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a28      	ldr	r2, [pc, #160]	; (800bd70 <TIM_Base_SetConfig+0x128>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d013      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a27      	ldr	r2, [pc, #156]	; (800bd74 <TIM_Base_SetConfig+0x12c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d00f      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a26      	ldr	r2, [pc, #152]	; (800bd78 <TIM_Base_SetConfig+0x130>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d00b      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a25      	ldr	r2, [pc, #148]	; (800bd7c <TIM_Base_SetConfig+0x134>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d007      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a24      	ldr	r2, [pc, #144]	; (800bd80 <TIM_Base_SetConfig+0x138>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d003      	beq.n	800bcfa <TIM_Base_SetConfig+0xb2>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a23      	ldr	r2, [pc, #140]	; (800bd84 <TIM_Base_SetConfig+0x13c>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d108      	bne.n	800bd0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	689a      	ldr	r2, [r3, #8]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a0a      	ldr	r2, [pc, #40]	; (800bd5c <TIM_Base_SetConfig+0x114>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d003      	beq.n	800bd40 <TIM_Base_SetConfig+0xf8>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a0c      	ldr	r2, [pc, #48]	; (800bd6c <TIM_Base_SetConfig+0x124>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d103      	bne.n	800bd48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	691a      	ldr	r2, [r3, #16]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	615a      	str	r2, [r3, #20]
}
 800bd4e:	bf00      	nop
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	40010000 	.word	0x40010000
 800bd60:	40000400 	.word	0x40000400
 800bd64:	40000800 	.word	0x40000800
 800bd68:	40000c00 	.word	0x40000c00
 800bd6c:	40010400 	.word	0x40010400
 800bd70:	40014000 	.word	0x40014000
 800bd74:	40014400 	.word	0x40014400
 800bd78:	40014800 	.word	0x40014800
 800bd7c:	40001800 	.word	0x40001800
 800bd80:	40001c00 	.word	0x40001c00
 800bd84:	40002000 	.word	0x40002000

0800bd88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	f023 0201 	bic.w	r2, r3, #1
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	699b      	ldr	r3, [r3, #24]
 800bdae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	4b2b      	ldr	r3, [pc, #172]	; (800be60 <TIM_OC1_SetConfig+0xd8>)
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f023 0303 	bic.w	r3, r3, #3
 800bdbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f023 0302 	bic.w	r3, r3, #2
 800bdd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a21      	ldr	r2, [pc, #132]	; (800be64 <TIM_OC1_SetConfig+0xdc>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d003      	beq.n	800bdec <TIM_OC1_SetConfig+0x64>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a20      	ldr	r2, [pc, #128]	; (800be68 <TIM_OC1_SetConfig+0xe0>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d10c      	bne.n	800be06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f023 0308 	bic.w	r3, r3, #8
 800bdf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f023 0304 	bic.w	r3, r3, #4
 800be04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a16      	ldr	r2, [pc, #88]	; (800be64 <TIM_OC1_SetConfig+0xdc>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d003      	beq.n	800be16 <TIM_OC1_SetConfig+0x8e>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a15      	ldr	r2, [pc, #84]	; (800be68 <TIM_OC1_SetConfig+0xe0>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d111      	bne.n	800be3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	4313      	orrs	r3, r2
 800be38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685a      	ldr	r2, [r3, #4]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	621a      	str	r2, [r3, #32]
}
 800be54:	bf00      	nop
 800be56:	371c      	adds	r7, #28
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	fffeff8f 	.word	0xfffeff8f
 800be64:	40010000 	.word	0x40010000
 800be68:	40010400 	.word	0x40010400

0800be6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	f023 0210 	bic.w	r2, r3, #16
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4b2e      	ldr	r3, [pc, #184]	; (800bf50 <TIM_OC2_SetConfig+0xe4>)
 800be98:	4013      	ands	r3, r2
 800be9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	021b      	lsls	r3, r3, #8
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4313      	orrs	r3, r2
 800beae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f023 0320 	bic.w	r3, r3, #32
 800beb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a23      	ldr	r2, [pc, #140]	; (800bf54 <TIM_OC2_SetConfig+0xe8>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d003      	beq.n	800bed4 <TIM_OC2_SetConfig+0x68>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a22      	ldr	r2, [pc, #136]	; (800bf58 <TIM_OC2_SetConfig+0xec>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d10d      	bne.n	800bef0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	011b      	lsls	r3, r3, #4
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a18      	ldr	r2, [pc, #96]	; (800bf54 <TIM_OC2_SetConfig+0xe8>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d003      	beq.n	800bf00 <TIM_OC2_SetConfig+0x94>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a17      	ldr	r2, [pc, #92]	; (800bf58 <TIM_OC2_SetConfig+0xec>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d113      	bne.n	800bf28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	695b      	ldr	r3, [r3, #20]
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	697a      	ldr	r2, [r7, #20]
 800bf40:	621a      	str	r2, [r3, #32]
}
 800bf42:	bf00      	nop
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	feff8fff 	.word	0xfeff8fff
 800bf54:	40010000 	.word	0x40010000
 800bf58:	40010400 	.word	0x40010400

0800bf5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a1b      	ldr	r3, [r3, #32]
 800bf76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	69db      	ldr	r3, [r3, #28]
 800bf82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	4b2d      	ldr	r3, [pc, #180]	; (800c03c <TIM_OC3_SetConfig+0xe0>)
 800bf88:	4013      	ands	r3, r2
 800bf8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f023 0303 	bic.w	r3, r3, #3
 800bf92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	021b      	lsls	r3, r3, #8
 800bfac:	697a      	ldr	r2, [r7, #20]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a22      	ldr	r2, [pc, #136]	; (800c040 <TIM_OC3_SetConfig+0xe4>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d003      	beq.n	800bfc2 <TIM_OC3_SetConfig+0x66>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a21      	ldr	r2, [pc, #132]	; (800c044 <TIM_OC3_SetConfig+0xe8>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d10d      	bne.n	800bfde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	697a      	ldr	r2, [r7, #20]
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a17      	ldr	r2, [pc, #92]	; (800c040 <TIM_OC3_SetConfig+0xe4>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d003      	beq.n	800bfee <TIM_OC3_SetConfig+0x92>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a16      	ldr	r2, [pc, #88]	; (800c044 <TIM_OC3_SetConfig+0xe8>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d113      	bne.n	800c016 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	011b      	lsls	r3, r3, #4
 800c004:	693a      	ldr	r2, [r7, #16]
 800c006:	4313      	orrs	r3, r2
 800c008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	4313      	orrs	r3, r2
 800c014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	621a      	str	r2, [r3, #32]
}
 800c030:	bf00      	nop
 800c032:	371c      	adds	r7, #28
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	fffeff8f 	.word	0xfffeff8f
 800c040:	40010000 	.word	0x40010000
 800c044:	40010400 	.word	0x40010400

0800c048 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c048:	b480      	push	{r7}
 800c04a:	b087      	sub	sp, #28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	69db      	ldr	r3, [r3, #28]
 800c06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	4b1e      	ldr	r3, [pc, #120]	; (800c0ec <TIM_OC4_SetConfig+0xa4>)
 800c074:	4013      	ands	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	4313      	orrs	r3, r2
 800c08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	031b      	lsls	r3, r3, #12
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a13      	ldr	r2, [pc, #76]	; (800c0f0 <TIM_OC4_SetConfig+0xa8>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d003      	beq.n	800c0b0 <TIM_OC4_SetConfig+0x68>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a12      	ldr	r2, [pc, #72]	; (800c0f4 <TIM_OC4_SetConfig+0xac>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d109      	bne.n	800c0c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	019b      	lsls	r3, r3, #6
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	621a      	str	r2, [r3, #32]
}
 800c0de:	bf00      	nop
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	feff8fff 	.word	0xfeff8fff
 800c0f0:	40010000 	.word	0x40010000
 800c0f4:	40010400 	.word	0x40010400

0800c0f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	4b1b      	ldr	r3, [pc, #108]	; (800c190 <TIM_OC5_SetConfig+0x98>)
 800c124:	4013      	ands	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	4313      	orrs	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	041b      	lsls	r3, r3, #16
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	4313      	orrs	r3, r2
 800c144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a12      	ldr	r2, [pc, #72]	; (800c194 <TIM_OC5_SetConfig+0x9c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d003      	beq.n	800c156 <TIM_OC5_SetConfig+0x5e>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a11      	ldr	r2, [pc, #68]	; (800c198 <TIM_OC5_SetConfig+0xa0>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d109      	bne.n	800c16a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c15c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	021b      	lsls	r3, r3, #8
 800c164:	697a      	ldr	r2, [r7, #20]
 800c166:	4313      	orrs	r3, r2
 800c168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	621a      	str	r2, [r3, #32]
}
 800c184:	bf00      	nop
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	fffeff8f 	.word	0xfffeff8f
 800c194:	40010000 	.word	0x40010000
 800c198:	40010400 	.word	0x40010400

0800c19c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b087      	sub	sp, #28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	4b1c      	ldr	r3, [pc, #112]	; (800c238 <TIM_OC6_SetConfig+0x9c>)
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	021b      	lsls	r3, r3, #8
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	051b      	lsls	r3, r3, #20
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a13      	ldr	r2, [pc, #76]	; (800c23c <TIM_OC6_SetConfig+0xa0>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d003      	beq.n	800c1fc <TIM_OC6_SetConfig+0x60>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a12      	ldr	r2, [pc, #72]	; (800c240 <TIM_OC6_SetConfig+0xa4>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d109      	bne.n	800c210 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	029b      	lsls	r3, r3, #10
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	621a      	str	r2, [r3, #32]
}
 800c22a:	bf00      	nop
 800c22c:	371c      	adds	r7, #28
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	feff8fff 	.word	0xfeff8fff
 800c23c:	40010000 	.word	0x40010000
 800c240:	40010400 	.word	0x40010400

0800c244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c244:	b480      	push	{r7}
 800c246:	b087      	sub	sp, #28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6a1b      	ldr	r3, [r3, #32]
 800c254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	f023 0201 	bic.w	r2, r3, #1
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c26e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	011b      	lsls	r3, r3, #4
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	4313      	orrs	r3, r2
 800c278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	f023 030a 	bic.w	r3, r3, #10
 800c280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c282:	697a      	ldr	r2, [r7, #20]
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	4313      	orrs	r3, r2
 800c288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	621a      	str	r2, [r3, #32]
}
 800c296:	bf00      	nop
 800c298:	371c      	adds	r7, #28
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b087      	sub	sp, #28
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	60f8      	str	r0, [r7, #12]
 800c2aa:	60b9      	str	r1, [r7, #8]
 800c2ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	f023 0210 	bic.w	r2, r3, #16
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6a1b      	ldr	r3, [r3, #32]
 800c2c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	031b      	lsls	r3, r3, #12
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c2de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	011b      	lsls	r3, r3, #4
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	621a      	str	r2, [r3, #32]
}
 800c2f6:	bf00      	nop
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr

0800c302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c302:	b480      	push	{r7}
 800c304:	b085      	sub	sp, #20
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4313      	orrs	r3, r2
 800c320:	f043 0307 	orr.w	r3, r3, #7
 800c324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	609a      	str	r2, [r3, #8]
}
 800c32c:	bf00      	nop
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c338:	b480      	push	{r7}
 800c33a:	b087      	sub	sp, #28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	021a      	lsls	r2, r3, #8
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	431a      	orrs	r2, r3
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	4313      	orrs	r3, r2
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	4313      	orrs	r3, r2
 800c364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	609a      	str	r2, [r3, #8]
}
 800c36c:	bf00      	nop
 800c36e:	371c      	adds	r7, #28
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d101      	bne.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c38c:	2302      	movs	r3, #2
 800c38e:	e06d      	b.n	800c46c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2202      	movs	r2, #2
 800c39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a30      	ldr	r2, [pc, #192]	; (800c478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d004      	beq.n	800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a2f      	ldr	r2, [pc, #188]	; (800c47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d108      	bne.n	800c3d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c3ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a20      	ldr	r2, [pc, #128]	; (800c478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d022      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c402:	d01d      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a1d      	ldr	r2, [pc, #116]	; (800c480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d018      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a1c      	ldr	r2, [pc, #112]	; (800c484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d013      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a1a      	ldr	r2, [pc, #104]	; (800c488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d00e      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a15      	ldr	r2, [pc, #84]	; (800c47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d009      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a16      	ldr	r2, [pc, #88]	; (800c48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d004      	beq.n	800c440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a15      	ldr	r2, [pc, #84]	; (800c490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d10c      	bne.n	800c45a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	4313      	orrs	r3, r2
 800c450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	40010000 	.word	0x40010000
 800c47c:	40010400 	.word	0x40010400
 800c480:	40000400 	.word	0x40000400
 800c484:	40000800 	.word	0x40000800
 800c488:	40000c00 	.word	0x40000c00
 800c48c:	40014000 	.word	0x40014000
 800c490:	40001800 	.word	0x40001800

0800c494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d101      	bne.n	800c4b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	e065      	b.n	800c57c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	695b      	ldr	r3, [r3, #20]
 800c508:	4313      	orrs	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	041b      	lsls	r3, r3, #16
 800c526:	4313      	orrs	r3, r2
 800c528:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a16      	ldr	r2, [pc, #88]	; (800c588 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d004      	beq.n	800c53e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a14      	ldr	r2, [pc, #80]	; (800c58c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d115      	bne.n	800c56a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c548:	051b      	lsls	r3, r3, #20
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	4313      	orrs	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	4313      	orrs	r3, r2
 800c568:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	40010000 	.word	0x40010000
 800c58c:	40010400 	.word	0x40010400

0800c590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e040      	b.n	800c660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7f6 fc08 	bl	8002e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2224      	movs	r2, #36	; 0x24
 800c5f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681a      	ldr	r2, [r3, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f022 0201 	bic.w	r2, r2, #1
 800c608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f82c 	bl	800c668 <UART_SetConfig>
 800c610:	4603      	mov	r3, r0
 800c612:	2b01      	cmp	r3, #1
 800c614:	d101      	bne.n	800c61a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	e022      	b.n	800c660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fa82 	bl	800cb2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f042 0201 	orr.w	r2, r2, #1
 800c656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fb09 	bl	800cc70 <UART_CheckIdleState>
 800c65e:	4603      	mov	r3, r0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	431a      	orrs	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	431a      	orrs	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	69db      	ldr	r3, [r3, #28]
 800c688:	4313      	orrs	r3, r2
 800c68a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	4ba7      	ldr	r3, [pc, #668]	; (800c930 <UART_SetConfig+0x2c8>)
 800c694:	4013      	ands	r3, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	6812      	ldr	r2, [r2, #0]
 800c69a:	6979      	ldr	r1, [r7, #20]
 800c69c:	430b      	orrs	r3, r1
 800c69e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68da      	ldr	r2, [r3, #12]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	430a      	orrs	r2, r1
 800c6b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	699b      	ldr	r3, [r3, #24]
 800c6ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a1b      	ldr	r3, [r3, #32]
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a95      	ldr	r2, [pc, #596]	; (800c934 <UART_SetConfig+0x2cc>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d120      	bne.n	800c726 <UART_SetConfig+0xbe>
 800c6e4:	4b94      	ldr	r3, [pc, #592]	; (800c938 <UART_SetConfig+0x2d0>)
 800c6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ea:	f003 0303 	and.w	r3, r3, #3
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d816      	bhi.n	800c720 <UART_SetConfig+0xb8>
 800c6f2:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <UART_SetConfig+0x90>)
 800c6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f8:	0800c709 	.word	0x0800c709
 800c6fc:	0800c715 	.word	0x0800c715
 800c700:	0800c70f 	.word	0x0800c70f
 800c704:	0800c71b 	.word	0x0800c71b
 800c708:	2301      	movs	r3, #1
 800c70a:	77fb      	strb	r3, [r7, #31]
 800c70c:	e14f      	b.n	800c9ae <UART_SetConfig+0x346>
 800c70e:	2302      	movs	r3, #2
 800c710:	77fb      	strb	r3, [r7, #31]
 800c712:	e14c      	b.n	800c9ae <UART_SetConfig+0x346>
 800c714:	2304      	movs	r3, #4
 800c716:	77fb      	strb	r3, [r7, #31]
 800c718:	e149      	b.n	800c9ae <UART_SetConfig+0x346>
 800c71a:	2308      	movs	r3, #8
 800c71c:	77fb      	strb	r3, [r7, #31]
 800c71e:	e146      	b.n	800c9ae <UART_SetConfig+0x346>
 800c720:	2310      	movs	r3, #16
 800c722:	77fb      	strb	r3, [r7, #31]
 800c724:	e143      	b.n	800c9ae <UART_SetConfig+0x346>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a84      	ldr	r2, [pc, #528]	; (800c93c <UART_SetConfig+0x2d4>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d132      	bne.n	800c796 <UART_SetConfig+0x12e>
 800c730:	4b81      	ldr	r3, [pc, #516]	; (800c938 <UART_SetConfig+0x2d0>)
 800c732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c736:	f003 030c 	and.w	r3, r3, #12
 800c73a:	2b0c      	cmp	r3, #12
 800c73c:	d828      	bhi.n	800c790 <UART_SetConfig+0x128>
 800c73e:	a201      	add	r2, pc, #4	; (adr r2, 800c744 <UART_SetConfig+0xdc>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c779 	.word	0x0800c779
 800c748:	0800c791 	.word	0x0800c791
 800c74c:	0800c791 	.word	0x0800c791
 800c750:	0800c791 	.word	0x0800c791
 800c754:	0800c785 	.word	0x0800c785
 800c758:	0800c791 	.word	0x0800c791
 800c75c:	0800c791 	.word	0x0800c791
 800c760:	0800c791 	.word	0x0800c791
 800c764:	0800c77f 	.word	0x0800c77f
 800c768:	0800c791 	.word	0x0800c791
 800c76c:	0800c791 	.word	0x0800c791
 800c770:	0800c791 	.word	0x0800c791
 800c774:	0800c78b 	.word	0x0800c78b
 800c778:	2300      	movs	r3, #0
 800c77a:	77fb      	strb	r3, [r7, #31]
 800c77c:	e117      	b.n	800c9ae <UART_SetConfig+0x346>
 800c77e:	2302      	movs	r3, #2
 800c780:	77fb      	strb	r3, [r7, #31]
 800c782:	e114      	b.n	800c9ae <UART_SetConfig+0x346>
 800c784:	2304      	movs	r3, #4
 800c786:	77fb      	strb	r3, [r7, #31]
 800c788:	e111      	b.n	800c9ae <UART_SetConfig+0x346>
 800c78a:	2308      	movs	r3, #8
 800c78c:	77fb      	strb	r3, [r7, #31]
 800c78e:	e10e      	b.n	800c9ae <UART_SetConfig+0x346>
 800c790:	2310      	movs	r3, #16
 800c792:	77fb      	strb	r3, [r7, #31]
 800c794:	e10b      	b.n	800c9ae <UART_SetConfig+0x346>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a69      	ldr	r2, [pc, #420]	; (800c940 <UART_SetConfig+0x2d8>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d120      	bne.n	800c7e2 <UART_SetConfig+0x17a>
 800c7a0:	4b65      	ldr	r3, [pc, #404]	; (800c938 <UART_SetConfig+0x2d0>)
 800c7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c7aa:	2b30      	cmp	r3, #48	; 0x30
 800c7ac:	d013      	beq.n	800c7d6 <UART_SetConfig+0x16e>
 800c7ae:	2b30      	cmp	r3, #48	; 0x30
 800c7b0:	d814      	bhi.n	800c7dc <UART_SetConfig+0x174>
 800c7b2:	2b20      	cmp	r3, #32
 800c7b4:	d009      	beq.n	800c7ca <UART_SetConfig+0x162>
 800c7b6:	2b20      	cmp	r3, #32
 800c7b8:	d810      	bhi.n	800c7dc <UART_SetConfig+0x174>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <UART_SetConfig+0x15c>
 800c7be:	2b10      	cmp	r3, #16
 800c7c0:	d006      	beq.n	800c7d0 <UART_SetConfig+0x168>
 800c7c2:	e00b      	b.n	800c7dc <UART_SetConfig+0x174>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	77fb      	strb	r3, [r7, #31]
 800c7c8:	e0f1      	b.n	800c9ae <UART_SetConfig+0x346>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	77fb      	strb	r3, [r7, #31]
 800c7ce:	e0ee      	b.n	800c9ae <UART_SetConfig+0x346>
 800c7d0:	2304      	movs	r3, #4
 800c7d2:	77fb      	strb	r3, [r7, #31]
 800c7d4:	e0eb      	b.n	800c9ae <UART_SetConfig+0x346>
 800c7d6:	2308      	movs	r3, #8
 800c7d8:	77fb      	strb	r3, [r7, #31]
 800c7da:	e0e8      	b.n	800c9ae <UART_SetConfig+0x346>
 800c7dc:	2310      	movs	r3, #16
 800c7de:	77fb      	strb	r3, [r7, #31]
 800c7e0:	e0e5      	b.n	800c9ae <UART_SetConfig+0x346>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a57      	ldr	r2, [pc, #348]	; (800c944 <UART_SetConfig+0x2dc>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d120      	bne.n	800c82e <UART_SetConfig+0x1c6>
 800c7ec:	4b52      	ldr	r3, [pc, #328]	; (800c938 <UART_SetConfig+0x2d0>)
 800c7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7f6:	2bc0      	cmp	r3, #192	; 0xc0
 800c7f8:	d013      	beq.n	800c822 <UART_SetConfig+0x1ba>
 800c7fa:	2bc0      	cmp	r3, #192	; 0xc0
 800c7fc:	d814      	bhi.n	800c828 <UART_SetConfig+0x1c0>
 800c7fe:	2b80      	cmp	r3, #128	; 0x80
 800c800:	d009      	beq.n	800c816 <UART_SetConfig+0x1ae>
 800c802:	2b80      	cmp	r3, #128	; 0x80
 800c804:	d810      	bhi.n	800c828 <UART_SetConfig+0x1c0>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d002      	beq.n	800c810 <UART_SetConfig+0x1a8>
 800c80a:	2b40      	cmp	r3, #64	; 0x40
 800c80c:	d006      	beq.n	800c81c <UART_SetConfig+0x1b4>
 800c80e:	e00b      	b.n	800c828 <UART_SetConfig+0x1c0>
 800c810:	2300      	movs	r3, #0
 800c812:	77fb      	strb	r3, [r7, #31]
 800c814:	e0cb      	b.n	800c9ae <UART_SetConfig+0x346>
 800c816:	2302      	movs	r3, #2
 800c818:	77fb      	strb	r3, [r7, #31]
 800c81a:	e0c8      	b.n	800c9ae <UART_SetConfig+0x346>
 800c81c:	2304      	movs	r3, #4
 800c81e:	77fb      	strb	r3, [r7, #31]
 800c820:	e0c5      	b.n	800c9ae <UART_SetConfig+0x346>
 800c822:	2308      	movs	r3, #8
 800c824:	77fb      	strb	r3, [r7, #31]
 800c826:	e0c2      	b.n	800c9ae <UART_SetConfig+0x346>
 800c828:	2310      	movs	r3, #16
 800c82a:	77fb      	strb	r3, [r7, #31]
 800c82c:	e0bf      	b.n	800c9ae <UART_SetConfig+0x346>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a45      	ldr	r2, [pc, #276]	; (800c948 <UART_SetConfig+0x2e0>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d125      	bne.n	800c884 <UART_SetConfig+0x21c>
 800c838:	4b3f      	ldr	r3, [pc, #252]	; (800c938 <UART_SetConfig+0x2d0>)
 800c83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c83e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c846:	d017      	beq.n	800c878 <UART_SetConfig+0x210>
 800c848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c84c:	d817      	bhi.n	800c87e <UART_SetConfig+0x216>
 800c84e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c852:	d00b      	beq.n	800c86c <UART_SetConfig+0x204>
 800c854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c858:	d811      	bhi.n	800c87e <UART_SetConfig+0x216>
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d003      	beq.n	800c866 <UART_SetConfig+0x1fe>
 800c85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c862:	d006      	beq.n	800c872 <UART_SetConfig+0x20a>
 800c864:	e00b      	b.n	800c87e <UART_SetConfig+0x216>
 800c866:	2300      	movs	r3, #0
 800c868:	77fb      	strb	r3, [r7, #31]
 800c86a:	e0a0      	b.n	800c9ae <UART_SetConfig+0x346>
 800c86c:	2302      	movs	r3, #2
 800c86e:	77fb      	strb	r3, [r7, #31]
 800c870:	e09d      	b.n	800c9ae <UART_SetConfig+0x346>
 800c872:	2304      	movs	r3, #4
 800c874:	77fb      	strb	r3, [r7, #31]
 800c876:	e09a      	b.n	800c9ae <UART_SetConfig+0x346>
 800c878:	2308      	movs	r3, #8
 800c87a:	77fb      	strb	r3, [r7, #31]
 800c87c:	e097      	b.n	800c9ae <UART_SetConfig+0x346>
 800c87e:	2310      	movs	r3, #16
 800c880:	77fb      	strb	r3, [r7, #31]
 800c882:	e094      	b.n	800c9ae <UART_SetConfig+0x346>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a30      	ldr	r2, [pc, #192]	; (800c94c <UART_SetConfig+0x2e4>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d125      	bne.n	800c8da <UART_SetConfig+0x272>
 800c88e:	4b2a      	ldr	r3, [pc, #168]	; (800c938 <UART_SetConfig+0x2d0>)
 800c890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c894:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c898:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c89c:	d017      	beq.n	800c8ce <UART_SetConfig+0x266>
 800c89e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8a2:	d817      	bhi.n	800c8d4 <UART_SetConfig+0x26c>
 800c8a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8a8:	d00b      	beq.n	800c8c2 <UART_SetConfig+0x25a>
 800c8aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8ae:	d811      	bhi.n	800c8d4 <UART_SetConfig+0x26c>
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d003      	beq.n	800c8bc <UART_SetConfig+0x254>
 800c8b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8b8:	d006      	beq.n	800c8c8 <UART_SetConfig+0x260>
 800c8ba:	e00b      	b.n	800c8d4 <UART_SetConfig+0x26c>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	77fb      	strb	r3, [r7, #31]
 800c8c0:	e075      	b.n	800c9ae <UART_SetConfig+0x346>
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	77fb      	strb	r3, [r7, #31]
 800c8c6:	e072      	b.n	800c9ae <UART_SetConfig+0x346>
 800c8c8:	2304      	movs	r3, #4
 800c8ca:	77fb      	strb	r3, [r7, #31]
 800c8cc:	e06f      	b.n	800c9ae <UART_SetConfig+0x346>
 800c8ce:	2308      	movs	r3, #8
 800c8d0:	77fb      	strb	r3, [r7, #31]
 800c8d2:	e06c      	b.n	800c9ae <UART_SetConfig+0x346>
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	77fb      	strb	r3, [r7, #31]
 800c8d8:	e069      	b.n	800c9ae <UART_SetConfig+0x346>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a1c      	ldr	r2, [pc, #112]	; (800c950 <UART_SetConfig+0x2e8>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d137      	bne.n	800c954 <UART_SetConfig+0x2ec>
 800c8e4:	4b14      	ldr	r3, [pc, #80]	; (800c938 <UART_SetConfig+0x2d0>)
 800c8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c8ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8f2:	d017      	beq.n	800c924 <UART_SetConfig+0x2bc>
 800c8f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8f8:	d817      	bhi.n	800c92a <UART_SetConfig+0x2c2>
 800c8fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8fe:	d00b      	beq.n	800c918 <UART_SetConfig+0x2b0>
 800c900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c904:	d811      	bhi.n	800c92a <UART_SetConfig+0x2c2>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <UART_SetConfig+0x2aa>
 800c90a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c90e:	d006      	beq.n	800c91e <UART_SetConfig+0x2b6>
 800c910:	e00b      	b.n	800c92a <UART_SetConfig+0x2c2>
 800c912:	2300      	movs	r3, #0
 800c914:	77fb      	strb	r3, [r7, #31]
 800c916:	e04a      	b.n	800c9ae <UART_SetConfig+0x346>
 800c918:	2302      	movs	r3, #2
 800c91a:	77fb      	strb	r3, [r7, #31]
 800c91c:	e047      	b.n	800c9ae <UART_SetConfig+0x346>
 800c91e:	2304      	movs	r3, #4
 800c920:	77fb      	strb	r3, [r7, #31]
 800c922:	e044      	b.n	800c9ae <UART_SetConfig+0x346>
 800c924:	2308      	movs	r3, #8
 800c926:	77fb      	strb	r3, [r7, #31]
 800c928:	e041      	b.n	800c9ae <UART_SetConfig+0x346>
 800c92a:	2310      	movs	r3, #16
 800c92c:	77fb      	strb	r3, [r7, #31]
 800c92e:	e03e      	b.n	800c9ae <UART_SetConfig+0x346>
 800c930:	efff69f3 	.word	0xefff69f3
 800c934:	40011000 	.word	0x40011000
 800c938:	40023800 	.word	0x40023800
 800c93c:	40004400 	.word	0x40004400
 800c940:	40004800 	.word	0x40004800
 800c944:	40004c00 	.word	0x40004c00
 800c948:	40005000 	.word	0x40005000
 800c94c:	40011400 	.word	0x40011400
 800c950:	40007800 	.word	0x40007800
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a71      	ldr	r2, [pc, #452]	; (800cb20 <UART_SetConfig+0x4b8>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d125      	bne.n	800c9aa <UART_SetConfig+0x342>
 800c95e:	4b71      	ldr	r3, [pc, #452]	; (800cb24 <UART_SetConfig+0x4bc>)
 800c960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c968:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c96c:	d017      	beq.n	800c99e <UART_SetConfig+0x336>
 800c96e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c972:	d817      	bhi.n	800c9a4 <UART_SetConfig+0x33c>
 800c974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c978:	d00b      	beq.n	800c992 <UART_SetConfig+0x32a>
 800c97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c97e:	d811      	bhi.n	800c9a4 <UART_SetConfig+0x33c>
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <UART_SetConfig+0x324>
 800c984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c988:	d006      	beq.n	800c998 <UART_SetConfig+0x330>
 800c98a:	e00b      	b.n	800c9a4 <UART_SetConfig+0x33c>
 800c98c:	2300      	movs	r3, #0
 800c98e:	77fb      	strb	r3, [r7, #31]
 800c990:	e00d      	b.n	800c9ae <UART_SetConfig+0x346>
 800c992:	2302      	movs	r3, #2
 800c994:	77fb      	strb	r3, [r7, #31]
 800c996:	e00a      	b.n	800c9ae <UART_SetConfig+0x346>
 800c998:	2304      	movs	r3, #4
 800c99a:	77fb      	strb	r3, [r7, #31]
 800c99c:	e007      	b.n	800c9ae <UART_SetConfig+0x346>
 800c99e:	2308      	movs	r3, #8
 800c9a0:	77fb      	strb	r3, [r7, #31]
 800c9a2:	e004      	b.n	800c9ae <UART_SetConfig+0x346>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	77fb      	strb	r3, [r7, #31]
 800c9a8:	e001      	b.n	800c9ae <UART_SetConfig+0x346>
 800c9aa:	2310      	movs	r3, #16
 800c9ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9b6:	d15b      	bne.n	800ca70 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c9b8:	7ffb      	ldrb	r3, [r7, #31]
 800c9ba:	2b08      	cmp	r3, #8
 800c9bc:	d827      	bhi.n	800ca0e <UART_SetConfig+0x3a6>
 800c9be:	a201      	add	r2, pc, #4	; (adr r2, 800c9c4 <UART_SetConfig+0x35c>)
 800c9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c4:	0800c9e9 	.word	0x0800c9e9
 800c9c8:	0800c9f1 	.word	0x0800c9f1
 800c9cc:	0800c9f9 	.word	0x0800c9f9
 800c9d0:	0800ca0f 	.word	0x0800ca0f
 800c9d4:	0800c9ff 	.word	0x0800c9ff
 800c9d8:	0800ca0f 	.word	0x0800ca0f
 800c9dc:	0800ca0f 	.word	0x0800ca0f
 800c9e0:	0800ca0f 	.word	0x0800ca0f
 800c9e4:	0800ca07 	.word	0x0800ca07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9e8:	f7fb ffac 	bl	8008944 <HAL_RCC_GetPCLK1Freq>
 800c9ec:	61b8      	str	r0, [r7, #24]
        break;
 800c9ee:	e013      	b.n	800ca18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9f0:	f7fb ffbc 	bl	800896c <HAL_RCC_GetPCLK2Freq>
 800c9f4:	61b8      	str	r0, [r7, #24]
        break;
 800c9f6:	e00f      	b.n	800ca18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9f8:	4b4b      	ldr	r3, [pc, #300]	; (800cb28 <UART_SetConfig+0x4c0>)
 800c9fa:	61bb      	str	r3, [r7, #24]
        break;
 800c9fc:	e00c      	b.n	800ca18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9fe:	f7fb fedf 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 800ca02:	61b8      	str	r0, [r7, #24]
        break;
 800ca04:	e008      	b.n	800ca18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca0a:	61bb      	str	r3, [r7, #24]
        break;
 800ca0c:	e004      	b.n	800ca18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	77bb      	strb	r3, [r7, #30]
        break;
 800ca16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d074      	beq.n	800cb08 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	005a      	lsls	r2, r3, #1
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	085b      	lsrs	r3, r3, #1
 800ca28:	441a      	add	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	2b0f      	cmp	r3, #15
 800ca3a:	d916      	bls.n	800ca6a <UART_SetConfig+0x402>
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca42:	d212      	bcs.n	800ca6a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	f023 030f 	bic.w	r3, r3, #15
 800ca4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	085b      	lsrs	r3, r3, #1
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	f003 0307 	and.w	r3, r3, #7
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	89fb      	ldrh	r3, [r7, #14]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	89fa      	ldrh	r2, [r7, #14]
 800ca66:	60da      	str	r2, [r3, #12]
 800ca68:	e04e      	b.n	800cb08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	77bb      	strb	r3, [r7, #30]
 800ca6e:	e04b      	b.n	800cb08 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca70:	7ffb      	ldrb	r3, [r7, #31]
 800ca72:	2b08      	cmp	r3, #8
 800ca74:	d827      	bhi.n	800cac6 <UART_SetConfig+0x45e>
 800ca76:	a201      	add	r2, pc, #4	; (adr r2, 800ca7c <UART_SetConfig+0x414>)
 800ca78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7c:	0800caa1 	.word	0x0800caa1
 800ca80:	0800caa9 	.word	0x0800caa9
 800ca84:	0800cab1 	.word	0x0800cab1
 800ca88:	0800cac7 	.word	0x0800cac7
 800ca8c:	0800cab7 	.word	0x0800cab7
 800ca90:	0800cac7 	.word	0x0800cac7
 800ca94:	0800cac7 	.word	0x0800cac7
 800ca98:	0800cac7 	.word	0x0800cac7
 800ca9c:	0800cabf 	.word	0x0800cabf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caa0:	f7fb ff50 	bl	8008944 <HAL_RCC_GetPCLK1Freq>
 800caa4:	61b8      	str	r0, [r7, #24]
        break;
 800caa6:	e013      	b.n	800cad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800caa8:	f7fb ff60 	bl	800896c <HAL_RCC_GetPCLK2Freq>
 800caac:	61b8      	str	r0, [r7, #24]
        break;
 800caae:	e00f      	b.n	800cad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cab0:	4b1d      	ldr	r3, [pc, #116]	; (800cb28 <UART_SetConfig+0x4c0>)
 800cab2:	61bb      	str	r3, [r7, #24]
        break;
 800cab4:	e00c      	b.n	800cad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cab6:	f7fb fe83 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 800caba:	61b8      	str	r0, [r7, #24]
        break;
 800cabc:	e008      	b.n	800cad0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cabe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cac2:	61bb      	str	r3, [r7, #24]
        break;
 800cac4:	e004      	b.n	800cad0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800cac6:	2300      	movs	r3, #0
 800cac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	77bb      	strb	r3, [r7, #30]
        break;
 800cace:	bf00      	nop
    }

    if (pclk != 0U)
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d018      	beq.n	800cb08 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	085a      	lsrs	r2, r3, #1
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	441a      	add	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae8:	b29b      	uxth	r3, r3
 800caea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b0f      	cmp	r3, #15
 800caf0:	d908      	bls.n	800cb04 <UART_SetConfig+0x49c>
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caf8:	d204      	bcs.n	800cb04 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	693a      	ldr	r2, [r7, #16]
 800cb00:	60da      	str	r2, [r3, #12]
 800cb02:	e001      	b.n	800cb08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cb14:	7fbb      	ldrb	r3, [r7, #30]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3720      	adds	r7, #32
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	40007c00 	.word	0x40007c00
 800cb24:	40023800 	.word	0x40023800
 800cb28:	00f42400 	.word	0x00f42400

0800cb2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00a      	beq.n	800cb56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	430a      	orrs	r2, r1
 800cb54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5a:	f003 0302 	and.w	r3, r3, #2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00a      	beq.n	800cb78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	430a      	orrs	r2, r1
 800cb76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00a      	beq.n	800cb9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	430a      	orrs	r2, r1
 800cb98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9e:	f003 0308 	and.w	r3, r3, #8
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00a      	beq.n	800cbbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	430a      	orrs	r2, r1
 800cbba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc0:	f003 0310 	and.w	r3, r3, #16
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00a      	beq.n	800cbde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	430a      	orrs	r2, r1
 800cbdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe2:	f003 0320 	and.w	r3, r3, #32
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d01a      	beq.n	800cc42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	430a      	orrs	r2, r1
 800cc20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc2a:	d10a      	bne.n	800cc42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	430a      	orrs	r2, r1
 800cc40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	430a      	orrs	r2, r1
 800cc62:	605a      	str	r2, [r3, #4]
  }
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af02      	add	r7, sp, #8
 800cc76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc80:	f7f6 fb76 	bl	8003370 <HAL_GetTick>
 800cc84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b08      	cmp	r3, #8
 800cc92:	d10e      	bne.n	800ccb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f817 	bl	800ccd6 <UART_WaitOnFlagUntilTimeout>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e00d      	b.n	800ccce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b084      	sub	sp, #16
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	60f8      	str	r0, [r7, #12]
 800ccde:	60b9      	str	r1, [r7, #8]
 800cce0:	603b      	str	r3, [r7, #0]
 800cce2:	4613      	mov	r3, r2
 800cce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cce6:	e05e      	b.n	800cda6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccee:	d05a      	beq.n	800cda6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccf0:	f7f6 fb3e 	bl	8003370 <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	69ba      	ldr	r2, [r7, #24]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d302      	bcc.n	800cd06 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d11b      	bne.n	800cd3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	689a      	ldr	r2, [r3, #8]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f022 0201 	bic.w	r2, r2, #1
 800cd24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2220      	movs	r2, #32
 800cd2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2220      	movs	r2, #32
 800cd30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e043      	b.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d02c      	beq.n	800cda6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	69db      	ldr	r3, [r3, #28]
 800cd52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd5a:	d124      	bne.n	800cda6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689a      	ldr	r2, [r3, #8]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0201 	bic.w	r2, r2, #1
 800cd84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2220      	movs	r2, #32
 800cd8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2220      	movs	r2, #32
 800cd90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2220      	movs	r2, #32
 800cd96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e00f      	b.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	69da      	ldr	r2, [r3, #28]
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	4013      	ands	r3, r2
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	bf0c      	ite	eq
 800cdb6:	2301      	moveq	r3, #1
 800cdb8:	2300      	movne	r3, #0
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d091      	beq.n	800cce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d027      	beq.n	800ce3a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4b2f      	ldr	r3, [pc, #188]	; (800ceb0 <FMC_SDRAM_Init+0xe0>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce00:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ce06:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ce0c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ce12:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ce18:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ce1e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ce24:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ce2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	e032      	b.n	800cea0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce46:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ce50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ce56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	4b12      	ldr	r3, [pc, #72]	; (800ceb0 <FMC_SDRAM_Init+0xe0>)
 800ce68:	4013      	ands	r3, r2
 800ce6a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce74:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ce7a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ce80:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ce86:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ce8c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3714      	adds	r7, #20
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	ffff8000 	.word	0xffff8000

0800ceb4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b087      	sub	sp, #28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d02e      	beq.n	800cf2c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ceda:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	3b01      	subs	r3, #1
 800cee8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ceea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	3b01      	subs	r3, #1
 800cef2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800cef4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	3b01      	subs	r3, #1
 800cefc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800cefe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	691b      	ldr	r3, [r3, #16]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800cf08:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	695b      	ldr	r3, [r3, #20]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800cf12:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	609a      	str	r2, [r3, #8]
 800cf2a:	e039      	b.n	800cfa0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	4b1e      	ldr	r3, [pc, #120]	; (800cfb0 <FMC_SDRAM_Timing_Init+0xfc>)
 800cf36:	4013      	ands	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	695b      	ldr	r3, [r3, #20]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf5e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cf6e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	3b01      	subs	r3, #1
 800cf76:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800cf78:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800cf82:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	697a      	ldr	r2, [r7, #20]
 800cf98:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
 800cfae:	bf00      	nop
 800cfb0:	ff0f0fff 	.word	0xff0f0fff

0800cfb4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	691a      	ldr	r2, [r3, #16]
 800cfc4:	4b0c      	ldr	r3, [pc, #48]	; (800cff8 <FMC_SDRAM_SendCommand+0x44>)
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	6811      	ldr	r1, [r2, #0]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	6852      	ldr	r2, [r2, #4]
 800cfd0:	4311      	orrs	r1, r2
 800cfd2:	68ba      	ldr	r2, [r7, #8]
 800cfd4:	6892      	ldr	r2, [r2, #8]
 800cfd6:	3a01      	subs	r2, #1
 800cfd8:	0152      	lsls	r2, r2, #5
 800cfda:	4311      	orrs	r1, r2
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	68d2      	ldr	r2, [r2, #12]
 800cfe0:	0252      	lsls	r2, r2, #9
 800cfe2:	430a      	orrs	r2, r1
 800cfe4:	431a      	orrs	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	ffc00000 	.word	0xffc00000

0800cffc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	695a      	ldr	r2, [r3, #20]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	005b      	lsls	r3, r3, #1
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
	...

0800d024 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d024:	b084      	sub	sp, #16
 800d026:	b480      	push	{r7}
 800d028:	b085      	sub	sp, #20
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	f107 001c 	add.w	r0, r7, #28
 800d032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d03a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d03c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d03e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d042:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d046:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d04a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d04e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	4313      	orrs	r3, r2
 800d054:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	685a      	ldr	r2, [r3, #4]
 800d05a:	4b07      	ldr	r3, [pc, #28]	; (800d078 <SDMMC_Init+0x54>)
 800d05c:	4013      	ands	r3, r2
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	431a      	orrs	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3714      	adds	r7, #20
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	b004      	add	sp, #16
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	ffff8100 	.word	0xffff8100

0800d07c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2203      	movs	r2, #3
 800d0a2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d0a4:	2002      	movs	r0, #2
 800d0a6:	f7f6 f96f 	bl	8003388 <HAL_Delay>
  
  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 0303 	and.w	r3, r3, #3
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d0f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d0fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	68da      	ldr	r2, [r3, #12]
 800d106:	4b06      	ldr	r3, [pc, #24]	; (800d120 <SDMMC_SendCommand+0x50>)
 800d108:	4013      	ands	r3, r2
 800d10a:	68fa      	ldr	r2, [r7, #12]
 800d10c:	431a      	orrs	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	fffff000 	.word	0xfffff000

0800d124 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	b2db      	uxtb	r3, r3
}
 800d132:	4618      	mov	r0, r3
 800d134:	370c      	adds	r7, #12
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d13e:	b480      	push	{r7}
 800d140:	b085      	sub	sp, #20
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3314      	adds	r3, #20
 800d14c:	461a      	mov	r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	4413      	add	r3, r2
 800d152:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
}  
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d18a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d190:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d196:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0

}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b088      	sub	sp, #32
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d1ca:	2310      	movs	r3, #16
 800d1cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1ce:	2340      	movs	r3, #64	; 0x40
 800d1d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1dc:	f107 0308 	add.w	r3, r7, #8
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7ff ff74 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d1e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1ec:	2110      	movs	r1, #16
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fa46 	bl	800d680 <SDMMC_GetCmdResp1>
 800d1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3720      	adds	r7, #32
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b088      	sub	sp, #32
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d20e:	2311      	movs	r3, #17
 800d210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d212:	2340      	movs	r3, #64	; 0x40
 800d214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d216:	2300      	movs	r3, #0
 800d218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d21e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d220:	f107 0308 	add.w	r3, r7, #8
 800d224:	4619      	mov	r1, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff ff52 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d230:	2111      	movs	r1, #17
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fa24 	bl	800d680 <SDMMC_GetCmdResp1>
 800d238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d23a:	69fb      	ldr	r3, [r7, #28]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3720      	adds	r7, #32
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d252:	2312      	movs	r3, #18
 800d254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d256:	2340      	movs	r3, #64	; 0x40
 800d258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d262:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d264:	f107 0308 	add.w	r3, r7, #8
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff ff30 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d270:	f241 3288 	movw	r2, #5000	; 0x1388
 800d274:	2112      	movs	r1, #18
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fa02 	bl	800d680 <SDMMC_GetCmdResp1>
 800d27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d27e:	69fb      	ldr	r3, [r7, #28]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3720      	adds	r7, #32
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d296:	2318      	movs	r3, #24
 800d298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d29a:	2340      	movs	r3, #64	; 0x40
 800d29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2a8:	f107 0308 	add.w	r3, r7, #8
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff ff0e 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b8:	2118      	movs	r1, #24
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f9e0 	bl	800d680 <SDMMC_GetCmdResp1>
 800d2c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3720      	adds	r7, #32
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b088      	sub	sp, #32
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d2da:	2319      	movs	r3, #25
 800d2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2de:	2340      	movs	r3, #64	; 0x40
 800d2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ec:	f107 0308 	add.w	r3, r7, #8
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff feec 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2fc:	2119      	movs	r1, #25
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f9be 	bl	800d680 <SDMMC_GetCmdResp1>
 800d304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d306:	69fb      	ldr	r3, [r7, #28]
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3720      	adds	r7, #32
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b088      	sub	sp, #32
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d318:	2300      	movs	r3, #0
 800d31a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d31c:	230c      	movs	r3, #12
 800d31e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d320:	2340      	movs	r3, #64	; 0x40
 800d322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d324:	2300      	movs	r3, #0
 800d326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d32c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d32e:	f107 0308 	add.w	r3, r7, #8
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff fecb 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d33a:	4a05      	ldr	r2, [pc, #20]	; (800d350 <SDMMC_CmdStopTransfer+0x40>)
 800d33c:	210c      	movs	r1, #12
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f99e 	bl	800d680 <SDMMC_GetCmdResp1>
 800d344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d346:	69fb      	ldr	r3, [r7, #28]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3720      	adds	r7, #32
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	05f5e100 	.word	0x05f5e100

0800d354 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d364:	2307      	movs	r3, #7
 800d366:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d368:	2340      	movs	r3, #64	; 0x40
 800d36a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d36c:	2300      	movs	r3, #0
 800d36e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d374:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d376:	f107 0310 	add.w	r3, r7, #16
 800d37a:	4619      	mov	r1, r3
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7ff fea7 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d382:	f241 3288 	movw	r2, #5000	; 0x1388
 800d386:	2107      	movs	r1, #7
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f000 f979 	bl	800d680 <SDMMC_GetCmdResp1>
 800d38e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d392:	4618      	mov	r0, r3
 800d394:	3728      	adds	r7, #40	; 0x28
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b088      	sub	sp, #32
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3b8:	f107 0308 	add.w	r3, r7, #8
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff fe86 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f92f 	bl	800d628 <SDMMC_GetCmdError>
 800d3ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3cc:	69fb      	ldr	r3, [r7, #28]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3720      	adds	r7, #32
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b088      	sub	sp, #32
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d3de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d3e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d3e4:	2308      	movs	r3, #8
 800d3e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3e8:	2340      	movs	r3, #64	; 0x40
 800d3ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3f6:	f107 0308 	add.w	r3, r7, #8
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7ff fe67 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fb26 	bl	800da54 <SDMMC_GetCmdResp7>
 800d408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40a:	69fb      	ldr	r3, [r7, #28]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d422:	2337      	movs	r3, #55	; 0x37
 800d424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d426:	2340      	movs	r3, #64	; 0x40
 800d428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d42a:	2300      	movs	r3, #0
 800d42c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d432:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d434:	f107 0308 	add.w	r3, r7, #8
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff fe48 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d440:	f241 3288 	movw	r2, #5000	; 0x1388
 800d444:	2137      	movs	r1, #55	; 0x37
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f91a 	bl	800d680 <SDMMC_GetCmdResp1>
 800d44c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d44e:	69fb      	ldr	r3, [r7, #28]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3720      	adds	r7, #32
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d462:	683a      	ldr	r2, [r7, #0]
 800d464:	4b0d      	ldr	r3, [pc, #52]	; (800d49c <SDMMC_CmdAppOperCommand+0x44>)
 800d466:	4313      	orrs	r3, r2
 800d468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d46a:	2329      	movs	r3, #41	; 0x29
 800d46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d46e:	2340      	movs	r3, #64	; 0x40
 800d470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d472:	2300      	movs	r3, #0
 800d474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d47a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d47c:	f107 0308 	add.w	r3, r7, #8
 800d480:	4619      	mov	r1, r3
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7ff fe24 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fa2f 	bl	800d8ec <SDMMC_GetCmdResp3>
 800d48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d490:	69fb      	ldr	r3, [r7, #28]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3720      	adds	r7, #32
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	80100000 	.word	0x80100000

0800d4a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b088      	sub	sp, #32
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d4ae:	2306      	movs	r3, #6
 800d4b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4b2:	2340      	movs	r3, #64	; 0x40
 800d4b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4c0:	f107 0308 	add.w	r3, r7, #8
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff fe02 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d4cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d0:	2106      	movs	r1, #6
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f8d4 	bl	800d680 <SDMMC_GetCmdResp1>
 800d4d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4da:	69fb      	ldr	r3, [r7, #28]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3720      	adds	r7, #32
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b088      	sub	sp, #32
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d4f0:	2333      	movs	r3, #51	; 0x33
 800d4f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4f4:	2340      	movs	r3, #64	; 0x40
 800d4f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d500:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d502:	f107 0308 	add.w	r3, r7, #8
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7ff fde1 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d50e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d512:	2133      	movs	r1, #51	; 0x33
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f8b3 	bl	800d680 <SDMMC_GetCmdResp1>
 800d51a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d51c:	69fb      	ldr	r3, [r7, #28]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3720      	adds	r7, #32
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b088      	sub	sp, #32
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d52e:	2300      	movs	r3, #0
 800d530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d532:	2302      	movs	r3, #2
 800d534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d536:	23c0      	movs	r3, #192	; 0xc0
 800d538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d544:	f107 0308 	add.w	r3, r7, #8
 800d548:	4619      	mov	r1, r3
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff fdc0 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f983 	bl	800d85c <SDMMC_GetCmdResp2>
 800d556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d558:	69fb      	ldr	r3, [r7, #28]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b088      	sub	sp, #32
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d570:	2309      	movs	r3, #9
 800d572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d574:	23c0      	movs	r3, #192	; 0xc0
 800d576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d57c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d580:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff fda1 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f964 	bl	800d85c <SDMMC_GetCmdResp2>
 800d594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d596:	69fb      	ldr	r3, [r7, #28]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3720      	adds	r7, #32
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b088      	sub	sp, #32
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5b2:	2340      	movs	r3, #64	; 0x40
 800d5b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5c0:	f107 0308 	add.w	r3, r7, #8
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff fd82 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	2103      	movs	r1, #3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 f9c9 	bl	800d968 <SDMMC_GetCmdResp6>
 800d5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5d8:	69fb      	ldr	r3, [r7, #28]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3720      	adds	r7, #32
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b088      	sub	sp, #32
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d5f0:	230d      	movs	r3, #13
 800d5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5f4:	2340      	movs	r3, #64	; 0x40
 800d5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d600:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7ff fd61 	bl	800d0d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d612:	210d      	movs	r1, #13
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f833 	bl	800d680 <SDMMC_GetCmdResp1>
 800d61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d61c:	69fb      	ldr	r3, [r7, #28]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3720      	adds	r7, #32
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
	...

0800d628 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d630:	4b11      	ldr	r3, [pc, #68]	; (800d678 <SDMMC_GetCmdError+0x50>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a11      	ldr	r2, [pc, #68]	; (800d67c <SDMMC_GetCmdError+0x54>)
 800d636:	fba2 2303 	umull	r2, r3, r2, r3
 800d63a:	0a5b      	lsrs	r3, r3, #9
 800d63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d640:	fb02 f303 	mul.w	r3, r2, r3
 800d644:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	1e5a      	subs	r2, r3, #1
 800d64a:	60fa      	str	r2, [r7, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d654:	e009      	b.n	800d66a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0f1      	beq.n	800d646 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	22c5      	movs	r2, #197	; 0xc5
 800d666:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	20000004 	.word	0x20000004
 800d67c:	10624dd3 	.word	0x10624dd3

0800d680 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	460b      	mov	r3, r1
 800d68a:	607a      	str	r2, [r7, #4]
 800d68c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d68e:	4b70      	ldr	r3, [pc, #448]	; (800d850 <SDMMC_GetCmdResp1+0x1d0>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4a70      	ldr	r2, [pc, #448]	; (800d854 <SDMMC_GetCmdResp1+0x1d4>)
 800d694:	fba2 2303 	umull	r2, r3, r2, r3
 800d698:	0a5a      	lsrs	r2, r3, #9
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	fb02 f303 	mul.w	r3, r2, r3
 800d6a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	1e5a      	subs	r2, r3, #1
 800d6a6:	61fa      	str	r2, [r7, #28]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d102      	bne.n	800d6b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6b0:	e0c9      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d0ef      	beq.n	800d6a2 <SDMMC_GetCmdResp1+0x22>
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1ea      	bne.n	800d6a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d0:	f003 0304 	and.w	r3, r3, #4
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d004      	beq.n	800d6e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2204      	movs	r2, #4
 800d6dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6de:	2304      	movs	r3, #4
 800d6e0:	e0b1      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e6:	f003 0301 	and.w	r3, r3, #1
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d004      	beq.n	800d6f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e0a6      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	22c5      	movs	r2, #197	; 0xc5
 800d6fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f7ff fd10 	bl	800d124 <SDMMC_GetCommandResponse>
 800d704:	4603      	mov	r3, r0
 800d706:	461a      	mov	r2, r3
 800d708:	7afb      	ldrb	r3, [r7, #11]
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d001      	beq.n	800d712 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d70e:	2301      	movs	r3, #1
 800d710:	e099      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d712:	2100      	movs	r1, #0
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f7ff fd12 	bl	800d13e <SDMMC_GetResponse>
 800d71a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	4b4e      	ldr	r3, [pc, #312]	; (800d858 <SDMMC_GetCmdResp1+0x1d8>)
 800d720:	4013      	ands	r3, r2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d726:	2300      	movs	r3, #0
 800d728:	e08d      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	da02      	bge.n	800d736 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d734:	e087      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d740:	2340      	movs	r3, #64	; 0x40
 800d742:	e080      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d74e:	2380      	movs	r3, #128	; 0x80
 800d750:	e079      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d75c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d760:	e071      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d76c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d770:	e069      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d780:	e061      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d78c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d790:	e059      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7a0:	e051      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d7ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d7b0:	e049      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d7bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d7c0:	e041      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d7cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7d0:	e039      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d7dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d7e0:	e031      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d7ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d7f0:	e029      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d7fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d800:	e021      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d80c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d810:	e019      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d002      	beq.n	800d822 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d81c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d820:	e011      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d82c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d830:	e009      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f003 0308 	and.w	r3, r3, #8
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d83c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d840:	e001      	b.n	800d846 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d846:	4618      	mov	r0, r3
 800d848:	3720      	adds	r7, #32
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	20000004 	.word	0x20000004
 800d854:	10624dd3 	.word	0x10624dd3
 800d858:	fdffe008 	.word	0xfdffe008

0800d85c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d864:	4b1f      	ldr	r3, [pc, #124]	; (800d8e4 <SDMMC_GetCmdResp2+0x88>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a1f      	ldr	r2, [pc, #124]	; (800d8e8 <SDMMC_GetCmdResp2+0x8c>)
 800d86a:	fba2 2303 	umull	r2, r3, r2, r3
 800d86e:	0a5b      	lsrs	r3, r3, #9
 800d870:	f241 3288 	movw	r2, #5000	; 0x1388
 800d874:	fb02 f303 	mul.w	r3, r2, r3
 800d878:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	1e5a      	subs	r2, r3, #1
 800d87e:	60fa      	str	r2, [r7, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d102      	bne.n	800d88a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d884:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d888:	e026      	b.n	800d8d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d88e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d896:	2b00      	cmp	r3, #0
 800d898:	d0ef      	beq.n	800d87a <SDMMC_GetCmdResp2+0x1e>
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1ea      	bne.n	800d87a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a8:	f003 0304 	and.w	r3, r3, #4
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d004      	beq.n	800d8ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2204      	movs	r2, #4
 800d8b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8b6:	2304      	movs	r3, #4
 800d8b8:	e00e      	b.n	800d8d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d004      	beq.n	800d8d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e003      	b.n	800d8d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	22c5      	movs	r2, #197	; 0xc5
 800d8d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	20000004 	.word	0x20000004
 800d8e8:	10624dd3 	.word	0x10624dd3

0800d8ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8f4:	4b1a      	ldr	r3, [pc, #104]	; (800d960 <SDMMC_GetCmdResp3+0x74>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a1a      	ldr	r2, [pc, #104]	; (800d964 <SDMMC_GetCmdResp3+0x78>)
 800d8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d8fe:	0a5b      	lsrs	r3, r3, #9
 800d900:	f241 3288 	movw	r2, #5000	; 0x1388
 800d904:	fb02 f303 	mul.w	r3, r2, r3
 800d908:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	1e5a      	subs	r2, r3, #1
 800d90e:	60fa      	str	r2, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d102      	bne.n	800d91a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d918:	e01b      	b.n	800d952 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0ef      	beq.n	800d90a <SDMMC_GetCmdResp3+0x1e>
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1ea      	bne.n	800d90a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d938:	f003 0304 	and.w	r3, r3, #4
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d004      	beq.n	800d94a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2204      	movs	r2, #4
 800d944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d946:	2304      	movs	r3, #4
 800d948:	e003      	b.n	800d952 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	22c5      	movs	r2, #197	; 0xc5
 800d94e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	20000004 	.word	0x20000004
 800d964:	10624dd3 	.word	0x10624dd3

0800d968 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b088      	sub	sp, #32
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	460b      	mov	r3, r1
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d976:	4b35      	ldr	r3, [pc, #212]	; (800da4c <SDMMC_GetCmdResp6+0xe4>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a35      	ldr	r2, [pc, #212]	; (800da50 <SDMMC_GetCmdResp6+0xe8>)
 800d97c:	fba2 2303 	umull	r2, r3, r2, r3
 800d980:	0a5b      	lsrs	r3, r3, #9
 800d982:	f241 3288 	movw	r2, #5000	; 0x1388
 800d986:	fb02 f303 	mul.w	r3, r2, r3
 800d98a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	1e5a      	subs	r2, r3, #1
 800d990:	61fa      	str	r2, [r7, #28]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d102      	bne.n	800d99c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d996:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d99a:	e052      	b.n	800da42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d0ef      	beq.n	800d98c <SDMMC_GetCmdResp6+0x24>
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1ea      	bne.n	800d98c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ba:	f003 0304 	and.w	r3, r3, #4
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d004      	beq.n	800d9cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2204      	movs	r2, #4
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9c8:	2304      	movs	r3, #4
 800d9ca:	e03a      	b.n	800da42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d0:	f003 0301 	and.w	r3, r3, #1
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d004      	beq.n	800d9e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e02f      	b.n	800da42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f7ff fb9e 	bl	800d124 <SDMMC_GetCommandResponse>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	7afb      	ldrb	r3, [r7, #11]
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d001      	beq.n	800d9f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e025      	b.n	800da42 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	22c5      	movs	r2, #197	; 0xc5
 800d9fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7ff fb9d 	bl	800d13e <SDMMC_GetResponse>
 800da04:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d106      	bne.n	800da1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	0c1b      	lsrs	r3, r3, #16
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800da1a:	2300      	movs	r3, #0
 800da1c:	e011      	b.n	800da42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d002      	beq.n	800da2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da2c:	e009      	b.n	800da42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da3c:	e001      	b.n	800da42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800da42:	4618      	mov	r0, r3
 800da44:	3720      	adds	r7, #32
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	20000004 	.word	0x20000004
 800da50:	10624dd3 	.word	0x10624dd3

0800da54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da5c:	4b22      	ldr	r3, [pc, #136]	; (800dae8 <SDMMC_GetCmdResp7+0x94>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a22      	ldr	r2, [pc, #136]	; (800daec <SDMMC_GetCmdResp7+0x98>)
 800da62:	fba2 2303 	umull	r2, r3, r2, r3
 800da66:	0a5b      	lsrs	r3, r3, #9
 800da68:	f241 3288 	movw	r2, #5000	; 0x1388
 800da6c:	fb02 f303 	mul.w	r3, r2, r3
 800da70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	1e5a      	subs	r2, r3, #1
 800da76:	60fa      	str	r2, [r7, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da80:	e02c      	b.n	800dadc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d0ef      	beq.n	800da72 <SDMMC_GetCmdResp7+0x1e>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1ea      	bne.n	800da72 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa0:	f003 0304 	and.w	r3, r3, #4
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2204      	movs	r2, #4
 800daac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daae:	2304      	movs	r3, #4
 800dab0:	e014      	b.n	800dadc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d004      	beq.n	800dac8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e009      	b.n	800dadc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2240      	movs	r2, #64	; 0x40
 800dad8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dada:	2300      	movs	r3, #0
  
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	20000004 	.word	0x20000004
 800daec:	10624dd3 	.word	0x10624dd3

0800daf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800daf0:	b084      	sub	sp, #16
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	f107 001c 	add.w	r0, r7, #28
 800dafe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	2b01      	cmp	r3, #1
 800db06:	d120      	bne.n	800db4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	68da      	ldr	r2, [r3, #12]
 800db18:	4b20      	ldr	r3, [pc, #128]	; (800db9c <USB_CoreInit+0xac>)
 800db1a:	4013      	ands	r3, r2
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800db2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d105      	bne.n	800db3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f942 	bl	800ddc8 <USB_CoreReset>
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
 800db48:	e010      	b.n	800db6c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f936 	bl	800ddc8 <USB_CoreReset>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d10b      	bne.n	800db8a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	f043 0206 	orr.w	r2, r3, #6
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	f043 0220 	orr.w	r2, r3, #32
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db96:	b004      	add	sp, #16
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	ffbdffbf 	.word	0xffbdffbf

0800dba0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	f043 0201 	orr.w	r2, r3, #1
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	370c      	adds	r7, #12
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbc2:	b480      	push	{r7}
 800dbc4:	b083      	sub	sp, #12
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	f023 0201 	bic.w	r2, r3, #1
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	460b      	mov	r3, r1
 800dbee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dbfc:	78fb      	ldrb	r3, [r7, #3]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d106      	bne.n	800dc10 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	60da      	str	r2, [r3, #12]
 800dc0e:	e00b      	b.n	800dc28 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc10:	78fb      	ldrb	r3, [r7, #3]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d106      	bne.n	800dc24 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	60da      	str	r2, [r3, #12]
 800dc22:	e001      	b.n	800dc28 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e003      	b.n	800dc30 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dc28:	2032      	movs	r0, #50	; 0x32
 800dc2a:	f7f5 fbad 	bl	8003388 <HAL_Delay>

  return HAL_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	019b      	lsls	r3, r3, #6
 800dc4a:	f043 0220 	orr.w	r2, r3, #32
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3301      	adds	r3, #1
 800dc56:	60fb      	str	r3, [r7, #12]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4a09      	ldr	r2, [pc, #36]	; (800dc80 <USB_FlushTxFifo+0x48>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d901      	bls.n	800dc64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dc60:	2303      	movs	r3, #3
 800dc62:	e006      	b.n	800dc72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	691b      	ldr	r3, [r3, #16]
 800dc68:	f003 0320 	and.w	r3, r3, #32
 800dc6c:	2b20      	cmp	r3, #32
 800dc6e:	d0f0      	beq.n	800dc52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	00030d40 	.word	0x00030d40

0800dc84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2210      	movs	r2, #16
 800dc94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	60fb      	str	r3, [r7, #12]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4a09      	ldr	r2, [pc, #36]	; (800dcc4 <USB_FlushRxFifo+0x40>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d901      	bls.n	800dca8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800dca4:	2303      	movs	r3, #3
 800dca6:	e006      	b.n	800dcb6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	f003 0310 	and.w	r3, r3, #16
 800dcb0:	2b10      	cmp	r3, #16
 800dcb2:	d0f0      	beq.n	800dc96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3714      	adds	r7, #20
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	00030d40 	.word	0x00030d40

0800dcc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b089      	sub	sp, #36	; 0x24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	4611      	mov	r1, r2
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	71fb      	strb	r3, [r7, #7]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800dce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d11a      	bne.n	800dd24 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dcee:	88bb      	ldrh	r3, [r7, #4]
 800dcf0:	3303      	adds	r3, #3
 800dcf2:	089b      	lsrs	r3, r3, #2
 800dcf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	61bb      	str	r3, [r7, #24]
 800dcfa:	e00f      	b.n	800dd1c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dcfc:	79fb      	ldrb	r3, [r7, #7]
 800dcfe:	031a      	lsls	r2, r3, #12
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	4413      	add	r3, r2
 800dd04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd08:	461a      	mov	r2, r3
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	3304      	adds	r3, #4
 800dd14:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	61bb      	str	r3, [r7, #24]
 800dd1c:	69ba      	ldr	r2, [r7, #24]
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d3eb      	bcc.n	800dcfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3724      	adds	r7, #36	; 0x24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b089      	sub	sp, #36	; 0x24
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	60f8      	str	r0, [r7, #12]
 800dd3a:	60b9      	str	r1, [r7, #8]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dd48:	88fb      	ldrh	r3, [r7, #6]
 800dd4a:	3303      	adds	r3, #3
 800dd4c:	089b      	lsrs	r3, r3, #2
 800dd4e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dd50:	2300      	movs	r3, #0
 800dd52:	61bb      	str	r3, [r7, #24]
 800dd54:	e00b      	b.n	800dd6e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	601a      	str	r2, [r3, #0]
    pDest++;
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	3304      	adds	r3, #4
 800dd66:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	61bb      	str	r3, [r7, #24]
 800dd6e:	69ba      	ldr	r2, [r7, #24]
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d3ef      	bcc.n	800dd56 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800dd76:	69fb      	ldr	r3, [r7, #28]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3724      	adds	r7, #36	; 0x24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	699b      	ldr	r3, [r3, #24]
 800dd96:	68fa      	ldr	r2, [r7, #12]
 800dd98:	4013      	ands	r3, r2
 800dd9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ddaa:	b480      	push	{r7}
 800ddac:	b083      	sub	sp, #12
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	f003 0301 	and.w	r3, r3, #1
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
	...

0800ddc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4a13      	ldr	r2, [pc, #76]	; (800de2c <USB_CoreReset+0x64>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d901      	bls.n	800dde6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dde2:	2303      	movs	r3, #3
 800dde4:	e01b      	b.n	800de1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	daf2      	bge.n	800ddd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	f043 0201 	orr.w	r2, r3, #1
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3301      	adds	r3, #1
 800de02:	60fb      	str	r3, [r7, #12]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	4a09      	ldr	r2, [pc, #36]	; (800de2c <USB_CoreReset+0x64>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d901      	bls.n	800de10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de0c:	2303      	movs	r3, #3
 800de0e:	e006      	b.n	800de1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	691b      	ldr	r3, [r3, #16]
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d0f0      	beq.n	800ddfe <USB_CoreReset+0x36>

  return HAL_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	00030d40 	.word	0x00030d40

0800de30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de30:	b084      	sub	sp, #16
 800de32:	b580      	push	{r7, lr}
 800de34:	b084      	sub	sp, #16
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	f107 001c 	add.w	r0, r7, #28
 800de3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de4c:	461a      	mov	r2, r3
 800de4e:	2300      	movs	r3, #0
 800de50:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de66:	2b00      	cmp	r3, #0
 800de68:	d018      	beq.n	800de9c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800de6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d10a      	bne.n	800de86 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800de7e:	f043 0304 	orr.w	r3, r3, #4
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	e014      	b.n	800deb0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800de94:	f023 0304 	bic.w	r3, r3, #4
 800de98:	6013      	str	r3, [r2, #0]
 800de9a:	e009      	b.n	800deb0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800deaa:	f023 0304 	bic.w	r3, r3, #4
 800deae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800deb0:	2110      	movs	r1, #16
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff fec0 	bl	800dc38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7ff fee3 	bl	800dc84 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800debe:	2300      	movs	r3, #0
 800dec0:	60fb      	str	r3, [r7, #12]
 800dec2:	e015      	b.n	800def0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	015a      	lsls	r2, r3, #5
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	4413      	add	r3, r2
 800decc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ded0:	461a      	mov	r2, r3
 800ded2:	f04f 33ff 	mov.w	r3, #4294967295
 800ded6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	015a      	lsls	r2, r3, #5
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	4413      	add	r3, r2
 800dee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dee4:	461a      	mov	r2, r3
 800dee6:	2300      	movs	r3, #0
 800dee8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3301      	adds	r3, #1
 800deee:	60fb      	str	r3, [r7, #12]
 800def0:	6a3b      	ldr	r3, [r7, #32]
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	429a      	cmp	r2, r3
 800def6:	d3e5      	bcc.n	800dec4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800def8:	2101      	movs	r1, #1
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 f8ac 	bl	800e058 <USB_DriveVbus>

  HAL_Delay(200U);
 800df00:	20c8      	movs	r0, #200	; 0xc8
 800df02:	f7f5 fa41 	bl	8003388 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f04f 32ff 	mov.w	r2, #4294967295
 800df12:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00b      	beq.n	800df38 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df26:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a14      	ldr	r2, [pc, #80]	; (800df7c <USB_HostInit+0x14c>)
 800df2c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a13      	ldr	r2, [pc, #76]	; (800df80 <USB_HostInit+0x150>)
 800df32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800df36:	e009      	b.n	800df4c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2280      	movs	r2, #128	; 0x80
 800df3c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4a10      	ldr	r2, [pc, #64]	; (800df84 <USB_HostInit+0x154>)
 800df42:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	4a10      	ldr	r2, [pc, #64]	; (800df88 <USB_HostInit+0x158>)
 800df48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800df4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d105      	bne.n	800df5e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	f043 0210 	orr.w	r2, r3, #16
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	699a      	ldr	r2, [r3, #24]
 800df62:	4b0a      	ldr	r3, [pc, #40]	; (800df8c <USB_HostInit+0x15c>)
 800df64:	4313      	orrs	r3, r2
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df76:	b004      	add	sp, #16
 800df78:	4770      	bx	lr
 800df7a:	bf00      	nop
 800df7c:	01000200 	.word	0x01000200
 800df80:	00e00300 	.word	0x00e00300
 800df84:	00600080 	.word	0x00600080
 800df88:	004000e0 	.word	0x004000e0
 800df8c:	a3200008 	.word	0xa3200008

0800df90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dfae:	f023 0303 	bic.w	r3, r3, #3
 800dfb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	78fb      	ldrb	r3, [r7, #3]
 800dfbe:	f003 0303 	and.w	r3, r3, #3
 800dfc2:	68f9      	ldr	r1, [r7, #12]
 800dfc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800dfcc:	78fb      	ldrb	r3, [r7, #3]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d107      	bne.n	800dfe2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dfd8:	461a      	mov	r2, r3
 800dfda:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800dfde:	6053      	str	r3, [r2, #4]
 800dfe0:	e009      	b.n	800dff6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800dfe2:	78fb      	ldrb	r3, [r7, #3]
 800dfe4:	2b02      	cmp	r3, #2
 800dfe6:	d106      	bne.n	800dff6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dfee:	461a      	mov	r2, r3
 800dff0:	f241 7370 	movw	r3, #6000	; 0x1770
 800dff4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e010:	2300      	movs	r3, #0
 800e012:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e024:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e02e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e032:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e034:	2064      	movs	r0, #100	; 0x64
 800e036:	f7f5 f9a7 	bl	8003388 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e046:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e048:	200a      	movs	r0, #10
 800e04a:	f7f5 f99d 	bl	8003388 <HAL_Delay>

  return HAL_OK;
 800e04e:	2300      	movs	r3, #0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3710      	adds	r7, #16
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e068:	2300      	movs	r3, #0
 800e06a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e07c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d109      	bne.n	800e09c <USB_DriveVbus+0x44>
 800e088:	78fb      	ldrb	r3, [r7, #3]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d106      	bne.n	800e09c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e09a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e0a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0a6:	d109      	bne.n	800e0bc <USB_DriveVbus+0x64>
 800e0a8:	78fb      	ldrb	r3, [r7, #3]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d106      	bne.n	800e0bc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e0b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3714      	adds	r7, #20
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr

0800e0ca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e0ca:	b480      	push	{r7}
 800e0cc:	b085      	sub	sp, #20
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	0c5b      	lsrs	r3, r3, #17
 800e0e8:	f003 0303 	and.w	r3, r3, #3
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3714      	adds	r7, #20
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr

0800e0f8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	b29b      	uxth	r3, r3
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
	...

0800e11c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b088      	sub	sp, #32
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	4608      	mov	r0, r1
 800e126:	4611      	mov	r1, r2
 800e128:	461a      	mov	r2, r3
 800e12a:	4603      	mov	r3, r0
 800e12c:	70fb      	strb	r3, [r7, #3]
 800e12e:	460b      	mov	r3, r1
 800e130:	70bb      	strb	r3, [r7, #2]
 800e132:	4613      	mov	r3, r2
 800e134:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e136:	2300      	movs	r3, #0
 800e138:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800e13e:	78fb      	ldrb	r3, [r7, #3]
 800e140:	015a      	lsls	r2, r3, #5
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	4413      	add	r3, r2
 800e146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e14a:	461a      	mov	r2, r3
 800e14c:	f04f 33ff 	mov.w	r3, #4294967295
 800e150:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e156:	2b03      	cmp	r3, #3
 800e158:	d87e      	bhi.n	800e258 <USB_HC_Init+0x13c>
 800e15a:	a201      	add	r2, pc, #4	; (adr r2, 800e160 <USB_HC_Init+0x44>)
 800e15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e160:	0800e171 	.word	0x0800e171
 800e164:	0800e21b 	.word	0x0800e21b
 800e168:	0800e171 	.word	0x0800e171
 800e16c:	0800e1dd 	.word	0x0800e1dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e170:	78fb      	ldrb	r3, [r7, #3]
 800e172:	015a      	lsls	r2, r3, #5
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	4413      	add	r3, r2
 800e178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e17c:	461a      	mov	r2, r3
 800e17e:	f240 439d 	movw	r3, #1181	; 0x49d
 800e182:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e184:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	da10      	bge.n	800e1ae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e18c:	78fb      	ldrb	r3, [r7, #3]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	4413      	add	r3, r2
 800e194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	0151      	lsls	r1, r2, #5
 800e19e:	693a      	ldr	r2, [r7, #16]
 800e1a0:	440a      	add	r2, r1
 800e1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e1a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1aa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800e1ac:	e057      	b.n	800e25e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d051      	beq.n	800e25e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e1ba:	78fb      	ldrb	r3, [r7, #3]
 800e1bc:	015a      	lsls	r2, r3, #5
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	78fa      	ldrb	r2, [r7, #3]
 800e1ca:	0151      	lsls	r1, r2, #5
 800e1cc:	693a      	ldr	r2, [r7, #16]
 800e1ce:	440a      	add	r2, r1
 800e1d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e1d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e1d8:	60d3      	str	r3, [r2, #12]
      break;
 800e1da:	e040      	b.n	800e25e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e1dc:	78fb      	ldrb	r3, [r7, #3]
 800e1de:	015a      	lsls	r2, r3, #5
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	f240 639d 	movw	r3, #1693	; 0x69d
 800e1ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e1f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da34      	bge.n	800e262 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e1f8:	78fb      	ldrb	r3, [r7, #3]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	78fa      	ldrb	r2, [r7, #3]
 800e208:	0151      	lsls	r1, r2, #5
 800e20a:	693a      	ldr	r2, [r7, #16]
 800e20c:	440a      	add	r2, r1
 800e20e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e216:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e218:	e023      	b.n	800e262 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e21a:	78fb      	ldrb	r3, [r7, #3]
 800e21c:	015a      	lsls	r2, r3, #5
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	4413      	add	r3, r2
 800e222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e226:	461a      	mov	r2, r3
 800e228:	f240 2325 	movw	r3, #549	; 0x225
 800e22c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e22e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e232:	2b00      	cmp	r3, #0
 800e234:	da17      	bge.n	800e266 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e236:	78fb      	ldrb	r3, [r7, #3]
 800e238:	015a      	lsls	r2, r3, #5
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	4413      	add	r3, r2
 800e23e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	78fa      	ldrb	r2, [r7, #3]
 800e246:	0151      	lsls	r1, r2, #5
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	440a      	add	r2, r1
 800e24c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e250:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800e254:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e256:	e006      	b.n	800e266 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	77fb      	strb	r3, [r7, #31]
      break;
 800e25c:	e004      	b.n	800e268 <USB_HC_Init+0x14c>
      break;
 800e25e:	bf00      	nop
 800e260:	e002      	b.n	800e268 <USB_HC_Init+0x14c>
      break;
 800e262:	bf00      	nop
 800e264:	e000      	b.n	800e268 <USB_HC_Init+0x14c>
      break;
 800e266:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e26e:	699a      	ldr	r2, [r3, #24]
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	f003 030f 	and.w	r3, r3, #15
 800e276:	2101      	movs	r1, #1
 800e278:	fa01 f303 	lsl.w	r3, r1, r3
 800e27c:	6939      	ldr	r1, [r7, #16]
 800e27e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e282:	4313      	orrs	r3, r2
 800e284:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e292:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e296:	2b00      	cmp	r3, #0
 800e298:	da03      	bge.n	800e2a2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e29a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e29e:	61bb      	str	r3, [r7, #24]
 800e2a0:	e001      	b.n	800e2a6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7ff ff0f 	bl	800e0ca <USB_GetHostSpeed>
 800e2ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e2ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d106      	bne.n	800e2c4 <USB_HC_Init+0x1a8>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	d003      	beq.n	800e2c4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e2bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e2c0:	617b      	str	r3, [r7, #20]
 800e2c2:	e001      	b.n	800e2c8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e2c8:	787b      	ldrb	r3, [r7, #1]
 800e2ca:	059b      	lsls	r3, r3, #22
 800e2cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e2d0:	78bb      	ldrb	r3, [r7, #2]
 800e2d2:	02db      	lsls	r3, r3, #11
 800e2d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e2d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e2da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e2de:	049b      	lsls	r3, r3, #18
 800e2e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e2e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e2e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e2e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e2ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e2f2:	78fb      	ldrb	r3, [r7, #3]
 800e2f4:	0159      	lsls	r1, r3, #5
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	440b      	add	r3, r1
 800e2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e304:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800e306:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d10f      	bne.n	800e32e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	4413      	add	r3, r2
 800e316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	78fa      	ldrb	r2, [r7, #3]
 800e31e:	0151      	lsls	r1, r2, #5
 800e320:	693a      	ldr	r2, [r7, #16]
 800e322:	440a      	add	r2, r1
 800e324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e32c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e32e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3720      	adds	r7, #32
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08c      	sub	sp, #48	; 0x30
 800e33c:	af02      	add	r7, sp, #8
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	4613      	mov	r3, r2
 800e344:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	785b      	ldrb	r3, [r3, #1]
 800e34e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800e350:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e354:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d02d      	beq.n	800e3be <USB_HC_StartXfer+0x86>
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	791b      	ldrb	r3, [r3, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d129      	bne.n	800e3be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d117      	bne.n	800e3a0 <USB_HC_StartXfer+0x68>
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	79db      	ldrb	r3, [r3, #7]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d003      	beq.n	800e380 <USB_HC_StartXfer+0x48>
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	79db      	ldrb	r3, [r3, #7]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d10f      	bne.n	800e3a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	015a      	lsls	r2, r3, #5
 800e384:	6a3b      	ldr	r3, [r7, #32]
 800e386:	4413      	add	r3, r2
 800e388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	69fa      	ldr	r2, [r7, #28]
 800e390:	0151      	lsls	r1, r2, #5
 800e392:	6a3a      	ldr	r2, [r7, #32]
 800e394:	440a      	add	r2, r1
 800e396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e39e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d10b      	bne.n	800e3be <USB_HC_StartXfer+0x86>
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	795b      	ldrb	r3, [r3, #5]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d107      	bne.n	800e3be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	785b      	ldrb	r3, [r3, #1]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f000 fa2f 	bl	800e818 <USB_DoPing>
      return HAL_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	e0f8      	b.n	800e5b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d018      	beq.n	800e3f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	8912      	ldrh	r2, [r2, #8]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	8912      	ldrh	r2, [r2, #8]
 800e3d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800e3dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e3de:	8b7b      	ldrh	r3, [r7, #26]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d90b      	bls.n	800e3fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800e3e4:	8b7b      	ldrh	r3, [r7, #26]
 800e3e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e3e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3ea:	68ba      	ldr	r2, [r7, #8]
 800e3ec:	8912      	ldrh	r2, [r2, #8]
 800e3ee:	fb02 f203 	mul.w	r2, r2, r3
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	611a      	str	r2, [r3, #16]
 800e3f6:	e001      	b.n	800e3fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	78db      	ldrb	r3, [r3, #3]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d007      	beq.n	800e414 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	8912      	ldrh	r2, [r2, #8]
 800e40a:	fb02 f203 	mul.w	r2, r2, r3
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	611a      	str	r2, [r3, #16]
 800e412:	e003      	b.n	800e41c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	695a      	ldr	r2, [r3, #20]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e426:	04d9      	lsls	r1, r3, #19
 800e428:	4b63      	ldr	r3, [pc, #396]	; (800e5b8 <USB_HC_StartXfer+0x280>)
 800e42a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e42c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	7a9b      	ldrb	r3, [r3, #10]
 800e432:	075b      	lsls	r3, r3, #29
 800e434:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e438:	69f9      	ldr	r1, [r7, #28]
 800e43a:	0148      	lsls	r0, r1, #5
 800e43c:	6a39      	ldr	r1, [r7, #32]
 800e43e:	4401      	add	r1, r0
 800e440:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e444:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e446:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e448:	79fb      	ldrb	r3, [r7, #7]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d009      	beq.n	800e462 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	68d9      	ldr	r1, [r3, #12]
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	015a      	lsls	r2, r3, #5
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	4413      	add	r3, r2
 800e45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e45e:	460a      	mov	r2, r1
 800e460:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e462:	6a3b      	ldr	r3, [r7, #32]
 800e464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	f003 0301 	and.w	r3, r3, #1
 800e46e:	2b00      	cmp	r3, #0
 800e470:	bf0c      	ite	eq
 800e472:	2301      	moveq	r3, #1
 800e474:	2300      	movne	r3, #0
 800e476:	b2db      	uxtb	r3, r3
 800e478:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	6a3b      	ldr	r3, [r7, #32]
 800e480:	4413      	add	r3, r2
 800e482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	69fa      	ldr	r2, [r7, #28]
 800e48a:	0151      	lsls	r1, r2, #5
 800e48c:	6a3a      	ldr	r2, [r7, #32]
 800e48e:	440a      	add	r2, r1
 800e490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e494:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e498:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	015a      	lsls	r2, r3, #5
 800e49e:	6a3b      	ldr	r3, [r7, #32]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	7e7b      	ldrb	r3, [r7, #25]
 800e4aa:	075b      	lsls	r3, r3, #29
 800e4ac:	69f9      	ldr	r1, [r7, #28]
 800e4ae:	0148      	lsls	r0, r1, #5
 800e4b0:	6a39      	ldr	r1, [r7, #32]
 800e4b2:	4401      	add	r1, r0
 800e4b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	015a      	lsls	r2, r3, #5
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e4d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	78db      	ldrb	r3, [r3, #3]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d004      	beq.n	800e4e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4e2:	613b      	str	r3, [r7, #16]
 800e4e4:	e003      	b.n	800e4ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e4ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e4f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	015a      	lsls	r2, r3, #5
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e502:	461a      	mov	r2, r3
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e508:	79fb      	ldrb	r3, [r7, #7]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	e04e      	b.n	800e5b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	78db      	ldrb	r3, [r3, #3]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d149      	bne.n	800e5ae <USB_HC_StartXfer+0x276>
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d045      	beq.n	800e5ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	79db      	ldrb	r3, [r3, #7]
 800e526:	2b03      	cmp	r3, #3
 800e528:	d830      	bhi.n	800e58c <USB_HC_StartXfer+0x254>
 800e52a:	a201      	add	r2, pc, #4	; (adr r2, 800e530 <USB_HC_StartXfer+0x1f8>)
 800e52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e530:	0800e541 	.word	0x0800e541
 800e534:	0800e565 	.word	0x0800e565
 800e538:	0800e541 	.word	0x0800e541
 800e53c:	0800e565 	.word	0x0800e565
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	3303      	adds	r3, #3
 800e546:	089b      	lsrs	r3, r3, #2
 800e548:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e54a:	8afa      	ldrh	r2, [r7, #22]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e550:	b29b      	uxth	r3, r3
 800e552:	429a      	cmp	r2, r3
 800e554:	d91c      	bls.n	800e590 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	699b      	ldr	r3, [r3, #24]
 800e55a:	f043 0220 	orr.w	r2, r3, #32
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	619a      	str	r2, [r3, #24]
        }
        break;
 800e562:	e015      	b.n	800e590 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	695b      	ldr	r3, [r3, #20]
 800e568:	3303      	adds	r3, #3
 800e56a:	089b      	lsrs	r3, r3, #2
 800e56c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e56e:	8afa      	ldrh	r2, [r7, #22]
 800e570:	6a3b      	ldr	r3, [r7, #32]
 800e572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d90a      	bls.n	800e594 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	619a      	str	r2, [r3, #24]
        }
        break;
 800e58a:	e003      	b.n	800e594 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e58c:	bf00      	nop
 800e58e:	e002      	b.n	800e596 <USB_HC_StartXfer+0x25e>
        break;
 800e590:	bf00      	nop
 800e592:	e000      	b.n	800e596 <USB_HC_StartXfer+0x25e>
        break;
 800e594:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	68d9      	ldr	r1, [r3, #12]
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	785a      	ldrb	r2, [r3, #1]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	9000      	str	r0, [sp, #0]
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f7ff fb8d 	bl	800dcc8 <USB_WritePacket>
  }

  return HAL_OK;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3728      	adds	r7, #40	; 0x28
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	1ff80000 	.word	0x1ff80000

0800e5bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e5ce:	695b      	ldr	r3, [r3, #20]
 800e5d0:	b29b      	uxth	r3, r3
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3714      	adds	r7, #20
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b089      	sub	sp, #36	; 0x24
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800e5ee:	78fb      	ldrb	r3, [r7, #3]
 800e5f0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	015a      	lsls	r2, r3, #5
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	0c9b      	lsrs	r3, r3, #18
 800e606:	f003 0303 	and.w	r3, r3, #3
 800e60a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	4413      	add	r3, r2
 800e614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	0fdb      	lsrs	r3, r3, #31
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	f003 0320 	and.w	r3, r3, #32
 800e62a:	2b20      	cmp	r3, #32
 800e62c:	d104      	bne.n	800e638 <USB_HC_Halt+0x5a>
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d101      	bne.n	800e638 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e634:	2300      	movs	r3, #0
 800e636:	e0e8      	b.n	800e80a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d002      	beq.n	800e644 <USB_HC_Halt+0x66>
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	2b02      	cmp	r3, #2
 800e642:	d173      	bne.n	800e72c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	015a      	lsls	r2, r3, #5
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	4413      	add	r3, r2
 800e64c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	0151      	lsls	r1, r2, #5
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	440a      	add	r2, r1
 800e65a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e65e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e662:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	f003 0320 	and.w	r3, r3, #32
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f040 80cb 	bne.w	800e808 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d143      	bne.n	800e706 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	015a      	lsls	r2, r3, #5
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	4413      	add	r3, r2
 800e686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	697a      	ldr	r2, [r7, #20]
 800e68e:	0151      	lsls	r1, r2, #5
 800e690:	69ba      	ldr	r2, [r7, #24]
 800e692:	440a      	add	r2, r1
 800e694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e69c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	015a      	lsls	r2, r3, #5
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	4413      	add	r3, r2
 800e6a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	0151      	lsls	r1, r2, #5
 800e6b0:	69ba      	ldr	r2, [r7, #24]
 800e6b2:	440a      	add	r2, r1
 800e6b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e6b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e6bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	015a      	lsls	r2, r3, #5
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	697a      	ldr	r2, [r7, #20]
 800e6ce:	0151      	lsls	r1, r2, #5
 800e6d0:	69ba      	ldr	r2, [r7, #24]
 800e6d2:	440a      	add	r2, r1
 800e6d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e6d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e6dc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	61fb      	str	r3, [r7, #28]
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e6ea:	d81d      	bhi.n	800e728 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	015a      	lsls	r2, r3, #5
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e702:	d0ec      	beq.n	800e6de <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e704:	e080      	b.n	800e808 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	015a      	lsls	r2, r3, #5
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	4413      	add	r3, r2
 800e70e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	697a      	ldr	r2, [r7, #20]
 800e716:	0151      	lsls	r1, r2, #5
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	440a      	add	r2, r1
 800e71c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e724:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e726:	e06f      	b.n	800e808 <USB_HC_Halt+0x22a>
            break;
 800e728:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e72a:	e06d      	b.n	800e808 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	015a      	lsls	r2, r3, #5
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	4413      	add	r3, r2
 800e734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	0151      	lsls	r1, r2, #5
 800e73e:	69ba      	ldr	r2, [r7, #24]
 800e740:	440a      	add	r2, r1
 800e742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e74a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d143      	bne.n	800e7e4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	015a      	lsls	r2, r3, #5
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	4413      	add	r3, r2
 800e764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	0151      	lsls	r1, r2, #5
 800e76e:	69ba      	ldr	r2, [r7, #24]
 800e770:	440a      	add	r2, r1
 800e772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e77a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	4413      	add	r3, r2
 800e784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	697a      	ldr	r2, [r7, #20]
 800e78c:	0151      	lsls	r1, r2, #5
 800e78e:	69ba      	ldr	r2, [r7, #24]
 800e790:	440a      	add	r2, r1
 800e792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e796:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e79a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	015a      	lsls	r2, r3, #5
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	0151      	lsls	r1, r2, #5
 800e7ae:	69ba      	ldr	r2, [r7, #24]
 800e7b0:	440a      	add	r2, r1
 800e7b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e7b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e7ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	61fb      	str	r3, [r7, #28]
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7c8:	d81d      	bhi.n	800e806 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	015a      	lsls	r2, r3, #5
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7e0:	d0ec      	beq.n	800e7bc <USB_HC_Halt+0x1de>
 800e7e2:	e011      	b.n	800e808 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	015a      	lsls	r2, r3, #5
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	0151      	lsls	r1, r2, #5
 800e7f6:	69ba      	ldr	r2, [r7, #24]
 800e7f8:	440a      	add	r2, r1
 800e7fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e7fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e802:	6013      	str	r3, [r2, #0]
 800e804:	e000      	b.n	800e808 <USB_HC_Halt+0x22a>
          break;
 800e806:	bf00      	nop
    }
  }

  return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3724      	adds	r7, #36	; 0x24
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
	...

0800e818 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e818:	b480      	push	{r7}
 800e81a:	b087      	sub	sp, #28
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e82c:	2301      	movs	r3, #1
 800e82e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	04da      	lsls	r2, r3, #19
 800e834:	4b15      	ldr	r3, [pc, #84]	; (800e88c <USB_DoPing+0x74>)
 800e836:	4013      	ands	r3, r2
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	0151      	lsls	r1, r2, #5
 800e83c:	697a      	ldr	r2, [r7, #20]
 800e83e:	440a      	add	r2, r1
 800e840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e848:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	015a      	lsls	r2, r3, #5
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	4413      	add	r3, r2
 800e852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e860:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e868:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	015a      	lsls	r2, r3, #5
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	4413      	add	r3, r2
 800e872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e876:	461a      	mov	r2, r3
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	371c      	adds	r7, #28
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	1ff80000 	.word	0x1ff80000

0800e890 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e89c:	2300      	movs	r3, #0
 800e89e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7ff f98e 	bl	800dbc2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e8a6:	2110      	movs	r1, #16
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff f9c5 	bl	800dc38 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f7ff f9e8 	bl	800dc84 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	613b      	str	r3, [r7, #16]
 800e8b8:	e01f      	b.n	800e8fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	015a      	lsls	r2, r3, #5
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e8d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e8d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e8e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	015a      	lsls	r2, r3, #5
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	613b      	str	r3, [r7, #16]
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	2b0f      	cmp	r3, #15
 800e8fe:	d9dc      	bls.n	800e8ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e900:	2300      	movs	r3, #0
 800e902:	613b      	str	r3, [r7, #16]
 800e904:	e034      	b.n	800e970 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	015a      	lsls	r2, r3, #5
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	4413      	add	r3, r2
 800e90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e91c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e924:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e92c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	015a      	lsls	r2, r3, #5
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	4413      	add	r3, r2
 800e936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e93a:	461a      	mov	r2, r3
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	3301      	adds	r3, #1
 800e944:	617b      	str	r3, [r7, #20]
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e94c:	d80c      	bhi.n	800e968 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	015a      	lsls	r2, r3, #5
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	4413      	add	r3, r2
 800e956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e964:	d0ec      	beq.n	800e940 <USB_StopHost+0xb0>
 800e966:	e000      	b.n	800e96a <USB_StopHost+0xda>
        break;
 800e968:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	3301      	adds	r3, #1
 800e96e:	613b      	str	r3, [r7, #16]
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	2b0f      	cmp	r3, #15
 800e974:	d9c7      	bls.n	800e906 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e97c:	461a      	mov	r2, r3
 800e97e:	f04f 33ff 	mov.w	r3, #4294967295
 800e982:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f04f 32ff 	mov.w	r2, #4294967295
 800e98a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7ff f907 	bl	800dba0 <USB_EnableGlobalInt>

  return HAL_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e9a0:	4904      	ldr	r1, [pc, #16]	; (800e9b4 <MX_FATFS_Init+0x18>)
 800e9a2:	4805      	ldr	r0, [pc, #20]	; (800e9b8 <MX_FATFS_Init+0x1c>)
 800e9a4:	f002 fbe8 	bl	8011178 <FATFS_LinkDriver>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	4b03      	ldr	r3, [pc, #12]	; (800e9bc <MX_FATFS_Init+0x20>)
 800e9ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e9b0:	bf00      	nop
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	20009fdc 	.word	0x20009fdc
 800e9b8:	08026e48 	.word	0x08026e48
 800e9bc:	20009fd8 	.word	0x20009fd8

0800e9c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e9ca:	f000 f87b 	bl	800eac4 <BSP_SD_IsDetected>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d001      	beq.n	800e9d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e9d4:	2302      	movs	r3, #2
 800e9d6:	e012      	b.n	800e9fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e9d8:	480b      	ldr	r0, [pc, #44]	; (800ea08 <BSP_SD_Init+0x48>)
 800e9da:	f7fb facf 	bl	8009f7c <HAL_SD_Init>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e9e2:	79fb      	ldrb	r3, [r7, #7]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d109      	bne.n	800e9fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e9e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e9ec:	4806      	ldr	r0, [pc, #24]	; (800ea08 <BSP_SD_Init+0x48>)
 800e9ee:	f7fb ff1d 	bl	800a82c <HAL_SD_ConfigWideBusOperation>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e9fc:	79fb      	ldrb	r3, [r7, #7]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	20009b84 	.word	0x20009b84

0800ea0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	68ba      	ldr	r2, [r7, #8]
 800ea20:	68f9      	ldr	r1, [r7, #12]
 800ea22:	4806      	ldr	r0, [pc, #24]	; (800ea3c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ea24:	f7fb fb60 	bl	800a0e8 <HAL_SD_ReadBlocks_DMA>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20009b84 	.word	0x20009b84

0800ea40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	68f9      	ldr	r1, [r7, #12]
 800ea56:	4806      	ldr	r0, [pc, #24]	; (800ea70 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ea58:	f7fb fc28 	bl	800a2ac <HAL_SD_WriteBlocks_DMA>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3718      	adds	r7, #24
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	20009b84 	.word	0x20009b84

0800ea74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ea78:	4805      	ldr	r0, [pc, #20]	; (800ea90 <BSP_SD_GetCardState+0x1c>)
 800ea7a:	f7fb ff71 	bl	800a960 <HAL_SD_GetCardState>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b04      	cmp	r3, #4
 800ea82:	bf14      	ite	ne
 800ea84:	2301      	movne	r3, #1
 800ea86:	2300      	moveq	r3, #0
 800ea88:	b2db      	uxtb	r3, r3
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20009b84 	.word	0x20009b84

0800ea94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ea9c:	6879      	ldr	r1, [r7, #4]
 800ea9e:	4803      	ldr	r0, [pc, #12]	; (800eaac <BSP_SD_GetCardInfo+0x18>)
 800eaa0:	f7fb fe98 	bl	800a7d4 <HAL_SD_GetCardInfo>
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	20009b84 	.word	0x20009b84

0800eab0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800eab8:	f000 f9b2 	bl	800ee20 <BSP_SD_ReadCpltCallback>
}
 800eabc:	bf00      	nop
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eaca:	2301      	movs	r3, #1
 800eacc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800eace:	f000 f80b 	bl	800eae8 <BSP_PlatformIsDetected>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d101      	bne.n	800eadc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ead8:	2300      	movs	r3, #0
 800eada:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	b2db      	uxtb	r3, r3
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eaf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800eaf6:	4806      	ldr	r0, [pc, #24]	; (800eb10 <BSP_PlatformIsDetected+0x28>)
 800eaf8:	f7f6 fae0 	bl	80050bc <HAL_GPIO_ReadPin>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d001      	beq.n	800eb06 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800eb02:	2300      	movs	r3, #0
 800eb04:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eb06:	79fb      	ldrb	r3, [r7, #7]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	40020800 	.word	0x40020800

0800eb14 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800eb1c:	f002 fb78 	bl	8011210 <osKernelSysTick>
 800eb20:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800eb22:	e006      	b.n	800eb32 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eb24:	f7ff ffa6 	bl	800ea74 <BSP_SD_GetCardState>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	e009      	b.n	800eb46 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800eb32:	f002 fb6d 	bl	8011210 <osKernelSysTick>
 800eb36:	4602      	mov	r2, r0
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d8f0      	bhi.n	800eb24 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800eb42:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
	...

0800eb50 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	4603      	mov	r3, r0
 800eb58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800eb5a:	4b0b      	ldr	r3, [pc, #44]	; (800eb88 <SD_CheckStatus+0x38>)
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eb60:	f7ff ff88 	bl	800ea74 <BSP_SD_GetCardState>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d107      	bne.n	800eb7a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800eb6a:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <SD_CheckStatus+0x38>)
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	f023 0301 	bic.w	r3, r3, #1
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	4b04      	ldr	r3, [pc, #16]	; (800eb88 <SD_CheckStatus+0x38>)
 800eb78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800eb7a:	4b03      	ldr	r3, [pc, #12]	; (800eb88 <SD_CheckStatus+0x38>)
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	b2db      	uxtb	r3, r3
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	20000035 	.word	0x20000035

0800eb8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800eb8c:	b590      	push	{r4, r7, lr}
 800eb8e:	b087      	sub	sp, #28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800eb96:	4b20      	ldr	r3, [pc, #128]	; (800ec18 <SD_initialize+0x8c>)
 800eb98:	2201      	movs	r2, #1
 800eb9a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800eb9c:	f002 fb2c 	bl	80111f8 <osKernelRunning>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d030      	beq.n	800ec08 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800eba6:	f7ff ff0b 	bl	800e9c0 <BSP_SD_Init>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d107      	bne.n	800ebc0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ebb0:	79fb      	ldrb	r3, [r7, #7]
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7ff ffcc 	bl	800eb50 <SD_CheckStatus>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	461a      	mov	r2, r3
 800ebbc:	4b16      	ldr	r3, [pc, #88]	; (800ec18 <SD_initialize+0x8c>)
 800ebbe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ebc0:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <SD_initialize+0x8c>)
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	d01e      	beq.n	800ec08 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ebca:	4b14      	ldr	r3, [pc, #80]	; (800ec1c <SD_initialize+0x90>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10e      	bne.n	800ebf0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ebd2:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <SD_initialize+0x94>)
 800ebd4:	f107 0408 	add.w	r4, r7, #8
 800ebd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ebda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ebde:	f107 0308 	add.w	r3, r7, #8
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f002 fc47 	bl	8011478 <osMessageCreate>
 800ebea:	4603      	mov	r3, r0
 800ebec:	4a0b      	ldr	r2, [pc, #44]	; (800ec1c <SD_initialize+0x90>)
 800ebee:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ebf0:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <SD_initialize+0x90>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d107      	bne.n	800ec08 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ebf8:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <SD_initialize+0x8c>)
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	f043 0301 	orr.w	r3, r3, #1
 800ec02:	b2da      	uxtb	r2, r3
 800ec04:	4b04      	ldr	r3, [pc, #16]	; (800ec18 <SD_initialize+0x8c>)
 800ec06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ec08:	4b03      	ldr	r3, [pc, #12]	; (800ec18 <SD_initialize+0x8c>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	b2db      	uxtb	r3, r3
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	371c      	adds	r7, #28
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd90      	pop	{r4, r7, pc}
 800ec16:	bf00      	nop
 800ec18:	20000035 	.word	0x20000035
 800ec1c:	200003b8 	.word	0x200003b8
 800ec20:	08026400 	.word	0x08026400

0800ec24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ec2e:	79fb      	ldrb	r3, [r7, #7]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff ff8d 	bl	800eb50 <SD_CheckStatus>
 800ec36:	4603      	mov	r3, r0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08a      	sub	sp, #40	; 0x28
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	60b9      	str	r1, [r7, #8]
 800ec48:	607a      	str	r2, [r7, #4]
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ec50:	2301      	movs	r3, #1
 800ec52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ec56:	f247 5030 	movw	r0, #30000	; 0x7530
 800ec5a:	f7ff ff5b 	bl	800eb14 <SD_CheckStatusWithTimeout>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	da02      	bge.n	800ec6a <SD_read+0x2a>
  {
    return res;
 800ec64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec68:	e032      	b.n	800ecd0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	6879      	ldr	r1, [r7, #4]
 800ec6e:	68b8      	ldr	r0, [r7, #8]
 800ec70:	f7ff fecc 	bl	800ea0c <BSP_SD_ReadBlocks_DMA>
 800ec74:	4603      	mov	r3, r0
 800ec76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800ec7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d124      	bne.n	800eccc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ec82:	4b15      	ldr	r3, [pc, #84]	; (800ecd8 <SD_read+0x98>)
 800ec84:	6819      	ldr	r1, [r3, #0]
 800ec86:	f107 0314 	add.w	r3, r7, #20
 800ec8a:	f247 5230 	movw	r2, #30000	; 0x7530
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f002 fc5a 	bl	8011548 <osMessageGet>

    if (event.status == osEventMessage)
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	2b10      	cmp	r3, #16
 800ec98:	d118      	bne.n	800eccc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d115      	bne.n	800eccc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800eca0:	f002 fab6 	bl	8011210 <osKernelSysTick>
 800eca4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800eca6:	e008      	b.n	800ecba <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eca8:	f7ff fee4 	bl	800ea74 <BSP_SD_GetCardState>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d103      	bne.n	800ecba <SD_read+0x7a>
              {
                res = RES_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ecb8:	e008      	b.n	800eccc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ecba:	f002 faa9 	bl	8011210 <osKernelSysTick>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	6a3b      	ldr	r3, [r7, #32]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	f247 522f 	movw	r2, #29999	; 0x752f
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d9ed      	bls.n	800eca8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800eccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3728      	adds	r7, #40	; 0x28
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	200003b8 	.word	0x200003b8

0800ecdc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60b9      	str	r1, [r7, #8]
 800ece4:	607a      	str	r2, [r7, #4]
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ecec:	2301      	movs	r3, #1
 800ecee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ecf2:	f247 5030 	movw	r0, #30000	; 0x7530
 800ecf6:	f7ff ff0d 	bl	800eb14 <SD_CheckStatusWithTimeout>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	da02      	bge.n	800ed06 <SD_write+0x2a>
  {
    return res;
 800ed00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed04:	e02e      	b.n	800ed64 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ed06:	683a      	ldr	r2, [r7, #0]
 800ed08:	6879      	ldr	r1, [r7, #4]
 800ed0a:	68b8      	ldr	r0, [r7, #8]
 800ed0c:	f7ff fe98 	bl	800ea40 <BSP_SD_WriteBlocks_DMA>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d124      	bne.n	800ed60 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ed16:	4b15      	ldr	r3, [pc, #84]	; (800ed6c <SD_write+0x90>)
 800ed18:	6819      	ldr	r1, [r3, #0]
 800ed1a:	f107 0314 	add.w	r3, r7, #20
 800ed1e:	f247 5230 	movw	r2, #30000	; 0x7530
 800ed22:	4618      	mov	r0, r3
 800ed24:	f002 fc10 	bl	8011548 <osMessageGet>

    if (event.status == osEventMessage)
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	2b10      	cmp	r3, #16
 800ed2c:	d118      	bne.n	800ed60 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d115      	bne.n	800ed60 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ed34:	f002 fa6c 	bl	8011210 <osKernelSysTick>
 800ed38:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ed3a:	e008      	b.n	800ed4e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ed3c:	f7ff fe9a 	bl	800ea74 <BSP_SD_GetCardState>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d103      	bne.n	800ed4e <SD_write+0x72>
          {
            res = RES_OK;
 800ed46:	2300      	movs	r3, #0
 800ed48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ed4c:	e008      	b.n	800ed60 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ed4e:	f002 fa5f 	bl	8011210 <osKernelSysTick>
 800ed52:	4602      	mov	r2, r0
 800ed54:	6a3b      	ldr	r3, [r7, #32]
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	f247 522f 	movw	r2, #29999	; 0x752f
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d9ed      	bls.n	800ed3c <SD_write+0x60>
    }

  }
#endif

  return res;
 800ed60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3728      	adds	r7, #40	; 0x28
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	200003b8 	.word	0x200003b8

0800ed70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08c      	sub	sp, #48	; 0x30
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	4603      	mov	r3, r0
 800ed78:	603a      	str	r2, [r7, #0]
 800ed7a:	71fb      	strb	r3, [r7, #7]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ed86:	4b25      	ldr	r3, [pc, #148]	; (800ee1c <SD_ioctl+0xac>)
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <SD_ioctl+0x28>
 800ed94:	2303      	movs	r3, #3
 800ed96:	e03c      	b.n	800ee12 <SD_ioctl+0xa2>

  switch (cmd)
 800ed98:	79bb      	ldrb	r3, [r7, #6]
 800ed9a:	2b03      	cmp	r3, #3
 800ed9c:	d834      	bhi.n	800ee08 <SD_ioctl+0x98>
 800ed9e:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <SD_ioctl+0x34>)
 800eda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda4:	0800edb5 	.word	0x0800edb5
 800eda8:	0800edbd 	.word	0x0800edbd
 800edac:	0800edd5 	.word	0x0800edd5
 800edb0:	0800edef 	.word	0x0800edef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800edba:	e028      	b.n	800ee0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800edbc:	f107 030c 	add.w	r3, r7, #12
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff fe67 	bl	800ea94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800edc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800edd2:	e01c      	b.n	800ee0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800edd4:	f107 030c 	add.w	r3, r7, #12
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff fe5b 	bl	800ea94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800edde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800edec:	e00f      	b.n	800ee0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800edee:	f107 030c 	add.w	r3, r7, #12
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7ff fe4e 	bl	800ea94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfa:	0a5a      	lsrs	r2, r3, #9
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee06:	e002      	b.n	800ee0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ee08:	2304      	movs	r3, #4
 800ee0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ee0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3730      	adds	r7, #48	; 0x30
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20000035 	.word	0x20000035

0800ee20 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ee24:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <BSP_SD_ReadCpltCallback+0x18>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	2101      	movs	r1, #1
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f002 fb4b 	bl	80114c8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800ee32:	bf00      	nop
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	200003b8 	.word	0x200003b8

0800ee3c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ee3c:	b590      	push	{r4, r7, lr}
 800ee3e:	b089      	sub	sp, #36	; 0x24
 800ee40:	af04      	add	r7, sp, #16
 800ee42:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ee44:	2301      	movs	r3, #1
 800ee46:	2202      	movs	r2, #2
 800ee48:	2102      	movs	r1, #2
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 fcb8 	bl	800f7c0 <USBH_FindInterface>
 800ee50:	4603      	mov	r3, r0
 800ee52:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
 800ee56:	2bff      	cmp	r3, #255	; 0xff
 800ee58:	d002      	beq.n	800ee60 <USBH_CDC_InterfaceInit+0x24>
 800ee5a:	7bfb      	ldrb	r3, [r7, #15]
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d901      	bls.n	800ee64 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ee60:	2302      	movs	r3, #2
 800ee62:	e13d      	b.n	800f0e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
 800ee66:	4619      	mov	r1, r3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fc8d 	bl	800f788 <USBH_SelectInterface>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ee72:	7bbb      	ldrb	r3, [r7, #14]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d001      	beq.n	800ee7c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ee78:	2302      	movs	r3, #2
 800ee7a:	e131      	b.n	800f0e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ee82:	2050      	movs	r0, #80	; 0x50
 800ee84:	f016 fa90 	bl	80253a8 <malloc>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee92:	69db      	ldr	r3, [r3, #28]
 800ee94:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d101      	bne.n	800eea0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ee9c:	2302      	movs	r3, #2
 800ee9e:	e11f      	b.n	800f0e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800eea0:	2250      	movs	r2, #80	; 0x50
 800eea2:	2100      	movs	r1, #0
 800eea4:	68b8      	ldr	r0, [r7, #8]
 800eea6:	f016 fa9d 	bl	80253e4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	211a      	movs	r1, #26
 800eeb0:	fb01 f303 	mul.w	r3, r1, r3
 800eeb4:	4413      	add	r3, r2
 800eeb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	b25b      	sxtb	r3, r3
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	da15      	bge.n	800eeee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	211a      	movs	r1, #26
 800eec8:	fb01 f303 	mul.w	r3, r1, r3
 800eecc:	4413      	add	r3, r2
 800eece:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800eed2:	781a      	ldrb	r2, [r3, #0]
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800eed8:	7bfb      	ldrb	r3, [r7, #15]
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	211a      	movs	r1, #26
 800eede:	fb01 f303 	mul.w	r3, r1, r3
 800eee2:	4413      	add	r3, r2
 800eee4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800eee8:	881a      	ldrh	r2, [r3, #0]
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	785b      	ldrb	r3, [r3, #1]
 800eef2:	4619      	mov	r1, r3
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f002 f890 	bl	801101a <USBH_AllocPipe>
 800eefa:	4603      	mov	r3, r0
 800eefc:	461a      	mov	r2, r3
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	7819      	ldrb	r1, [r3, #0]
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	7858      	ldrb	r0, [r3, #1]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	8952      	ldrh	r2, [r2, #10]
 800ef1a:	9202      	str	r2, [sp, #8]
 800ef1c:	2203      	movs	r2, #3
 800ef1e:	9201      	str	r2, [sp, #4]
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	4623      	mov	r3, r4
 800ef24:	4602      	mov	r2, r0
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f002 f848 	bl	8010fbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2200      	movs	r2, #0
 800ef32:	4619      	mov	r1, r3
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f009 f901 	bl	801813c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	210a      	movs	r1, #10
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 fc3d 	bl	800f7c0 <USBH_FindInterface>
 800ef46:	4603      	mov	r3, r0
 800ef48:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ef4a:	7bfb      	ldrb	r3, [r7, #15]
 800ef4c:	2bff      	cmp	r3, #255	; 0xff
 800ef4e:	d002      	beq.n	800ef56 <USBH_CDC_InterfaceInit+0x11a>
 800ef50:	7bfb      	ldrb	r3, [r7, #15]
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d901      	bls.n	800ef5a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ef56:	2302      	movs	r3, #2
 800ef58:	e0c2      	b.n	800f0e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ef5a:	7bfb      	ldrb	r3, [r7, #15]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	211a      	movs	r1, #26
 800ef60:	fb01 f303 	mul.w	r3, r1, r3
 800ef64:	4413      	add	r3, r2
 800ef66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	b25b      	sxtb	r3, r3
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	da16      	bge.n	800efa0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ef72:	7bfb      	ldrb	r3, [r7, #15]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	211a      	movs	r1, #26
 800ef78:	fb01 f303 	mul.w	r3, r1, r3
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ef82:	781a      	ldrb	r2, [r3, #0]
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	211a      	movs	r1, #26
 800ef8e:	fb01 f303 	mul.w	r3, r1, r3
 800ef92:	4413      	add	r3, r2
 800ef94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ef98:	881a      	ldrh	r2, [r3, #0]
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	835a      	strh	r2, [r3, #26]
 800ef9e:	e015      	b.n	800efcc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	211a      	movs	r1, #26
 800efa6:	fb01 f303 	mul.w	r3, r1, r3
 800efaa:	4413      	add	r3, r2
 800efac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800efb0:	781a      	ldrb	r2, [r3, #0]
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800efb6:	7bfb      	ldrb	r3, [r7, #15]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	211a      	movs	r1, #26
 800efbc:	fb01 f303 	mul.w	r3, r1, r3
 800efc0:	4413      	add	r3, r2
 800efc2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800efc6:	881a      	ldrh	r2, [r3, #0]
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800efcc:	7bfb      	ldrb	r3, [r7, #15]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	211a      	movs	r1, #26
 800efd2:	fb01 f303 	mul.w	r3, r1, r3
 800efd6:	4413      	add	r3, r2
 800efd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	b25b      	sxtb	r3, r3
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	da16      	bge.n	800f012 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800efe4:	7bfb      	ldrb	r3, [r7, #15]
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	211a      	movs	r1, #26
 800efea:	fb01 f303 	mul.w	r3, r1, r3
 800efee:	4413      	add	r3, r2
 800eff0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800eff4:	781a      	ldrb	r2, [r3, #0]
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800effa:	7bfb      	ldrb	r3, [r7, #15]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	211a      	movs	r1, #26
 800f000:	fb01 f303 	mul.w	r3, r1, r3
 800f004:	4413      	add	r3, r2
 800f006:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f00a:	881a      	ldrh	r2, [r3, #0]
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	835a      	strh	r2, [r3, #26]
 800f010:	e015      	b.n	800f03e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f012:	7bfb      	ldrb	r3, [r7, #15]
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	211a      	movs	r1, #26
 800f018:	fb01 f303 	mul.w	r3, r1, r3
 800f01c:	4413      	add	r3, r2
 800f01e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f022:	781a      	ldrb	r2, [r3, #0]
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f028:	7bfb      	ldrb	r3, [r7, #15]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	211a      	movs	r1, #26
 800f02e:	fb01 f303 	mul.w	r3, r1, r3
 800f032:	4413      	add	r3, r2
 800f034:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f038:	881a      	ldrh	r2, [r3, #0]
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	7b9b      	ldrb	r3, [r3, #14]
 800f042:	4619      	mov	r1, r3
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f001 ffe8 	bl	801101a <USBH_AllocPipe>
 800f04a:	4603      	mov	r3, r0
 800f04c:	461a      	mov	r2, r3
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	7bdb      	ldrb	r3, [r3, #15]
 800f056:	4619      	mov	r1, r3
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f001 ffde 	bl	801101a <USBH_AllocPipe>
 800f05e:	4603      	mov	r3, r0
 800f060:	461a      	mov	r2, r3
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	7b59      	ldrb	r1, [r3, #13]
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	7b98      	ldrb	r0, [r3, #14]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	8b12      	ldrh	r2, [r2, #24]
 800f07e:	9202      	str	r2, [sp, #8]
 800f080:	2202      	movs	r2, #2
 800f082:	9201      	str	r2, [sp, #4]
 800f084:	9300      	str	r3, [sp, #0]
 800f086:	4623      	mov	r3, r4
 800f088:	4602      	mov	r2, r0
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f001 ff96 	bl	8010fbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	7b19      	ldrb	r1, [r3, #12]
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	7bd8      	ldrb	r0, [r3, #15]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f0a4:	68ba      	ldr	r2, [r7, #8]
 800f0a6:	8b52      	ldrh	r2, [r2, #26]
 800f0a8:	9202      	str	r2, [sp, #8]
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	9201      	str	r2, [sp, #4]
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	4623      	mov	r3, r4
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f001 ff81 	bl	8010fbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	7b5b      	ldrb	r3, [r3, #13]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f009 f836 	bl	801813c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	7b1b      	ldrb	r3, [r3, #12]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f009 f82f 	bl	801813c <USBH_LL_SetToggle>

  return USBH_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd90      	pop	{r4, r7, pc}

0800f0e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0f6:	69db      	ldr	r3, [r3, #28]
 800f0f8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00e      	beq.n	800f120 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	4619      	mov	r1, r3
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f001 ff76 	bl	8010ffa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	4619      	mov	r1, r3
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f001 ffa1 	bl	801105c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2200      	movs	r2, #0
 800f11e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	7b1b      	ldrb	r3, [r3, #12]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00e      	beq.n	800f146 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	7b1b      	ldrb	r3, [r3, #12]
 800f12c:	4619      	mov	r1, r3
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f001 ff63 	bl	8010ffa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	7b1b      	ldrb	r3, [r3, #12]
 800f138:	4619      	mov	r1, r3
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f001 ff8e 	bl	801105c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2200      	movs	r2, #0
 800f144:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	7b5b      	ldrb	r3, [r3, #13]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00e      	beq.n	800f16c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	7b5b      	ldrb	r3, [r3, #13]
 800f152:	4619      	mov	r1, r3
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f001 ff50 	bl	8010ffa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	7b5b      	ldrb	r3, [r3, #13]
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f001 ff7b 	bl	801105c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d00b      	beq.n	800f190 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f17e:	69db      	ldr	r3, [r3, #28]
 800f180:	4618      	mov	r0, r3
 800f182:	f016 f919 	bl	80253b8 <free>
    phost->pActiveClass->pData = 0U;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f18c:	2200      	movs	r2, #0
 800f18e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b084      	sub	sp, #16
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1a8:	69db      	ldr	r3, [r3, #28]
 800f1aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	3340      	adds	r3, #64	; 0x40
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 f8b1 	bl	800f31a <GetLineCoding>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f1bc:	7afb      	ldrb	r3, [r7, #11]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d105      	bne.n	800f1ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f1c8:	2102      	movs	r1, #2
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f1ce:	7afb      	ldrb	r3, [r7, #11]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1ee:	69db      	ldr	r3, [r3, #28]
 800f1f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f1f8:	2b04      	cmp	r3, #4
 800f1fa:	d877      	bhi.n	800f2ec <USBH_CDC_Process+0x114>
 800f1fc:	a201      	add	r2, pc, #4	; (adr r2, 800f204 <USBH_CDC_Process+0x2c>)
 800f1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f202:	bf00      	nop
 800f204:	0800f219 	.word	0x0800f219
 800f208:	0800f21f 	.word	0x0800f21f
 800f20c:	0800f24f 	.word	0x0800f24f
 800f210:	0800f2c3 	.word	0x0800f2c3
 800f214:	0800f2d1 	.word	0x0800f2d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	73fb      	strb	r3, [r7, #15]
      break;
 800f21c:	e06d      	b.n	800f2fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f222:	4619      	mov	r1, r3
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 f897 	bl	800f358 <SetLineCoding>
 800f22a:	4603      	mov	r3, r0
 800f22c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f22e:	7bbb      	ldrb	r3, [r7, #14]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d104      	bne.n	800f23e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	2202      	movs	r2, #2
 800f238:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f23c:	e058      	b.n	800f2f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f23e:	7bbb      	ldrb	r3, [r7, #14]
 800f240:	2b01      	cmp	r3, #1
 800f242:	d055      	beq.n	800f2f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	2204      	movs	r2, #4
 800f248:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f24c:	e050      	b.n	800f2f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	3340      	adds	r3, #64	; 0x40
 800f252:	4619      	mov	r1, r3
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 f860 	bl	800f31a <GetLineCoding>
 800f25a:	4603      	mov	r3, r0
 800f25c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f25e:	7bbb      	ldrb	r3, [r7, #14]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d126      	bne.n	800f2b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	2200      	movs	r2, #0
 800f268:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f276:	791b      	ldrb	r3, [r3, #4]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d13b      	bne.n	800f2f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f286:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f288:	429a      	cmp	r2, r3
 800f28a:	d133      	bne.n	800f2f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f296:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f298:	429a      	cmp	r2, r3
 800f29a:	d12b      	bne.n	800f2f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d124      	bne.n	800f2f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f982 	bl	800f5b4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f2b0:	e020      	b.n	800f2f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f2b2:	7bbb      	ldrb	r3, [r7, #14]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d01d      	beq.n	800f2f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2204      	movs	r2, #4
 800f2bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f2c0:	e018      	b.n	800f2f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f867 	bl	800f396 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 f8f6 	bl	800f4ba <CDC_ProcessReception>
      break;
 800f2ce:	e014      	b.n	800f2fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f2d0:	2100      	movs	r1, #0
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f001 f951 	bl	801057a <USBH_ClrFeature>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f2dc:	7bbb      	ldrb	r3, [r7, #14]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d10a      	bne.n	800f2f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800f2ea:	e005      	b.n	800f2f8 <USBH_CDC_Process+0x120>

    default:
      break;
 800f2ec:	bf00      	nop
 800f2ee:	e004      	b.n	800f2fa <USBH_CDC_Process+0x122>
      break;
 800f2f0:	bf00      	nop
 800f2f2:	e002      	b.n	800f2fa <USBH_CDC_Process+0x122>
      break;
 800f2f4:	bf00      	nop
 800f2f6:	e000      	b.n	800f2fa <USBH_CDC_Process+0x122>
      break;
 800f2f8:	bf00      	nop

  }

  return status;
 800f2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f30c:	2300      	movs	r3, #0
}
 800f30e:	4618      	mov	r0, r3
 800f310:	370c      	adds	r7, #12
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr

0800f31a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b082      	sub	sp, #8
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
 800f322:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	22a1      	movs	r2, #161	; 0xa1
 800f328:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2221      	movs	r2, #33	; 0x21
 800f32e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2207      	movs	r2, #7
 800f340:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2207      	movs	r2, #7
 800f346:	4619      	mov	r1, r3
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f001 faf6 	bl	801093a <USBH_CtlReq>
 800f34e:	4603      	mov	r3, r0
}
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2221      	movs	r2, #33	; 0x21
 800f366:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2220      	movs	r2, #32
 800f36c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2207      	movs	r2, #7
 800f37e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	2207      	movs	r2, #7
 800f384:	4619      	mov	r1, r3
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f001 fad7 	bl	801093a <USBH_CtlReq>
 800f38c:	4603      	mov	r3, r0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f396:	b580      	push	{r7, lr}
 800f398:	b086      	sub	sp, #24
 800f39a:	af02      	add	r7, sp, #8
 800f39c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f3a4:	69db      	ldr	r3, [r3, #28]
 800f3a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d002      	beq.n	800f3bc <CDC_ProcessTransmission+0x26>
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d023      	beq.n	800f402 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f3ba:	e07a      	b.n	800f4b2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	8b12      	ldrh	r2, [r2, #24]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d90b      	bls.n	800f3e0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	69d9      	ldr	r1, [r3, #28]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	8b1a      	ldrh	r2, [r3, #24]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	7b5b      	ldrb	r3, [r3, #13]
 800f3d4:	2001      	movs	r0, #1
 800f3d6:	9000      	str	r0, [sp, #0]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 fdac 	bl	8010f36 <USBH_BulkSendData>
 800f3de:	e00b      	b.n	800f3f8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	7b5b      	ldrb	r3, [r3, #13]
 800f3ee:	2001      	movs	r0, #1
 800f3f0:	9000      	str	r0, [sp, #0]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f001 fd9f 	bl	8010f36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2202      	movs	r2, #2
 800f3fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f400:	e057      	b.n	800f4b2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	7b5b      	ldrb	r3, [r3, #13]
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f008 fe6d 	bl	80180e8 <USBH_LL_GetURBState>
 800f40e:	4603      	mov	r3, r0
 800f410:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f412:	7afb      	ldrb	r3, [r7, #11]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d136      	bne.n	800f486 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	8b12      	ldrh	r2, [r2, #24]
 800f420:	4293      	cmp	r3, r2
 800f422:	d90e      	bls.n	800f442 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	8b12      	ldrh	r2, [r2, #24]
 800f42c:	1a9a      	subs	r2, r3, r2
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	69db      	ldr	r3, [r3, #28]
 800f436:	68fa      	ldr	r2, [r7, #12]
 800f438:	8b12      	ldrh	r2, [r2, #24]
 800f43a:	441a      	add	r2, r3
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	61da      	str	r2, [r3, #28]
 800f440:	e002      	b.n	800f448 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2200      	movs	r2, #0
 800f446:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d004      	beq.n	800f45a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2201      	movs	r2, #1
 800f454:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800f458:	e006      	b.n	800f468 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 f892 	bl	800f58c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2204      	movs	r2, #4
 800f46c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f47c:	2200      	movs	r2, #0
 800f47e:	4619      	mov	r1, r3
 800f480:	f002 f822 	bl	80114c8 <osMessagePut>
      break;
 800f484:	e014      	b.n	800f4b0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800f486:	7afb      	ldrb	r3, [r7, #11]
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d111      	bne.n	800f4b0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2201      	movs	r2, #1
 800f490:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2204      	movs	r2, #4
 800f498:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	f002 f80c 	bl	80114c8 <osMessagePut>
      break;
 800f4b0:	bf00      	nop
  }
}
 800f4b2:	bf00      	nop
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b086      	sub	sp, #24
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f4c8:	69db      	ldr	r3, [r3, #28]
 800f4ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	d002      	beq.n	800f4e0 <CDC_ProcessReception+0x26>
 800f4da:	2b04      	cmp	r3, #4
 800f4dc:	d00e      	beq.n	800f4fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f4de:	e051      	b.n	800f584 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	6a19      	ldr	r1, [r3, #32]
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	8b5a      	ldrh	r2, [r3, #26]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	7b1b      	ldrb	r3, [r3, #12]
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f001 fd47 	bl	8010f80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2204      	movs	r2, #4
 800f4f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f4fa:	e043      	b.n	800f584 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	7b1b      	ldrb	r3, [r3, #12]
 800f500:	4619      	mov	r1, r3
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f008 fdf0 	bl	80180e8 <USBH_LL_GetURBState>
 800f508:	4603      	mov	r3, r0
 800f50a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f50c:	7cfb      	ldrb	r3, [r7, #19]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d137      	bne.n	800f582 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	7b1b      	ldrb	r3, [r3, #12]
 800f516:	4619      	mov	r1, r3
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f008 fd53 	bl	8017fc4 <USBH_LL_GetLastXferSize>
 800f51e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	429a      	cmp	r2, r3
 800f528:	d016      	beq.n	800f558 <CDC_ProcessReception+0x9e>
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	8b5b      	ldrh	r3, [r3, #26]
 800f52e:	461a      	mov	r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	4293      	cmp	r3, r2
 800f534:	d910      	bls.n	800f558 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	1ad2      	subs	r2, r2, r3
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	6a1a      	ldr	r2, [r3, #32]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	441a      	add	r2, r3
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2203      	movs	r2, #3
 800f552:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800f556:	e006      	b.n	800f566 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f81d 	bl	800f5a0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2204      	movs	r2, #4
 800f56a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f57a:	2200      	movs	r2, #0
 800f57c:	4619      	mov	r1, r3
 800f57e:	f001 ffa3 	bl	80114c8 <osMessagePut>
      break;
 800f582:	bf00      	nop
  }
}
 800f584:	bf00      	nop
 800f586:	3718      	adds	r7, #24
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f594:	bf00      	nop
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f5a8:	bf00      	nop
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f5bc:	bf00      	nop
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800f5c8:	b5b0      	push	{r4, r5, r7, lr}
 800f5ca:	b090      	sub	sp, #64	; 0x40
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	4613      	mov	r3, r2
 800f5d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f5dc:	2302      	movs	r3, #2
 800f5de:	e04d      	b.n	800f67c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	79fa      	ldrb	r2, [r7, #7]
 800f5e4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f000 f847 	bl	800f68c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2200      	movs	r2, #0
 800f602:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2200      	movs	r2, #0
 800f612:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2200      	movs	r2, #0
 800f61a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d003      	beq.n	800f62c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f62c:	4b15      	ldr	r3, [pc, #84]	; (800f684 <USBH_Init+0xbc>)
 800f62e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800f632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800f638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f63c:	2100      	movs	r1, #0
 800f63e:	4618      	mov	r0, r3
 800f640:	f001 ff1a 	bl	8011478 <osMessageCreate>
 800f644:	4602      	mov	r2, r0
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f64c:	4b0e      	ldr	r3, [pc, #56]	; (800f688 <USBH_Init+0xc0>)
 800f64e:	f107 0414 	add.w	r4, r7, #20
 800f652:	461d      	mov	r5, r3
 800f654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f658:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f65c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800f660:	f107 0314 	add.w	r3, r7, #20
 800f664:	68f9      	ldr	r1, [r7, #12]
 800f666:	4618      	mov	r0, r3
 800f668:	f001 fde2 	bl	8011230 <osThreadCreate>
 800f66c:	4602      	mov	r2, r0
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f008 fbf1 	bl	8017e5c <USBH_LL_Init>

  return USBH_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3740      	adds	r7, #64	; 0x40
 800f680:	46bd      	mov	sp, r7
 800f682:	bdb0      	pop	{r4, r5, r7, pc}
 800f684:	08026420 	.word	0x08026420
 800f688:	08026430 	.word	0x08026430

0800f68c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b085      	sub	sp, #20
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f698:	2300      	movs	r3, #0
 800f69a:	60fb      	str	r3, [r7, #12]
 800f69c:	e009      	b.n	800f6b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	33e0      	adds	r3, #224	; 0xe0
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	4413      	add	r3, r2
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	60fb      	str	r3, [r7, #12]
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2b0e      	cmp	r3, #14
 800f6b6:	d9f2      	bls.n	800f69e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	60fb      	str	r3, [r7, #12]
 800f6bc:	e009      	b.n	800f6d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	60fb      	str	r3, [r7, #12]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6d8:	d3f1      	bcc.n	800f6be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2240      	movs	r2, #64	; 0x40
 800f6fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2201      	movs	r2, #1
 800f712:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2200      	movs	r2, #0
 800f71a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3714      	adds	r7, #20
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d016      	beq.n	800f776 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10e      	bne.n	800f770 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f758:	1c59      	adds	r1, r3, #1
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	33de      	adds	r3, #222	; 0xde
 800f764:	6839      	ldr	r1, [r7, #0]
 800f766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	73fb      	strb	r3, [r7, #15]
 800f76e:	e004      	b.n	800f77a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f770:	2302      	movs	r3, #2
 800f772:	73fb      	strb	r3, [r7, #15]
 800f774:	e001      	b.n	800f77a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f776:	2302      	movs	r3, #2
 800f778:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f788:	b480      	push	{r7}
 800f78a:	b085      	sub	sp, #20
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	460b      	mov	r3, r1
 800f792:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f79e:	78fa      	ldrb	r2, [r7, #3]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d204      	bcs.n	800f7ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	78fa      	ldrb	r2, [r7, #3]
 800f7a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f7ac:	e001      	b.n	800f7b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3714      	adds	r7, #20
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b087      	sub	sp, #28
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	4608      	mov	r0, r1
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	70fb      	strb	r3, [r7, #3]
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	70bb      	strb	r3, [r7, #2]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f7e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f7ea:	e025      	b.n	800f838 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f7ec:	7dfb      	ldrb	r3, [r7, #23]
 800f7ee:	221a      	movs	r2, #26
 800f7f0:	fb02 f303 	mul.w	r3, r2, r3
 800f7f4:	3308      	adds	r3, #8
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	3302      	adds	r3, #2
 800f7fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	795b      	ldrb	r3, [r3, #5]
 800f802:	78fa      	ldrb	r2, [r7, #3]
 800f804:	429a      	cmp	r2, r3
 800f806:	d002      	beq.n	800f80e <USBH_FindInterface+0x4e>
 800f808:	78fb      	ldrb	r3, [r7, #3]
 800f80a:	2bff      	cmp	r3, #255	; 0xff
 800f80c:	d111      	bne.n	800f832 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f812:	78ba      	ldrb	r2, [r7, #2]
 800f814:	429a      	cmp	r2, r3
 800f816:	d002      	beq.n	800f81e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f818:	78bb      	ldrb	r3, [r7, #2]
 800f81a:	2bff      	cmp	r3, #255	; 0xff
 800f81c:	d109      	bne.n	800f832 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f822:	787a      	ldrb	r2, [r7, #1]
 800f824:	429a      	cmp	r2, r3
 800f826:	d002      	beq.n	800f82e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f828:	787b      	ldrb	r3, [r7, #1]
 800f82a:	2bff      	cmp	r3, #255	; 0xff
 800f82c:	d101      	bne.n	800f832 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f82e:	7dfb      	ldrb	r3, [r7, #23]
 800f830:	e006      	b.n	800f840 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f832:	7dfb      	ldrb	r3, [r7, #23]
 800f834:	3301      	adds	r3, #1
 800f836:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f838:	7dfb      	ldrb	r3, [r7, #23]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d9d6      	bls.n	800f7ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f83e:	23ff      	movs	r3, #255	; 0xff
}
 800f840:	4618      	mov	r0, r3
 800f842:	371c      	adds	r7, #28
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr

0800f84c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f008 fb3d 	bl	8017ed4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800f85a:	2101      	movs	r1, #1
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f008 fc56 	bl	801810e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b088      	sub	sp, #32
 800f870:	af04      	add	r7, sp, #16
 800f872:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f874:	2302      	movs	r3, #2
 800f876:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f878:	2300      	movs	r3, #0
 800f87a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f882:	b2db      	uxtb	r3, r3
 800f884:	2b01      	cmp	r3, #1
 800f886:	d102      	bne.n	800f88e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2203      	movs	r2, #3
 800f88c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	b2db      	uxtb	r3, r3
 800f894:	2b0b      	cmp	r3, #11
 800f896:	f200 823c 	bhi.w	800fd12 <USBH_Process+0x4a6>
 800f89a:	a201      	add	r2, pc, #4	; (adr r2, 800f8a0 <USBH_Process+0x34>)
 800f89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a0:	0800f8d1 	.word	0x0800f8d1
 800f8a4:	0800f91f 	.word	0x0800f91f
 800f8a8:	0800f9a3 	.word	0x0800f9a3
 800f8ac:	0800fc91 	.word	0x0800fc91
 800f8b0:	0800fd13 	.word	0x0800fd13
 800f8b4:	0800fa63 	.word	0x0800fa63
 800f8b8:	0800fc1b 	.word	0x0800fc1b
 800f8bc:	0800fab5 	.word	0x0800fab5
 800f8c0:	0800faf1 	.word	0x0800faf1
 800f8c4:	0800fb2b 	.word	0x0800fb2b
 800f8c8:	0800fb73 	.word	0x0800fb73
 800f8cc:	0800fc79 	.word	0x0800fc79
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f000 821c 	beq.w	800fd16 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f8e4:	20c8      	movs	r0, #200	; 0xc8
 800f8e6:	f008 fc59 	bl	801819c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f008 fb4f 	bl	8017f8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2201      	movs	r2, #1
 800f904:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f914:	2200      	movs	r2, #0
 800f916:	4619      	mov	r1, r3
 800f918:	f001 fdd6 	bl	80114c8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f91c:	e1fb      	b.n	800fd16 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f924:	2b01      	cmp	r3, #1
 800f926:	d107      	bne.n	800f938 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2202      	movs	r2, #2
 800f934:	701a      	strb	r2, [r3, #0]
 800f936:	e025      	b.n	800f984 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f93e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f942:	d914      	bls.n	800f96e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f94a:	3301      	adds	r3, #1
 800f94c:	b2da      	uxtb	r2, r3
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d903      	bls.n	800f966 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	220d      	movs	r2, #13
 800f962:	701a      	strb	r2, [r3, #0]
 800f964:	e00e      	b.n	800f984 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2200      	movs	r2, #0
 800f96a:	701a      	strb	r2, [r3, #0]
 800f96c:	e00a      	b.n	800f984 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f974:	f103 020a 	add.w	r2, r3, #10
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f97e:	200a      	movs	r0, #10
 800f980:	f008 fc0c 	bl	801819c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2201      	movs	r2, #1
 800f988:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f998:	2200      	movs	r2, #0
 800f99a:	4619      	mov	r1, r3
 800f99c:	f001 fd94 	bl	80114c8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f9a0:	e1c0      	b.n	800fd24 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d005      	beq.n	800f9b8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f9b2:	2104      	movs	r1, #4
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f9b8:	2064      	movs	r0, #100	; 0x64
 800f9ba:	f008 fbef 	bl	801819c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f008 fabe 	bl	8017f40 <USBH_LL_GetSpeed>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2205      	movs	r2, #5
 800f9d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f001 fb1f 	bl	801101a <USBH_AllocPipe>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	461a      	mov	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f9e4:	2180      	movs	r1, #128	; 0x80
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f001 fb17 	bl	801101a <USBH_AllocPipe>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	7919      	ldrb	r1, [r3, #4]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fa08:	b292      	uxth	r2, r2
 800fa0a:	9202      	str	r2, [sp, #8]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	9201      	str	r2, [sp, #4]
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	4603      	mov	r3, r0
 800fa14:	2280      	movs	r2, #128	; 0x80
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f001 fad0 	bl	8010fbc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7959      	ldrb	r1, [r3, #5]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fa30:	b292      	uxth	r2, r2
 800fa32:	9202      	str	r2, [sp, #8]
 800fa34:	2200      	movs	r2, #0
 800fa36:	9201      	str	r2, [sp, #4]
 800fa38:	9300      	str	r3, [sp, #0]
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f001 fabc 	bl	8010fbc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2201      	movs	r2, #1
 800fa48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa58:	2200      	movs	r2, #0
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	f001 fd34 	bl	80114c8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fa60:	e160      	b.n	800fd24 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f964 	bl	800fd30 <USBH_HandleEnum>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fa6c:	7bbb      	ldrb	r3, [r7, #14]
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f040 8152 	bne.w	800fd1a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d103      	bne.n	800fa90 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2208      	movs	r2, #8
 800fa8c:	701a      	strb	r2, [r3, #0]
 800fa8e:	e002      	b.n	800fa96 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2207      	movs	r2, #7
 800fa94:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2205      	movs	r2, #5
 800fa9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800faaa:	2200      	movs	r2, #0
 800faac:	4619      	mov	r1, r3
 800faae:	f001 fd0b 	bl	80114c8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800fab2:	e132      	b.n	800fd1a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f000 812f 	beq.w	800fd1e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fac6:	2101      	movs	r1, #1
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2208      	movs	r2, #8
 800fad0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2205      	movs	r2, #5
 800fad6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fae6:	2200      	movs	r2, #0
 800fae8:	4619      	mov	r1, r3
 800faea:	f001 fced 	bl	80114c8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800faee:	e116      	b.n	800fd1e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	4619      	mov	r1, r3
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 fcf6 	bl	80104ec <USBH_SetCfg>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d102      	bne.n	800fb0c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2209      	movs	r2, #9
 800fb0a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb20:	2200      	movs	r2, #0
 800fb22:	4619      	mov	r1, r3
 800fb24:	f001 fcd0 	bl	80114c8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fb28:	e0fc      	b.n	800fd24 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800fb30:	f003 0320 	and.w	r3, r3, #32
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00a      	beq.n	800fb4e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800fb38:	2101      	movs	r1, #1
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fcf9 	bl	8010532 <USBH_SetFeature>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d106      	bne.n	800fb54 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	220a      	movs	r2, #10
 800fb4a:	701a      	strb	r2, [r3, #0]
 800fb4c:	e002      	b.n	800fb54 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	220a      	movs	r2, #10
 800fb52:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	f001 fcac 	bl	80114c8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fb70:	e0d8      	b.n	800fd24 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d03f      	beq.n	800fbfc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fb84:	2300      	movs	r3, #0
 800fb86:	73fb      	strb	r3, [r7, #15]
 800fb88:	e016      	b.n	800fbb8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fb8a:	7bfa      	ldrb	r2, [r7, #15]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	32de      	adds	r2, #222	; 0xde
 800fb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb94:	791a      	ldrb	r2, [r3, #4]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d108      	bne.n	800fbb2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800fba0:	7bfa      	ldrb	r2, [r7, #15]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	32de      	adds	r2, #222	; 0xde
 800fba6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800fbb0:	e005      	b.n	800fbbe <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fbb2:	7bfb      	ldrb	r3, [r7, #15]
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	73fb      	strb	r3, [r7, #15]
 800fbb8:	7bfb      	ldrb	r3, [r7, #15]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0e5      	beq.n	800fb8a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d016      	beq.n	800fbf6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	4798      	blx	r3
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d109      	bne.n	800fbee <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2206      	movs	r2, #6
 800fbde:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fbe6:	2103      	movs	r1, #3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	4798      	blx	r3
 800fbec:	e006      	b.n	800fbfc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	220d      	movs	r2, #13
 800fbf2:	701a      	strb	r2, [r3, #0]
 800fbf4:	e002      	b.n	800fbfc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	220d      	movs	r2, #13
 800fbfa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2205      	movs	r2, #5
 800fc00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc10:	2200      	movs	r2, #0
 800fc12:	4619      	mov	r1, r3
 800fc14:	f001 fc58 	bl	80114c8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fc18:	e084      	b.n	800fd24 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d017      	beq.n	800fc54 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fc2a:	691b      	ldr	r3, [r3, #16]
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	4798      	blx	r3
 800fc30:	4603      	mov	r3, r0
 800fc32:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fc34:	7bbb      	ldrb	r3, [r7, #14]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d103      	bne.n	800fc44 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	220b      	movs	r2, #11
 800fc40:	701a      	strb	r2, [r3, #0]
 800fc42:	e00a      	b.n	800fc5a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800fc44:	7bbb      	ldrb	r3, [r7, #14]
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	2b02      	cmp	r3, #2
 800fc4a:	d106      	bne.n	800fc5a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	220d      	movs	r2, #13
 800fc50:	701a      	strb	r2, [r3, #0]
 800fc52:	e002      	b.n	800fc5a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	220d      	movs	r2, #13
 800fc58:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2205      	movs	r2, #5
 800fc5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fc6e:	2200      	movs	r2, #0
 800fc70:	4619      	mov	r1, r3
 800fc72:	f001 fc29 	bl	80114c8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fc76:	e055      	b.n	800fd24 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d04f      	beq.n	800fd22 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fc88:	695b      	ldr	r3, [r3, #20]
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	4798      	blx	r3
      }
      break;
 800fc8e:	e048      	b.n	800fd22 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f7ff fcf7 	bl	800f68c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d009      	beq.n	800fcbc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d005      	beq.n	800fcd2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fccc:	2105      	movs	r1, #5
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d107      	bne.n	800fcee <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff fdb0 	bl	800f84c <USBH_Start>
 800fcec:	e002      	b.n	800fcf4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f008 f8f0 	bl	8017ed4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fd08:	2200      	movs	r2, #0
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f001 fbdc 	bl	80114c8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800fd10:	e008      	b.n	800fd24 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800fd12:	bf00      	nop
 800fd14:	e006      	b.n	800fd24 <USBH_Process+0x4b8>
      break;
 800fd16:	bf00      	nop
 800fd18:	e004      	b.n	800fd24 <USBH_Process+0x4b8>
      break;
 800fd1a:	bf00      	nop
 800fd1c:	e002      	b.n	800fd24 <USBH_Process+0x4b8>
    break;
 800fd1e:	bf00      	nop
 800fd20:	e000      	b.n	800fd24 <USBH_Process+0x4b8>
      break;
 800fd22:	bf00      	nop
  }
  return USBH_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop

0800fd30 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b088      	sub	sp, #32
 800fd34:	af04      	add	r7, sp, #16
 800fd36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	785b      	ldrb	r3, [r3, #1]
 800fd44:	2b07      	cmp	r3, #7
 800fd46:	f200 8208 	bhi.w	801015a <USBH_HandleEnum+0x42a>
 800fd4a:	a201      	add	r2, pc, #4	; (adr r2, 800fd50 <USBH_HandleEnum+0x20>)
 800fd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd50:	0800fd71 	.word	0x0800fd71
 800fd54:	0800fe2f 	.word	0x0800fe2f
 800fd58:	0800fe99 	.word	0x0800fe99
 800fd5c:	0800ff27 	.word	0x0800ff27
 800fd60:	0800ff91 	.word	0x0800ff91
 800fd64:	08010001 	.word	0x08010001
 800fd68:	0801009d 	.word	0x0801009d
 800fd6c:	0801011b 	.word	0x0801011b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fd70:	2108      	movs	r1, #8
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 faea 	bl	801034c <USBH_Get_DevDesc>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd7c:	7bbb      	ldrb	r3, [r7, #14]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d130      	bne.n	800fde4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	7919      	ldrb	r1, [r3, #4]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fda6:	b292      	uxth	r2, r2
 800fda8:	9202      	str	r2, [sp, #8]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	9201      	str	r2, [sp, #4]
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2280      	movs	r2, #128	; 0x80
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f001 f901 	bl	8010fbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	7959      	ldrb	r1, [r3, #5]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fdce:	b292      	uxth	r2, r2
 800fdd0:	9202      	str	r2, [sp, #8]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	9201      	str	r2, [sp, #4]
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2200      	movs	r2, #0
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f001 f8ed 	bl	8010fbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fde2:	e1bc      	b.n	801015e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fde4:	7bbb      	ldrb	r3, [r7, #14]
 800fde6:	2b03      	cmp	r3, #3
 800fde8:	f040 81b9 	bne.w	801015e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	b2da      	uxtb	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fe02:	2b03      	cmp	r3, #3
 800fe04:	d903      	bls.n	800fe0e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	220d      	movs	r2, #13
 800fe0a:	701a      	strb	r2, [r3, #0]
      break;
 800fe0c:	e1a7      	b.n	801015e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	795b      	ldrb	r3, [r3, #5]
 800fe12:	4619      	mov	r1, r3
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f001 f921 	bl	801105c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	791b      	ldrb	r3, [r3, #4]
 800fe1e:	4619      	mov	r1, r3
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f001 f91b 	bl	801105c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	701a      	strb	r2, [r3, #0]
      break;
 800fe2c:	e197      	b.n	801015e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fe2e:	2112      	movs	r1, #18
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 fa8b 	bl	801034c <USBH_Get_DevDesc>
 800fe36:	4603      	mov	r3, r0
 800fe38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fe3a:	7bbb      	ldrb	r3, [r7, #14]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d103      	bne.n	800fe48 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2202      	movs	r2, #2
 800fe44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fe46:	e18c      	b.n	8010162 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe48:	7bbb      	ldrb	r3, [r7, #14]
 800fe4a:	2b03      	cmp	r3, #3
 800fe4c:	f040 8189 	bne.w	8010162 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fe56:	3301      	adds	r3, #1
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fe66:	2b03      	cmp	r3, #3
 800fe68:	d903      	bls.n	800fe72 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	220d      	movs	r2, #13
 800fe6e:	701a      	strb	r2, [r3, #0]
      break;
 800fe70:	e177      	b.n	8010162 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	795b      	ldrb	r3, [r3, #5]
 800fe76:	4619      	mov	r1, r3
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f001 f8ef 	bl	801105c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	791b      	ldrb	r3, [r3, #4]
 800fe82:	4619      	mov	r1, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f001 f8e9 	bl	801105c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	701a      	strb	r2, [r3, #0]
      break;
 800fe96:	e164      	b.n	8010162 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fe98:	2101      	movs	r1, #1
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fb02 	bl	80104a4 <USBH_SetAddress>
 800fea0:	4603      	mov	r3, r0
 800fea2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fea4:	7bbb      	ldrb	r3, [r7, #14]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d132      	bne.n	800ff10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800feaa:	2002      	movs	r0, #2
 800feac:	f008 f976 	bl	801819c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2201      	movs	r2, #1
 800feb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2203      	movs	r2, #3
 800febc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	7919      	ldrb	r1, [r3, #4]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fed2:	b292      	uxth	r2, r2
 800fed4:	9202      	str	r2, [sp, #8]
 800fed6:	2200      	movs	r2, #0
 800fed8:	9201      	str	r2, [sp, #4]
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	4603      	mov	r3, r0
 800fede:	2280      	movs	r2, #128	; 0x80
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f001 f86b 	bl	8010fbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	7959      	ldrb	r1, [r3, #5]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fefa:	b292      	uxth	r2, r2
 800fefc:	9202      	str	r2, [sp, #8]
 800fefe:	2200      	movs	r2, #0
 800ff00:	9201      	str	r2, [sp, #4]
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	4603      	mov	r3, r0
 800ff06:	2200      	movs	r2, #0
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f001 f857 	bl	8010fbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ff0e:	e12a      	b.n	8010166 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff10:	7bbb      	ldrb	r3, [r7, #14]
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	f040 8127 	bne.w	8010166 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	220d      	movs	r2, #13
 800ff1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	705a      	strb	r2, [r3, #1]
      break;
 800ff24:	e11f      	b.n	8010166 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ff26:	2109      	movs	r1, #9
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 fa37 	bl	801039c <USBH_Get_CfgDesc>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ff32:	7bbb      	ldrb	r3, [r7, #14]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d103      	bne.n	800ff40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2204      	movs	r2, #4
 800ff3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ff3e:	e114      	b.n	801016a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff40:	7bbb      	ldrb	r3, [r7, #14]
 800ff42:	2b03      	cmp	r3, #3
 800ff44:	f040 8111 	bne.w	801016a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff4e:	3301      	adds	r3, #1
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff5e:	2b03      	cmp	r3, #3
 800ff60:	d903      	bls.n	800ff6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	220d      	movs	r2, #13
 800ff66:	701a      	strb	r2, [r3, #0]
      break;
 800ff68:	e0ff      	b.n	801016a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	795b      	ldrb	r3, [r3, #5]
 800ff6e:	4619      	mov	r1, r3
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f001 f873 	bl	801105c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	791b      	ldrb	r3, [r3, #4]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f001 f86d 	bl	801105c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	701a      	strb	r2, [r3, #0]
      break;
 800ff8e:	e0ec      	b.n	801016a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ff96:	4619      	mov	r1, r3
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f9ff 	bl	801039c <USBH_Get_CfgDesc>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ffa2:	7bbb      	ldrb	r3, [r7, #14]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d103      	bne.n	800ffb0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2205      	movs	r2, #5
 800ffac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ffae:	e0de      	b.n	801016e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	f040 80db 	bne.w	801016e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	b2da      	uxtb	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d903      	bls.n	800ffda <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	220d      	movs	r2, #13
 800ffd6:	701a      	strb	r2, [r3, #0]
      break;
 800ffd8:	e0c9      	b.n	801016e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	795b      	ldrb	r3, [r3, #5]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f001 f83b 	bl	801105c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	791b      	ldrb	r3, [r3, #4]
 800ffea:	4619      	mov	r1, r3
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f001 f835 	bl	801105c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	701a      	strb	r2, [r3, #0]
      break;
 800fffe:	e0b6      	b.n	801016e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010006:	2b00      	cmp	r3, #0
 8010008:	d036      	beq.n	8010078 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010016:	23ff      	movs	r3, #255	; 0xff
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f9e3 	bl	80103e4 <USBH_Get_StringDesc>
 801001e:	4603      	mov	r3, r0
 8010020:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010022:	7bbb      	ldrb	r3, [r7, #14]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d111      	bne.n	801004c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2206      	movs	r2, #6
 801002c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2205      	movs	r2, #5
 8010032:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010042:	2200      	movs	r2, #0
 8010044:	4619      	mov	r1, r3
 8010046:	f001 fa3f 	bl	80114c8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 801004a:	e092      	b.n	8010172 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801004c:	7bbb      	ldrb	r3, [r7, #14]
 801004e:	2b03      	cmp	r3, #3
 8010050:	f040 808f 	bne.w	8010172 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2206      	movs	r2, #6
 8010058:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2205      	movs	r2, #5
 801005e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801006e:	2200      	movs	r2, #0
 8010070:	4619      	mov	r1, r3
 8010072:	f001 fa29 	bl	80114c8 <osMessagePut>
      break;
 8010076:	e07c      	b.n	8010172 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2206      	movs	r2, #6
 801007c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2205      	movs	r2, #5
 8010082:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010092:	2200      	movs	r2, #0
 8010094:	4619      	mov	r1, r3
 8010096:	f001 fa17 	bl	80114c8 <osMessagePut>
      break;
 801009a:	e06a      	b.n	8010172 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d027      	beq.n	80100f6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80100b2:	23ff      	movs	r3, #255	; 0xff
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 f995 	bl	80103e4 <USBH_Get_StringDesc>
 80100ba:	4603      	mov	r3, r0
 80100bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80100be:	7bbb      	ldrb	r3, [r7, #14]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d103      	bne.n	80100cc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2207      	movs	r2, #7
 80100c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80100ca:	e054      	b.n	8010176 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80100cc:	7bbb      	ldrb	r3, [r7, #14]
 80100ce:	2b03      	cmp	r3, #3
 80100d0:	d151      	bne.n	8010176 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2207      	movs	r2, #7
 80100d6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2205      	movs	r2, #5
 80100dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80100ec:	2200      	movs	r2, #0
 80100ee:	4619      	mov	r1, r3
 80100f0:	f001 f9ea 	bl	80114c8 <osMessagePut>
      break;
 80100f4:	e03f      	b.n	8010176 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2207      	movs	r2, #7
 80100fa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2205      	movs	r2, #5
 8010100:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010110:	2200      	movs	r2, #0
 8010112:	4619      	mov	r1, r3
 8010114:	f001 f9d8 	bl	80114c8 <osMessagePut>
      break;
 8010118:	e02d      	b.n	8010176 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8010120:	2b00      	cmp	r3, #0
 8010122:	d017      	beq.n	8010154 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010130:	23ff      	movs	r3, #255	; 0xff
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 f956 	bl	80103e4 <USBH_Get_StringDesc>
 8010138:	4603      	mov	r3, r0
 801013a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801013c:	7bbb      	ldrb	r3, [r7, #14]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d102      	bne.n	8010148 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010142:	2300      	movs	r3, #0
 8010144:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010146:	e018      	b.n	801017a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010148:	7bbb      	ldrb	r3, [r7, #14]
 801014a:	2b03      	cmp	r3, #3
 801014c:	d115      	bne.n	801017a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	73fb      	strb	r3, [r7, #15]
      break;
 8010152:	e012      	b.n	801017a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8010154:	2300      	movs	r3, #0
 8010156:	73fb      	strb	r3, [r7, #15]
      break;
 8010158:	e00f      	b.n	801017a <USBH_HandleEnum+0x44a>

    default:
      break;
 801015a:	bf00      	nop
 801015c:	e00e      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 801015e:	bf00      	nop
 8010160:	e00c      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 8010162:	bf00      	nop
 8010164:	e00a      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 8010166:	bf00      	nop
 8010168:	e008      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 801016a:	bf00      	nop
 801016c:	e006      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 801016e:	bf00      	nop
 8010170:	e004      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 8010172:	bf00      	nop
 8010174:	e002      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 8010176:	bf00      	nop
 8010178:	e000      	b.n	801017c <USBH_HandleEnum+0x44c>
      break;
 801017a:	bf00      	nop
  }
  return Status;
 801017c:	7bfb      	ldrb	r3, [r7, #15]
}
 801017e:	4618      	mov	r0, r3
 8010180:	3710      	adds	r7, #16
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop

08010188 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	683a      	ldr	r2, [r7, #0]
 8010196:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801019a:	bf00      	nop
 801019c:	370c      	adds	r7, #12
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b082      	sub	sp, #8
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80101b4:	1c5a      	adds	r2, r3, #1
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 f804 	bl	80101ca <USBH_HandleSof>
}
 80101c2:	bf00      	nop
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b082      	sub	sp, #8
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b0b      	cmp	r3, #11
 80101da:	d10a      	bne.n	80101f2 <USBH_HandleSof+0x28>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d005      	beq.n	80101f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101ec:	699b      	ldr	r3, [r3, #24]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	4798      	blx	r3
  }
}
 80101f2:	bf00      	nop
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b082      	sub	sp, #8
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2201      	movs	r2, #1
 8010206:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2201      	movs	r2, #1
 801020e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801021e:	2200      	movs	r2, #0
 8010220:	4619      	mov	r1, r3
 8010222:	f001 f951 	bl	80114c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8010226:	bf00      	nop
}
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801022e:	b480      	push	{r7}
 8010230:	b083      	sub	sp, #12
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801023e:	bf00      	nop
}
 8010240:	370c      	adds	r7, #12
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr

0801024a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801024a:	b580      	push	{r7, lr}
 801024c:	b082      	sub	sp, #8
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2201      	movs	r2, #1
 8010256:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2200      	movs	r2, #0
 8010266:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2201      	movs	r2, #1
 801026e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801027e:	2200      	movs	r2, #0
 8010280:	4619      	mov	r1, r3
 8010282:	f001 f921 	bl	80114c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010286:	2300      	movs	r3, #0
}
 8010288:	4618      	mov	r0, r3
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2201      	movs	r2, #1
 801029c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2200      	movs	r2, #0
 80102a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f007 fe2a 	bl	8017f0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	791b      	ldrb	r3, [r3, #4]
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fecd 	bl	801105c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	795b      	ldrb	r3, [r3, #5]
 80102c6:	4619      	mov	r1, r3
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f000 fec7 	bl	801105c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2201      	movs	r2, #1
 80102d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80102e2:	2200      	movs	r2, #0
 80102e4:	4619      	mov	r1, r3
 80102e6:	f001 f8ef 	bl	80114c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80102ea:	2300      	movs	r3, #0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b086      	sub	sp, #24
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8010302:	f107 030c 	add.w	r3, r7, #12
 8010306:	f04f 32ff 	mov.w	r2, #4294967295
 801030a:	4618      	mov	r0, r3
 801030c:	f001 f91c 	bl	8011548 <osMessageGet>
    if (event.status == osEventMessage)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2b10      	cmp	r3, #16
 8010314:	d1f2      	bne.n	80102fc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f7ff faa8 	bl	800f86c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801031c:	e7ee      	b.n	80102fc <USBH_Process_OS+0x8>

0801031e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801031e:	b580      	push	{r7, lr}
 8010320:	b082      	sub	sp, #8
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2201      	movs	r2, #1
 801032a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801033a:	2200      	movs	r2, #0
 801033c:	4619      	mov	r1, r3
 801033e:	f001 f8c3 	bl	80114c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b086      	sub	sp, #24
 8010350:	af02      	add	r7, sp, #8
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	460b      	mov	r3, r1
 8010356:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801035e:	78fb      	ldrb	r3, [r7, #3]
 8010360:	b29b      	uxth	r3, r3
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	4613      	mov	r3, r2
 8010366:	f44f 7280 	mov.w	r2, #256	; 0x100
 801036a:	2100      	movs	r1, #0
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 f864 	bl	801043a <USBH_GetDescriptor>
 8010372:	4603      	mov	r3, r0
 8010374:	73fb      	strb	r3, [r7, #15]
 8010376:	7bfb      	ldrb	r3, [r7, #15]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10a      	bne.n	8010392 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010388:	78fa      	ldrb	r2, [r7, #3]
 801038a:	b292      	uxth	r2, r2
 801038c:	4619      	mov	r1, r3
 801038e:	f000 f918 	bl	80105c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8010392:	7bfb      	ldrb	r3, [r7, #15]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3710      	adds	r7, #16
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af02      	add	r7, sp, #8
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	460b      	mov	r3, r1
 80103a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	331c      	adds	r3, #28
 80103ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80103ae:	887b      	ldrh	r3, [r7, #2]
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80103b8:	2100      	movs	r1, #0
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 f83d 	bl	801043a <USBH_GetDescriptor>
 80103c0:	4603      	mov	r3, r0
 80103c2:	72fb      	strb	r3, [r7, #11]
 80103c4:	7afb      	ldrb	r3, [r7, #11]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d107      	bne.n	80103da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80103d0:	887a      	ldrh	r2, [r7, #2]
 80103d2:	68f9      	ldr	r1, [r7, #12]
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 f964 	bl	80106a2 <USBH_ParseCfgDesc>
  }

  return status;
 80103da:	7afb      	ldrb	r3, [r7, #11]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b088      	sub	sp, #32
 80103e8:	af02      	add	r7, sp, #8
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	607a      	str	r2, [r7, #4]
 80103ee:	461a      	mov	r2, r3
 80103f0:	460b      	mov	r3, r1
 80103f2:	72fb      	strb	r3, [r7, #11]
 80103f4:	4613      	mov	r3, r2
 80103f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80103f8:	7afb      	ldrb	r3, [r7, #11]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010400:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8010408:	893b      	ldrh	r3, [r7, #8]
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	460b      	mov	r3, r1
 801040e:	2100      	movs	r1, #0
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f000 f812 	bl	801043a <USBH_GetDescriptor>
 8010416:	4603      	mov	r3, r0
 8010418:	75fb      	strb	r3, [r7, #23]
 801041a:	7dfb      	ldrb	r3, [r7, #23]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d107      	bne.n	8010430 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010426:	893a      	ldrh	r2, [r7, #8]
 8010428:	6879      	ldr	r1, [r7, #4]
 801042a:	4618      	mov	r0, r3
 801042c:	f000 fa37 	bl	801089e <USBH_ParseStringDesc>
  }

  return status;
 8010430:	7dfb      	ldrb	r3, [r7, #23]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3718      	adds	r7, #24
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b084      	sub	sp, #16
 801043e:	af00      	add	r7, sp, #0
 8010440:	60f8      	str	r0, [r7, #12]
 8010442:	607b      	str	r3, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	72fb      	strb	r3, [r7, #11]
 8010448:	4613      	mov	r3, r2
 801044a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	789b      	ldrb	r3, [r3, #2]
 8010450:	2b01      	cmp	r3, #1
 8010452:	d11c      	bne.n	801048e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010454:	7afb      	ldrb	r3, [r7, #11]
 8010456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801045a:	b2da      	uxtb	r2, r3
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2206      	movs	r2, #6
 8010464:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	893a      	ldrh	r2, [r7, #8]
 801046a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801046c:	893b      	ldrh	r3, [r7, #8]
 801046e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010476:	d104      	bne.n	8010482 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f240 4209 	movw	r2, #1033	; 0x409
 801047e:	829a      	strh	r2, [r3, #20]
 8010480:	e002      	b.n	8010488 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2200      	movs	r2, #0
 8010486:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	8b3a      	ldrh	r2, [r7, #24]
 801048c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801048e:	8b3b      	ldrh	r3, [r7, #24]
 8010490:	461a      	mov	r2, r3
 8010492:	6879      	ldr	r1, [r7, #4]
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f000 fa50 	bl	801093a <USBH_CtlReq>
 801049a:	4603      	mov	r3, r0
}
 801049c:	4618      	mov	r0, r3
 801049e:	3710      	adds	r7, #16
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	460b      	mov	r3, r1
 80104ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	789b      	ldrb	r3, [r3, #2]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d10f      	bne.n	80104d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2205      	movs	r2, #5
 80104c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80104c4:	78fb      	ldrb	r3, [r7, #3]
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2200      	movs	r2, #0
 80104d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80104d8:	2200      	movs	r2, #0
 80104da:	2100      	movs	r1, #0
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 fa2c 	bl	801093a <USBH_CtlReq>
 80104e2:	4603      	mov	r3, r0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	460b      	mov	r3, r1
 80104f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	789b      	ldrb	r3, [r3, #2]
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d10e      	bne.n	801051e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2209      	movs	r2, #9
 801050a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	887a      	ldrh	r2, [r7, #2]
 8010510:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 801051e:	2200      	movs	r2, #0
 8010520:	2100      	movs	r1, #0
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fa09 	bl	801093a <USBH_CtlReq>
 8010528:	4603      	mov	r3, r0
}
 801052a:	4618      	mov	r0, r3
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b082      	sub	sp, #8
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	460b      	mov	r3, r1
 801053c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	789b      	ldrb	r3, [r3, #2]
 8010542:	2b01      	cmp	r3, #1
 8010544:	d10f      	bne.n	8010566 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2203      	movs	r2, #3
 8010550:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010552:	78fb      	ldrb	r3, [r7, #3]
 8010554:	b29a      	uxth	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2200      	movs	r2, #0
 801055e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010566:	2200      	movs	r2, #0
 8010568:	2100      	movs	r1, #0
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f9e5 	bl	801093a <USBH_CtlReq>
 8010570:	4603      	mov	r3, r0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3708      	adds	r7, #8
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}

0801057a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801057a:	b580      	push	{r7, lr}
 801057c:	b082      	sub	sp, #8
 801057e:	af00      	add	r7, sp, #0
 8010580:	6078      	str	r0, [r7, #4]
 8010582:	460b      	mov	r3, r1
 8010584:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	789b      	ldrb	r3, [r3, #2]
 801058a:	2b01      	cmp	r3, #1
 801058c:	d10f      	bne.n	80105ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2202      	movs	r2, #2
 8010592:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2201      	movs	r2, #1
 8010598:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80105a0:	78fb      	ldrb	r3, [r7, #3]
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80105ae:	2200      	movs	r2, #0
 80105b0:	2100      	movs	r1, #0
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 f9c1 	bl	801093a <USBH_CtlReq>
 80105b8:	4603      	mov	r3, r0
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}

080105c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80105c2:	b480      	push	{r7}
 80105c4:	b085      	sub	sp, #20
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	60f8      	str	r0, [r7, #12]
 80105ca:	60b9      	str	r1, [r7, #8]
 80105cc:	4613      	mov	r3, r2
 80105ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	781a      	ldrb	r2, [r3, #0]
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	785a      	ldrb	r2, [r3, #1]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	3302      	adds	r3, #2
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	3303      	adds	r3, #3
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	021b      	lsls	r3, r3, #8
 80105f2:	b29b      	uxth	r3, r3
 80105f4:	4313      	orrs	r3, r2
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	791a      	ldrb	r2, [r3, #4]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	795a      	ldrb	r2, [r3, #5]
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	799a      	ldrb	r2, [r3, #6]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	79da      	ldrb	r2, [r3, #7]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 801061c:	88fb      	ldrh	r3, [r7, #6]
 801061e:	2b08      	cmp	r3, #8
 8010620:	d939      	bls.n	8010696 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	3308      	adds	r3, #8
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	b29a      	uxth	r2, r3
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	3309      	adds	r3, #9
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	b29b      	uxth	r3, r3
 8010632:	021b      	lsls	r3, r3, #8
 8010634:	b29b      	uxth	r3, r3
 8010636:	4313      	orrs	r3, r2
 8010638:	b29a      	uxth	r2, r3
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	330a      	adds	r3, #10
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	b29a      	uxth	r2, r3
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	330b      	adds	r3, #11
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	b29b      	uxth	r3, r3
 801064e:	021b      	lsls	r3, r3, #8
 8010650:	b29b      	uxth	r3, r3
 8010652:	4313      	orrs	r3, r2
 8010654:	b29a      	uxth	r2, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	330c      	adds	r3, #12
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	b29a      	uxth	r2, r3
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	330d      	adds	r3, #13
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	b29b      	uxth	r3, r3
 801066a:	021b      	lsls	r3, r3, #8
 801066c:	b29b      	uxth	r3, r3
 801066e:	4313      	orrs	r3, r2
 8010670:	b29a      	uxth	r2, r3
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	7b9a      	ldrb	r2, [r3, #14]
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	7bda      	ldrb	r2, [r3, #15]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	7c1a      	ldrb	r2, [r3, #16]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	7c5a      	ldrb	r2, [r3, #17]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	745a      	strb	r2, [r3, #17]
  }
}
 8010696:	bf00      	nop
 8010698:	3714      	adds	r7, #20
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr

080106a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b08a      	sub	sp, #40	; 0x28
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	60f8      	str	r0, [r7, #12]
 80106aa:	60b9      	str	r1, [r7, #8]
 80106ac:	4613      	mov	r3, r2
 80106ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80106b4:	2300      	movs	r3, #0
 80106b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80106ba:	2300      	movs	r3, #0
 80106bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	781a      	ldrb	r2, [r3, #0]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	785a      	ldrb	r2, [r3, #1]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	3302      	adds	r3, #2
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	b29a      	uxth	r2, r3
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	3303      	adds	r3, #3
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	021b      	lsls	r3, r3, #8
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	4313      	orrs	r3, r2
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	791a      	ldrb	r2, [r3, #4]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	795a      	ldrb	r2, [r3, #5]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	799a      	ldrb	r2, [r3, #6]
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	79da      	ldrb	r2, [r3, #7]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	7a1a      	ldrb	r2, [r3, #8]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010718:	88fb      	ldrh	r3, [r7, #6]
 801071a:	2b09      	cmp	r3, #9
 801071c:	d95f      	bls.n	80107de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 801071e:	2309      	movs	r3, #9
 8010720:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8010722:	2300      	movs	r3, #0
 8010724:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010726:	e051      	b.n	80107cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010728:	f107 0316 	add.w	r3, r7, #22
 801072c:	4619      	mov	r1, r3
 801072e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010730:	f000 f8e8 	bl	8010904 <USBH_GetNextDesc>
 8010734:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8010736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010738:	785b      	ldrb	r3, [r3, #1]
 801073a:	2b04      	cmp	r3, #4
 801073c:	d146      	bne.n	80107cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 801073e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010742:	221a      	movs	r2, #26
 8010744:	fb02 f303 	mul.w	r3, r2, r3
 8010748:	3308      	adds	r3, #8
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	4413      	add	r3, r2
 801074e:	3302      	adds	r3, #2
 8010750:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010754:	69f8      	ldr	r0, [r7, #28]
 8010756:	f000 f846 	bl	80107e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801075a:	2300      	movs	r3, #0
 801075c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8010760:	2300      	movs	r3, #0
 8010762:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010764:	e022      	b.n	80107ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010766:	f107 0316 	add.w	r3, r7, #22
 801076a:	4619      	mov	r1, r3
 801076c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801076e:	f000 f8c9 	bl	8010904 <USBH_GetNextDesc>
 8010772:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8010774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010776:	785b      	ldrb	r3, [r3, #1]
 8010778:	2b05      	cmp	r3, #5
 801077a:	d117      	bne.n	80107ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801077c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010780:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010784:	3201      	adds	r2, #1
 8010786:	00d2      	lsls	r2, r2, #3
 8010788:	211a      	movs	r1, #26
 801078a:	fb01 f303 	mul.w	r3, r1, r3
 801078e:	4413      	add	r3, r2
 8010790:	3308      	adds	r3, #8
 8010792:	68fa      	ldr	r2, [r7, #12]
 8010794:	4413      	add	r3, r2
 8010796:	3304      	adds	r3, #4
 8010798:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 801079a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801079c:	69b8      	ldr	r0, [r7, #24]
 801079e:	f000 f851 	bl	8010844 <USBH_ParseEPDesc>
            ep_ix++;
 80107a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80107a6:	3301      	adds	r3, #1
 80107a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	791b      	ldrb	r3, [r3, #4]
 80107b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d204      	bcs.n	80107c2 <USBH_ParseCfgDesc+0x120>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	885a      	ldrh	r2, [r3, #2]
 80107bc:	8afb      	ldrh	r3, [r7, #22]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d8d1      	bhi.n	8010766 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80107c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80107c6:	3301      	adds	r3, #1
 80107c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80107cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	d804      	bhi.n	80107de <USBH_ParseCfgDesc+0x13c>
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	885a      	ldrh	r2, [r3, #2]
 80107d8:	8afb      	ldrh	r3, [r7, #22]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d8a4      	bhi.n	8010728 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80107de:	bf00      	nop
 80107e0:	3728      	adds	r7, #40	; 0x28
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80107e6:	b480      	push	{r7}
 80107e8:	b083      	sub	sp, #12
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
 80107ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	781a      	ldrb	r2, [r3, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	785a      	ldrb	r2, [r3, #1]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	789a      	ldrb	r2, [r3, #2]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	78da      	ldrb	r2, [r3, #3]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	791a      	ldrb	r2, [r3, #4]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	795a      	ldrb	r2, [r3, #5]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	799a      	ldrb	r2, [r3, #6]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	79da      	ldrb	r2, [r3, #7]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	7a1a      	ldrb	r2, [r3, #8]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	721a      	strb	r2, [r3, #8]
}
 8010838:	bf00      	nop
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010842:	4770      	bx	lr

08010844 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	781a      	ldrb	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	785a      	ldrb	r2, [r3, #1]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	789a      	ldrb	r2, [r3, #2]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	78da      	ldrb	r2, [r3, #3]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	3304      	adds	r3, #4
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	b29a      	uxth	r2, r3
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	3305      	adds	r3, #5
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	b29b      	uxth	r3, r3
 801087e:	021b      	lsls	r3, r3, #8
 8010880:	b29b      	uxth	r3, r3
 8010882:	4313      	orrs	r3, r2
 8010884:	b29a      	uxth	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	799a      	ldrb	r2, [r3, #6]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	719a      	strb	r2, [r3, #6]
}
 8010892:	bf00      	nop
 8010894:	370c      	adds	r7, #12
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr

0801089e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801089e:	b480      	push	{r7}
 80108a0:	b087      	sub	sp, #28
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	60f8      	str	r0, [r7, #12]
 80108a6:	60b9      	str	r1, [r7, #8]
 80108a8:	4613      	mov	r3, r2
 80108aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	3301      	adds	r3, #1
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	2b03      	cmp	r3, #3
 80108b4:	d120      	bne.n	80108f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	1e9a      	subs	r2, r3, #2
 80108bc:	88fb      	ldrh	r3, [r7, #6]
 80108be:	4293      	cmp	r3, r2
 80108c0:	bf28      	it	cs
 80108c2:	4613      	movcs	r3, r2
 80108c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	3302      	adds	r3, #2
 80108ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80108cc:	2300      	movs	r3, #0
 80108ce:	82fb      	strh	r3, [r7, #22]
 80108d0:	e00b      	b.n	80108ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80108d2:	8afb      	ldrh	r3, [r7, #22]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	4413      	add	r3, r2
 80108d8:	781a      	ldrb	r2, [r3, #0]
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	3301      	adds	r3, #1
 80108e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80108e4:	8afb      	ldrh	r3, [r7, #22]
 80108e6:	3302      	adds	r3, #2
 80108e8:	82fb      	strh	r3, [r7, #22]
 80108ea:	8afa      	ldrh	r2, [r7, #22]
 80108ec:	8abb      	ldrh	r3, [r7, #20]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d3ef      	bcc.n	80108d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2200      	movs	r2, #0
 80108f6:	701a      	strb	r2, [r3, #0]
  }
}
 80108f8:	bf00      	nop
 80108fa:	371c      	adds	r7, #28
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8010904:	b480      	push	{r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	881a      	ldrh	r2, [r3, #0]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	b29b      	uxth	r3, r3
 8010918:	4413      	add	r3, r2
 801091a:	b29a      	uxth	r2, r3
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	4413      	add	r3, r2
 801092a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801092c:	68fb      	ldr	r3, [r7, #12]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3714      	adds	r7, #20
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b086      	sub	sp, #24
 801093e:	af00      	add	r7, sp, #0
 8010940:	60f8      	str	r0, [r7, #12]
 8010942:	60b9      	str	r1, [r7, #8]
 8010944:	4613      	mov	r3, r2
 8010946:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010948:	2301      	movs	r3, #1
 801094a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	789b      	ldrb	r3, [r3, #2]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d002      	beq.n	801095a <USBH_CtlReq+0x20>
 8010954:	2b02      	cmp	r3, #2
 8010956:	d01d      	beq.n	8010994 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8010958:	e043      	b.n	80109e2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	68ba      	ldr	r2, [r7, #8]
 801095e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	88fa      	ldrh	r2, [r7, #6]
 8010964:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2201      	movs	r2, #1
 801096a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2202      	movs	r2, #2
 8010970:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010972:	2301      	movs	r3, #1
 8010974:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2203      	movs	r2, #3
 801097a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801098a:	2200      	movs	r2, #0
 801098c:	4619      	mov	r1, r3
 801098e:	f000 fd9b 	bl	80114c8 <osMessagePut>
      break;
 8010992:	e026      	b.n	80109e2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8010994:	68f8      	ldr	r0, [r7, #12]
 8010996:	f000 f829 	bl	80109ec <USBH_HandleControl>
 801099a:	4603      	mov	r3, r0
 801099c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d002      	beq.n	80109aa <USBH_CtlReq+0x70>
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d106      	bne.n	80109b8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2201      	movs	r2, #1
 80109ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2200      	movs	r2, #0
 80109b4:	761a      	strb	r2, [r3, #24]
 80109b6:	e005      	b.n	80109c4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80109b8:	7dfb      	ldrb	r3, [r7, #23]
 80109ba:	2b02      	cmp	r3, #2
 80109bc:	d102      	bne.n	80109c4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2201      	movs	r2, #1
 80109c2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2203      	movs	r2, #3
 80109c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80109d8:	2200      	movs	r2, #0
 80109da:	4619      	mov	r1, r3
 80109dc:	f000 fd74 	bl	80114c8 <osMessagePut>
      break;
 80109e0:	bf00      	nop
  }
  return status;
 80109e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3718      	adds	r7, #24
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b086      	sub	sp, #24
 80109f0:	af02      	add	r7, sp, #8
 80109f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80109f4:	2301      	movs	r3, #1
 80109f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80109f8:	2300      	movs	r3, #0
 80109fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	7e1b      	ldrb	r3, [r3, #24]
 8010a00:	3b01      	subs	r3, #1
 8010a02:	2b0a      	cmp	r3, #10
 8010a04:	f200 8229 	bhi.w	8010e5a <USBH_HandleControl+0x46e>
 8010a08:	a201      	add	r2, pc, #4	; (adr r2, 8010a10 <USBH_HandleControl+0x24>)
 8010a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a0e:	bf00      	nop
 8010a10:	08010a3d 	.word	0x08010a3d
 8010a14:	08010a57 	.word	0x08010a57
 8010a18:	08010af9 	.word	0x08010af9
 8010a1c:	08010b1f 	.word	0x08010b1f
 8010a20:	08010bab 	.word	0x08010bab
 8010a24:	08010bd5 	.word	0x08010bd5
 8010a28:	08010c97 	.word	0x08010c97
 8010a2c:	08010cb9 	.word	0x08010cb9
 8010a30:	08010d4b 	.word	0x08010d4b
 8010a34:	08010d71 	.word	0x08010d71
 8010a38:	08010e03 	.word	0x08010e03
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f103 0110 	add.w	r1, r3, #16
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	795b      	ldrb	r3, [r3, #5]
 8010a46:	461a      	mov	r2, r3
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fa17 	bl	8010e7c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2202      	movs	r2, #2
 8010a52:	761a      	strb	r2, [r3, #24]
      break;
 8010a54:	e20c      	b.n	8010e70 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	795b      	ldrb	r3, [r3, #5]
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f007 fb43 	bl	80180e8 <USBH_LL_GetURBState>
 8010a62:	4603      	mov	r3, r0
 8010a64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010a66:	7bbb      	ldrb	r3, [r7, #14]
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d12c      	bne.n	8010ac6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	7c1b      	ldrb	r3, [r3, #16]
 8010a70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010a74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	8adb      	ldrh	r3, [r3, #22]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00a      	beq.n	8010a94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010a7e:	7b7b      	ldrb	r3, [r7, #13]
 8010a80:	2b80      	cmp	r3, #128	; 0x80
 8010a82:	d103      	bne.n	8010a8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2203      	movs	r2, #3
 8010a88:	761a      	strb	r2, [r3, #24]
 8010a8a:	e00d      	b.n	8010aa8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2205      	movs	r2, #5
 8010a90:	761a      	strb	r2, [r3, #24]
 8010a92:	e009      	b.n	8010aa8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8010a94:	7b7b      	ldrb	r3, [r7, #13]
 8010a96:	2b80      	cmp	r3, #128	; 0x80
 8010a98:	d103      	bne.n	8010aa2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2209      	movs	r2, #9
 8010a9e:	761a      	strb	r2, [r3, #24]
 8010aa0:	e002      	b.n	8010aa8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2207      	movs	r2, #7
 8010aa6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2203      	movs	r2, #3
 8010aac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010abc:	2200      	movs	r2, #0
 8010abe:	4619      	mov	r1, r3
 8010ac0:	f000 fd02 	bl	80114c8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010ac4:	e1cb      	b.n	8010e5e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010ac6:	7bbb      	ldrb	r3, [r7, #14]
 8010ac8:	2b04      	cmp	r3, #4
 8010aca:	d003      	beq.n	8010ad4 <USBH_HandleControl+0xe8>
 8010acc:	7bbb      	ldrb	r3, [r7, #14]
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	f040 81c5 	bne.w	8010e5e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	220b      	movs	r2, #11
 8010ad8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2203      	movs	r2, #3
 8010ade:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010aee:	2200      	movs	r2, #0
 8010af0:	4619      	mov	r1, r3
 8010af2:	f000 fce9 	bl	80114c8 <osMessagePut>
      break;
 8010af6:	e1b2      	b.n	8010e5e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010afe:	b29a      	uxth	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6899      	ldr	r1, [r3, #8]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	899a      	ldrh	r2, [r3, #12]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	791b      	ldrb	r3, [r3, #4]
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f000 f9f2 	bl	8010efa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2204      	movs	r2, #4
 8010b1a:	761a      	strb	r2, [r3, #24]
      break;
 8010b1c:	e1a8      	b.n	8010e70 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	791b      	ldrb	r3, [r3, #4]
 8010b22:	4619      	mov	r1, r3
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f007 fadf 	bl	80180e8 <USBH_LL_GetURBState>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010b2e:	7bbb      	ldrb	r3, [r7, #14]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d110      	bne.n	8010b56 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2209      	movs	r2, #9
 8010b38:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2203      	movs	r2, #3
 8010b3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010b4e:	2200      	movs	r2, #0
 8010b50:	4619      	mov	r1, r3
 8010b52:	f000 fcb9 	bl	80114c8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010b56:	7bbb      	ldrb	r3, [r7, #14]
 8010b58:	2b05      	cmp	r3, #5
 8010b5a:	d110      	bne.n	8010b7e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010b5c:	2303      	movs	r3, #3
 8010b5e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2203      	movs	r2, #3
 8010b64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010b74:	2200      	movs	r2, #0
 8010b76:	4619      	mov	r1, r3
 8010b78:	f000 fca6 	bl	80114c8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010b7c:	e171      	b.n	8010e62 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8010b7e:	7bbb      	ldrb	r3, [r7, #14]
 8010b80:	2b04      	cmp	r3, #4
 8010b82:	f040 816e 	bne.w	8010e62 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	220b      	movs	r2, #11
 8010b8a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2203      	movs	r2, #3
 8010b90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	f000 fc90 	bl	80114c8 <osMessagePut>
      break;
 8010ba8:	e15b      	b.n	8010e62 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6899      	ldr	r1, [r3, #8]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	899a      	ldrh	r2, [r3, #12]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	795b      	ldrb	r3, [r3, #5]
 8010bb6:	2001      	movs	r0, #1
 8010bb8:	9000      	str	r0, [sp, #0]
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 f978 	bl	8010eb0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2206      	movs	r2, #6
 8010bd0:	761a      	strb	r2, [r3, #24]
      break;
 8010bd2:	e14d      	b.n	8010e70 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	795b      	ldrb	r3, [r3, #5]
 8010bd8:	4619      	mov	r1, r3
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f007 fa84 	bl	80180e8 <USBH_LL_GetURBState>
 8010be0:	4603      	mov	r3, r0
 8010be2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010be4:	7bbb      	ldrb	r3, [r7, #14]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d111      	bne.n	8010c0e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2207      	movs	r2, #7
 8010bee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2203      	movs	r2, #3
 8010bf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010c04:	2200      	movs	r2, #0
 8010c06:	4619      	mov	r1, r3
 8010c08:	f000 fc5e 	bl	80114c8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010c0c:	e12b      	b.n	8010e66 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8010c0e:	7bbb      	ldrb	r3, [r7, #14]
 8010c10:	2b05      	cmp	r3, #5
 8010c12:	d113      	bne.n	8010c3c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	220c      	movs	r2, #12
 8010c18:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010c1a:	2303      	movs	r3, #3
 8010c1c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2203      	movs	r2, #3
 8010c22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010c32:	2200      	movs	r2, #0
 8010c34:	4619      	mov	r1, r3
 8010c36:	f000 fc47 	bl	80114c8 <osMessagePut>
      break;
 8010c3a:	e114      	b.n	8010e66 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010c3c:	7bbb      	ldrb	r3, [r7, #14]
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	d111      	bne.n	8010c66 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2205      	movs	r2, #5
 8010c46:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2203      	movs	r2, #3
 8010c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	4619      	mov	r1, r3
 8010c60:	f000 fc32 	bl	80114c8 <osMessagePut>
      break;
 8010c64:	e0ff      	b.n	8010e66 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8010c66:	7bbb      	ldrb	r3, [r7, #14]
 8010c68:	2b04      	cmp	r3, #4
 8010c6a:	f040 80fc 	bne.w	8010e66 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	220b      	movs	r2, #11
 8010c72:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010c74:	2302      	movs	r3, #2
 8010c76:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2203      	movs	r2, #3
 8010c7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	4619      	mov	r1, r3
 8010c90:	f000 fc1a 	bl	80114c8 <osMessagePut>
      break;
 8010c94:	e0e7      	b.n	8010e66 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	791b      	ldrb	r3, [r3, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f92b 	bl	8010efa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2208      	movs	r2, #8
 8010cb4:	761a      	strb	r2, [r3, #24]

      break;
 8010cb6:	e0db      	b.n	8010e70 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	791b      	ldrb	r3, [r3, #4]
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f007 fa12 	bl	80180e8 <USBH_LL_GetURBState>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010cc8:	7bbb      	ldrb	r3, [r7, #14]
 8010cca:	2b01      	cmp	r3, #1
 8010ccc:	d113      	bne.n	8010cf6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	220d      	movs	r2, #13
 8010cd2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2203      	movs	r2, #3
 8010cdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010cec:	2200      	movs	r2, #0
 8010cee:	4619      	mov	r1, r3
 8010cf0:	f000 fbea 	bl	80114c8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010cf4:	e0b9      	b.n	8010e6a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8010cf6:	7bbb      	ldrb	r3, [r7, #14]
 8010cf8:	2b04      	cmp	r3, #4
 8010cfa:	d111      	bne.n	8010d20 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	220b      	movs	r2, #11
 8010d00:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2203      	movs	r2, #3
 8010d06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010d16:	2200      	movs	r2, #0
 8010d18:	4619      	mov	r1, r3
 8010d1a:	f000 fbd5 	bl	80114c8 <osMessagePut>
      break;
 8010d1e:	e0a4      	b.n	8010e6a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8010d20:	7bbb      	ldrb	r3, [r7, #14]
 8010d22:	2b05      	cmp	r3, #5
 8010d24:	f040 80a1 	bne.w	8010e6a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8010d28:	2303      	movs	r3, #3
 8010d2a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2203      	movs	r2, #3
 8010d30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010d40:	2200      	movs	r2, #0
 8010d42:	4619      	mov	r1, r3
 8010d44:	f000 fbc0 	bl	80114c8 <osMessagePut>
      break;
 8010d48:	e08f      	b.n	8010e6a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	795b      	ldrb	r3, [r3, #5]
 8010d4e:	2201      	movs	r2, #1
 8010d50:	9200      	str	r2, [sp, #0]
 8010d52:	2200      	movs	r2, #0
 8010d54:	2100      	movs	r1, #0
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 f8aa 	bl	8010eb0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	220a      	movs	r2, #10
 8010d6c:	761a      	strb	r2, [r3, #24]
      break;
 8010d6e:	e07f      	b.n	8010e70 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	795b      	ldrb	r3, [r3, #5]
 8010d74:	4619      	mov	r1, r3
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f007 f9b6 	bl	80180e8 <USBH_LL_GetURBState>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010d80:	7bbb      	ldrb	r3, [r7, #14]
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	d113      	bne.n	8010dae <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8010d86:	2300      	movs	r3, #0
 8010d88:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	220d      	movs	r2, #13
 8010d8e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2203      	movs	r2, #3
 8010d94:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010da4:	2200      	movs	r2, #0
 8010da6:	4619      	mov	r1, r3
 8010da8:	f000 fb8e 	bl	80114c8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010dac:	e05f      	b.n	8010e6e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010dae:	7bbb      	ldrb	r3, [r7, #14]
 8010db0:	2b02      	cmp	r3, #2
 8010db2:	d111      	bne.n	8010dd8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2209      	movs	r2, #9
 8010db8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2203      	movs	r2, #3
 8010dbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010dce:	2200      	movs	r2, #0
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	f000 fb79 	bl	80114c8 <osMessagePut>
      break;
 8010dd6:	e04a      	b.n	8010e6e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8010dd8:	7bbb      	ldrb	r3, [r7, #14]
 8010dda:	2b04      	cmp	r3, #4
 8010ddc:	d147      	bne.n	8010e6e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	220b      	movs	r2, #11
 8010de2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2203      	movs	r2, #3
 8010de8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010df8:	2200      	movs	r2, #0
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	f000 fb64 	bl	80114c8 <osMessagePut>
      break;
 8010e00:	e035      	b.n	8010e6e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	7e5b      	ldrb	r3, [r3, #25]
 8010e06:	3301      	adds	r3, #1
 8010e08:	b2da      	uxtb	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	765a      	strb	r2, [r3, #25]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	7e5b      	ldrb	r3, [r3, #25]
 8010e12:	2b02      	cmp	r3, #2
 8010e14:	d806      	bhi.n	8010e24 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2201      	movs	r2, #1
 8010e1a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2201      	movs	r2, #1
 8010e20:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010e22:	e025      	b.n	8010e70 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010e2a:	2106      	movs	r1, #6
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	795b      	ldrb	r3, [r3, #5]
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 f90d 	bl	801105c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	791b      	ldrb	r3, [r3, #4]
 8010e46:	4619      	mov	r1, r3
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 f907 	bl	801105c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010e54:	2302      	movs	r3, #2
 8010e56:	73fb      	strb	r3, [r7, #15]
      break;
 8010e58:	e00a      	b.n	8010e70 <USBH_HandleControl+0x484>

    default:
      break;
 8010e5a:	bf00      	nop
 8010e5c:	e008      	b.n	8010e70 <USBH_HandleControl+0x484>
      break;
 8010e5e:	bf00      	nop
 8010e60:	e006      	b.n	8010e70 <USBH_HandleControl+0x484>
      break;
 8010e62:	bf00      	nop
 8010e64:	e004      	b.n	8010e70 <USBH_HandleControl+0x484>
      break;
 8010e66:	bf00      	nop
 8010e68:	e002      	b.n	8010e70 <USBH_HandleControl+0x484>
      break;
 8010e6a:	bf00      	nop
 8010e6c:	e000      	b.n	8010e70 <USBH_HandleControl+0x484>
      break;
 8010e6e:	bf00      	nop
  }

  return status;
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop

08010e7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b088      	sub	sp, #32
 8010e80:	af04      	add	r7, sp, #16
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	4613      	mov	r3, r2
 8010e88:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010e8a:	79f9      	ldrb	r1, [r7, #7]
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	9303      	str	r3, [sp, #12]
 8010e90:	2308      	movs	r3, #8
 8010e92:	9302      	str	r3, [sp, #8]
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	9301      	str	r3, [sp, #4]
 8010e98:	2300      	movs	r3, #0
 8010e9a:	9300      	str	r3, [sp, #0]
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	f007 f8f0 	bl	8018086 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8010ea6:	2300      	movs	r3, #0
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3710      	adds	r7, #16
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b088      	sub	sp, #32
 8010eb4:	af04      	add	r7, sp, #16
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	4611      	mov	r1, r2
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	80fb      	strh	r3, [r7, #6]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d001      	beq.n	8010ed4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010ed4:	7979      	ldrb	r1, [r7, #5]
 8010ed6:	7e3b      	ldrb	r3, [r7, #24]
 8010ed8:	9303      	str	r3, [sp, #12]
 8010eda:	88fb      	ldrh	r3, [r7, #6]
 8010edc:	9302      	str	r3, [sp, #8]
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	9301      	str	r3, [sp, #4]
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	9300      	str	r3, [sp, #0]
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	2200      	movs	r2, #0
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f007 f8cb 	bl	8018086 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010ef0:	2300      	movs	r3, #0
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010efa:	b580      	push	{r7, lr}
 8010efc:	b088      	sub	sp, #32
 8010efe:	af04      	add	r7, sp, #16
 8010f00:	60f8      	str	r0, [r7, #12]
 8010f02:	60b9      	str	r1, [r7, #8]
 8010f04:	4611      	mov	r1, r2
 8010f06:	461a      	mov	r2, r3
 8010f08:	460b      	mov	r3, r1
 8010f0a:	80fb      	strh	r3, [r7, #6]
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010f10:	7979      	ldrb	r1, [r7, #5]
 8010f12:	2300      	movs	r3, #0
 8010f14:	9303      	str	r3, [sp, #12]
 8010f16:	88fb      	ldrh	r3, [r7, #6]
 8010f18:	9302      	str	r3, [sp, #8]
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	9301      	str	r3, [sp, #4]
 8010f1e:	2301      	movs	r3, #1
 8010f20:	9300      	str	r3, [sp, #0]
 8010f22:	2300      	movs	r3, #0
 8010f24:	2201      	movs	r2, #1
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f007 f8ad 	bl	8018086 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010f2c:	2300      	movs	r3, #0

}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b088      	sub	sp, #32
 8010f3a:	af04      	add	r7, sp, #16
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	60b9      	str	r1, [r7, #8]
 8010f40:	4611      	mov	r1, r2
 8010f42:	461a      	mov	r2, r3
 8010f44:	460b      	mov	r3, r1
 8010f46:	80fb      	strh	r3, [r7, #6]
 8010f48:	4613      	mov	r3, r2
 8010f4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010f56:	2300      	movs	r3, #0
 8010f58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010f5a:	7979      	ldrb	r1, [r7, #5]
 8010f5c:	7e3b      	ldrb	r3, [r7, #24]
 8010f5e:	9303      	str	r3, [sp, #12]
 8010f60:	88fb      	ldrh	r3, [r7, #6]
 8010f62:	9302      	str	r3, [sp, #8]
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	9301      	str	r3, [sp, #4]
 8010f68:	2301      	movs	r3, #1
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	2200      	movs	r2, #0
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f007 f888 	bl	8018086 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010f76:	2300      	movs	r3, #0
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b088      	sub	sp, #32
 8010f84:	af04      	add	r7, sp, #16
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	460b      	mov	r3, r1
 8010f90:	80fb      	strh	r3, [r7, #6]
 8010f92:	4613      	mov	r3, r2
 8010f94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010f96:	7979      	ldrb	r1, [r7, #5]
 8010f98:	2300      	movs	r3, #0
 8010f9a:	9303      	str	r3, [sp, #12]
 8010f9c:	88fb      	ldrh	r3, [r7, #6]
 8010f9e:	9302      	str	r3, [sp, #8]
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	9301      	str	r3, [sp, #4]
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	2302      	movs	r3, #2
 8010faa:	2201      	movs	r2, #1
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	f007 f86a 	bl	8018086 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010fb2:	2300      	movs	r3, #0
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b086      	sub	sp, #24
 8010fc0:	af04      	add	r7, sp, #16
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	4608      	mov	r0, r1
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	461a      	mov	r2, r3
 8010fca:	4603      	mov	r3, r0
 8010fcc:	70fb      	strb	r3, [r7, #3]
 8010fce:	460b      	mov	r3, r1
 8010fd0:	70bb      	strb	r3, [r7, #2]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010fd6:	7878      	ldrb	r0, [r7, #1]
 8010fd8:	78ba      	ldrb	r2, [r7, #2]
 8010fda:	78f9      	ldrb	r1, [r7, #3]
 8010fdc:	8b3b      	ldrh	r3, [r7, #24]
 8010fde:	9302      	str	r3, [sp, #8]
 8010fe0:	7d3b      	ldrb	r3, [r7, #20]
 8010fe2:	9301      	str	r3, [sp, #4]
 8010fe4:	7c3b      	ldrb	r3, [r7, #16]
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	4603      	mov	r3, r0
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f006 fffd 	bl	8017fea <USBH_LL_OpenPipe>

  return USBH_OK;
 8010ff0:	2300      	movs	r3, #0
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3708      	adds	r7, #8
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}

08010ffa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010ffa:	b580      	push	{r7, lr}
 8010ffc:	b082      	sub	sp, #8
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	460b      	mov	r3, r1
 8011004:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8011006:	78fb      	ldrb	r3, [r7, #3]
 8011008:	4619      	mov	r1, r3
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f007 f81c 	bl	8018048 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011010:	2300      	movs	r3, #0
}
 8011012:	4618      	mov	r0, r3
 8011014:	3708      	adds	r7, #8
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801101a:	b580      	push	{r7, lr}
 801101c:	b084      	sub	sp, #16
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
 8011022:	460b      	mov	r3, r1
 8011024:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 f836 	bl	8011098 <USBH_GetFreePipe>
 801102c:	4603      	mov	r3, r0
 801102e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011030:	89fb      	ldrh	r3, [r7, #14]
 8011032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011036:	4293      	cmp	r3, r2
 8011038:	d00a      	beq.n	8011050 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801103a:	78fa      	ldrb	r2, [r7, #3]
 801103c:	89fb      	ldrh	r3, [r7, #14]
 801103e:	f003 030f 	and.w	r3, r3, #15
 8011042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	33e0      	adds	r3, #224	; 0xe0
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	440b      	add	r3, r1
 801104e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011050:	89fb      	ldrh	r3, [r7, #14]
 8011052:	b2db      	uxtb	r3, r3
}
 8011054:	4618      	mov	r0, r3
 8011056:	3710      	adds	r7, #16
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	460b      	mov	r3, r1
 8011066:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8011068:	78fb      	ldrb	r3, [r7, #3]
 801106a:	2b0a      	cmp	r3, #10
 801106c:	d80d      	bhi.n	801108a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801106e:	78fb      	ldrb	r3, [r7, #3]
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	33e0      	adds	r3, #224	; 0xe0
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	4413      	add	r3, r2
 8011078:	685a      	ldr	r2, [r3, #4]
 801107a:	78fb      	ldrb	r3, [r7, #3]
 801107c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011080:	6879      	ldr	r1, [r7, #4]
 8011082:	33e0      	adds	r3, #224	; 0xe0
 8011084:	009b      	lsls	r3, r3, #2
 8011086:	440b      	add	r3, r1
 8011088:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801108a:	2300      	movs	r3, #0
}
 801108c:	4618      	mov	r0, r3
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011098:	b480      	push	{r7}
 801109a:	b085      	sub	sp, #20
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80110a0:	2300      	movs	r3, #0
 80110a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80110a4:	2300      	movs	r3, #0
 80110a6:	73fb      	strb	r3, [r7, #15]
 80110a8:	e00f      	b.n	80110ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80110aa:	7bfb      	ldrb	r3, [r7, #15]
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	33e0      	adds	r3, #224	; 0xe0
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	4413      	add	r3, r2
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d102      	bne.n	80110c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80110be:	7bfb      	ldrb	r3, [r7, #15]
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	e007      	b.n	80110d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80110c4:	7bfb      	ldrb	r3, [r7, #15]
 80110c6:	3301      	adds	r3, #1
 80110c8:	73fb      	strb	r3, [r7, #15]
 80110ca:	7bfb      	ldrb	r3, [r7, #15]
 80110cc:	2b0a      	cmp	r3, #10
 80110ce:	d9ec      	bls.n	80110aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80110d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr

080110e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b087      	sub	sp, #28
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	4613      	mov	r3, r2
 80110ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80110ee:	2301      	movs	r3, #1
 80110f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80110f2:	2300      	movs	r3, #0
 80110f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80110f6:	4b1f      	ldr	r3, [pc, #124]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 80110f8:	7a5b      	ldrb	r3, [r3, #9]
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d131      	bne.n	8011164 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011100:	4b1c      	ldr	r3, [pc, #112]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 8011102:	7a5b      	ldrb	r3, [r3, #9]
 8011104:	b2db      	uxtb	r3, r3
 8011106:	461a      	mov	r2, r3
 8011108:	4b1a      	ldr	r3, [pc, #104]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 801110a:	2100      	movs	r1, #0
 801110c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801110e:	4b19      	ldr	r3, [pc, #100]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 8011110:	7a5b      	ldrb	r3, [r3, #9]
 8011112:	b2db      	uxtb	r3, r3
 8011114:	4a17      	ldr	r2, [pc, #92]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	4413      	add	r3, r2
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801111e:	4b15      	ldr	r3, [pc, #84]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 8011120:	7a5b      	ldrb	r3, [r3, #9]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	461a      	mov	r2, r3
 8011126:	4b13      	ldr	r3, [pc, #76]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 8011128:	4413      	add	r3, r2
 801112a:	79fa      	ldrb	r2, [r7, #7]
 801112c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801112e:	4b11      	ldr	r3, [pc, #68]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 8011130:	7a5b      	ldrb	r3, [r3, #9]
 8011132:	b2db      	uxtb	r3, r3
 8011134:	1c5a      	adds	r2, r3, #1
 8011136:	b2d1      	uxtb	r1, r2
 8011138:	4a0e      	ldr	r2, [pc, #56]	; (8011174 <FATFS_LinkDriverEx+0x94>)
 801113a:	7251      	strb	r1, [r2, #9]
 801113c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801113e:	7dbb      	ldrb	r3, [r7, #22]
 8011140:	3330      	adds	r3, #48	; 0x30
 8011142:	b2da      	uxtb	r2, r3
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	3301      	adds	r3, #1
 801114c:	223a      	movs	r2, #58	; 0x3a
 801114e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	3302      	adds	r3, #2
 8011154:	222f      	movs	r2, #47	; 0x2f
 8011156:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	3303      	adds	r3, #3
 801115c:	2200      	movs	r2, #0
 801115e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011160:	2300      	movs	r3, #0
 8011162:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011164:	7dfb      	ldrb	r3, [r7, #23]
}
 8011166:	4618      	mov	r0, r3
 8011168:	371c      	adds	r7, #28
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	200003bc 	.word	0x200003bc

08011178 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011182:	2200      	movs	r2, #0
 8011184:	6839      	ldr	r1, [r7, #0]
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7ff ffaa 	bl	80110e0 <FATFS_LinkDriverEx>
 801118c:	4603      	mov	r3, r0
}
 801118e:	4618      	mov	r0, r3
 8011190:	3708      	adds	r7, #8
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011196:	b480      	push	{r7}
 8011198:	b085      	sub	sp, #20
 801119a:	af00      	add	r7, sp, #0
 801119c:	4603      	mov	r3, r0
 801119e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80111a0:	2300      	movs	r3, #0
 80111a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80111a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111a8:	2b84      	cmp	r3, #132	; 0x84
 80111aa:	d005      	beq.n	80111b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80111ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	4413      	add	r3, r2
 80111b4:	3303      	adds	r3, #3
 80111b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80111b8:	68fb      	ldr	r3, [r7, #12]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3714      	adds	r7, #20
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr

080111c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80111c6:	b480      	push	{r7}
 80111c8:	b083      	sub	sp, #12
 80111ca:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111cc:	f3ef 8305 	mrs	r3, IPSR
 80111d0:	607b      	str	r3, [r7, #4]
  return(result);
 80111d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	bf14      	ite	ne
 80111d8:	2301      	movne	r3, #1
 80111da:	2300      	moveq	r3, #0
 80111dc:	b2db      	uxtb	r3, r3
}
 80111de:	4618      	mov	r0, r3
 80111e0:	370c      	adds	r7, #12
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr

080111ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80111ee:	f001 fc53 	bl	8012a98 <vTaskStartScheduler>
  
  return osOK;
 80111f2:	2300      	movs	r3, #0
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80111fc:	f002 f8a6 	bl	801334c <xTaskGetSchedulerState>
 8011200:	4603      	mov	r3, r0
 8011202:	2b01      	cmp	r3, #1
 8011204:	d101      	bne.n	801120a <osKernelRunning+0x12>
    return 0;
 8011206:	2300      	movs	r3, #0
 8011208:	e000      	b.n	801120c <osKernelRunning+0x14>
  else
    return 1;
 801120a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801120c:	4618      	mov	r0, r3
 801120e:	bd80      	pop	{r7, pc}

08011210 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011214:	f7ff ffd7 	bl	80111c6 <inHandlerMode>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d003      	beq.n	8011226 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801121e:	f001 fd5b 	bl	8012cd8 <xTaskGetTickCountFromISR>
 8011222:	4603      	mov	r3, r0
 8011224:	e002      	b.n	801122c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011226:	f001 fd47 	bl	8012cb8 <xTaskGetTickCount>
 801122a:	4603      	mov	r3, r0
  }
}
 801122c:	4618      	mov	r0, r3
 801122e:	bd80      	pop	{r7, pc}

08011230 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011232:	b089      	sub	sp, #36	; 0x24
 8011234:	af04      	add	r7, sp, #16
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d020      	beq.n	8011284 <osThreadCreate+0x54>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d01c      	beq.n	8011284 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	685c      	ldr	r4, [r3, #4]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681d      	ldr	r5, [r3, #0]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	691e      	ldr	r6, [r3, #16]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801125c:	4618      	mov	r0, r3
 801125e:	f7ff ff9a 	bl	8011196 <makeFreeRtosPriority>
 8011262:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	695b      	ldr	r3, [r3, #20]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801126c:	9202      	str	r2, [sp, #8]
 801126e:	9301      	str	r3, [sp, #4]
 8011270:	9100      	str	r1, [sp, #0]
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	4632      	mov	r2, r6
 8011276:	4629      	mov	r1, r5
 8011278:	4620      	mov	r0, r4
 801127a:	f001 fa31 	bl	80126e0 <xTaskCreateStatic>
 801127e:	4603      	mov	r3, r0
 8011280:	60fb      	str	r3, [r7, #12]
 8011282:	e01c      	b.n	80112be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685c      	ldr	r4, [r3, #4]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011290:	b29e      	uxth	r6, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011298:	4618      	mov	r0, r3
 801129a:	f7ff ff7c 	bl	8011196 <makeFreeRtosPriority>
 801129e:	4602      	mov	r2, r0
 80112a0:	f107 030c 	add.w	r3, r7, #12
 80112a4:	9301      	str	r3, [sp, #4]
 80112a6:	9200      	str	r2, [sp, #0]
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	4632      	mov	r2, r6
 80112ac:	4629      	mov	r1, r5
 80112ae:	4620      	mov	r0, r4
 80112b0:	f001 fa79 	bl	80127a6 <xTaskCreate>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d001      	beq.n	80112be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80112ba:	2300      	movs	r3, #0
 80112bc:	e000      	b.n	80112c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80112be:	68fb      	ldr	r3, [r7, #12]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3714      	adds	r7, #20
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b084      	sub	sp, #16
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <osDelay+0x16>
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	e000      	b.n	80112e0 <osDelay+0x18>
 80112de:	2301      	movs	r3, #1
 80112e0:	4618      	mov	r0, r3
 80112e2:	f001 fba3 	bl	8012a2c <vTaskDelay>
  
  return osOK;
 80112e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3710      	adds	r7, #16
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b086      	sub	sp, #24
 80112f4:	af02      	add	r7, sp, #8
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d016      	beq.n	8011330 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d10a      	bne.n	801131e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	2203      	movs	r2, #3
 801130e:	9200      	str	r2, [sp, #0]
 8011310:	2200      	movs	r2, #0
 8011312:	2100      	movs	r1, #0
 8011314:	2001      	movs	r0, #1
 8011316:	f000 faa9 	bl	801186c <xQueueGenericCreateStatic>
 801131a:	4603      	mov	r3, r0
 801131c:	e023      	b.n	8011366 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 801131e:	6838      	ldr	r0, [r7, #0]
 8011320:	6839      	ldr	r1, [r7, #0]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	461a      	mov	r2, r3
 8011328:	f000 fb83 	bl	8011a32 <xQueueCreateCountingSemaphoreStatic>
 801132c:	4603      	mov	r3, r0
 801132e:	e01a      	b.n	8011366 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	2b01      	cmp	r3, #1
 8011334:	d110      	bne.n	8011358 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8011336:	2203      	movs	r2, #3
 8011338:	2100      	movs	r1, #0
 801133a:	2001      	movs	r0, #1
 801133c:	f000 fb18 	bl	8011970 <xQueueGenericCreate>
 8011340:	60f8      	str	r0, [r7, #12]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d005      	beq.n	8011354 <osSemaphoreCreate+0x64>
 8011348:	2300      	movs	r3, #0
 801134a:	2200      	movs	r2, #0
 801134c:	2100      	movs	r1, #0
 801134e:	68f8      	ldr	r0, [r7, #12]
 8011350:	f000 fbe2 	bl	8011b18 <xQueueGenericSend>
      return sema;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	e006      	b.n	8011366 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	4611      	mov	r1, r2
 801135e:	4618      	mov	r0, r3
 8011360:	f000 fba2 	bl	8011aa8 <xQueueCreateCountingSemaphore>
 8011364:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
	...

08011370 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801137a:	2300      	movs	r3, #0
 801137c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d101      	bne.n	8011388 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011384:	2380      	movs	r3, #128	; 0x80
 8011386:	e03a      	b.n	80113fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011388:	2300      	movs	r3, #0
 801138a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011392:	d103      	bne.n	801139c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011394:	f04f 33ff 	mov.w	r3, #4294967295
 8011398:	60fb      	str	r3, [r7, #12]
 801139a:	e009      	b.n	80113b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d006      	beq.n	80113b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d101      	bne.n	80113b0 <osSemaphoreWait+0x40>
      ticks = 1;
 80113ac:	2301      	movs	r3, #1
 80113ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80113b0:	f7ff ff09 	bl	80111c6 <inHandlerMode>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d017      	beq.n	80113ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80113ba:	f107 0308 	add.w	r3, r7, #8
 80113be:	461a      	mov	r2, r3
 80113c0:	2100      	movs	r1, #0
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 ffde 	bl	8012384 <xQueueReceiveFromISR>
 80113c8:	4603      	mov	r3, r0
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d001      	beq.n	80113d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80113ce:	23ff      	movs	r3, #255	; 0xff
 80113d0:	e015      	b.n	80113fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d011      	beq.n	80113fc <osSemaphoreWait+0x8c>
 80113d8:	4b0b      	ldr	r3, [pc, #44]	; (8011408 <osSemaphoreWait+0x98>)
 80113da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113de:	601a      	str	r2, [r3, #0]
 80113e0:	f3bf 8f4f 	dsb	sy
 80113e4:	f3bf 8f6f 	isb	sy
 80113e8:	e008      	b.n	80113fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80113ea:	68f9      	ldr	r1, [r7, #12]
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 feb5 	bl	801215c <xQueueSemaphoreTake>
 80113f2:	4603      	mov	r3, r0
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d001      	beq.n	80113fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80113f8:	23ff      	movs	r3, #255	; 0xff
 80113fa:	e000      	b.n	80113fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80113fc:	2300      	movs	r3, #0
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	e000ed04 	.word	0xe000ed04

0801140c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011414:	2300      	movs	r3, #0
 8011416:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011418:	2300      	movs	r3, #0
 801141a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801141c:	f7ff fed3 	bl	80111c6 <inHandlerMode>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d016      	beq.n	8011454 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011426:	f107 0308 	add.w	r3, r7, #8
 801142a:	4619      	mov	r1, r3
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 fd19 	bl	8011e64 <xQueueGiveFromISR>
 8011432:	4603      	mov	r3, r0
 8011434:	2b01      	cmp	r3, #1
 8011436:	d001      	beq.n	801143c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011438:	23ff      	movs	r3, #255	; 0xff
 801143a:	e017      	b.n	801146c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d013      	beq.n	801146a <osSemaphoreRelease+0x5e>
 8011442:	4b0c      	ldr	r3, [pc, #48]	; (8011474 <osSemaphoreRelease+0x68>)
 8011444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011448:	601a      	str	r2, [r3, #0]
 801144a:	f3bf 8f4f 	dsb	sy
 801144e:	f3bf 8f6f 	isb	sy
 8011452:	e00a      	b.n	801146a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011454:	2300      	movs	r3, #0
 8011456:	2200      	movs	r2, #0
 8011458:	2100      	movs	r1, #0
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 fb5c 	bl	8011b18 <xQueueGenericSend>
 8011460:	4603      	mov	r3, r0
 8011462:	2b01      	cmp	r3, #1
 8011464:	d001      	beq.n	801146a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011466:	23ff      	movs	r3, #255	; 0xff
 8011468:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801146a:	68fb      	ldr	r3, [r7, #12]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	e000ed04 	.word	0xe000ed04

08011478 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011478:	b590      	push	{r4, r7, lr}
 801147a:	b085      	sub	sp, #20
 801147c:	af02      	add	r7, sp, #8
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d011      	beq.n	80114ae <osMessageCreate+0x36>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	68db      	ldr	r3, [r3, #12]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00d      	beq.n	80114ae <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6818      	ldr	r0, [r3, #0]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6859      	ldr	r1, [r3, #4]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	689a      	ldr	r2, [r3, #8]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	2400      	movs	r4, #0
 80114a4:	9400      	str	r4, [sp, #0]
 80114a6:	f000 f9e1 	bl	801186c <xQueueGenericCreateStatic>
 80114aa:	4603      	mov	r3, r0
 80114ac:	e008      	b.n	80114c0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6818      	ldr	r0, [r3, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	2200      	movs	r2, #0
 80114b8:	4619      	mov	r1, r3
 80114ba:	f000 fa59 	bl	8011970 <xQueueGenericCreate>
 80114be:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	370c      	adds	r7, #12
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd90      	pop	{r4, r7, pc}

080114c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b086      	sub	sp, #24
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80114d4:	2300      	movs	r3, #0
 80114d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d101      	bne.n	80114e6 <osMessagePut+0x1e>
    ticks = 1;
 80114e2:	2301      	movs	r3, #1
 80114e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80114e6:	f7ff fe6e 	bl	80111c6 <inHandlerMode>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d018      	beq.n	8011522 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80114f0:	f107 0210 	add.w	r2, r7, #16
 80114f4:	f107 0108 	add.w	r1, r7, #8
 80114f8:	2300      	movs	r3, #0
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f000 fc12 	bl	8011d24 <xQueueGenericSendFromISR>
 8011500:	4603      	mov	r3, r0
 8011502:	2b01      	cmp	r3, #1
 8011504:	d001      	beq.n	801150a <osMessagePut+0x42>
      return osErrorOS;
 8011506:	23ff      	movs	r3, #255	; 0xff
 8011508:	e018      	b.n	801153c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d014      	beq.n	801153a <osMessagePut+0x72>
 8011510:	4b0c      	ldr	r3, [pc, #48]	; (8011544 <osMessagePut+0x7c>)
 8011512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011516:	601a      	str	r2, [r3, #0]
 8011518:	f3bf 8f4f 	dsb	sy
 801151c:	f3bf 8f6f 	isb	sy
 8011520:	e00b      	b.n	801153a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011522:	f107 0108 	add.w	r1, r7, #8
 8011526:	2300      	movs	r3, #0
 8011528:	697a      	ldr	r2, [r7, #20]
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f000 faf4 	bl	8011b18 <xQueueGenericSend>
 8011530:	4603      	mov	r3, r0
 8011532:	2b01      	cmp	r3, #1
 8011534:	d001      	beq.n	801153a <osMessagePut+0x72>
      return osErrorOS;
 8011536:	23ff      	movs	r3, #255	; 0xff
 8011538:	e000      	b.n	801153c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3718      	adds	r7, #24
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	e000ed04 	.word	0xe000ed04

08011548 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011548:	b590      	push	{r4, r7, lr}
 801154a:	b08b      	sub	sp, #44	; 0x2c
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011558:	2300      	movs	r3, #0
 801155a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d10a      	bne.n	8011578 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011562:	2380      	movs	r3, #128	; 0x80
 8011564:	617b      	str	r3, [r7, #20]
    return event;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	461c      	mov	r4, r3
 801156a:	f107 0314 	add.w	r3, r7, #20
 801156e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011576:	e054      	b.n	8011622 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011578:	2300      	movs	r3, #0
 801157a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801157c:	2300      	movs	r3, #0
 801157e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011586:	d103      	bne.n	8011590 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011588:	f04f 33ff 	mov.w	r3, #4294967295
 801158c:	627b      	str	r3, [r7, #36]	; 0x24
 801158e:	e009      	b.n	80115a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d006      	beq.n	80115a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159c:	2b00      	cmp	r3, #0
 801159e:	d101      	bne.n	80115a4 <osMessageGet+0x5c>
      ticks = 1;
 80115a0:	2301      	movs	r3, #1
 80115a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80115a4:	f7ff fe0f 	bl	80111c6 <inHandlerMode>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d01c      	beq.n	80115e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80115ae:	f107 0220 	add.w	r2, r7, #32
 80115b2:	f107 0314 	add.w	r3, r7, #20
 80115b6:	3304      	adds	r3, #4
 80115b8:	4619      	mov	r1, r3
 80115ba:	68b8      	ldr	r0, [r7, #8]
 80115bc:	f000 fee2 	bl	8012384 <xQueueReceiveFromISR>
 80115c0:	4603      	mov	r3, r0
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d102      	bne.n	80115cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80115c6:	2310      	movs	r3, #16
 80115c8:	617b      	str	r3, [r7, #20]
 80115ca:	e001      	b.n	80115d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80115cc:	2300      	movs	r3, #0
 80115ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80115d0:	6a3b      	ldr	r3, [r7, #32]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d01d      	beq.n	8011612 <osMessageGet+0xca>
 80115d6:	4b15      	ldr	r3, [pc, #84]	; (801162c <osMessageGet+0xe4>)
 80115d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	f3bf 8f4f 	dsb	sy
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	e014      	b.n	8011612 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80115e8:	f107 0314 	add.w	r3, r7, #20
 80115ec:	3304      	adds	r3, #4
 80115ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115f0:	4619      	mov	r1, r3
 80115f2:	68b8      	ldr	r0, [r7, #8]
 80115f4:	f000 fccc 	bl	8011f90 <xQueueReceive>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d102      	bne.n	8011604 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80115fe:	2310      	movs	r3, #16
 8011600:	617b      	str	r3, [r7, #20]
 8011602:	e006      	b.n	8011612 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011606:	2b00      	cmp	r3, #0
 8011608:	d101      	bne.n	801160e <osMessageGet+0xc6>
 801160a:	2300      	movs	r3, #0
 801160c:	e000      	b.n	8011610 <osMessageGet+0xc8>
 801160e:	2340      	movs	r3, #64	; 0x40
 8011610:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	461c      	mov	r4, r3
 8011616:	f107 0314 	add.w	r3, r7, #20
 801161a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801161e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	372c      	adds	r7, #44	; 0x2c
 8011626:	46bd      	mov	sp, r7
 8011628:	bd90      	pop	{r4, r7, pc}
 801162a:	bf00      	nop
 801162c:	e000ed04 	.word	0xe000ed04

08011630 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f103 0208 	add.w	r2, r3, #8
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f04f 32ff 	mov.w	r2, #4294967295
 8011648:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f103 0208 	add.w	r2, r3, #8
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f103 0208 	add.w	r2, r3, #8
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011664:	bf00      	nop
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801167e:	bf00      	nop
 8011680:	370c      	adds	r7, #12
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr

0801168a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801168a:	b480      	push	{r7}
 801168c:	b085      	sub	sp, #20
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	68fa      	ldr	r2, [r7, #12]
 801169e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	689a      	ldr	r2, [r3, #8]
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	683a      	ldr	r2, [r7, #0]
 80116b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	1c5a      	adds	r2, r3, #1
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	601a      	str	r2, [r3, #0]
}
 80116c6:	bf00      	nop
 80116c8:	3714      	adds	r7, #20
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116d2:	b480      	push	{r7}
 80116d4:	b085      	sub	sp, #20
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
 80116da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e8:	d103      	bne.n	80116f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	691b      	ldr	r3, [r3, #16]
 80116ee:	60fb      	str	r3, [r7, #12]
 80116f0:	e00c      	b.n	801170c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	3308      	adds	r3, #8
 80116f6:	60fb      	str	r3, [r7, #12]
 80116f8:	e002      	b.n	8011700 <vListInsert+0x2e>
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	60fb      	str	r3, [r7, #12]
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	68ba      	ldr	r2, [r7, #8]
 8011708:	429a      	cmp	r2, r3
 801170a:	d2f6      	bcs.n	80116fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	685a      	ldr	r2, [r3, #4]
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	683a      	ldr	r2, [r7, #0]
 801171a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	683a      	ldr	r2, [r7, #0]
 8011726:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	1c5a      	adds	r2, r3, #1
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	601a      	str	r2, [r3, #0]
}
 8011738:	bf00      	nop
 801173a:	3714      	adds	r7, #20
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011744:	b480      	push	{r7}
 8011746:	b085      	sub	sp, #20
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	6892      	ldr	r2, [r2, #8]
 801175a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	689b      	ldr	r3, [r3, #8]
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	6852      	ldr	r2, [r2, #4]
 8011764:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	429a      	cmp	r2, r3
 801176e:	d103      	bne.n	8011778 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	689a      	ldr	r2, [r3, #8]
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2200      	movs	r2, #0
 801177c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	1e5a      	subs	r2, r3, #1
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3714      	adds	r7, #20
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d10c      	bne.n	80117c6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80117ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b0:	b672      	cpsid	i
 80117b2:	f383 8811 	msr	BASEPRI, r3
 80117b6:	f3bf 8f6f 	isb	sy
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	b662      	cpsie	i
 80117c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80117c2:	bf00      	nop
 80117c4:	e7fe      	b.n	80117c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80117c6:	f002 f911 	bl	80139ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117d2:	68f9      	ldr	r1, [r7, #12]
 80117d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80117d6:	fb01 f303 	mul.w	r3, r1, r3
 80117da:	441a      	add	r2, r3
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	2200      	movs	r2, #0
 80117e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117f6:	3b01      	subs	r3, #1
 80117f8:	68f9      	ldr	r1, [r7, #12]
 80117fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80117fc:	fb01 f303 	mul.w	r3, r1, r3
 8011800:	441a      	add	r2, r3
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	22ff      	movs	r2, #255	; 0xff
 801180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	22ff      	movs	r2, #255	; 0xff
 8011812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d114      	bne.n	8011846 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	691b      	ldr	r3, [r3, #16]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d01a      	beq.n	801185a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	3310      	adds	r3, #16
 8011828:	4618      	mov	r0, r3
 801182a:	f001 fbc9 	bl	8012fc0 <xTaskRemoveFromEventList>
 801182e:	4603      	mov	r3, r0
 8011830:	2b00      	cmp	r3, #0
 8011832:	d012      	beq.n	801185a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011834:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <xQueueGenericReset+0xd0>)
 8011836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801183a:	601a      	str	r2, [r3, #0]
 801183c:	f3bf 8f4f 	dsb	sy
 8011840:	f3bf 8f6f 	isb	sy
 8011844:	e009      	b.n	801185a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	3310      	adds	r3, #16
 801184a:	4618      	mov	r0, r3
 801184c:	f7ff fef0 	bl	8011630 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	3324      	adds	r3, #36	; 0x24
 8011854:	4618      	mov	r0, r3
 8011856:	f7ff feeb 	bl	8011630 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801185a:	f002 f8fb 	bl	8013a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801185e:	2301      	movs	r3, #1
}
 8011860:	4618      	mov	r0, r3
 8011862:	3710      	adds	r7, #16
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	e000ed04 	.word	0xe000ed04

0801186c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801186c:	b580      	push	{r7, lr}
 801186e:	b08e      	sub	sp, #56	; 0x38
 8011870:	af02      	add	r7, sp, #8
 8011872:	60f8      	str	r0, [r7, #12]
 8011874:	60b9      	str	r1, [r7, #8]
 8011876:	607a      	str	r2, [r7, #4]
 8011878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d10c      	bne.n	801189a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8011880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011884:	b672      	cpsid	i
 8011886:	f383 8811 	msr	BASEPRI, r3
 801188a:	f3bf 8f6f 	isb	sy
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	b662      	cpsie	i
 8011894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011896:	bf00      	nop
 8011898:	e7fe      	b.n	8011898 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10c      	bne.n	80118ba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a4:	b672      	cpsid	i
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	b662      	cpsie	i
 80118b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80118b6:	bf00      	nop
 80118b8:	e7fe      	b.n	80118b8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <xQueueGenericCreateStatic+0x5a>
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d001      	beq.n	80118ca <xQueueGenericCreateStatic+0x5e>
 80118c6:	2301      	movs	r3, #1
 80118c8:	e000      	b.n	80118cc <xQueueGenericCreateStatic+0x60>
 80118ca:	2300      	movs	r3, #0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d10c      	bne.n	80118ea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80118d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d4:	b672      	cpsid	i
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	b662      	cpsie	i
 80118e4:	623b      	str	r3, [r7, #32]
}
 80118e6:	bf00      	nop
 80118e8:	e7fe      	b.n	80118e8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d102      	bne.n	80118f6 <xQueueGenericCreateStatic+0x8a>
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d101      	bne.n	80118fa <xQueueGenericCreateStatic+0x8e>
 80118f6:	2301      	movs	r3, #1
 80118f8:	e000      	b.n	80118fc <xQueueGenericCreateStatic+0x90>
 80118fa:	2300      	movs	r3, #0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d10c      	bne.n	801191a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8011900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011904:	b672      	cpsid	i
 8011906:	f383 8811 	msr	BASEPRI, r3
 801190a:	f3bf 8f6f 	isb	sy
 801190e:	f3bf 8f4f 	dsb	sy
 8011912:	b662      	cpsie	i
 8011914:	61fb      	str	r3, [r7, #28]
}
 8011916:	bf00      	nop
 8011918:	e7fe      	b.n	8011918 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801191a:	2348      	movs	r3, #72	; 0x48
 801191c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	2b48      	cmp	r3, #72	; 0x48
 8011922:	d00c      	beq.n	801193e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8011924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011928:	b672      	cpsid	i
 801192a:	f383 8811 	msr	BASEPRI, r3
 801192e:	f3bf 8f6f 	isb	sy
 8011932:	f3bf 8f4f 	dsb	sy
 8011936:	b662      	cpsie	i
 8011938:	61bb      	str	r3, [r7, #24]
}
 801193a:	bf00      	nop
 801193c:	e7fe      	b.n	801193c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801193e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011946:	2b00      	cmp	r3, #0
 8011948:	d00d      	beq.n	8011966 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	2201      	movs	r2, #1
 801194e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011952:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011958:	9300      	str	r3, [sp, #0]
 801195a:	4613      	mov	r3, r2
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	68b9      	ldr	r1, [r7, #8]
 8011960:	68f8      	ldr	r0, [r7, #12]
 8011962:	f000 f847 	bl	80119f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011968:	4618      	mov	r0, r3
 801196a:	3730      	adds	r7, #48	; 0x30
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011970:	b580      	push	{r7, lr}
 8011972:	b08a      	sub	sp, #40	; 0x28
 8011974:	af02      	add	r7, sp, #8
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	4613      	mov	r3, r2
 801197c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d10c      	bne.n	801199e <xQueueGenericCreate+0x2e>
	__asm volatile
 8011984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011988:	b672      	cpsid	i
 801198a:	f383 8811 	msr	BASEPRI, r3
 801198e:	f3bf 8f6f 	isb	sy
 8011992:	f3bf 8f4f 	dsb	sy
 8011996:	b662      	cpsie	i
 8011998:	613b      	str	r3, [r7, #16]
}
 801199a:	bf00      	nop
 801199c:	e7fe      	b.n	801199c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d102      	bne.n	80119aa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80119a4:	2300      	movs	r3, #0
 80119a6:	61fb      	str	r3, [r7, #28]
 80119a8:	e004      	b.n	80119b4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	68ba      	ldr	r2, [r7, #8]
 80119ae:	fb02 f303 	mul.w	r3, r2, r3
 80119b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	3348      	adds	r3, #72	; 0x48
 80119b8:	4618      	mov	r0, r3
 80119ba:	f002 f943 	bl	8013c44 <pvPortMalloc>
 80119be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80119c0:	69bb      	ldr	r3, [r7, #24]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d011      	beq.n	80119ea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	3348      	adds	r3, #72	; 0x48
 80119ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80119d0:	69bb      	ldr	r3, [r7, #24]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80119d8:	79fa      	ldrb	r2, [r7, #7]
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	4613      	mov	r3, r2
 80119e0:	697a      	ldr	r2, [r7, #20]
 80119e2:	68b9      	ldr	r1, [r7, #8]
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	f000 f805 	bl	80119f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80119ea:	69bb      	ldr	r3, [r7, #24]
	}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3720      	adds	r7, #32
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	60f8      	str	r0, [r7, #12]
 80119fc:	60b9      	str	r1, [r7, #8]
 80119fe:	607a      	str	r2, [r7, #4]
 8011a00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d103      	bne.n	8011a10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	69ba      	ldr	r2, [r7, #24]
 8011a0c:	601a      	str	r2, [r3, #0]
 8011a0e:	e002      	b.n	8011a16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011a16:	69bb      	ldr	r3, [r7, #24]
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011a22:	2101      	movs	r1, #1
 8011a24:	69b8      	ldr	r0, [r7, #24]
 8011a26:	f7ff feb7 	bl	8011798 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011a2a:	bf00      	nop
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b08a      	sub	sp, #40	; 0x28
 8011a36:	af02      	add	r7, sp, #8
 8011a38:	60f8      	str	r0, [r7, #12]
 8011a3a:	60b9      	str	r1, [r7, #8]
 8011a3c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10c      	bne.n	8011a5e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	b672      	cpsid	i
 8011a4a:	f383 8811 	msr	BASEPRI, r3
 8011a4e:	f3bf 8f6f 	isb	sy
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	b662      	cpsie	i
 8011a58:	61bb      	str	r3, [r7, #24]
}
 8011a5a:	bf00      	nop
 8011a5c:	e7fe      	b.n	8011a5c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011a5e:	68ba      	ldr	r2, [r7, #8]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d90c      	bls.n	8011a80 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8011a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6a:	b672      	cpsid	i
 8011a6c:	f383 8811 	msr	BASEPRI, r3
 8011a70:	f3bf 8f6f 	isb	sy
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	b662      	cpsie	i
 8011a7a:	617b      	str	r3, [r7, #20]
}
 8011a7c:	bf00      	nop
 8011a7e:	e7fe      	b.n	8011a7e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011a80:	2302      	movs	r3, #2
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	2100      	movs	r1, #0
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	f7ff feee 	bl	801186c <xQueueGenericCreateStatic>
 8011a90:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011a9e:	69fb      	ldr	r3, [r7, #28]
	}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3720      	adds	r7, #32
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b086      	sub	sp, #24
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d10c      	bne.n	8011ad2 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8011ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011abc:	b672      	cpsid	i
 8011abe:	f383 8811 	msr	BASEPRI, r3
 8011ac2:	f3bf 8f6f 	isb	sy
 8011ac6:	f3bf 8f4f 	dsb	sy
 8011aca:	b662      	cpsie	i
 8011acc:	613b      	str	r3, [r7, #16]
}
 8011ace:	bf00      	nop
 8011ad0:	e7fe      	b.n	8011ad0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011ad2:	683a      	ldr	r2, [r7, #0]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d90c      	bls.n	8011af4 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8011ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ade:	b672      	cpsid	i
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	b662      	cpsie	i
 8011aee:	60fb      	str	r3, [r7, #12]
}
 8011af0:	bf00      	nop
 8011af2:	e7fe      	b.n	8011af2 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011af4:	2202      	movs	r2, #2
 8011af6:	2100      	movs	r1, #0
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7ff ff39 	bl	8011970 <xQueueGenericCreate>
 8011afe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d002      	beq.n	8011b0c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	683a      	ldr	r2, [r7, #0]
 8011b0a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011b0c:	697b      	ldr	r3, [r7, #20]
	}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3718      	adds	r7, #24
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
	...

08011b18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b08e      	sub	sp, #56	; 0x38
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011b26:	2300      	movs	r3, #0
 8011b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10c      	bne.n	8011b4e <xQueueGenericSend+0x36>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b38:	b672      	cpsid	i
 8011b3a:	f383 8811 	msr	BASEPRI, r3
 8011b3e:	f3bf 8f6f 	isb	sy
 8011b42:	f3bf 8f4f 	dsb	sy
 8011b46:	b662      	cpsie	i
 8011b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011b4a:	bf00      	nop
 8011b4c:	e7fe      	b.n	8011b4c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d103      	bne.n	8011b5c <xQueueGenericSend+0x44>
 8011b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d101      	bne.n	8011b60 <xQueueGenericSend+0x48>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e000      	b.n	8011b62 <xQueueGenericSend+0x4a>
 8011b60:	2300      	movs	r3, #0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d10c      	bne.n	8011b80 <xQueueGenericSend+0x68>
	__asm volatile
 8011b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6a:	b672      	cpsid	i
 8011b6c:	f383 8811 	msr	BASEPRI, r3
 8011b70:	f3bf 8f6f 	isb	sy
 8011b74:	f3bf 8f4f 	dsb	sy
 8011b78:	b662      	cpsie	i
 8011b7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b7c:	bf00      	nop
 8011b7e:	e7fe      	b.n	8011b7e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	d103      	bne.n	8011b8e <xQueueGenericSend+0x76>
 8011b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d101      	bne.n	8011b92 <xQueueGenericSend+0x7a>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e000      	b.n	8011b94 <xQueueGenericSend+0x7c>
 8011b92:	2300      	movs	r3, #0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10c      	bne.n	8011bb2 <xQueueGenericSend+0x9a>
	__asm volatile
 8011b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9c:	b672      	cpsid	i
 8011b9e:	f383 8811 	msr	BASEPRI, r3
 8011ba2:	f3bf 8f6f 	isb	sy
 8011ba6:	f3bf 8f4f 	dsb	sy
 8011baa:	b662      	cpsie	i
 8011bac:	623b      	str	r3, [r7, #32]
}
 8011bae:	bf00      	nop
 8011bb0:	e7fe      	b.n	8011bb0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011bb2:	f001 fbcb 	bl	801334c <xTaskGetSchedulerState>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d102      	bne.n	8011bc2 <xQueueGenericSend+0xaa>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <xQueueGenericSend+0xae>
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e000      	b.n	8011bc8 <xQueueGenericSend+0xb0>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d10c      	bne.n	8011be6 <xQueueGenericSend+0xce>
	__asm volatile
 8011bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd0:	b672      	cpsid	i
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	b662      	cpsie	i
 8011be0:	61fb      	str	r3, [r7, #28]
}
 8011be2:	bf00      	nop
 8011be4:	e7fe      	b.n	8011be4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011be6:	f001 ff01 	bl	80139ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d302      	bcc.n	8011bfc <xQueueGenericSend+0xe4>
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	2b02      	cmp	r3, #2
 8011bfa:	d129      	bne.n	8011c50 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011bfc:	683a      	ldr	r2, [r7, #0]
 8011bfe:	68b9      	ldr	r1, [r7, #8]
 8011c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c02:	f000 fc5d 	bl	80124c0 <prvCopyDataToQueue>
 8011c06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d010      	beq.n	8011c32 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c12:	3324      	adds	r3, #36	; 0x24
 8011c14:	4618      	mov	r0, r3
 8011c16:	f001 f9d3 	bl	8012fc0 <xTaskRemoveFromEventList>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d013      	beq.n	8011c48 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011c20:	4b3f      	ldr	r3, [pc, #252]	; (8011d20 <xQueueGenericSend+0x208>)
 8011c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	f3bf 8f6f 	isb	sy
 8011c30:	e00a      	b.n	8011c48 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d007      	beq.n	8011c48 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011c38:	4b39      	ldr	r3, [pc, #228]	; (8011d20 <xQueueGenericSend+0x208>)
 8011c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c3e:	601a      	str	r2, [r3, #0]
 8011c40:	f3bf 8f4f 	dsb	sy
 8011c44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011c48:	f001 ff04 	bl	8013a54 <vPortExitCritical>
				return pdPASS;
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e063      	b.n	8011d18 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d103      	bne.n	8011c5e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011c56:	f001 fefd 	bl	8013a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e05c      	b.n	8011d18 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d106      	bne.n	8011c72 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c64:	f107 0314 	add.w	r3, r7, #20
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f001 fa0d 	bl	8013088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c6e:	2301      	movs	r3, #1
 8011c70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c72:	f001 feef 	bl	8013a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c76:	f000 ff73 	bl	8012b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c7a:	f001 feb7 	bl	80139ec <vPortEnterCritical>
 8011c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c84:	b25b      	sxtb	r3, r3
 8011c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c8a:	d103      	bne.n	8011c94 <xQueueGenericSend+0x17c>
 8011c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c8e:	2200      	movs	r2, #0
 8011c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c9a:	b25b      	sxtb	r3, r3
 8011c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca0:	d103      	bne.n	8011caa <xQueueGenericSend+0x192>
 8011ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011caa:	f001 fed3 	bl	8013a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011cae:	1d3a      	adds	r2, r7, #4
 8011cb0:	f107 0314 	add.w	r3, r7, #20
 8011cb4:	4611      	mov	r1, r2
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f001 f9fc 	bl	80130b4 <xTaskCheckForTimeOut>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d124      	bne.n	8011d0c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cc4:	f000 fcf4 	bl	80126b0 <prvIsQueueFull>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d018      	beq.n	8011d00 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd0:	3310      	adds	r3, #16
 8011cd2:	687a      	ldr	r2, [r7, #4]
 8011cd4:	4611      	mov	r1, r2
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f001 f94c 	bl	8012f74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cde:	f000 fc7f 	bl	80125e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ce2:	f000 ff4b 	bl	8012b7c <xTaskResumeAll>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f47f af7c 	bne.w	8011be6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8011cee:	4b0c      	ldr	r3, [pc, #48]	; (8011d20 <xQueueGenericSend+0x208>)
 8011cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cf4:	601a      	str	r2, [r3, #0]
 8011cf6:	f3bf 8f4f 	dsb	sy
 8011cfa:	f3bf 8f6f 	isb	sy
 8011cfe:	e772      	b.n	8011be6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d02:	f000 fc6d 	bl	80125e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011d06:	f000 ff39 	bl	8012b7c <xTaskResumeAll>
 8011d0a:	e76c      	b.n	8011be6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d0e:	f000 fc67 	bl	80125e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011d12:	f000 ff33 	bl	8012b7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011d16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3738      	adds	r7, #56	; 0x38
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	e000ed04 	.word	0xe000ed04

08011d24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b08e      	sub	sp, #56	; 0x38
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	607a      	str	r2, [r7, #4]
 8011d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d10c      	bne.n	8011d56 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8011d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d40:	b672      	cpsid	i
 8011d42:	f383 8811 	msr	BASEPRI, r3
 8011d46:	f3bf 8f6f 	isb	sy
 8011d4a:	f3bf 8f4f 	dsb	sy
 8011d4e:	b662      	cpsie	i
 8011d50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d52:	bf00      	nop
 8011d54:	e7fe      	b.n	8011d54 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d103      	bne.n	8011d64 <xQueueGenericSendFromISR+0x40>
 8011d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d101      	bne.n	8011d68 <xQueueGenericSendFromISR+0x44>
 8011d64:	2301      	movs	r3, #1
 8011d66:	e000      	b.n	8011d6a <xQueueGenericSendFromISR+0x46>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d10c      	bne.n	8011d88 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8011d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d72:	b672      	cpsid	i
 8011d74:	f383 8811 	msr	BASEPRI, r3
 8011d78:	f3bf 8f6f 	isb	sy
 8011d7c:	f3bf 8f4f 	dsb	sy
 8011d80:	b662      	cpsie	i
 8011d82:	623b      	str	r3, [r7, #32]
}
 8011d84:	bf00      	nop
 8011d86:	e7fe      	b.n	8011d86 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	2b02      	cmp	r3, #2
 8011d8c:	d103      	bne.n	8011d96 <xQueueGenericSendFromISR+0x72>
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d101      	bne.n	8011d9a <xQueueGenericSendFromISR+0x76>
 8011d96:	2301      	movs	r3, #1
 8011d98:	e000      	b.n	8011d9c <xQueueGenericSendFromISR+0x78>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d10c      	bne.n	8011dba <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8011da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da4:	b672      	cpsid	i
 8011da6:	f383 8811 	msr	BASEPRI, r3
 8011daa:	f3bf 8f6f 	isb	sy
 8011dae:	f3bf 8f4f 	dsb	sy
 8011db2:	b662      	cpsie	i
 8011db4:	61fb      	str	r3, [r7, #28]
}
 8011db6:	bf00      	nop
 8011db8:	e7fe      	b.n	8011db8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dba:	f001 feff 	bl	8013bbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8011dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc6:	b672      	cpsid	i
 8011dc8:	f383 8811 	msr	BASEPRI, r3
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	f3bf 8f4f 	dsb	sy
 8011dd4:	b662      	cpsie	i
 8011dd6:	61ba      	str	r2, [r7, #24]
 8011dd8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011dda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d302      	bcc.n	8011df0 <xQueueGenericSendFromISR+0xcc>
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	2b02      	cmp	r3, #2
 8011dee:	d12c      	bne.n	8011e4a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011dfa:	683a      	ldr	r2, [r7, #0]
 8011dfc:	68b9      	ldr	r1, [r7, #8]
 8011dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e00:	f000 fb5e 	bl	80124c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011e04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e0c:	d112      	bne.n	8011e34 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d016      	beq.n	8011e44 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e18:	3324      	adds	r3, #36	; 0x24
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f001 f8d0 	bl	8012fc0 <xTaskRemoveFromEventList>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00e      	beq.n	8011e44 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00b      	beq.n	8011e44 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	601a      	str	r2, [r3, #0]
 8011e32:	e007      	b.n	8011e44 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011e38:	3301      	adds	r3, #1
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	b25a      	sxtb	r2, r3
 8011e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011e44:	2301      	movs	r3, #1
 8011e46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011e48:	e001      	b.n	8011e4e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8011e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011e58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3738      	adds	r7, #56	; 0x38
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b08e      	sub	sp, #56	; 0x38
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d10c      	bne.n	8011e92 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e7c:	b672      	cpsid	i
 8011e7e:	f383 8811 	msr	BASEPRI, r3
 8011e82:	f3bf 8f6f 	isb	sy
 8011e86:	f3bf 8f4f 	dsb	sy
 8011e8a:	b662      	cpsie	i
 8011e8c:	623b      	str	r3, [r7, #32]
}
 8011e8e:	bf00      	nop
 8011e90:	e7fe      	b.n	8011e90 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00c      	beq.n	8011eb4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8011e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9e:	b672      	cpsid	i
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	b662      	cpsie	i
 8011eae:	61fb      	str	r3, [r7, #28]
}
 8011eb0:	bf00      	nop
 8011eb2:	e7fe      	b.n	8011eb2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d103      	bne.n	8011ec4 <xQueueGiveFromISR+0x60>
 8011ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d101      	bne.n	8011ec8 <xQueueGiveFromISR+0x64>
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e000      	b.n	8011eca <xQueueGiveFromISR+0x66>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d10c      	bne.n	8011ee8 <xQueueGiveFromISR+0x84>
	__asm volatile
 8011ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed2:	b672      	cpsid	i
 8011ed4:	f383 8811 	msr	BASEPRI, r3
 8011ed8:	f3bf 8f6f 	isb	sy
 8011edc:	f3bf 8f4f 	dsb	sy
 8011ee0:	b662      	cpsie	i
 8011ee2:	61bb      	str	r3, [r7, #24]
}
 8011ee4:	bf00      	nop
 8011ee6:	e7fe      	b.n	8011ee6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ee8:	f001 fe68 	bl	8013bbc <vPortValidateInterruptPriority>
	__asm volatile
 8011eec:	f3ef 8211 	mrs	r2, BASEPRI
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	b672      	cpsid	i
 8011ef6:	f383 8811 	msr	BASEPRI, r3
 8011efa:	f3bf 8f6f 	isb	sy
 8011efe:	f3bf 8f4f 	dsb	sy
 8011f02:	b662      	cpsie	i
 8011f04:	617a      	str	r2, [r7, #20]
 8011f06:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011f08:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f10:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d22b      	bcs.n	8011f74 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f28:	1c5a      	adds	r2, r3, #1
 8011f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011f2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f36:	d112      	bne.n	8011f5e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d016      	beq.n	8011f6e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f42:	3324      	adds	r3, #36	; 0x24
 8011f44:	4618      	mov	r0, r3
 8011f46:	f001 f83b 	bl	8012fc0 <xTaskRemoveFromEventList>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d00e      	beq.n	8011f6e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d00b      	beq.n	8011f6e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	2201      	movs	r2, #1
 8011f5a:	601a      	str	r2, [r3, #0]
 8011f5c:	e007      	b.n	8011f6e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f62:	3301      	adds	r3, #1
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	b25a      	sxtb	r2, r3
 8011f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011f6e:	2301      	movs	r3, #1
 8011f70:	637b      	str	r3, [r7, #52]	; 0x34
 8011f72:	e001      	b.n	8011f78 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011f74:	2300      	movs	r3, #0
 8011f76:	637b      	str	r3, [r7, #52]	; 0x34
 8011f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f383 8811 	msr	BASEPRI, r3
}
 8011f82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3738      	adds	r7, #56	; 0x38
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
	...

08011f90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b08c      	sub	sp, #48	; 0x30
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60f8      	str	r0, [r7, #12]
 8011f98:	60b9      	str	r1, [r7, #8]
 8011f9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10c      	bne.n	8011fc4 <xQueueReceive+0x34>
	__asm volatile
 8011faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fae:	b672      	cpsid	i
 8011fb0:	f383 8811 	msr	BASEPRI, r3
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	b662      	cpsie	i
 8011fbe:	623b      	str	r3, [r7, #32]
}
 8011fc0:	bf00      	nop
 8011fc2:	e7fe      	b.n	8011fc2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d103      	bne.n	8011fd2 <xQueueReceive+0x42>
 8011fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d101      	bne.n	8011fd6 <xQueueReceive+0x46>
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	e000      	b.n	8011fd8 <xQueueReceive+0x48>
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d10c      	bne.n	8011ff6 <xQueueReceive+0x66>
	__asm volatile
 8011fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe0:	b672      	cpsid	i
 8011fe2:	f383 8811 	msr	BASEPRI, r3
 8011fe6:	f3bf 8f6f 	isb	sy
 8011fea:	f3bf 8f4f 	dsb	sy
 8011fee:	b662      	cpsie	i
 8011ff0:	61fb      	str	r3, [r7, #28]
}
 8011ff2:	bf00      	nop
 8011ff4:	e7fe      	b.n	8011ff4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ff6:	f001 f9a9 	bl	801334c <xTaskGetSchedulerState>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d102      	bne.n	8012006 <xQueueReceive+0x76>
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d101      	bne.n	801200a <xQueueReceive+0x7a>
 8012006:	2301      	movs	r3, #1
 8012008:	e000      	b.n	801200c <xQueueReceive+0x7c>
 801200a:	2300      	movs	r3, #0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d10c      	bne.n	801202a <xQueueReceive+0x9a>
	__asm volatile
 8012010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012014:	b672      	cpsid	i
 8012016:	f383 8811 	msr	BASEPRI, r3
 801201a:	f3bf 8f6f 	isb	sy
 801201e:	f3bf 8f4f 	dsb	sy
 8012022:	b662      	cpsie	i
 8012024:	61bb      	str	r3, [r7, #24]
}
 8012026:	bf00      	nop
 8012028:	e7fe      	b.n	8012028 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801202a:	f001 fcdf 	bl	80139ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012032:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012036:	2b00      	cmp	r3, #0
 8012038:	d01f      	beq.n	801207a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801203a:	68b9      	ldr	r1, [r7, #8]
 801203c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801203e:	f000 faa9 	bl	8012594 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012044:	1e5a      	subs	r2, r3, #1
 8012046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012048:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204c:	691b      	ldr	r3, [r3, #16]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d00f      	beq.n	8012072 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012054:	3310      	adds	r3, #16
 8012056:	4618      	mov	r0, r3
 8012058:	f000 ffb2 	bl	8012fc0 <xTaskRemoveFromEventList>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d007      	beq.n	8012072 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012062:	4b3d      	ldr	r3, [pc, #244]	; (8012158 <xQueueReceive+0x1c8>)
 8012064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012068:	601a      	str	r2, [r3, #0]
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012072:	f001 fcef 	bl	8013a54 <vPortExitCritical>
				return pdPASS;
 8012076:	2301      	movs	r3, #1
 8012078:	e069      	b.n	801214e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d103      	bne.n	8012088 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012080:	f001 fce8 	bl	8013a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012084:	2300      	movs	r3, #0
 8012086:	e062      	b.n	801214e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801208e:	f107 0310 	add.w	r3, r7, #16
 8012092:	4618      	mov	r0, r3
 8012094:	f000 fff8 	bl	8013088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012098:	2301      	movs	r3, #1
 801209a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801209c:	f001 fcda 	bl	8013a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80120a0:	f000 fd5e 	bl	8012b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80120a4:	f001 fca2 	bl	80139ec <vPortEnterCritical>
 80120a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80120ae:	b25b      	sxtb	r3, r3
 80120b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b4:	d103      	bne.n	80120be <xQueueReceive+0x12e>
 80120b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80120be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120c4:	b25b      	sxtb	r3, r3
 80120c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ca:	d103      	bne.n	80120d4 <xQueueReceive+0x144>
 80120cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ce:	2200      	movs	r2, #0
 80120d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80120d4:	f001 fcbe 	bl	8013a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80120d8:	1d3a      	adds	r2, r7, #4
 80120da:	f107 0310 	add.w	r3, r7, #16
 80120de:	4611      	mov	r1, r2
 80120e0:	4618      	mov	r0, r3
 80120e2:	f000 ffe7 	bl	80130b4 <xTaskCheckForTimeOut>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d123      	bne.n	8012134 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120ee:	f000 fac9 	bl	8012684 <prvIsQueueEmpty>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d017      	beq.n	8012128 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80120f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fa:	3324      	adds	r3, #36	; 0x24
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	4611      	mov	r1, r2
 8012100:	4618      	mov	r0, r3
 8012102:	f000 ff37 	bl	8012f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012108:	f000 fa6a 	bl	80125e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801210c:	f000 fd36 	bl	8012b7c <xTaskResumeAll>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d189      	bne.n	801202a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8012116:	4b10      	ldr	r3, [pc, #64]	; (8012158 <xQueueReceive+0x1c8>)
 8012118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801211c:	601a      	str	r2, [r3, #0]
 801211e:	f3bf 8f4f 	dsb	sy
 8012122:	f3bf 8f6f 	isb	sy
 8012126:	e780      	b.n	801202a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801212a:	f000 fa59 	bl	80125e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801212e:	f000 fd25 	bl	8012b7c <xTaskResumeAll>
 8012132:	e77a      	b.n	801202a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012136:	f000 fa53 	bl	80125e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801213a:	f000 fd1f 	bl	8012b7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801213e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012140:	f000 faa0 	bl	8012684 <prvIsQueueEmpty>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	f43f af6f 	beq.w	801202a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801214c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801214e:	4618      	mov	r0, r3
 8012150:	3730      	adds	r7, #48	; 0x30
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	e000ed04 	.word	0xe000ed04

0801215c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b08e      	sub	sp, #56	; 0x38
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012166:	2300      	movs	r3, #0
 8012168:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801216e:	2300      	movs	r3, #0
 8012170:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012174:	2b00      	cmp	r3, #0
 8012176:	d10c      	bne.n	8012192 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8012178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217c:	b672      	cpsid	i
 801217e:	f383 8811 	msr	BASEPRI, r3
 8012182:	f3bf 8f6f 	isb	sy
 8012186:	f3bf 8f4f 	dsb	sy
 801218a:	b662      	cpsie	i
 801218c:	623b      	str	r3, [r7, #32]
}
 801218e:	bf00      	nop
 8012190:	e7fe      	b.n	8012190 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00c      	beq.n	80121b4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219e:	b672      	cpsid	i
 80121a0:	f383 8811 	msr	BASEPRI, r3
 80121a4:	f3bf 8f6f 	isb	sy
 80121a8:	f3bf 8f4f 	dsb	sy
 80121ac:	b662      	cpsie	i
 80121ae:	61fb      	str	r3, [r7, #28]
}
 80121b0:	bf00      	nop
 80121b2:	e7fe      	b.n	80121b2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121b4:	f001 f8ca 	bl	801334c <xTaskGetSchedulerState>
 80121b8:	4603      	mov	r3, r0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d102      	bne.n	80121c4 <xQueueSemaphoreTake+0x68>
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d101      	bne.n	80121c8 <xQueueSemaphoreTake+0x6c>
 80121c4:	2301      	movs	r3, #1
 80121c6:	e000      	b.n	80121ca <xQueueSemaphoreTake+0x6e>
 80121c8:	2300      	movs	r3, #0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d10c      	bne.n	80121e8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80121ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d2:	b672      	cpsid	i
 80121d4:	f383 8811 	msr	BASEPRI, r3
 80121d8:	f3bf 8f6f 	isb	sy
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	b662      	cpsie	i
 80121e2:	61bb      	str	r3, [r7, #24]
}
 80121e4:	bf00      	nop
 80121e6:	e7fe      	b.n	80121e6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121e8:	f001 fc00 	bl	80139ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80121ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80121f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d024      	beq.n	8012242 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80121f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121fa:	1e5a      	subs	r2, r3, #1
 80121fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d104      	bne.n	8012212 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012208:	f001 fa66 	bl	80136d8 <pvTaskIncrementMutexHeldCount>
 801220c:	4602      	mov	r2, r0
 801220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012210:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012214:	691b      	ldr	r3, [r3, #16]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00f      	beq.n	801223a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221c:	3310      	adds	r3, #16
 801221e:	4618      	mov	r0, r3
 8012220:	f000 fece 	bl	8012fc0 <xTaskRemoveFromEventList>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	d007      	beq.n	801223a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801222a:	4b55      	ldr	r3, [pc, #340]	; (8012380 <xQueueSemaphoreTake+0x224>)
 801222c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012230:	601a      	str	r2, [r3, #0]
 8012232:	f3bf 8f4f 	dsb	sy
 8012236:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801223a:	f001 fc0b 	bl	8013a54 <vPortExitCritical>
				return pdPASS;
 801223e:	2301      	movs	r3, #1
 8012240:	e099      	b.n	8012376 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d113      	bne.n	8012270 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00c      	beq.n	8012268 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012252:	b672      	cpsid	i
 8012254:	f383 8811 	msr	BASEPRI, r3
 8012258:	f3bf 8f6f 	isb	sy
 801225c:	f3bf 8f4f 	dsb	sy
 8012260:	b662      	cpsie	i
 8012262:	617b      	str	r3, [r7, #20]
}
 8012264:	bf00      	nop
 8012266:	e7fe      	b.n	8012266 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012268:	f001 fbf4 	bl	8013a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801226c:	2300      	movs	r3, #0
 801226e:	e082      	b.n	8012376 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012272:	2b00      	cmp	r3, #0
 8012274:	d106      	bne.n	8012284 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012276:	f107 030c 	add.w	r3, r7, #12
 801227a:	4618      	mov	r0, r3
 801227c:	f000 ff04 	bl	8013088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012280:	2301      	movs	r3, #1
 8012282:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012284:	f001 fbe6 	bl	8013a54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012288:	f000 fc6a 	bl	8012b60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801228c:	f001 fbae 	bl	80139ec <vPortEnterCritical>
 8012290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012296:	b25b      	sxtb	r3, r3
 8012298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801229c:	d103      	bne.n	80122a6 <xQueueSemaphoreTake+0x14a>
 801229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a0:	2200      	movs	r2, #0
 80122a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80122a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80122ac:	b25b      	sxtb	r3, r3
 80122ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122b2:	d103      	bne.n	80122bc <xQueueSemaphoreTake+0x160>
 80122b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b6:	2200      	movs	r2, #0
 80122b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80122bc:	f001 fbca 	bl	8013a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80122c0:	463a      	mov	r2, r7
 80122c2:	f107 030c 	add.w	r3, r7, #12
 80122c6:	4611      	mov	r1, r2
 80122c8:	4618      	mov	r0, r3
 80122ca:	f000 fef3 	bl	80130b4 <xTaskCheckForTimeOut>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d132      	bne.n	801233a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80122d6:	f000 f9d5 	bl	8012684 <prvIsQueueEmpty>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d026      	beq.n	801232e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80122e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d109      	bne.n	80122fc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80122e8:	f001 fb80 	bl	80139ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80122ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	4618      	mov	r0, r3
 80122f2:	f001 f849 	bl	8013388 <xTaskPriorityInherit>
 80122f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80122f8:	f001 fbac 	bl	8013a54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	3324      	adds	r3, #36	; 0x24
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	4611      	mov	r1, r2
 8012304:	4618      	mov	r0, r3
 8012306:	f000 fe35 	bl	8012f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801230a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801230c:	f000 f968 	bl	80125e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012310:	f000 fc34 	bl	8012b7c <xTaskResumeAll>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	f47f af66 	bne.w	80121e8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 801231c:	4b18      	ldr	r3, [pc, #96]	; (8012380 <xQueueSemaphoreTake+0x224>)
 801231e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012322:	601a      	str	r2, [r3, #0]
 8012324:	f3bf 8f4f 	dsb	sy
 8012328:	f3bf 8f6f 	isb	sy
 801232c:	e75c      	b.n	80121e8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801232e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012330:	f000 f956 	bl	80125e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012334:	f000 fc22 	bl	8012b7c <xTaskResumeAll>
 8012338:	e756      	b.n	80121e8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801233a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801233c:	f000 f950 	bl	80125e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012340:	f000 fc1c 	bl	8012b7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012346:	f000 f99d 	bl	8012684 <prvIsQueueEmpty>
 801234a:	4603      	mov	r3, r0
 801234c:	2b00      	cmp	r3, #0
 801234e:	f43f af4b 	beq.w	80121e8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00d      	beq.n	8012374 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8012358:	f001 fb48 	bl	80139ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801235c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801235e:	f000 f897 	bl	8012490 <prvGetDisinheritPriorityAfterTimeout>
 8012362:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012366:	689b      	ldr	r3, [r3, #8]
 8012368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801236a:	4618      	mov	r0, r3
 801236c:	f001 f916 	bl	801359c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012370:	f001 fb70 	bl	8013a54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012376:	4618      	mov	r0, r3
 8012378:	3738      	adds	r7, #56	; 0x38
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	e000ed04 	.word	0xe000ed04

08012384 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b08e      	sub	sp, #56	; 0x38
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012396:	2b00      	cmp	r3, #0
 8012398:	d10c      	bne.n	80123b4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801239e:	b672      	cpsid	i
 80123a0:	f383 8811 	msr	BASEPRI, r3
 80123a4:	f3bf 8f6f 	isb	sy
 80123a8:	f3bf 8f4f 	dsb	sy
 80123ac:	b662      	cpsie	i
 80123ae:	623b      	str	r3, [r7, #32]
}
 80123b0:	bf00      	nop
 80123b2:	e7fe      	b.n	80123b2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d103      	bne.n	80123c2 <xQueueReceiveFromISR+0x3e>
 80123ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d101      	bne.n	80123c6 <xQueueReceiveFromISR+0x42>
 80123c2:	2301      	movs	r3, #1
 80123c4:	e000      	b.n	80123c8 <xQueueReceiveFromISR+0x44>
 80123c6:	2300      	movs	r3, #0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d10c      	bne.n	80123e6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80123cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d0:	b672      	cpsid	i
 80123d2:	f383 8811 	msr	BASEPRI, r3
 80123d6:	f3bf 8f6f 	isb	sy
 80123da:	f3bf 8f4f 	dsb	sy
 80123de:	b662      	cpsie	i
 80123e0:	61fb      	str	r3, [r7, #28]
}
 80123e2:	bf00      	nop
 80123e4:	e7fe      	b.n	80123e4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80123e6:	f001 fbe9 	bl	8013bbc <vPortValidateInterruptPriority>
	__asm volatile
 80123ea:	f3ef 8211 	mrs	r2, BASEPRI
 80123ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f2:	b672      	cpsid	i
 80123f4:	f383 8811 	msr	BASEPRI, r3
 80123f8:	f3bf 8f6f 	isb	sy
 80123fc:	f3bf 8f4f 	dsb	sy
 8012400:	b662      	cpsie	i
 8012402:	61ba      	str	r2, [r7, #24]
 8012404:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012406:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012408:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801240e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012412:	2b00      	cmp	r3, #0
 8012414:	d02f      	beq.n	8012476 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801241c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012420:	68b9      	ldr	r1, [r7, #8]
 8012422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012424:	f000 f8b6 	bl	8012594 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242a:	1e5a      	subs	r2, r3, #1
 801242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012430:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012438:	d112      	bne.n	8012460 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	691b      	ldr	r3, [r3, #16]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d016      	beq.n	8012470 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012444:	3310      	adds	r3, #16
 8012446:	4618      	mov	r0, r3
 8012448:	f000 fdba 	bl	8012fc0 <xTaskRemoveFromEventList>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00e      	beq.n	8012470 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00b      	beq.n	8012470 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2201      	movs	r2, #1
 801245c:	601a      	str	r2, [r3, #0]
 801245e:	e007      	b.n	8012470 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012464:	3301      	adds	r3, #1
 8012466:	b2db      	uxtb	r3, r3
 8012468:	b25a      	sxtb	r2, r3
 801246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012470:	2301      	movs	r3, #1
 8012472:	637b      	str	r3, [r7, #52]	; 0x34
 8012474:	e001      	b.n	801247a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8012476:	2300      	movs	r3, #0
 8012478:	637b      	str	r3, [r7, #52]	; 0x34
 801247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	f383 8811 	msr	BASEPRI, r3
}
 8012484:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012488:	4618      	mov	r0, r3
 801248a:	3738      	adds	r7, #56	; 0x38
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012490:	b480      	push	{r7}
 8012492:	b085      	sub	sp, #20
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801249c:	2b00      	cmp	r3, #0
 801249e:	d006      	beq.n	80124ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f1c3 0307 	rsb	r3, r3, #7
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	e001      	b.n	80124b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80124ae:	2300      	movs	r3, #0
 80124b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80124b2:	68fb      	ldr	r3, [r7, #12]
	}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3714      	adds	r7, #20
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr

080124c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b086      	sub	sp, #24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	60b9      	str	r1, [r7, #8]
 80124ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80124cc:	2300      	movs	r3, #0
 80124ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d10d      	bne.n	80124fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d14d      	bne.n	8012582 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f000 ffcc 	bl	8013488 <xTaskPriorityDisinherit>
 80124f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2200      	movs	r2, #0
 80124f6:	609a      	str	r2, [r3, #8]
 80124f8:	e043      	b.n	8012582 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d119      	bne.n	8012534 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	6858      	ldr	r0, [r3, #4]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012508:	461a      	mov	r2, r3
 801250a:	68b9      	ldr	r1, [r7, #8]
 801250c:	f012 ff5c 	bl	80253c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	685a      	ldr	r2, [r3, #4]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012518:	441a      	add	r2, r3
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	685a      	ldr	r2, [r3, #4]
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	689b      	ldr	r3, [r3, #8]
 8012526:	429a      	cmp	r2, r3
 8012528:	d32b      	bcc.n	8012582 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	605a      	str	r2, [r3, #4]
 8012532:	e026      	b.n	8012582 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	68d8      	ldr	r0, [r3, #12]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801253c:	461a      	mov	r2, r3
 801253e:	68b9      	ldr	r1, [r7, #8]
 8012540:	f012 ff42 	bl	80253c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	68da      	ldr	r2, [r3, #12]
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801254c:	425b      	negs	r3, r3
 801254e:	441a      	add	r2, r3
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	68da      	ldr	r2, [r3, #12]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	429a      	cmp	r2, r3
 801255e:	d207      	bcs.n	8012570 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	689a      	ldr	r2, [r3, #8]
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012568:	425b      	negs	r3, r3
 801256a:	441a      	add	r2, r3
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b02      	cmp	r3, #2
 8012574:	d105      	bne.n	8012582 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d002      	beq.n	8012582 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	3b01      	subs	r3, #1
 8012580:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	1c5a      	adds	r2, r3, #1
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801258a:	697b      	ldr	r3, [r7, #20]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d018      	beq.n	80125d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	68da      	ldr	r2, [r3, #12]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ae:	441a      	add	r2, r3
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	68da      	ldr	r2, [r3, #12]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d303      	bcc.n	80125c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	68d9      	ldr	r1, [r3, #12]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125d0:	461a      	mov	r2, r3
 80125d2:	6838      	ldr	r0, [r7, #0]
 80125d4:	f012 fef8 	bl	80253c8 <memcpy>
	}
}
 80125d8:	bf00      	nop
 80125da:	3708      	adds	r7, #8
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80125e8:	f001 fa00 	bl	80139ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80125f4:	e011      	b.n	801261a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d012      	beq.n	8012624 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	3324      	adds	r3, #36	; 0x24
 8012602:	4618      	mov	r0, r3
 8012604:	f000 fcdc 	bl	8012fc0 <xTaskRemoveFromEventList>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d001      	beq.n	8012612 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801260e:	f000 fdb7 	bl	8013180 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012612:	7bfb      	ldrb	r3, [r7, #15]
 8012614:	3b01      	subs	r3, #1
 8012616:	b2db      	uxtb	r3, r3
 8012618:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801261e:	2b00      	cmp	r3, #0
 8012620:	dce9      	bgt.n	80125f6 <prvUnlockQueue+0x16>
 8012622:	e000      	b.n	8012626 <prvUnlockQueue+0x46>
					break;
 8012624:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	22ff      	movs	r2, #255	; 0xff
 801262a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801262e:	f001 fa11 	bl	8013a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012632:	f001 f9db 	bl	80139ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801263c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801263e:	e011      	b.n	8012664 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d012      	beq.n	801266e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	3310      	adds	r3, #16
 801264c:	4618      	mov	r0, r3
 801264e:	f000 fcb7 	bl	8012fc0 <xTaskRemoveFromEventList>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d001      	beq.n	801265c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012658:	f000 fd92 	bl	8013180 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801265c:	7bbb      	ldrb	r3, [r7, #14]
 801265e:	3b01      	subs	r3, #1
 8012660:	b2db      	uxtb	r3, r3
 8012662:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012668:	2b00      	cmp	r3, #0
 801266a:	dce9      	bgt.n	8012640 <prvUnlockQueue+0x60>
 801266c:	e000      	b.n	8012670 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801266e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	22ff      	movs	r2, #255	; 0xff
 8012674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012678:	f001 f9ec 	bl	8013a54 <vPortExitCritical>
}
 801267c:	bf00      	nop
 801267e:	3710      	adds	r7, #16
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801268c:	f001 f9ae 	bl	80139ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012694:	2b00      	cmp	r3, #0
 8012696:	d102      	bne.n	801269e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012698:	2301      	movs	r3, #1
 801269a:	60fb      	str	r3, [r7, #12]
 801269c:	e001      	b.n	80126a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801269e:	2300      	movs	r3, #0
 80126a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80126a2:	f001 f9d7 	bl	8013a54 <vPortExitCritical>

	return xReturn;
 80126a6:	68fb      	ldr	r3, [r7, #12]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3710      	adds	r7, #16
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80126b8:	f001 f998 	bl	80139ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d102      	bne.n	80126ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80126c8:	2301      	movs	r3, #1
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	e001      	b.n	80126d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80126ce:	2300      	movs	r3, #0
 80126d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80126d2:	f001 f9bf 	bl	8013a54 <vPortExitCritical>

	return xReturn;
 80126d6:	68fb      	ldr	r3, [r7, #12]
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3710      	adds	r7, #16
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b08e      	sub	sp, #56	; 0x38
 80126e4:	af04      	add	r7, sp, #16
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
 80126ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80126ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d10c      	bne.n	801270e <xTaskCreateStatic+0x2e>
	__asm volatile
 80126f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f8:	b672      	cpsid	i
 80126fa:	f383 8811 	msr	BASEPRI, r3
 80126fe:	f3bf 8f6f 	isb	sy
 8012702:	f3bf 8f4f 	dsb	sy
 8012706:	b662      	cpsie	i
 8012708:	623b      	str	r3, [r7, #32]
}
 801270a:	bf00      	nop
 801270c:	e7fe      	b.n	801270c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012710:	2b00      	cmp	r3, #0
 8012712:	d10c      	bne.n	801272e <xTaskCreateStatic+0x4e>
	__asm volatile
 8012714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012718:	b672      	cpsid	i
 801271a:	f383 8811 	msr	BASEPRI, r3
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	b662      	cpsie	i
 8012728:	61fb      	str	r3, [r7, #28]
}
 801272a:	bf00      	nop
 801272c:	e7fe      	b.n	801272c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801272e:	2358      	movs	r3, #88	; 0x58
 8012730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	2b58      	cmp	r3, #88	; 0x58
 8012736:	d00c      	beq.n	8012752 <xTaskCreateStatic+0x72>
	__asm volatile
 8012738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273c:	b672      	cpsid	i
 801273e:	f383 8811 	msr	BASEPRI, r3
 8012742:	f3bf 8f6f 	isb	sy
 8012746:	f3bf 8f4f 	dsb	sy
 801274a:	b662      	cpsie	i
 801274c:	61bb      	str	r3, [r7, #24]
}
 801274e:	bf00      	nop
 8012750:	e7fe      	b.n	8012750 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012752:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012756:	2b00      	cmp	r3, #0
 8012758:	d01e      	beq.n	8012798 <xTaskCreateStatic+0xb8>
 801275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801275c:	2b00      	cmp	r3, #0
 801275e:	d01b      	beq.n	8012798 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012762:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012768:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276c:	2202      	movs	r2, #2
 801276e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012772:	2300      	movs	r3, #0
 8012774:	9303      	str	r3, [sp, #12]
 8012776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012778:	9302      	str	r3, [sp, #8]
 801277a:	f107 0314 	add.w	r3, r7, #20
 801277e:	9301      	str	r3, [sp, #4]
 8012780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	68b9      	ldr	r1, [r7, #8]
 801278a:	68f8      	ldr	r0, [r7, #12]
 801278c:	f000 f850 	bl	8012830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012792:	f000 f8e1 	bl	8012958 <prvAddNewTaskToReadyList>
 8012796:	e001      	b.n	801279c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012798:	2300      	movs	r3, #0
 801279a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801279c:	697b      	ldr	r3, [r7, #20]
	}
 801279e:	4618      	mov	r0, r3
 80127a0:	3728      	adds	r7, #40	; 0x28
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b08c      	sub	sp, #48	; 0x30
 80127aa:	af04      	add	r7, sp, #16
 80127ac:	60f8      	str	r0, [r7, #12]
 80127ae:	60b9      	str	r1, [r7, #8]
 80127b0:	603b      	str	r3, [r7, #0]
 80127b2:	4613      	mov	r3, r2
 80127b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80127b6:	88fb      	ldrh	r3, [r7, #6]
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	4618      	mov	r0, r3
 80127bc:	f001 fa42 	bl	8013c44 <pvPortMalloc>
 80127c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d00e      	beq.n	80127e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80127c8:	2058      	movs	r0, #88	; 0x58
 80127ca:	f001 fa3b 	bl	8013c44 <pvPortMalloc>
 80127ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d003      	beq.n	80127de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80127d6:	69fb      	ldr	r3, [r7, #28]
 80127d8:	697a      	ldr	r2, [r7, #20]
 80127da:	631a      	str	r2, [r3, #48]	; 0x30
 80127dc:	e005      	b.n	80127ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80127de:	6978      	ldr	r0, [r7, #20]
 80127e0:	f001 fb00 	bl	8013de4 <vPortFree>
 80127e4:	e001      	b.n	80127ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80127e6:	2300      	movs	r3, #0
 80127e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d017      	beq.n	8012820 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	2200      	movs	r2, #0
 80127f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80127f8:	88fa      	ldrh	r2, [r7, #6]
 80127fa:	2300      	movs	r3, #0
 80127fc:	9303      	str	r3, [sp, #12]
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	9302      	str	r3, [sp, #8]
 8012802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012804:	9301      	str	r3, [sp, #4]
 8012806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012808:	9300      	str	r3, [sp, #0]
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	68b9      	ldr	r1, [r7, #8]
 801280e:	68f8      	ldr	r0, [r7, #12]
 8012810:	f000 f80e 	bl	8012830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012814:	69f8      	ldr	r0, [r7, #28]
 8012816:	f000 f89f 	bl	8012958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801281a:	2301      	movs	r3, #1
 801281c:	61bb      	str	r3, [r7, #24]
 801281e:	e002      	b.n	8012826 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012820:	f04f 33ff 	mov.w	r3, #4294967295
 8012824:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012826:	69bb      	ldr	r3, [r7, #24]
	}
 8012828:	4618      	mov	r0, r3
 801282a:	3720      	adds	r7, #32
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b088      	sub	sp, #32
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
 801283c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012840:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	461a      	mov	r2, r3
 8012848:	21a5      	movs	r1, #165	; 0xa5
 801284a:	f012 fdcb 	bl	80253e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012852:	6879      	ldr	r1, [r7, #4]
 8012854:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012858:	440b      	add	r3, r1
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	4413      	add	r3, r2
 801285e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012860:	69bb      	ldr	r3, [r7, #24]
 8012862:	f023 0307 	bic.w	r3, r3, #7
 8012866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	f003 0307 	and.w	r3, r3, #7
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00c      	beq.n	801288c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8012872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012876:	b672      	cpsid	i
 8012878:	f383 8811 	msr	BASEPRI, r3
 801287c:	f3bf 8f6f 	isb	sy
 8012880:	f3bf 8f4f 	dsb	sy
 8012884:	b662      	cpsie	i
 8012886:	617b      	str	r3, [r7, #20]
}
 8012888:	bf00      	nop
 801288a:	e7fe      	b.n	801288a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d01f      	beq.n	80128d2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012892:	2300      	movs	r3, #0
 8012894:	61fb      	str	r3, [r7, #28]
 8012896:	e012      	b.n	80128be <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012898:	68ba      	ldr	r2, [r7, #8]
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	4413      	add	r3, r2
 801289e:	7819      	ldrb	r1, [r3, #0]
 80128a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	4413      	add	r3, r2
 80128a6:	3334      	adds	r3, #52	; 0x34
 80128a8:	460a      	mov	r2, r1
 80128aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80128ac:	68ba      	ldr	r2, [r7, #8]
 80128ae:	69fb      	ldr	r3, [r7, #28]
 80128b0:	4413      	add	r3, r2
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d006      	beq.n	80128c6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	3301      	adds	r3, #1
 80128bc:	61fb      	str	r3, [r7, #28]
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	2b0f      	cmp	r3, #15
 80128c2:	d9e9      	bls.n	8012898 <prvInitialiseNewTask+0x68>
 80128c4:	e000      	b.n	80128c8 <prvInitialiseNewTask+0x98>
			{
				break;
 80128c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80128c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ca:	2200      	movs	r2, #0
 80128cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80128d0:	e003      	b.n	80128da <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80128d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d4:	2200      	movs	r2, #0
 80128d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80128da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128dc:	2b06      	cmp	r3, #6
 80128de:	d901      	bls.n	80128e4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80128e0:	2306      	movs	r3, #6
 80128e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80128e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80128ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80128f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f2:	2200      	movs	r2, #0
 80128f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	3304      	adds	r3, #4
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe feb8 	bl	8011670 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012902:	3318      	adds	r3, #24
 8012904:	4618      	mov	r0, r3
 8012906:	f7fe feb3 	bl	8011670 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801290e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012912:	f1c3 0207 	rsb	r2, r3, #7
 8012916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012918:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801291e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012922:	2200      	movs	r2, #0
 8012924:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012928:	2200      	movs	r2, #0
 801292a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292e:	2200      	movs	r2, #0
 8012930:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012934:	683a      	ldr	r2, [r7, #0]
 8012936:	68f9      	ldr	r1, [r7, #12]
 8012938:	69b8      	ldr	r0, [r7, #24]
 801293a:	f000 ff47 	bl	80137cc <pxPortInitialiseStack>
 801293e:	4602      	mov	r2, r0
 8012940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012942:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012946:	2b00      	cmp	r3, #0
 8012948:	d002      	beq.n	8012950 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801294e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012950:	bf00      	nop
 8012952:	3720      	adds	r7, #32
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012960:	f001 f844 	bl	80139ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012964:	4b2a      	ldr	r3, [pc, #168]	; (8012a10 <prvAddNewTaskToReadyList+0xb8>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	3301      	adds	r3, #1
 801296a:	4a29      	ldr	r2, [pc, #164]	; (8012a10 <prvAddNewTaskToReadyList+0xb8>)
 801296c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801296e:	4b29      	ldr	r3, [pc, #164]	; (8012a14 <prvAddNewTaskToReadyList+0xbc>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d109      	bne.n	801298a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012976:	4a27      	ldr	r2, [pc, #156]	; (8012a14 <prvAddNewTaskToReadyList+0xbc>)
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801297c:	4b24      	ldr	r3, [pc, #144]	; (8012a10 <prvAddNewTaskToReadyList+0xb8>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d110      	bne.n	80129a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012984:	f000 fc22 	bl	80131cc <prvInitialiseTaskLists>
 8012988:	e00d      	b.n	80129a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801298a:	4b23      	ldr	r3, [pc, #140]	; (8012a18 <prvAddNewTaskToReadyList+0xc0>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d109      	bne.n	80129a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012992:	4b20      	ldr	r3, [pc, #128]	; (8012a14 <prvAddNewTaskToReadyList+0xbc>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801299c:	429a      	cmp	r2, r3
 801299e:	d802      	bhi.n	80129a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80129a0:	4a1c      	ldr	r2, [pc, #112]	; (8012a14 <prvAddNewTaskToReadyList+0xbc>)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80129a6:	4b1d      	ldr	r3, [pc, #116]	; (8012a1c <prvAddNewTaskToReadyList+0xc4>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	3301      	adds	r3, #1
 80129ac:	4a1b      	ldr	r2, [pc, #108]	; (8012a1c <prvAddNewTaskToReadyList+0xc4>)
 80129ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129b4:	2201      	movs	r2, #1
 80129b6:	409a      	lsls	r2, r3
 80129b8:	4b19      	ldr	r3, [pc, #100]	; (8012a20 <prvAddNewTaskToReadyList+0xc8>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4313      	orrs	r3, r2
 80129be:	4a18      	ldr	r2, [pc, #96]	; (8012a20 <prvAddNewTaskToReadyList+0xc8>)
 80129c0:	6013      	str	r3, [r2, #0]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129c6:	4613      	mov	r3, r2
 80129c8:	009b      	lsls	r3, r3, #2
 80129ca:	4413      	add	r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	4a15      	ldr	r2, [pc, #84]	; (8012a24 <prvAddNewTaskToReadyList+0xcc>)
 80129d0:	441a      	add	r2, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	3304      	adds	r3, #4
 80129d6:	4619      	mov	r1, r3
 80129d8:	4610      	mov	r0, r2
 80129da:	f7fe fe56 	bl	801168a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80129de:	f001 f839 	bl	8013a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80129e2:	4b0d      	ldr	r3, [pc, #52]	; (8012a18 <prvAddNewTaskToReadyList+0xc0>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00e      	beq.n	8012a08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80129ea:	4b0a      	ldr	r3, [pc, #40]	; (8012a14 <prvAddNewTaskToReadyList+0xbc>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d207      	bcs.n	8012a08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80129f8:	4b0b      	ldr	r3, [pc, #44]	; (8012a28 <prvAddNewTaskToReadyList+0xd0>)
 80129fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129fe:	601a      	str	r2, [r3, #0]
 8012a00:	f3bf 8f4f 	dsb	sy
 8012a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a08:	bf00      	nop
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}
 8012a10:	200004c8 	.word	0x200004c8
 8012a14:	200003c8 	.word	0x200003c8
 8012a18:	200004d4 	.word	0x200004d4
 8012a1c:	200004e4 	.word	0x200004e4
 8012a20:	200004d0 	.word	0x200004d0
 8012a24:	200003cc 	.word	0x200003cc
 8012a28:	e000ed04 	.word	0xe000ed04

08012a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012a34:	2300      	movs	r3, #0
 8012a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d019      	beq.n	8012a72 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012a3e:	4b14      	ldr	r3, [pc, #80]	; (8012a90 <vTaskDelay+0x64>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00c      	beq.n	8012a60 <vTaskDelay+0x34>
	__asm volatile
 8012a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4a:	b672      	cpsid	i
 8012a4c:	f383 8811 	msr	BASEPRI, r3
 8012a50:	f3bf 8f6f 	isb	sy
 8012a54:	f3bf 8f4f 	dsb	sy
 8012a58:	b662      	cpsie	i
 8012a5a:	60bb      	str	r3, [r7, #8]
}
 8012a5c:	bf00      	nop
 8012a5e:	e7fe      	b.n	8012a5e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012a60:	f000 f87e 	bl	8012b60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012a64:	2100      	movs	r1, #0
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 fe4a 	bl	8013700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012a6c:	f000 f886 	bl	8012b7c <xTaskResumeAll>
 8012a70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d107      	bne.n	8012a88 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012a78:	4b06      	ldr	r3, [pc, #24]	; (8012a94 <vTaskDelay+0x68>)
 8012a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a7e:	601a      	str	r2, [r3, #0]
 8012a80:	f3bf 8f4f 	dsb	sy
 8012a84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a88:	bf00      	nop
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	200004f0 	.word	0x200004f0
 8012a94:	e000ed04 	.word	0xe000ed04

08012a98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b08a      	sub	sp, #40	; 0x28
 8012a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012aa6:	463a      	mov	r2, r7
 8012aa8:	1d39      	adds	r1, r7, #4
 8012aaa:	f107 0308 	add.w	r3, r7, #8
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7ee f9f2 	bl	8000e98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012ab4:	6839      	ldr	r1, [r7, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	68ba      	ldr	r2, [r7, #8]
 8012aba:	9202      	str	r2, [sp, #8]
 8012abc:	9301      	str	r3, [sp, #4]
 8012abe:	2300      	movs	r3, #0
 8012ac0:	9300      	str	r3, [sp, #0]
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	460a      	mov	r2, r1
 8012ac6:	4920      	ldr	r1, [pc, #128]	; (8012b48 <vTaskStartScheduler+0xb0>)
 8012ac8:	4820      	ldr	r0, [pc, #128]	; (8012b4c <vTaskStartScheduler+0xb4>)
 8012aca:	f7ff fe09 	bl	80126e0 <xTaskCreateStatic>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	4a1f      	ldr	r2, [pc, #124]	; (8012b50 <vTaskStartScheduler+0xb8>)
 8012ad2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012ad4:	4b1e      	ldr	r3, [pc, #120]	; (8012b50 <vTaskStartScheduler+0xb8>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012adc:	2301      	movs	r3, #1
 8012ade:	617b      	str	r3, [r7, #20]
 8012ae0:	e001      	b.n	8012ae6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d118      	bne.n	8012b1e <vTaskStartScheduler+0x86>
	__asm volatile
 8012aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af0:	b672      	cpsid	i
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	b662      	cpsie	i
 8012b00:	613b      	str	r3, [r7, #16]
}
 8012b02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012b04:	4b13      	ldr	r3, [pc, #76]	; (8012b54 <vTaskStartScheduler+0xbc>)
 8012b06:	f04f 32ff 	mov.w	r2, #4294967295
 8012b0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012b0c:	4b12      	ldr	r3, [pc, #72]	; (8012b58 <vTaskStartScheduler+0xc0>)
 8012b0e:	2201      	movs	r2, #1
 8012b10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012b12:	4b12      	ldr	r3, [pc, #72]	; (8012b5c <vTaskStartScheduler+0xc4>)
 8012b14:	2200      	movs	r2, #0
 8012b16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012b18:	f000 feea 	bl	80138f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012b1c:	e010      	b.n	8012b40 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b24:	d10c      	bne.n	8012b40 <vTaskStartScheduler+0xa8>
	__asm volatile
 8012b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b2a:	b672      	cpsid	i
 8012b2c:	f383 8811 	msr	BASEPRI, r3
 8012b30:	f3bf 8f6f 	isb	sy
 8012b34:	f3bf 8f4f 	dsb	sy
 8012b38:	b662      	cpsie	i
 8012b3a:	60fb      	str	r3, [r7, #12]
}
 8012b3c:	bf00      	nop
 8012b3e:	e7fe      	b.n	8012b3e <vTaskStartScheduler+0xa6>
}
 8012b40:	bf00      	nop
 8012b42:	3718      	adds	r7, #24
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	0802644c 	.word	0x0802644c
 8012b4c:	08013199 	.word	0x08013199
 8012b50:	200004ec 	.word	0x200004ec
 8012b54:	200004e8 	.word	0x200004e8
 8012b58:	200004d4 	.word	0x200004d4
 8012b5c:	200004cc 	.word	0x200004cc

08012b60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012b60:	b480      	push	{r7}
 8012b62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012b64:	4b04      	ldr	r3, [pc, #16]	; (8012b78 <vTaskSuspendAll+0x18>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	3301      	adds	r3, #1
 8012b6a:	4a03      	ldr	r2, [pc, #12]	; (8012b78 <vTaskSuspendAll+0x18>)
 8012b6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012b6e:	bf00      	nop
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr
 8012b78:	200004f0 	.word	0x200004f0

08012b7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b084      	sub	sp, #16
 8012b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012b82:	2300      	movs	r3, #0
 8012b84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012b86:	2300      	movs	r3, #0
 8012b88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012b8a:	4b42      	ldr	r3, [pc, #264]	; (8012c94 <xTaskResumeAll+0x118>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d10c      	bne.n	8012bac <xTaskResumeAll+0x30>
	__asm volatile
 8012b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b96:	b672      	cpsid	i
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	b662      	cpsie	i
 8012ba6:	603b      	str	r3, [r7, #0]
}
 8012ba8:	bf00      	nop
 8012baa:	e7fe      	b.n	8012baa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012bac:	f000 ff1e 	bl	80139ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012bb0:	4b38      	ldr	r3, [pc, #224]	; (8012c94 <xTaskResumeAll+0x118>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	3b01      	subs	r3, #1
 8012bb6:	4a37      	ldr	r2, [pc, #220]	; (8012c94 <xTaskResumeAll+0x118>)
 8012bb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bba:	4b36      	ldr	r3, [pc, #216]	; (8012c94 <xTaskResumeAll+0x118>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d161      	bne.n	8012c86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012bc2:	4b35      	ldr	r3, [pc, #212]	; (8012c98 <xTaskResumeAll+0x11c>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d05d      	beq.n	8012c86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012bca:	e02e      	b.n	8012c2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bcc:	4b33      	ldr	r3, [pc, #204]	; (8012c9c <xTaskResumeAll+0x120>)
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	68db      	ldr	r3, [r3, #12]
 8012bd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	3318      	adds	r3, #24
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe fdb3 	bl	8011744 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	3304      	adds	r3, #4
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fe fdae 	bl	8011744 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bec:	2201      	movs	r2, #1
 8012bee:	409a      	lsls	r2, r3
 8012bf0:	4b2b      	ldr	r3, [pc, #172]	; (8012ca0 <xTaskResumeAll+0x124>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	4313      	orrs	r3, r2
 8012bf6:	4a2a      	ldr	r2, [pc, #168]	; (8012ca0 <xTaskResumeAll+0x124>)
 8012bf8:	6013      	str	r3, [r2, #0]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bfe:	4613      	mov	r3, r2
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	4413      	add	r3, r2
 8012c04:	009b      	lsls	r3, r3, #2
 8012c06:	4a27      	ldr	r2, [pc, #156]	; (8012ca4 <xTaskResumeAll+0x128>)
 8012c08:	441a      	add	r2, r3
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	3304      	adds	r3, #4
 8012c0e:	4619      	mov	r1, r3
 8012c10:	4610      	mov	r0, r2
 8012c12:	f7fe fd3a 	bl	801168a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c1a:	4b23      	ldr	r3, [pc, #140]	; (8012ca8 <xTaskResumeAll+0x12c>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d302      	bcc.n	8012c2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012c24:	4b21      	ldr	r3, [pc, #132]	; (8012cac <xTaskResumeAll+0x130>)
 8012c26:	2201      	movs	r2, #1
 8012c28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012c2a:	4b1c      	ldr	r3, [pc, #112]	; (8012c9c <xTaskResumeAll+0x120>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d1cc      	bne.n	8012bcc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d001      	beq.n	8012c3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012c38:	f000 fb68 	bl	801330c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012c3c:	4b1c      	ldr	r3, [pc, #112]	; (8012cb0 <xTaskResumeAll+0x134>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d010      	beq.n	8012c6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012c48:	f000 f858 	bl	8012cfc <xTaskIncrementTick>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d002      	beq.n	8012c58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012c52:	4b16      	ldr	r3, [pc, #88]	; (8012cac <xTaskResumeAll+0x130>)
 8012c54:	2201      	movs	r2, #1
 8012c56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d1f1      	bne.n	8012c48 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8012c64:	4b12      	ldr	r3, [pc, #72]	; (8012cb0 <xTaskResumeAll+0x134>)
 8012c66:	2200      	movs	r2, #0
 8012c68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012c6a:	4b10      	ldr	r3, [pc, #64]	; (8012cac <xTaskResumeAll+0x130>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d009      	beq.n	8012c86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012c72:	2301      	movs	r3, #1
 8012c74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012c76:	4b0f      	ldr	r3, [pc, #60]	; (8012cb4 <xTaskResumeAll+0x138>)
 8012c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	f3bf 8f4f 	dsb	sy
 8012c82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012c86:	f000 fee5 	bl	8013a54 <vPortExitCritical>

	return xAlreadyYielded;
 8012c8a:	68bb      	ldr	r3, [r7, #8]
}
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3710      	adds	r7, #16
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	200004f0 	.word	0x200004f0
 8012c98:	200004c8 	.word	0x200004c8
 8012c9c:	20000488 	.word	0x20000488
 8012ca0:	200004d0 	.word	0x200004d0
 8012ca4:	200003cc 	.word	0x200003cc
 8012ca8:	200003c8 	.word	0x200003c8
 8012cac:	200004dc 	.word	0x200004dc
 8012cb0:	200004d8 	.word	0x200004d8
 8012cb4:	e000ed04 	.word	0xe000ed04

08012cb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b083      	sub	sp, #12
 8012cbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012cbe:	4b05      	ldr	r3, [pc, #20]	; (8012cd4 <xTaskGetTickCount+0x1c>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012cc4:	687b      	ldr	r3, [r7, #4]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	200004cc 	.word	0x200004cc

08012cd8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cde:	f000 ff6d 	bl	8013bbc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012ce6:	4b04      	ldr	r3, [pc, #16]	; (8012cf8 <xTaskGetTickCountFromISR+0x20>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012cec:	683b      	ldr	r3, [r7, #0]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3708      	adds	r7, #8
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	200004cc 	.word	0x200004cc

08012cfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b086      	sub	sp, #24
 8012d00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012d02:	2300      	movs	r3, #0
 8012d04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d06:	4b4f      	ldr	r3, [pc, #316]	; (8012e44 <xTaskIncrementTick+0x148>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	f040 808a 	bne.w	8012e24 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012d10:	4b4d      	ldr	r3, [pc, #308]	; (8012e48 <xTaskIncrementTick+0x14c>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	3301      	adds	r3, #1
 8012d16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012d18:	4a4b      	ldr	r2, [pc, #300]	; (8012e48 <xTaskIncrementTick+0x14c>)
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d122      	bne.n	8012d6a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8012d24:	4b49      	ldr	r3, [pc, #292]	; (8012e4c <xTaskIncrementTick+0x150>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d00c      	beq.n	8012d48 <xTaskIncrementTick+0x4c>
	__asm volatile
 8012d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d32:	b672      	cpsid	i
 8012d34:	f383 8811 	msr	BASEPRI, r3
 8012d38:	f3bf 8f6f 	isb	sy
 8012d3c:	f3bf 8f4f 	dsb	sy
 8012d40:	b662      	cpsie	i
 8012d42:	603b      	str	r3, [r7, #0]
}
 8012d44:	bf00      	nop
 8012d46:	e7fe      	b.n	8012d46 <xTaskIncrementTick+0x4a>
 8012d48:	4b40      	ldr	r3, [pc, #256]	; (8012e4c <xTaskIncrementTick+0x150>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	60fb      	str	r3, [r7, #12]
 8012d4e:	4b40      	ldr	r3, [pc, #256]	; (8012e50 <xTaskIncrementTick+0x154>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	4a3e      	ldr	r2, [pc, #248]	; (8012e4c <xTaskIncrementTick+0x150>)
 8012d54:	6013      	str	r3, [r2, #0]
 8012d56:	4a3e      	ldr	r2, [pc, #248]	; (8012e50 <xTaskIncrementTick+0x154>)
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	6013      	str	r3, [r2, #0]
 8012d5c:	4b3d      	ldr	r3, [pc, #244]	; (8012e54 <xTaskIncrementTick+0x158>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	3301      	adds	r3, #1
 8012d62:	4a3c      	ldr	r2, [pc, #240]	; (8012e54 <xTaskIncrementTick+0x158>)
 8012d64:	6013      	str	r3, [r2, #0]
 8012d66:	f000 fad1 	bl	801330c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012d6a:	4b3b      	ldr	r3, [pc, #236]	; (8012e58 <xTaskIncrementTick+0x15c>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	693a      	ldr	r2, [r7, #16]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d348      	bcc.n	8012e06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d74:	4b35      	ldr	r3, [pc, #212]	; (8012e4c <xTaskIncrementTick+0x150>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d104      	bne.n	8012d88 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d7e:	4b36      	ldr	r3, [pc, #216]	; (8012e58 <xTaskIncrementTick+0x15c>)
 8012d80:	f04f 32ff 	mov.w	r2, #4294967295
 8012d84:	601a      	str	r2, [r3, #0]
					break;
 8012d86:	e03e      	b.n	8012e06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d88:	4b30      	ldr	r3, [pc, #192]	; (8012e4c <xTaskIncrementTick+0x150>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012d98:	693a      	ldr	r2, [r7, #16]
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d203      	bcs.n	8012da8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012da0:	4a2d      	ldr	r2, [pc, #180]	; (8012e58 <xTaskIncrementTick+0x15c>)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012da6:	e02e      	b.n	8012e06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	3304      	adds	r3, #4
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7fe fcc9 	bl	8011744 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012db2:	68bb      	ldr	r3, [r7, #8]
 8012db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d004      	beq.n	8012dc4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	3318      	adds	r3, #24
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fe fcc0 	bl	8011744 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc8:	2201      	movs	r2, #1
 8012dca:	409a      	lsls	r2, r3
 8012dcc:	4b23      	ldr	r3, [pc, #140]	; (8012e5c <xTaskIncrementTick+0x160>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	4313      	orrs	r3, r2
 8012dd2:	4a22      	ldr	r2, [pc, #136]	; (8012e5c <xTaskIncrementTick+0x160>)
 8012dd4:	6013      	str	r3, [r2, #0]
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dda:	4613      	mov	r3, r2
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	4413      	add	r3, r2
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	4a1f      	ldr	r2, [pc, #124]	; (8012e60 <xTaskIncrementTick+0x164>)
 8012de4:	441a      	add	r2, r3
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	3304      	adds	r3, #4
 8012dea:	4619      	mov	r1, r3
 8012dec:	4610      	mov	r0, r2
 8012dee:	f7fe fc4c 	bl	801168a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012df6:	4b1b      	ldr	r3, [pc, #108]	; (8012e64 <xTaskIncrementTick+0x168>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d3b9      	bcc.n	8012d74 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012e00:	2301      	movs	r3, #1
 8012e02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e04:	e7b6      	b.n	8012d74 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012e06:	4b17      	ldr	r3, [pc, #92]	; (8012e64 <xTaskIncrementTick+0x168>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e0c:	4914      	ldr	r1, [pc, #80]	; (8012e60 <xTaskIncrementTick+0x164>)
 8012e0e:	4613      	mov	r3, r2
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	4413      	add	r3, r2
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	440b      	add	r3, r1
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d907      	bls.n	8012e2e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8012e1e:	2301      	movs	r3, #1
 8012e20:	617b      	str	r3, [r7, #20]
 8012e22:	e004      	b.n	8012e2e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012e24:	4b10      	ldr	r3, [pc, #64]	; (8012e68 <xTaskIncrementTick+0x16c>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	3301      	adds	r3, #1
 8012e2a:	4a0f      	ldr	r2, [pc, #60]	; (8012e68 <xTaskIncrementTick+0x16c>)
 8012e2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012e2e:	4b0f      	ldr	r3, [pc, #60]	; (8012e6c <xTaskIncrementTick+0x170>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d001      	beq.n	8012e3a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8012e36:	2301      	movs	r3, #1
 8012e38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012e3a:	697b      	ldr	r3, [r7, #20]
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3718      	adds	r7, #24
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}
 8012e44:	200004f0 	.word	0x200004f0
 8012e48:	200004cc 	.word	0x200004cc
 8012e4c:	20000480 	.word	0x20000480
 8012e50:	20000484 	.word	0x20000484
 8012e54:	200004e0 	.word	0x200004e0
 8012e58:	200004e8 	.word	0x200004e8
 8012e5c:	200004d0 	.word	0x200004d0
 8012e60:	200003cc 	.word	0x200003cc
 8012e64:	200003c8 	.word	0x200003c8
 8012e68:	200004d8 	.word	0x200004d8
 8012e6c:	200004dc 	.word	0x200004dc

08012e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b088      	sub	sp, #32
 8012e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012e76:	4b3a      	ldr	r3, [pc, #232]	; (8012f60 <vTaskSwitchContext+0xf0>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d003      	beq.n	8012e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012e7e:	4b39      	ldr	r3, [pc, #228]	; (8012f64 <vTaskSwitchContext+0xf4>)
 8012e80:	2201      	movs	r2, #1
 8012e82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012e84:	e068      	b.n	8012f58 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8012e86:	4b37      	ldr	r3, [pc, #220]	; (8012f64 <vTaskSwitchContext+0xf4>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012e8c:	4b36      	ldr	r3, [pc, #216]	; (8012f68 <vTaskSwitchContext+0xf8>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e92:	61fb      	str	r3, [r7, #28]
 8012e94:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012e98:	61bb      	str	r3, [r7, #24]
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	69ba      	ldr	r2, [r7, #24]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d111      	bne.n	8012ec8 <vTaskSwitchContext+0x58>
 8012ea4:	69fb      	ldr	r3, [r7, #28]
 8012ea6:	3304      	adds	r3, #4
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	69ba      	ldr	r2, [r7, #24]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d10b      	bne.n	8012ec8 <vTaskSwitchContext+0x58>
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	3308      	adds	r3, #8
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	69ba      	ldr	r2, [r7, #24]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d105      	bne.n	8012ec8 <vTaskSwitchContext+0x58>
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	330c      	adds	r3, #12
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	69ba      	ldr	r2, [r7, #24]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d008      	beq.n	8012eda <vTaskSwitchContext+0x6a>
 8012ec8:	4b27      	ldr	r3, [pc, #156]	; (8012f68 <vTaskSwitchContext+0xf8>)
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	4b26      	ldr	r3, [pc, #152]	; (8012f68 <vTaskSwitchContext+0xf8>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	3334      	adds	r3, #52	; 0x34
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	f7ed ffcc 	bl	8000e72 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012eda:	4b24      	ldr	r3, [pc, #144]	; (8012f6c <vTaskSwitchContext+0xfc>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	fab3 f383 	clz	r3, r3
 8012ee6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012ee8:	7afb      	ldrb	r3, [r7, #11]
 8012eea:	f1c3 031f 	rsb	r3, r3, #31
 8012eee:	617b      	str	r3, [r7, #20]
 8012ef0:	491f      	ldr	r1, [pc, #124]	; (8012f70 <vTaskSwitchContext+0x100>)
 8012ef2:	697a      	ldr	r2, [r7, #20]
 8012ef4:	4613      	mov	r3, r2
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	4413      	add	r3, r2
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	440b      	add	r3, r1
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d10c      	bne.n	8012f1e <vTaskSwitchContext+0xae>
	__asm volatile
 8012f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f08:	b672      	cpsid	i
 8012f0a:	f383 8811 	msr	BASEPRI, r3
 8012f0e:	f3bf 8f6f 	isb	sy
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	b662      	cpsie	i
 8012f18:	607b      	str	r3, [r7, #4]
}
 8012f1a:	bf00      	nop
 8012f1c:	e7fe      	b.n	8012f1c <vTaskSwitchContext+0xac>
 8012f1e:	697a      	ldr	r2, [r7, #20]
 8012f20:	4613      	mov	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4413      	add	r3, r2
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	4a11      	ldr	r2, [pc, #68]	; (8012f70 <vTaskSwitchContext+0x100>)
 8012f2a:	4413      	add	r3, r2
 8012f2c:	613b      	str	r3, [r7, #16]
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	685a      	ldr	r2, [r3, #4]
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	605a      	str	r2, [r3, #4]
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	685a      	ldr	r2, [r3, #4]
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	3308      	adds	r3, #8
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d104      	bne.n	8012f4e <vTaskSwitchContext+0xde>
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	685b      	ldr	r3, [r3, #4]
 8012f48:	685a      	ldr	r2, [r3, #4]
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	605a      	str	r2, [r3, #4]
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	68db      	ldr	r3, [r3, #12]
 8012f54:	4a04      	ldr	r2, [pc, #16]	; (8012f68 <vTaskSwitchContext+0xf8>)
 8012f56:	6013      	str	r3, [r2, #0]
}
 8012f58:	bf00      	nop
 8012f5a:	3720      	adds	r7, #32
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	200004f0 	.word	0x200004f0
 8012f64:	200004dc 	.word	0x200004dc
 8012f68:	200003c8 	.word	0x200003c8
 8012f6c:	200004d0 	.word	0x200004d0
 8012f70:	200003cc 	.word	0x200003cc

08012f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b084      	sub	sp, #16
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d10c      	bne.n	8012f9e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f88:	b672      	cpsid	i
 8012f8a:	f383 8811 	msr	BASEPRI, r3
 8012f8e:	f3bf 8f6f 	isb	sy
 8012f92:	f3bf 8f4f 	dsb	sy
 8012f96:	b662      	cpsie	i
 8012f98:	60fb      	str	r3, [r7, #12]
}
 8012f9a:	bf00      	nop
 8012f9c:	e7fe      	b.n	8012f9c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012f9e:	4b07      	ldr	r3, [pc, #28]	; (8012fbc <vTaskPlaceOnEventList+0x48>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	3318      	adds	r3, #24
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f7fe fb93 	bl	80116d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012fac:	2101      	movs	r1, #1
 8012fae:	6838      	ldr	r0, [r7, #0]
 8012fb0:	f000 fba6 	bl	8013700 <prvAddCurrentTaskToDelayedList>
}
 8012fb4:	bf00      	nop
 8012fb6:	3710      	adds	r7, #16
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	200003c8 	.word	0x200003c8

08012fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d10c      	bne.n	8012ff0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8012fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fda:	b672      	cpsid	i
 8012fdc:	f383 8811 	msr	BASEPRI, r3
 8012fe0:	f3bf 8f6f 	isb	sy
 8012fe4:	f3bf 8f4f 	dsb	sy
 8012fe8:	b662      	cpsie	i
 8012fea:	60fb      	str	r3, [r7, #12]
}
 8012fec:	bf00      	nop
 8012fee:	e7fe      	b.n	8012fee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	3318      	adds	r3, #24
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fe fba5 	bl	8011744 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ffa:	4b1d      	ldr	r3, [pc, #116]	; (8013070 <xTaskRemoveFromEventList+0xb0>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d11c      	bne.n	801303c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	3304      	adds	r3, #4
 8013006:	4618      	mov	r0, r3
 8013008:	f7fe fb9c 	bl	8011744 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013010:	2201      	movs	r2, #1
 8013012:	409a      	lsls	r2, r3
 8013014:	4b17      	ldr	r3, [pc, #92]	; (8013074 <xTaskRemoveFromEventList+0xb4>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4313      	orrs	r3, r2
 801301a:	4a16      	ldr	r2, [pc, #88]	; (8013074 <xTaskRemoveFromEventList+0xb4>)
 801301c:	6013      	str	r3, [r2, #0]
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013022:	4613      	mov	r3, r2
 8013024:	009b      	lsls	r3, r3, #2
 8013026:	4413      	add	r3, r2
 8013028:	009b      	lsls	r3, r3, #2
 801302a:	4a13      	ldr	r2, [pc, #76]	; (8013078 <xTaskRemoveFromEventList+0xb8>)
 801302c:	441a      	add	r2, r3
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	3304      	adds	r3, #4
 8013032:	4619      	mov	r1, r3
 8013034:	4610      	mov	r0, r2
 8013036:	f7fe fb28 	bl	801168a <vListInsertEnd>
 801303a:	e005      	b.n	8013048 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	3318      	adds	r3, #24
 8013040:	4619      	mov	r1, r3
 8013042:	480e      	ldr	r0, [pc, #56]	; (801307c <xTaskRemoveFromEventList+0xbc>)
 8013044:	f7fe fb21 	bl	801168a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801304c:	4b0c      	ldr	r3, [pc, #48]	; (8013080 <xTaskRemoveFromEventList+0xc0>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013052:	429a      	cmp	r2, r3
 8013054:	d905      	bls.n	8013062 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013056:	2301      	movs	r3, #1
 8013058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801305a:	4b0a      	ldr	r3, [pc, #40]	; (8013084 <xTaskRemoveFromEventList+0xc4>)
 801305c:	2201      	movs	r2, #1
 801305e:	601a      	str	r2, [r3, #0]
 8013060:	e001      	b.n	8013066 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013062:	2300      	movs	r3, #0
 8013064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013066:	697b      	ldr	r3, [r7, #20]
}
 8013068:	4618      	mov	r0, r3
 801306a:	3718      	adds	r7, #24
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}
 8013070:	200004f0 	.word	0x200004f0
 8013074:	200004d0 	.word	0x200004d0
 8013078:	200003cc 	.word	0x200003cc
 801307c:	20000488 	.word	0x20000488
 8013080:	200003c8 	.word	0x200003c8
 8013084:	200004dc 	.word	0x200004dc

08013088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013090:	4b06      	ldr	r3, [pc, #24]	; (80130ac <vTaskInternalSetTimeOutState+0x24>)
 8013092:	681a      	ldr	r2, [r3, #0]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013098:	4b05      	ldr	r3, [pc, #20]	; (80130b0 <vTaskInternalSetTimeOutState+0x28>)
 801309a:	681a      	ldr	r2, [r3, #0]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	605a      	str	r2, [r3, #4]
}
 80130a0:	bf00      	nop
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr
 80130ac:	200004e0 	.word	0x200004e0
 80130b0:	200004cc 	.word	0x200004cc

080130b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d10c      	bne.n	80130de <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80130c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c8:	b672      	cpsid	i
 80130ca:	f383 8811 	msr	BASEPRI, r3
 80130ce:	f3bf 8f6f 	isb	sy
 80130d2:	f3bf 8f4f 	dsb	sy
 80130d6:	b662      	cpsie	i
 80130d8:	613b      	str	r3, [r7, #16]
}
 80130da:	bf00      	nop
 80130dc:	e7fe      	b.n	80130dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d10c      	bne.n	80130fe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80130e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e8:	b672      	cpsid	i
 80130ea:	f383 8811 	msr	BASEPRI, r3
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	f3bf 8f4f 	dsb	sy
 80130f6:	b662      	cpsie	i
 80130f8:	60fb      	str	r3, [r7, #12]
}
 80130fa:	bf00      	nop
 80130fc:	e7fe      	b.n	80130fc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80130fe:	f000 fc75 	bl	80139ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013102:	4b1d      	ldr	r3, [pc, #116]	; (8013178 <xTaskCheckForTimeOut+0xc4>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	685b      	ldr	r3, [r3, #4]
 801310c:	69ba      	ldr	r2, [r7, #24]
 801310e:	1ad3      	subs	r3, r2, r3
 8013110:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801311a:	d102      	bne.n	8013122 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801311c:	2300      	movs	r3, #0
 801311e:	61fb      	str	r3, [r7, #28]
 8013120:	e023      	b.n	801316a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681a      	ldr	r2, [r3, #0]
 8013126:	4b15      	ldr	r3, [pc, #84]	; (801317c <xTaskCheckForTimeOut+0xc8>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	429a      	cmp	r2, r3
 801312c:	d007      	beq.n	801313e <xTaskCheckForTimeOut+0x8a>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	69ba      	ldr	r2, [r7, #24]
 8013134:	429a      	cmp	r2, r3
 8013136:	d302      	bcc.n	801313e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013138:	2301      	movs	r3, #1
 801313a:	61fb      	str	r3, [r7, #28]
 801313c:	e015      	b.n	801316a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	697a      	ldr	r2, [r7, #20]
 8013144:	429a      	cmp	r2, r3
 8013146:	d20b      	bcs.n	8013160 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	1ad2      	subs	r2, r2, r3
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f7ff ff97 	bl	8013088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801315a:	2300      	movs	r3, #0
 801315c:	61fb      	str	r3, [r7, #28]
 801315e:	e004      	b.n	801316a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	2200      	movs	r2, #0
 8013164:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013166:	2301      	movs	r3, #1
 8013168:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801316a:	f000 fc73 	bl	8013a54 <vPortExitCritical>

	return xReturn;
 801316e:	69fb      	ldr	r3, [r7, #28]
}
 8013170:	4618      	mov	r0, r3
 8013172:	3720      	adds	r7, #32
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}
 8013178:	200004cc 	.word	0x200004cc
 801317c:	200004e0 	.word	0x200004e0

08013180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013180:	b480      	push	{r7}
 8013182:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013184:	4b03      	ldr	r3, [pc, #12]	; (8013194 <vTaskMissedYield+0x14>)
 8013186:	2201      	movs	r2, #1
 8013188:	601a      	str	r2, [r3, #0]
}
 801318a:	bf00      	nop
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr
 8013194:	200004dc 	.word	0x200004dc

08013198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b082      	sub	sp, #8
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80131a0:	f000 f854 	bl	801324c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80131a4:	4b07      	ldr	r3, [pc, #28]	; (80131c4 <prvIdleTask+0x2c>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d907      	bls.n	80131bc <prvIdleTask+0x24>
			{
				taskYIELD();
 80131ac:	4b06      	ldr	r3, [pc, #24]	; (80131c8 <prvIdleTask+0x30>)
 80131ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131b2:	601a      	str	r2, [r3, #0]
 80131b4:	f3bf 8f4f 	dsb	sy
 80131b8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80131bc:	f7ed fe52 	bl	8000e64 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80131c0:	e7ee      	b.n	80131a0 <prvIdleTask+0x8>
 80131c2:	bf00      	nop
 80131c4:	200003cc 	.word	0x200003cc
 80131c8:	e000ed04 	.word	0xe000ed04

080131cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80131d2:	2300      	movs	r3, #0
 80131d4:	607b      	str	r3, [r7, #4]
 80131d6:	e00c      	b.n	80131f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80131d8:	687a      	ldr	r2, [r7, #4]
 80131da:	4613      	mov	r3, r2
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	4413      	add	r3, r2
 80131e0:	009b      	lsls	r3, r3, #2
 80131e2:	4a12      	ldr	r2, [pc, #72]	; (801322c <prvInitialiseTaskLists+0x60>)
 80131e4:	4413      	add	r3, r2
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fe fa22 	bl	8011630 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3301      	adds	r3, #1
 80131f0:	607b      	str	r3, [r7, #4]
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2b06      	cmp	r3, #6
 80131f6:	d9ef      	bls.n	80131d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80131f8:	480d      	ldr	r0, [pc, #52]	; (8013230 <prvInitialiseTaskLists+0x64>)
 80131fa:	f7fe fa19 	bl	8011630 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80131fe:	480d      	ldr	r0, [pc, #52]	; (8013234 <prvInitialiseTaskLists+0x68>)
 8013200:	f7fe fa16 	bl	8011630 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013204:	480c      	ldr	r0, [pc, #48]	; (8013238 <prvInitialiseTaskLists+0x6c>)
 8013206:	f7fe fa13 	bl	8011630 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801320a:	480c      	ldr	r0, [pc, #48]	; (801323c <prvInitialiseTaskLists+0x70>)
 801320c:	f7fe fa10 	bl	8011630 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013210:	480b      	ldr	r0, [pc, #44]	; (8013240 <prvInitialiseTaskLists+0x74>)
 8013212:	f7fe fa0d 	bl	8011630 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013216:	4b0b      	ldr	r3, [pc, #44]	; (8013244 <prvInitialiseTaskLists+0x78>)
 8013218:	4a05      	ldr	r2, [pc, #20]	; (8013230 <prvInitialiseTaskLists+0x64>)
 801321a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801321c:	4b0a      	ldr	r3, [pc, #40]	; (8013248 <prvInitialiseTaskLists+0x7c>)
 801321e:	4a05      	ldr	r2, [pc, #20]	; (8013234 <prvInitialiseTaskLists+0x68>)
 8013220:	601a      	str	r2, [r3, #0]
}
 8013222:	bf00      	nop
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	200003cc 	.word	0x200003cc
 8013230:	20000458 	.word	0x20000458
 8013234:	2000046c 	.word	0x2000046c
 8013238:	20000488 	.word	0x20000488
 801323c:	2000049c 	.word	0x2000049c
 8013240:	200004b4 	.word	0x200004b4
 8013244:	20000480 	.word	0x20000480
 8013248:	20000484 	.word	0x20000484

0801324c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013252:	e019      	b.n	8013288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013254:	f000 fbca 	bl	80139ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013258:	4b10      	ldr	r3, [pc, #64]	; (801329c <prvCheckTasksWaitingTermination+0x50>)
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	3304      	adds	r3, #4
 8013264:	4618      	mov	r0, r3
 8013266:	f7fe fa6d 	bl	8011744 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801326a:	4b0d      	ldr	r3, [pc, #52]	; (80132a0 <prvCheckTasksWaitingTermination+0x54>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	3b01      	subs	r3, #1
 8013270:	4a0b      	ldr	r2, [pc, #44]	; (80132a0 <prvCheckTasksWaitingTermination+0x54>)
 8013272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013274:	4b0b      	ldr	r3, [pc, #44]	; (80132a4 <prvCheckTasksWaitingTermination+0x58>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	3b01      	subs	r3, #1
 801327a:	4a0a      	ldr	r2, [pc, #40]	; (80132a4 <prvCheckTasksWaitingTermination+0x58>)
 801327c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801327e:	f000 fbe9 	bl	8013a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 f810 	bl	80132a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013288:	4b06      	ldr	r3, [pc, #24]	; (80132a4 <prvCheckTasksWaitingTermination+0x58>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d1e1      	bne.n	8013254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013290:	bf00      	nop
 8013292:	bf00      	nop
 8013294:	3708      	adds	r7, #8
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	2000049c 	.word	0x2000049c
 80132a0:	200004c8 	.word	0x200004c8
 80132a4:	200004b0 	.word	0x200004b0

080132a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d108      	bne.n	80132cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132be:	4618      	mov	r0, r3
 80132c0:	f000 fd90 	bl	8013de4 <vPortFree>
				vPortFree( pxTCB );
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fd8d 	bl	8013de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80132ca:	e01a      	b.n	8013302 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d103      	bne.n	80132de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f000 fd84 	bl	8013de4 <vPortFree>
	}
 80132dc:	e011      	b.n	8013302 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80132e4:	2b02      	cmp	r3, #2
 80132e6:	d00c      	beq.n	8013302 <prvDeleteTCB+0x5a>
	__asm volatile
 80132e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ec:	b672      	cpsid	i
 80132ee:	f383 8811 	msr	BASEPRI, r3
 80132f2:	f3bf 8f6f 	isb	sy
 80132f6:	f3bf 8f4f 	dsb	sy
 80132fa:	b662      	cpsie	i
 80132fc:	60fb      	str	r3, [r7, #12]
}
 80132fe:	bf00      	nop
 8013300:	e7fe      	b.n	8013300 <prvDeleteTCB+0x58>
	}
 8013302:	bf00      	nop
 8013304:	3710      	adds	r7, #16
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}
	...

0801330c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013312:	4b0c      	ldr	r3, [pc, #48]	; (8013344 <prvResetNextTaskUnblockTime+0x38>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d104      	bne.n	8013326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801331c:	4b0a      	ldr	r3, [pc, #40]	; (8013348 <prvResetNextTaskUnblockTime+0x3c>)
 801331e:	f04f 32ff 	mov.w	r2, #4294967295
 8013322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013324:	e008      	b.n	8013338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013326:	4b07      	ldr	r3, [pc, #28]	; (8013344 <prvResetNextTaskUnblockTime+0x38>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	68db      	ldr	r3, [r3, #12]
 801332e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	4a04      	ldr	r2, [pc, #16]	; (8013348 <prvResetNextTaskUnblockTime+0x3c>)
 8013336:	6013      	str	r3, [r2, #0]
}
 8013338:	bf00      	nop
 801333a:	370c      	adds	r7, #12
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr
 8013344:	20000480 	.word	0x20000480
 8013348:	200004e8 	.word	0x200004e8

0801334c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801334c:	b480      	push	{r7}
 801334e:	b083      	sub	sp, #12
 8013350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013352:	4b0b      	ldr	r3, [pc, #44]	; (8013380 <xTaskGetSchedulerState+0x34>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d102      	bne.n	8013360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801335a:	2301      	movs	r3, #1
 801335c:	607b      	str	r3, [r7, #4]
 801335e:	e008      	b.n	8013372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013360:	4b08      	ldr	r3, [pc, #32]	; (8013384 <xTaskGetSchedulerState+0x38>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d102      	bne.n	801336e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013368:	2302      	movs	r3, #2
 801336a:	607b      	str	r3, [r7, #4]
 801336c:	e001      	b.n	8013372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801336e:	2300      	movs	r3, #0
 8013370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013372:	687b      	ldr	r3, [r7, #4]
	}
 8013374:	4618      	mov	r0, r3
 8013376:	370c      	adds	r7, #12
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr
 8013380:	200004d4 	.word	0x200004d4
 8013384:	200004f0 	.word	0x200004f0

08013388 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013394:	2300      	movs	r3, #0
 8013396:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d069      	beq.n	8013472 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133a2:	4b36      	ldr	r3, [pc, #216]	; (801347c <xTaskPriorityInherit+0xf4>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d259      	bcs.n	8013460 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	699b      	ldr	r3, [r3, #24]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	db06      	blt.n	80133c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133b4:	4b31      	ldr	r3, [pc, #196]	; (801347c <xTaskPriorityInherit+0xf4>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ba:	f1c3 0207 	rsb	r2, r3, #7
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	6959      	ldr	r1, [r3, #20]
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ca:	4613      	mov	r3, r2
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	4413      	add	r3, r2
 80133d0:	009b      	lsls	r3, r3, #2
 80133d2:	4a2b      	ldr	r2, [pc, #172]	; (8013480 <xTaskPriorityInherit+0xf8>)
 80133d4:	4413      	add	r3, r2
 80133d6:	4299      	cmp	r1, r3
 80133d8:	d13a      	bne.n	8013450 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	3304      	adds	r3, #4
 80133de:	4618      	mov	r0, r3
 80133e0:	f7fe f9b0 	bl	8011744 <uxListRemove>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d115      	bne.n	8013416 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ee:	4924      	ldr	r1, [pc, #144]	; (8013480 <xTaskPriorityInherit+0xf8>)
 80133f0:	4613      	mov	r3, r2
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	4413      	add	r3, r2
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	440b      	add	r3, r1
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d10a      	bne.n	8013416 <xTaskPriorityInherit+0x8e>
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013404:	2201      	movs	r2, #1
 8013406:	fa02 f303 	lsl.w	r3, r2, r3
 801340a:	43da      	mvns	r2, r3
 801340c:	4b1d      	ldr	r3, [pc, #116]	; (8013484 <xTaskPriorityInherit+0xfc>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4013      	ands	r3, r2
 8013412:	4a1c      	ldr	r2, [pc, #112]	; (8013484 <xTaskPriorityInherit+0xfc>)
 8013414:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013416:	4b19      	ldr	r3, [pc, #100]	; (801347c <xTaskPriorityInherit+0xf4>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013424:	2201      	movs	r2, #1
 8013426:	409a      	lsls	r2, r3
 8013428:	4b16      	ldr	r3, [pc, #88]	; (8013484 <xTaskPriorityInherit+0xfc>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	4313      	orrs	r3, r2
 801342e:	4a15      	ldr	r2, [pc, #84]	; (8013484 <xTaskPriorityInherit+0xfc>)
 8013430:	6013      	str	r3, [r2, #0]
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013436:	4613      	mov	r3, r2
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	4413      	add	r3, r2
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	4a10      	ldr	r2, [pc, #64]	; (8013480 <xTaskPriorityInherit+0xf8>)
 8013440:	441a      	add	r2, r3
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	3304      	adds	r3, #4
 8013446:	4619      	mov	r1, r3
 8013448:	4610      	mov	r0, r2
 801344a:	f7fe f91e 	bl	801168a <vListInsertEnd>
 801344e:	e004      	b.n	801345a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013450:	4b0a      	ldr	r3, [pc, #40]	; (801347c <xTaskPriorityInherit+0xf4>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801345a:	2301      	movs	r3, #1
 801345c:	60fb      	str	r3, [r7, #12]
 801345e:	e008      	b.n	8013472 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013464:	4b05      	ldr	r3, [pc, #20]	; (801347c <xTaskPriorityInherit+0xf4>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801346a:	429a      	cmp	r2, r3
 801346c:	d201      	bcs.n	8013472 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801346e:	2301      	movs	r3, #1
 8013470:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013472:	68fb      	ldr	r3, [r7, #12]
	}
 8013474:	4618      	mov	r0, r3
 8013476:	3710      	adds	r7, #16
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	200003c8 	.word	0x200003c8
 8013480:	200003cc 	.word	0x200003cc
 8013484:	200004d0 	.word	0x200004d0

08013488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013494:	2300      	movs	r3, #0
 8013496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d072      	beq.n	8013584 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801349e:	4b3c      	ldr	r3, [pc, #240]	; (8013590 <xTaskPriorityDisinherit+0x108>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	693a      	ldr	r2, [r7, #16]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d00c      	beq.n	80134c2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80134a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ac:	b672      	cpsid	i
 80134ae:	f383 8811 	msr	BASEPRI, r3
 80134b2:	f3bf 8f6f 	isb	sy
 80134b6:	f3bf 8f4f 	dsb	sy
 80134ba:	b662      	cpsie	i
 80134bc:	60fb      	str	r3, [r7, #12]
}
 80134be:	bf00      	nop
 80134c0:	e7fe      	b.n	80134c0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d10c      	bne.n	80134e4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80134ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ce:	b672      	cpsid	i
 80134d0:	f383 8811 	msr	BASEPRI, r3
 80134d4:	f3bf 8f6f 	isb	sy
 80134d8:	f3bf 8f4f 	dsb	sy
 80134dc:	b662      	cpsie	i
 80134de:	60bb      	str	r3, [r7, #8]
}
 80134e0:	bf00      	nop
 80134e2:	e7fe      	b.n	80134e2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134e8:	1e5a      	subs	r2, r3, #1
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d044      	beq.n	8013584 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d140      	bne.n	8013584 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	3304      	adds	r3, #4
 8013506:	4618      	mov	r0, r3
 8013508:	f7fe f91c 	bl	8011744 <uxListRemove>
 801350c:	4603      	mov	r3, r0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d115      	bne.n	801353e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013516:	491f      	ldr	r1, [pc, #124]	; (8013594 <xTaskPriorityDisinherit+0x10c>)
 8013518:	4613      	mov	r3, r2
 801351a:	009b      	lsls	r3, r3, #2
 801351c:	4413      	add	r3, r2
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	440b      	add	r3, r1
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d10a      	bne.n	801353e <xTaskPriorityDisinherit+0xb6>
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801352c:	2201      	movs	r2, #1
 801352e:	fa02 f303 	lsl.w	r3, r2, r3
 8013532:	43da      	mvns	r2, r3
 8013534:	4b18      	ldr	r3, [pc, #96]	; (8013598 <xTaskPriorityDisinherit+0x110>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4013      	ands	r3, r2
 801353a:	4a17      	ldr	r2, [pc, #92]	; (8013598 <xTaskPriorityDisinherit+0x110>)
 801353c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801354a:	f1c3 0207 	rsb	r2, r3, #7
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013556:	2201      	movs	r2, #1
 8013558:	409a      	lsls	r2, r3
 801355a:	4b0f      	ldr	r3, [pc, #60]	; (8013598 <xTaskPriorityDisinherit+0x110>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	4313      	orrs	r3, r2
 8013560:	4a0d      	ldr	r2, [pc, #52]	; (8013598 <xTaskPriorityDisinherit+0x110>)
 8013562:	6013      	str	r3, [r2, #0]
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013568:	4613      	mov	r3, r2
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	4413      	add	r3, r2
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	4a08      	ldr	r2, [pc, #32]	; (8013594 <xTaskPriorityDisinherit+0x10c>)
 8013572:	441a      	add	r2, r3
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	3304      	adds	r3, #4
 8013578:	4619      	mov	r1, r3
 801357a:	4610      	mov	r0, r2
 801357c:	f7fe f885 	bl	801168a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013580:	2301      	movs	r3, #1
 8013582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013584:	697b      	ldr	r3, [r7, #20]
	}
 8013586:	4618      	mov	r0, r3
 8013588:	3718      	adds	r7, #24
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	200003c8 	.word	0x200003c8
 8013594:	200003cc 	.word	0x200003cc
 8013598:	200004d0 	.word	0x200004d0

0801359c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801359c:	b580      	push	{r7, lr}
 801359e:	b088      	sub	sp, #32
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80135aa:	2301      	movs	r3, #1
 80135ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f000 8087 	beq.w	80136c4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d10c      	bne.n	80135d8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80135be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c2:	b672      	cpsid	i
 80135c4:	f383 8811 	msr	BASEPRI, r3
 80135c8:	f3bf 8f6f 	isb	sy
 80135cc:	f3bf 8f4f 	dsb	sy
 80135d0:	b662      	cpsie	i
 80135d2:	60fb      	str	r3, [r7, #12]
}
 80135d4:	bf00      	nop
 80135d6:	e7fe      	b.n	80135d6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135dc:	683a      	ldr	r2, [r7, #0]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d902      	bls.n	80135e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	61fb      	str	r3, [r7, #28]
 80135e6:	e002      	b.n	80135ee <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80135e8:	69bb      	ldr	r3, [r7, #24]
 80135ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f2:	69fa      	ldr	r2, [r7, #28]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d065      	beq.n	80136c4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80135f8:	69bb      	ldr	r3, [r7, #24]
 80135fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135fc:	697a      	ldr	r2, [r7, #20]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d160      	bne.n	80136c4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013602:	4b32      	ldr	r3, [pc, #200]	; (80136cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	69ba      	ldr	r2, [r7, #24]
 8013608:	429a      	cmp	r2, r3
 801360a:	d10c      	bne.n	8013626 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 801360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013610:	b672      	cpsid	i
 8013612:	f383 8811 	msr	BASEPRI, r3
 8013616:	f3bf 8f6f 	isb	sy
 801361a:	f3bf 8f4f 	dsb	sy
 801361e:	b662      	cpsie	i
 8013620:	60bb      	str	r3, [r7, #8]
}
 8013622:	bf00      	nop
 8013624:	e7fe      	b.n	8013624 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013626:	69bb      	ldr	r3, [r7, #24]
 8013628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801362a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	69fa      	ldr	r2, [r7, #28]
 8013630:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013632:	69bb      	ldr	r3, [r7, #24]
 8013634:	699b      	ldr	r3, [r3, #24]
 8013636:	2b00      	cmp	r3, #0
 8013638:	db04      	blt.n	8013644 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	f1c3 0207 	rsb	r2, r3, #7
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013644:	69bb      	ldr	r3, [r7, #24]
 8013646:	6959      	ldr	r1, [r3, #20]
 8013648:	693a      	ldr	r2, [r7, #16]
 801364a:	4613      	mov	r3, r2
 801364c:	009b      	lsls	r3, r3, #2
 801364e:	4413      	add	r3, r2
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	4a1f      	ldr	r2, [pc, #124]	; (80136d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013654:	4413      	add	r3, r2
 8013656:	4299      	cmp	r1, r3
 8013658:	d134      	bne.n	80136c4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	3304      	adds	r3, #4
 801365e:	4618      	mov	r0, r3
 8013660:	f7fe f870 	bl	8011744 <uxListRemove>
 8013664:	4603      	mov	r3, r0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d115      	bne.n	8013696 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801366e:	4918      	ldr	r1, [pc, #96]	; (80136d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013670:	4613      	mov	r3, r2
 8013672:	009b      	lsls	r3, r3, #2
 8013674:	4413      	add	r3, r2
 8013676:	009b      	lsls	r3, r3, #2
 8013678:	440b      	add	r3, r1
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d10a      	bne.n	8013696 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013684:	2201      	movs	r2, #1
 8013686:	fa02 f303 	lsl.w	r3, r2, r3
 801368a:	43da      	mvns	r2, r3
 801368c:	4b11      	ldr	r3, [pc, #68]	; (80136d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4013      	ands	r3, r2
 8013692:	4a10      	ldr	r2, [pc, #64]	; (80136d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013694:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801369a:	2201      	movs	r2, #1
 801369c:	409a      	lsls	r2, r3
 801369e:	4b0d      	ldr	r3, [pc, #52]	; (80136d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	4313      	orrs	r3, r2
 80136a4:	4a0b      	ldr	r2, [pc, #44]	; (80136d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80136a6:	6013      	str	r3, [r2, #0]
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136ac:	4613      	mov	r3, r2
 80136ae:	009b      	lsls	r3, r3, #2
 80136b0:	4413      	add	r3, r2
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	4a06      	ldr	r2, [pc, #24]	; (80136d0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80136b6:	441a      	add	r2, r3
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	3304      	adds	r3, #4
 80136bc:	4619      	mov	r1, r3
 80136be:	4610      	mov	r0, r2
 80136c0:	f7fd ffe3 	bl	801168a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80136c4:	bf00      	nop
 80136c6:	3720      	adds	r7, #32
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bd80      	pop	{r7, pc}
 80136cc:	200003c8 	.word	0x200003c8
 80136d0:	200003cc 	.word	0x200003cc
 80136d4:	200004d0 	.word	0x200004d0

080136d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80136d8:	b480      	push	{r7}
 80136da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80136dc:	4b07      	ldr	r3, [pc, #28]	; (80136fc <pvTaskIncrementMutexHeldCount+0x24>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d004      	beq.n	80136ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80136e4:	4b05      	ldr	r3, [pc, #20]	; (80136fc <pvTaskIncrementMutexHeldCount+0x24>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80136ea:	3201      	adds	r2, #1
 80136ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80136ee:	4b03      	ldr	r3, [pc, #12]	; (80136fc <pvTaskIncrementMutexHeldCount+0x24>)
 80136f0:	681b      	ldr	r3, [r3, #0]
	}
 80136f2:	4618      	mov	r0, r3
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr
 80136fc:	200003c8 	.word	0x200003c8

08013700 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801370a:	4b29      	ldr	r3, [pc, #164]	; (80137b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013710:	4b28      	ldr	r3, [pc, #160]	; (80137b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	3304      	adds	r3, #4
 8013716:	4618      	mov	r0, r3
 8013718:	f7fe f814 	bl	8011744 <uxListRemove>
 801371c:	4603      	mov	r3, r0
 801371e:	2b00      	cmp	r3, #0
 8013720:	d10b      	bne.n	801373a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013722:	4b24      	ldr	r3, [pc, #144]	; (80137b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013728:	2201      	movs	r2, #1
 801372a:	fa02 f303 	lsl.w	r3, r2, r3
 801372e:	43da      	mvns	r2, r3
 8013730:	4b21      	ldr	r3, [pc, #132]	; (80137b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	4013      	ands	r3, r2
 8013736:	4a20      	ldr	r2, [pc, #128]	; (80137b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013738:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013740:	d10a      	bne.n	8013758 <prvAddCurrentTaskToDelayedList+0x58>
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d007      	beq.n	8013758 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013748:	4b1a      	ldr	r3, [pc, #104]	; (80137b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	3304      	adds	r3, #4
 801374e:	4619      	mov	r1, r3
 8013750:	481a      	ldr	r0, [pc, #104]	; (80137bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8013752:	f7fd ff9a 	bl	801168a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013756:	e026      	b.n	80137a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013758:	68fa      	ldr	r2, [r7, #12]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4413      	add	r3, r2
 801375e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013760:	4b14      	ldr	r3, [pc, #80]	; (80137b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68ba      	ldr	r2, [r7, #8]
 8013766:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013768:	68ba      	ldr	r2, [r7, #8]
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	429a      	cmp	r2, r3
 801376e:	d209      	bcs.n	8013784 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013770:	4b13      	ldr	r3, [pc, #76]	; (80137c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	4b0f      	ldr	r3, [pc, #60]	; (80137b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	3304      	adds	r3, #4
 801377a:	4619      	mov	r1, r3
 801377c:	4610      	mov	r0, r2
 801377e:	f7fd ffa8 	bl	80116d2 <vListInsert>
}
 8013782:	e010      	b.n	80137a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013784:	4b0f      	ldr	r3, [pc, #60]	; (80137c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	4b0a      	ldr	r3, [pc, #40]	; (80137b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	3304      	adds	r3, #4
 801378e:	4619      	mov	r1, r3
 8013790:	4610      	mov	r0, r2
 8013792:	f7fd ff9e 	bl	80116d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013796:	4b0c      	ldr	r3, [pc, #48]	; (80137c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	429a      	cmp	r2, r3
 801379e:	d202      	bcs.n	80137a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80137a0:	4a09      	ldr	r2, [pc, #36]	; (80137c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	6013      	str	r3, [r2, #0]
}
 80137a6:	bf00      	nop
 80137a8:	3710      	adds	r7, #16
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}
 80137ae:	bf00      	nop
 80137b0:	200004cc 	.word	0x200004cc
 80137b4:	200003c8 	.word	0x200003c8
 80137b8:	200004d0 	.word	0x200004d0
 80137bc:	200004b4 	.word	0x200004b4
 80137c0:	20000484 	.word	0x20000484
 80137c4:	20000480 	.word	0x20000480
 80137c8:	200004e8 	.word	0x200004e8

080137cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80137cc:	b480      	push	{r7}
 80137ce:	b085      	sub	sp, #20
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	60b9      	str	r1, [r7, #8]
 80137d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	3b04      	subs	r3, #4
 80137dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80137e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	3b04      	subs	r3, #4
 80137ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	f023 0201 	bic.w	r2, r3, #1
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	3b04      	subs	r3, #4
 80137fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80137fc:	4a0c      	ldr	r2, [pc, #48]	; (8013830 <pxPortInitialiseStack+0x64>)
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	3b14      	subs	r3, #20
 8013806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013808:	687a      	ldr	r2, [r7, #4]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	3b04      	subs	r3, #4
 8013812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f06f 0202 	mvn.w	r2, #2
 801381a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	3b20      	subs	r3, #32
 8013820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013822:	68fb      	ldr	r3, [r7, #12]
}
 8013824:	4618      	mov	r0, r3
 8013826:	3714      	adds	r7, #20
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr
 8013830:	08013835 	.word	0x08013835

08013834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013834:	b480      	push	{r7}
 8013836:	b085      	sub	sp, #20
 8013838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801383a:	2300      	movs	r3, #0
 801383c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801383e:	4b14      	ldr	r3, [pc, #80]	; (8013890 <prvTaskExitError+0x5c>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013846:	d00c      	beq.n	8013862 <prvTaskExitError+0x2e>
	__asm volatile
 8013848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801384c:	b672      	cpsid	i
 801384e:	f383 8811 	msr	BASEPRI, r3
 8013852:	f3bf 8f6f 	isb	sy
 8013856:	f3bf 8f4f 	dsb	sy
 801385a:	b662      	cpsie	i
 801385c:	60fb      	str	r3, [r7, #12]
}
 801385e:	bf00      	nop
 8013860:	e7fe      	b.n	8013860 <prvTaskExitError+0x2c>
	__asm volatile
 8013862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013866:	b672      	cpsid	i
 8013868:	f383 8811 	msr	BASEPRI, r3
 801386c:	f3bf 8f6f 	isb	sy
 8013870:	f3bf 8f4f 	dsb	sy
 8013874:	b662      	cpsie	i
 8013876:	60bb      	str	r3, [r7, #8]
}
 8013878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801387a:	bf00      	nop
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d0fc      	beq.n	801387c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013882:	bf00      	nop
 8013884:	bf00      	nop
 8013886:	3714      	adds	r7, #20
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr
 8013890:	20000058 	.word	0x20000058
	...

080138a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80138a0:	4b07      	ldr	r3, [pc, #28]	; (80138c0 <pxCurrentTCBConst2>)
 80138a2:	6819      	ldr	r1, [r3, #0]
 80138a4:	6808      	ldr	r0, [r1, #0]
 80138a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138aa:	f380 8809 	msr	PSP, r0
 80138ae:	f3bf 8f6f 	isb	sy
 80138b2:	f04f 0000 	mov.w	r0, #0
 80138b6:	f380 8811 	msr	BASEPRI, r0
 80138ba:	4770      	bx	lr
 80138bc:	f3af 8000 	nop.w

080138c0 <pxCurrentTCBConst2>:
 80138c0:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80138c4:	bf00      	nop
 80138c6:	bf00      	nop

080138c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80138c8:	4808      	ldr	r0, [pc, #32]	; (80138ec <prvPortStartFirstTask+0x24>)
 80138ca:	6800      	ldr	r0, [r0, #0]
 80138cc:	6800      	ldr	r0, [r0, #0]
 80138ce:	f380 8808 	msr	MSP, r0
 80138d2:	f04f 0000 	mov.w	r0, #0
 80138d6:	f380 8814 	msr	CONTROL, r0
 80138da:	b662      	cpsie	i
 80138dc:	b661      	cpsie	f
 80138de:	f3bf 8f4f 	dsb	sy
 80138e2:	f3bf 8f6f 	isb	sy
 80138e6:	df00      	svc	0
 80138e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80138ea:	bf00      	nop
 80138ec:	e000ed08 	.word	0xe000ed08

080138f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80138f6:	4b37      	ldr	r3, [pc, #220]	; (80139d4 <xPortStartScheduler+0xe4>)
 80138f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	22ff      	movs	r2, #255	; 0xff
 8013906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	b2db      	uxtb	r3, r3
 801390e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013910:	78fb      	ldrb	r3, [r7, #3]
 8013912:	b2db      	uxtb	r3, r3
 8013914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013918:	b2da      	uxtb	r2, r3
 801391a:	4b2f      	ldr	r3, [pc, #188]	; (80139d8 <xPortStartScheduler+0xe8>)
 801391c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801391e:	4b2f      	ldr	r3, [pc, #188]	; (80139dc <xPortStartScheduler+0xec>)
 8013920:	2207      	movs	r2, #7
 8013922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013924:	e009      	b.n	801393a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013926:	4b2d      	ldr	r3, [pc, #180]	; (80139dc <xPortStartScheduler+0xec>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	3b01      	subs	r3, #1
 801392c:	4a2b      	ldr	r2, [pc, #172]	; (80139dc <xPortStartScheduler+0xec>)
 801392e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013930:	78fb      	ldrb	r3, [r7, #3]
 8013932:	b2db      	uxtb	r3, r3
 8013934:	005b      	lsls	r3, r3, #1
 8013936:	b2db      	uxtb	r3, r3
 8013938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801393a:	78fb      	ldrb	r3, [r7, #3]
 801393c:	b2db      	uxtb	r3, r3
 801393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013942:	2b80      	cmp	r3, #128	; 0x80
 8013944:	d0ef      	beq.n	8013926 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013946:	4b25      	ldr	r3, [pc, #148]	; (80139dc <xPortStartScheduler+0xec>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	f1c3 0307 	rsb	r3, r3, #7
 801394e:	2b04      	cmp	r3, #4
 8013950:	d00c      	beq.n	801396c <xPortStartScheduler+0x7c>
	__asm volatile
 8013952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013956:	b672      	cpsid	i
 8013958:	f383 8811 	msr	BASEPRI, r3
 801395c:	f3bf 8f6f 	isb	sy
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	b662      	cpsie	i
 8013966:	60bb      	str	r3, [r7, #8]
}
 8013968:	bf00      	nop
 801396a:	e7fe      	b.n	801396a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801396c:	4b1b      	ldr	r3, [pc, #108]	; (80139dc <xPortStartScheduler+0xec>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	021b      	lsls	r3, r3, #8
 8013972:	4a1a      	ldr	r2, [pc, #104]	; (80139dc <xPortStartScheduler+0xec>)
 8013974:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013976:	4b19      	ldr	r3, [pc, #100]	; (80139dc <xPortStartScheduler+0xec>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801397e:	4a17      	ldr	r2, [pc, #92]	; (80139dc <xPortStartScheduler+0xec>)
 8013980:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	b2da      	uxtb	r2, r3
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801398a:	4b15      	ldr	r3, [pc, #84]	; (80139e0 <xPortStartScheduler+0xf0>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4a14      	ldr	r2, [pc, #80]	; (80139e0 <xPortStartScheduler+0xf0>)
 8013990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013994:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013996:	4b12      	ldr	r3, [pc, #72]	; (80139e0 <xPortStartScheduler+0xf0>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	4a11      	ldr	r2, [pc, #68]	; (80139e0 <xPortStartScheduler+0xf0>)
 801399c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80139a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80139a2:	f000 f8dd 	bl	8013b60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80139a6:	4b0f      	ldr	r3, [pc, #60]	; (80139e4 <xPortStartScheduler+0xf4>)
 80139a8:	2200      	movs	r2, #0
 80139aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80139ac:	f000 f8fc 	bl	8013ba8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80139b0:	4b0d      	ldr	r3, [pc, #52]	; (80139e8 <xPortStartScheduler+0xf8>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	4a0c      	ldr	r2, [pc, #48]	; (80139e8 <xPortStartScheduler+0xf8>)
 80139b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80139ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80139bc:	f7ff ff84 	bl	80138c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80139c0:	f7ff fa56 	bl	8012e70 <vTaskSwitchContext>
	prvTaskExitError();
 80139c4:	f7ff ff36 	bl	8013834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80139c8:	2300      	movs	r3, #0
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop
 80139d4:	e000e400 	.word	0xe000e400
 80139d8:	200004f4 	.word	0x200004f4
 80139dc:	200004f8 	.word	0x200004f8
 80139e0:	e000ed20 	.word	0xe000ed20
 80139e4:	20000058 	.word	0x20000058
 80139e8:	e000ef34 	.word	0xe000ef34

080139ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
	__asm volatile
 80139f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f6:	b672      	cpsid	i
 80139f8:	f383 8811 	msr	BASEPRI, r3
 80139fc:	f3bf 8f6f 	isb	sy
 8013a00:	f3bf 8f4f 	dsb	sy
 8013a04:	b662      	cpsie	i
 8013a06:	607b      	str	r3, [r7, #4]
}
 8013a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013a0a:	4b10      	ldr	r3, [pc, #64]	; (8013a4c <vPortEnterCritical+0x60>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	3301      	adds	r3, #1
 8013a10:	4a0e      	ldr	r2, [pc, #56]	; (8013a4c <vPortEnterCritical+0x60>)
 8013a12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013a14:	4b0d      	ldr	r3, [pc, #52]	; (8013a4c <vPortEnterCritical+0x60>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b01      	cmp	r3, #1
 8013a1a:	d111      	bne.n	8013a40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013a1c:	4b0c      	ldr	r3, [pc, #48]	; (8013a50 <vPortEnterCritical+0x64>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00c      	beq.n	8013a40 <vPortEnterCritical+0x54>
	__asm volatile
 8013a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2a:	b672      	cpsid	i
 8013a2c:	f383 8811 	msr	BASEPRI, r3
 8013a30:	f3bf 8f6f 	isb	sy
 8013a34:	f3bf 8f4f 	dsb	sy
 8013a38:	b662      	cpsie	i
 8013a3a:	603b      	str	r3, [r7, #0]
}
 8013a3c:	bf00      	nop
 8013a3e:	e7fe      	b.n	8013a3e <vPortEnterCritical+0x52>
	}
}
 8013a40:	bf00      	nop
 8013a42:	370c      	adds	r7, #12
 8013a44:	46bd      	mov	sp, r7
 8013a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4a:	4770      	bx	lr
 8013a4c:	20000058 	.word	0x20000058
 8013a50:	e000ed04 	.word	0xe000ed04

08013a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013a5a:	4b13      	ldr	r3, [pc, #76]	; (8013aa8 <vPortExitCritical+0x54>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d10c      	bne.n	8013a7c <vPortExitCritical+0x28>
	__asm volatile
 8013a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a66:	b672      	cpsid	i
 8013a68:	f383 8811 	msr	BASEPRI, r3
 8013a6c:	f3bf 8f6f 	isb	sy
 8013a70:	f3bf 8f4f 	dsb	sy
 8013a74:	b662      	cpsie	i
 8013a76:	607b      	str	r3, [r7, #4]
}
 8013a78:	bf00      	nop
 8013a7a:	e7fe      	b.n	8013a7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013a7c:	4b0a      	ldr	r3, [pc, #40]	; (8013aa8 <vPortExitCritical+0x54>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	3b01      	subs	r3, #1
 8013a82:	4a09      	ldr	r2, [pc, #36]	; (8013aa8 <vPortExitCritical+0x54>)
 8013a84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013a86:	4b08      	ldr	r3, [pc, #32]	; (8013aa8 <vPortExitCritical+0x54>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d105      	bne.n	8013a9a <vPortExitCritical+0x46>
 8013a8e:	2300      	movs	r3, #0
 8013a90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	f383 8811 	msr	BASEPRI, r3
}
 8013a98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013a9a:	bf00      	nop
 8013a9c:	370c      	adds	r7, #12
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop
 8013aa8:	20000058 	.word	0x20000058
 8013aac:	00000000 	.word	0x00000000

08013ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013ab0:	f3ef 8009 	mrs	r0, PSP
 8013ab4:	f3bf 8f6f 	isb	sy
 8013ab8:	4b15      	ldr	r3, [pc, #84]	; (8013b10 <pxCurrentTCBConst>)
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	f01e 0f10 	tst.w	lr, #16
 8013ac0:	bf08      	it	eq
 8013ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aca:	6010      	str	r0, [r2, #0]
 8013acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013ad4:	b672      	cpsid	i
 8013ad6:	f380 8811 	msr	BASEPRI, r0
 8013ada:	f3bf 8f4f 	dsb	sy
 8013ade:	f3bf 8f6f 	isb	sy
 8013ae2:	b662      	cpsie	i
 8013ae4:	f7ff f9c4 	bl	8012e70 <vTaskSwitchContext>
 8013ae8:	f04f 0000 	mov.w	r0, #0
 8013aec:	f380 8811 	msr	BASEPRI, r0
 8013af0:	bc09      	pop	{r0, r3}
 8013af2:	6819      	ldr	r1, [r3, #0]
 8013af4:	6808      	ldr	r0, [r1, #0]
 8013af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013afa:	f01e 0f10 	tst.w	lr, #16
 8013afe:	bf08      	it	eq
 8013b00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013b04:	f380 8809 	msr	PSP, r0
 8013b08:	f3bf 8f6f 	isb	sy
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop

08013b10 <pxCurrentTCBConst>:
 8013b10:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013b14:	bf00      	nop
 8013b16:	bf00      	nop

08013b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8013b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b22:	b672      	cpsid	i
 8013b24:	f383 8811 	msr	BASEPRI, r3
 8013b28:	f3bf 8f6f 	isb	sy
 8013b2c:	f3bf 8f4f 	dsb	sy
 8013b30:	b662      	cpsie	i
 8013b32:	607b      	str	r3, [r7, #4]
}
 8013b34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013b36:	f7ff f8e1 	bl	8012cfc <xTaskIncrementTick>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d003      	beq.n	8013b48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013b40:	4b06      	ldr	r3, [pc, #24]	; (8013b5c <SysTick_Handler+0x44>)
 8013b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b46:	601a      	str	r2, [r3, #0]
 8013b48:	2300      	movs	r3, #0
 8013b4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	f383 8811 	msr	BASEPRI, r3
}
 8013b52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013b54:	bf00      	nop
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	e000ed04 	.word	0xe000ed04

08013b60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013b60:	b480      	push	{r7}
 8013b62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013b64:	4b0b      	ldr	r3, [pc, #44]	; (8013b94 <vPortSetupTimerInterrupt+0x34>)
 8013b66:	2200      	movs	r2, #0
 8013b68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013b6a:	4b0b      	ldr	r3, [pc, #44]	; (8013b98 <vPortSetupTimerInterrupt+0x38>)
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013b70:	4b0a      	ldr	r3, [pc, #40]	; (8013b9c <vPortSetupTimerInterrupt+0x3c>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	4a0a      	ldr	r2, [pc, #40]	; (8013ba0 <vPortSetupTimerInterrupt+0x40>)
 8013b76:	fba2 2303 	umull	r2, r3, r2, r3
 8013b7a:	099b      	lsrs	r3, r3, #6
 8013b7c:	4a09      	ldr	r2, [pc, #36]	; (8013ba4 <vPortSetupTimerInterrupt+0x44>)
 8013b7e:	3b01      	subs	r3, #1
 8013b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013b82:	4b04      	ldr	r3, [pc, #16]	; (8013b94 <vPortSetupTimerInterrupt+0x34>)
 8013b84:	2207      	movs	r2, #7
 8013b86:	601a      	str	r2, [r3, #0]
}
 8013b88:	bf00      	nop
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr
 8013b92:	bf00      	nop
 8013b94:	e000e010 	.word	0xe000e010
 8013b98:	e000e018 	.word	0xe000e018
 8013b9c:	20000004 	.word	0x20000004
 8013ba0:	10624dd3 	.word	0x10624dd3
 8013ba4:	e000e014 	.word	0xe000e014

08013ba8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013ba8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013bb8 <vPortEnableVFP+0x10>
 8013bac:	6801      	ldr	r1, [r0, #0]
 8013bae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013bb2:	6001      	str	r1, [r0, #0]
 8013bb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013bb6:	bf00      	nop
 8013bb8:	e000ed88 	.word	0xe000ed88

08013bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b085      	sub	sp, #20
 8013bc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013bc2:	f3ef 8305 	mrs	r3, IPSR
 8013bc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	2b0f      	cmp	r3, #15
 8013bcc:	d916      	bls.n	8013bfc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013bce:	4a19      	ldr	r2, [pc, #100]	; (8013c34 <vPortValidateInterruptPriority+0x78>)
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	4413      	add	r3, r2
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013bd8:	4b17      	ldr	r3, [pc, #92]	; (8013c38 <vPortValidateInterruptPriority+0x7c>)
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	7afa      	ldrb	r2, [r7, #11]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d20c      	bcs.n	8013bfc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be6:	b672      	cpsid	i
 8013be8:	f383 8811 	msr	BASEPRI, r3
 8013bec:	f3bf 8f6f 	isb	sy
 8013bf0:	f3bf 8f4f 	dsb	sy
 8013bf4:	b662      	cpsie	i
 8013bf6:	607b      	str	r3, [r7, #4]
}
 8013bf8:	bf00      	nop
 8013bfa:	e7fe      	b.n	8013bfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013bfc:	4b0f      	ldr	r3, [pc, #60]	; (8013c3c <vPortValidateInterruptPriority+0x80>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013c04:	4b0e      	ldr	r3, [pc, #56]	; (8013c40 <vPortValidateInterruptPriority+0x84>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d90c      	bls.n	8013c26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8013c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c10:	b672      	cpsid	i
 8013c12:	f383 8811 	msr	BASEPRI, r3
 8013c16:	f3bf 8f6f 	isb	sy
 8013c1a:	f3bf 8f4f 	dsb	sy
 8013c1e:	b662      	cpsie	i
 8013c20:	603b      	str	r3, [r7, #0]
}
 8013c22:	bf00      	nop
 8013c24:	e7fe      	b.n	8013c24 <vPortValidateInterruptPriority+0x68>
	}
 8013c26:	bf00      	nop
 8013c28:	3714      	adds	r7, #20
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c30:	4770      	bx	lr
 8013c32:	bf00      	nop
 8013c34:	e000e3f0 	.word	0xe000e3f0
 8013c38:	200004f4 	.word	0x200004f4
 8013c3c:	e000ed0c 	.word	0xe000ed0c
 8013c40:	200004f8 	.word	0x200004f8

08013c44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b08a      	sub	sp, #40	; 0x28
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013c50:	f7fe ff86 	bl	8012b60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013c54:	4b5e      	ldr	r3, [pc, #376]	; (8013dd0 <pvPortMalloc+0x18c>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d101      	bne.n	8013c60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013c5c:	f000 f920 	bl	8013ea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013c60:	4b5c      	ldr	r3, [pc, #368]	; (8013dd4 <pvPortMalloc+0x190>)
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4013      	ands	r3, r2
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	f040 8092 	bne.w	8013d92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d01f      	beq.n	8013cb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8013c74:	2208      	movs	r2, #8
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	4413      	add	r3, r2
 8013c7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f003 0307 	and.w	r3, r3, #7
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d016      	beq.n	8013cb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f023 0307 	bic.w	r3, r3, #7
 8013c8c:	3308      	adds	r3, #8
 8013c8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f003 0307 	and.w	r3, r3, #7
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d00c      	beq.n	8013cb4 <pvPortMalloc+0x70>
	__asm volatile
 8013c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c9e:	b672      	cpsid	i
 8013ca0:	f383 8811 	msr	BASEPRI, r3
 8013ca4:	f3bf 8f6f 	isb	sy
 8013ca8:	f3bf 8f4f 	dsb	sy
 8013cac:	b662      	cpsie	i
 8013cae:	617b      	str	r3, [r7, #20]
}
 8013cb0:	bf00      	nop
 8013cb2:	e7fe      	b.n	8013cb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d06b      	beq.n	8013d92 <pvPortMalloc+0x14e>
 8013cba:	4b47      	ldr	r3, [pc, #284]	; (8013dd8 <pvPortMalloc+0x194>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	687a      	ldr	r2, [r7, #4]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d866      	bhi.n	8013d92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013cc4:	4b45      	ldr	r3, [pc, #276]	; (8013ddc <pvPortMalloc+0x198>)
 8013cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013cc8:	4b44      	ldr	r3, [pc, #272]	; (8013ddc <pvPortMalloc+0x198>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013cce:	e004      	b.n	8013cda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8013cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d903      	bls.n	8013cec <pvPortMalloc+0xa8>
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d1f1      	bne.n	8013cd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013cec:	4b38      	ldr	r3, [pc, #224]	; (8013dd0 <pvPortMalloc+0x18c>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d04d      	beq.n	8013d92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013cf6:	6a3b      	ldr	r3, [r7, #32]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2208      	movs	r2, #8
 8013cfc:	4413      	add	r3, r2
 8013cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	6a3b      	ldr	r3, [r7, #32]
 8013d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0a:	685a      	ldr	r2, [r3, #4]
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	1ad2      	subs	r2, r2, r3
 8013d10:	2308      	movs	r3, #8
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d921      	bls.n	8013d5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	f003 0307 	and.w	r3, r3, #7
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00c      	beq.n	8013d44 <pvPortMalloc+0x100>
	__asm volatile
 8013d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d2e:	b672      	cpsid	i
 8013d30:	f383 8811 	msr	BASEPRI, r3
 8013d34:	f3bf 8f6f 	isb	sy
 8013d38:	f3bf 8f4f 	dsb	sy
 8013d3c:	b662      	cpsie	i
 8013d3e:	613b      	str	r3, [r7, #16]
}
 8013d40:	bf00      	nop
 8013d42:	e7fe      	b.n	8013d42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d46:	685a      	ldr	r2, [r3, #4]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	1ad2      	subs	r2, r2, r3
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013d56:	69b8      	ldr	r0, [r7, #24]
 8013d58:	f000 f904 	bl	8013f64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013d5c:	4b1e      	ldr	r3, [pc, #120]	; (8013dd8 <pvPortMalloc+0x194>)
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d62:	685b      	ldr	r3, [r3, #4]
 8013d64:	1ad3      	subs	r3, r2, r3
 8013d66:	4a1c      	ldr	r2, [pc, #112]	; (8013dd8 <pvPortMalloc+0x194>)
 8013d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013d6a:	4b1b      	ldr	r3, [pc, #108]	; (8013dd8 <pvPortMalloc+0x194>)
 8013d6c:	681a      	ldr	r2, [r3, #0]
 8013d6e:	4b1c      	ldr	r3, [pc, #112]	; (8013de0 <pvPortMalloc+0x19c>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d203      	bcs.n	8013d7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013d76:	4b18      	ldr	r3, [pc, #96]	; (8013dd8 <pvPortMalloc+0x194>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	4a19      	ldr	r2, [pc, #100]	; (8013de0 <pvPortMalloc+0x19c>)
 8013d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	685a      	ldr	r2, [r3, #4]
 8013d82:	4b14      	ldr	r3, [pc, #80]	; (8013dd4 <pvPortMalloc+0x190>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	431a      	orrs	r2, r3
 8013d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8e:	2200      	movs	r2, #0
 8013d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013d92:	f7fe fef3 	bl	8012b7c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013d96:	69fb      	ldr	r3, [r7, #28]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d101      	bne.n	8013da0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013d9c:	f7ed f874 	bl	8000e88 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	f003 0307 	and.w	r3, r3, #7
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d00c      	beq.n	8013dc4 <pvPortMalloc+0x180>
	__asm volatile
 8013daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dae:	b672      	cpsid	i
 8013db0:	f383 8811 	msr	BASEPRI, r3
 8013db4:	f3bf 8f6f 	isb	sy
 8013db8:	f3bf 8f4f 	dsb	sy
 8013dbc:	b662      	cpsie	i
 8013dbe:	60fb      	str	r3, [r7, #12]
}
 8013dc0:	bf00      	nop
 8013dc2:	e7fe      	b.n	8013dc2 <pvPortMalloc+0x17e>
	return pvReturn;
 8013dc4:	69fb      	ldr	r3, [r7, #28]
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3728      	adds	r7, #40	; 0x28
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
 8013dce:	bf00      	nop
 8013dd0:	20008504 	.word	0x20008504
 8013dd4:	20008510 	.word	0x20008510
 8013dd8:	20008508 	.word	0x20008508
 8013ddc:	200084fc 	.word	0x200084fc
 8013de0:	2000850c 	.word	0x2000850c

08013de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b086      	sub	sp, #24
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d04c      	beq.n	8013e90 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013df6:	2308      	movs	r3, #8
 8013df8:	425b      	negs	r3, r3
 8013dfa:	697a      	ldr	r2, [r7, #20]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	685a      	ldr	r2, [r3, #4]
 8013e08:	4b23      	ldr	r3, [pc, #140]	; (8013e98 <vPortFree+0xb4>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	4013      	ands	r3, r2
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d10c      	bne.n	8013e2c <vPortFree+0x48>
	__asm volatile
 8013e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e16:	b672      	cpsid	i
 8013e18:	f383 8811 	msr	BASEPRI, r3
 8013e1c:	f3bf 8f6f 	isb	sy
 8013e20:	f3bf 8f4f 	dsb	sy
 8013e24:	b662      	cpsie	i
 8013e26:	60fb      	str	r3, [r7, #12]
}
 8013e28:	bf00      	nop
 8013e2a:	e7fe      	b.n	8013e2a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d00c      	beq.n	8013e4e <vPortFree+0x6a>
	__asm volatile
 8013e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e38:	b672      	cpsid	i
 8013e3a:	f383 8811 	msr	BASEPRI, r3
 8013e3e:	f3bf 8f6f 	isb	sy
 8013e42:	f3bf 8f4f 	dsb	sy
 8013e46:	b662      	cpsie	i
 8013e48:	60bb      	str	r3, [r7, #8]
}
 8013e4a:	bf00      	nop
 8013e4c:	e7fe      	b.n	8013e4c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	685a      	ldr	r2, [r3, #4]
 8013e52:	4b11      	ldr	r3, [pc, #68]	; (8013e98 <vPortFree+0xb4>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	4013      	ands	r3, r2
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d019      	beq.n	8013e90 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d115      	bne.n	8013e90 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	685a      	ldr	r2, [r3, #4]
 8013e68:	4b0b      	ldr	r3, [pc, #44]	; (8013e98 <vPortFree+0xb4>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	43db      	mvns	r3, r3
 8013e6e:	401a      	ands	r2, r3
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013e74:	f7fe fe74 	bl	8012b60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	685a      	ldr	r2, [r3, #4]
 8013e7c:	4b07      	ldr	r3, [pc, #28]	; (8013e9c <vPortFree+0xb8>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	4413      	add	r3, r2
 8013e82:	4a06      	ldr	r2, [pc, #24]	; (8013e9c <vPortFree+0xb8>)
 8013e84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013e86:	6938      	ldr	r0, [r7, #16]
 8013e88:	f000 f86c 	bl	8013f64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013e8c:	f7fe fe76 	bl	8012b7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013e90:	bf00      	nop
 8013e92:	3718      	adds	r7, #24
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	20008510 	.word	0x20008510
 8013e9c:	20008508 	.word	0x20008508

08013ea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013eaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013eac:	4b27      	ldr	r3, [pc, #156]	; (8013f4c <prvHeapInit+0xac>)
 8013eae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f003 0307 	and.w	r3, r3, #7
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00c      	beq.n	8013ed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	3307      	adds	r3, #7
 8013ebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	f023 0307 	bic.w	r3, r3, #7
 8013ec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013ec8:	68ba      	ldr	r2, [r7, #8]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	1ad3      	subs	r3, r2, r3
 8013ece:	4a1f      	ldr	r2, [pc, #124]	; (8013f4c <prvHeapInit+0xac>)
 8013ed0:	4413      	add	r3, r2
 8013ed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ed8:	4a1d      	ldr	r2, [pc, #116]	; (8013f50 <prvHeapInit+0xb0>)
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013ede:	4b1c      	ldr	r3, [pc, #112]	; (8013f50 <prvHeapInit+0xb0>)
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	68ba      	ldr	r2, [r7, #8]
 8013ee8:	4413      	add	r3, r2
 8013eea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013eec:	2208      	movs	r2, #8
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	1a9b      	subs	r3, r3, r2
 8013ef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f023 0307 	bic.w	r3, r3, #7
 8013efa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	4a15      	ldr	r2, [pc, #84]	; (8013f54 <prvHeapInit+0xb4>)
 8013f00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013f02:	4b14      	ldr	r3, [pc, #80]	; (8013f54 <prvHeapInit+0xb4>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	2200      	movs	r2, #0
 8013f08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013f0a:	4b12      	ldr	r3, [pc, #72]	; (8013f54 <prvHeapInit+0xb4>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	68fa      	ldr	r2, [r7, #12]
 8013f1a:	1ad2      	subs	r2, r2, r3
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013f20:	4b0c      	ldr	r3, [pc, #48]	; (8013f54 <prvHeapInit+0xb4>)
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	685b      	ldr	r3, [r3, #4]
 8013f2c:	4a0a      	ldr	r2, [pc, #40]	; (8013f58 <prvHeapInit+0xb8>)
 8013f2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	4a09      	ldr	r2, [pc, #36]	; (8013f5c <prvHeapInit+0xbc>)
 8013f36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013f38:	4b09      	ldr	r3, [pc, #36]	; (8013f60 <prvHeapInit+0xc0>)
 8013f3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013f3e:	601a      	str	r2, [r3, #0]
}
 8013f40:	bf00      	nop
 8013f42:	3714      	adds	r7, #20
 8013f44:	46bd      	mov	sp, r7
 8013f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4a:	4770      	bx	lr
 8013f4c:	200004fc 	.word	0x200004fc
 8013f50:	200084fc 	.word	0x200084fc
 8013f54:	20008504 	.word	0x20008504
 8013f58:	2000850c 	.word	0x2000850c
 8013f5c:	20008508 	.word	0x20008508
 8013f60:	20008510 	.word	0x20008510

08013f64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013f64:	b480      	push	{r7}
 8013f66:	b085      	sub	sp, #20
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013f6c:	4b28      	ldr	r3, [pc, #160]	; (8014010 <prvInsertBlockIntoFreeList+0xac>)
 8013f6e:	60fb      	str	r3, [r7, #12]
 8013f70:	e002      	b.n	8013f78 <prvInsertBlockIntoFreeList+0x14>
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	60fb      	str	r3, [r7, #12]
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d8f7      	bhi.n	8013f72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	68ba      	ldr	r2, [r7, #8]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d108      	bne.n	8013fa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	685a      	ldr	r2, [r3, #4]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	685b      	ldr	r3, [r3, #4]
 8013f9c:	441a      	add	r2, r3
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	68ba      	ldr	r2, [r7, #8]
 8013fb0:	441a      	add	r2, r3
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d118      	bne.n	8013fec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	681a      	ldr	r2, [r3, #0]
 8013fbe:	4b15      	ldr	r3, [pc, #84]	; (8014014 <prvInsertBlockIntoFreeList+0xb0>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d00d      	beq.n	8013fe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	685a      	ldr	r2, [r3, #4]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	441a      	add	r2, r3
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	681a      	ldr	r2, [r3, #0]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	601a      	str	r2, [r3, #0]
 8013fe0:	e008      	b.n	8013ff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013fe2:	4b0c      	ldr	r3, [pc, #48]	; (8014014 <prvInsertBlockIntoFreeList+0xb0>)
 8013fe4:	681a      	ldr	r2, [r3, #0]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	601a      	str	r2, [r3, #0]
 8013fea:	e003      	b.n	8013ff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013ff4:	68fa      	ldr	r2, [r7, #12]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d002      	beq.n	8014002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	687a      	ldr	r2, [r7, #4]
 8014000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014002:	bf00      	nop
 8014004:	3714      	adds	r7, #20
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop
 8014010:	200084fc 	.word	0x200084fc
 8014014:	20008504 	.word	0x20008504

08014018 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 801401c:	f003 f9a4 	bl	8017368 <touchgfx_init>
}
 8014020:	bf00      	nop
 8014022:	bd80      	pop	{r7, pc}

08014024 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8014028:	f003 f9c8 	bl	80173bc <touchgfx_taskEntry>
}
 801402c:	bf00      	nop
 801402e:	bd80      	pop	{r7, pc}

08014030 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8014030:	b480      	push	{r7}
 8014032:	b083      	sub	sp, #12
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
    {
 8014038:	4a04      	ldr	r2, [pc, #16]	; (801404c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	601a      	str	r2, [r3, #0]
    }
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	4618      	mov	r0, r3
 8014042:	370c      	adds	r7, #12
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	08026e78 	.word	0x08026e78

08014050 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
    }
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f7ff ffe9 	bl	8014030 <_ZN8touchgfx12FontProviderD1Ev>
 801405e:	2104      	movs	r1, #4
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f011 f904 	bl	802526e <_ZdlPvj>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	4618      	mov	r0, r3
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	460b      	mov	r3, r1
 801407a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 801407c:	887b      	ldrh	r3, [r7, #2]
 801407e:	2b02      	cmp	r3, #2
 8014080:	d010      	beq.n	80140a4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8014082:	2b02      	cmp	r3, #2
 8014084:	dc13      	bgt.n	80140ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8014086:	2b00      	cmp	r3, #0
 8014088:	d002      	beq.n	8014090 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 801408a:	2b01      	cmp	r3, #1
 801408c:	d005      	beq.n	801409a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 801408e:	e00e      	b.n	80140ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8014090:	f001 fd28 	bl	8015ae4 <_ZN17TypedTextDatabase8getFontsEv>
 8014094:	4603      	mov	r3, r0
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	e00a      	b.n	80140b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 801409a:	f001 fd23 	bl	8015ae4 <_ZN17TypedTextDatabase8getFontsEv>
 801409e:	4603      	mov	r3, r0
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	e005      	b.n	80140b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80140a4:	f001 fd1e 	bl	8015ae4 <_ZN17TypedTextDatabase8getFontsEv>
 80140a8:	4603      	mov	r3, r0
 80140aa:	689b      	ldr	r3, [r3, #8]
 80140ac:	e000      	b.n	80140b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80140ae:	2300      	movs	r3, #0
    }
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3708      	adds	r7, #8
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}

080140b8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	4a05      	ldr	r2, [pc, #20]	; (80140d8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	601a      	str	r2, [r3, #0]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7ff ffb1 	bl	8014030 <_ZN8touchgfx12FontProviderD1Ev>
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	4618      	mov	r0, r3
 80140d2:	3708      	adds	r7, #8
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	08026e64 	.word	0x08026e64

080140dc <_ZN23ApplicationFontProviderD0Ev>:
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f7ff ffe7 	bl	80140b8 <_ZN23ApplicationFontProviderD1Ev>
 80140ea:	2104      	movs	r1, #4
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f011 f8be 	bl	802526e <_ZdlPvj>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	4618      	mov	r0, r3
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}

080140fc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80140fc:	b480      	push	{r7}
 80140fe:	b083      	sub	sp, #12
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
    {
 8014104:	4a04      	ldr	r2, [pc, #16]	; (8014118 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	601a      	str	r2, [r3, #0]
    }
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	4618      	mov	r0, r3
 801410e:	370c      	adds	r7, #12
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr
 8014118:	080270f4 	.word	0x080270f4

0801411c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
    }
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f7ff ffe9 	bl	80140fc <_ZN8touchgfx4FontD1Ev>
 801412a:	2110      	movs	r1, #16
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f011 f89e 	bl	802526e <_ZdlPvj>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	4618      	mov	r0, r3
 8014136:	3708      	adds	r7, #8
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801413c:	b590      	push	{r4, r7, lr}
 801413e:	b087      	sub	sp, #28
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	460b      	mov	r3, r1
 8014146:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8014148:	887b      	ldrh	r3, [r7, #2]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d101      	bne.n	8014152 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 801414e:	2300      	movs	r3, #0
 8014150:	e010      	b.n	8014174 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8014152:	2300      	movs	r3, #0
 8014154:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8014156:	2300      	movs	r3, #0
 8014158:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	3308      	adds	r3, #8
 8014160:	681c      	ldr	r4, [r3, #0]
 8014162:	f107 030f 	add.w	r3, r7, #15
 8014166:	f107 0210 	add.w	r2, r7, #16
 801416a:	8879      	ldrh	r1, [r7, #2]
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	47a0      	blx	r4
 8014170:	6178      	str	r0, [r7, #20]
        return glyph;
 8014172:	697b      	ldr	r3, [r7, #20]
    }
 8014174:	4618      	mov	r0, r3
 8014176:	371c      	adds	r7, #28
 8014178:	46bd      	mov	sp, r7
 801417a:	bd90      	pop	{r4, r7, pc}

0801417c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 801417c:	b480      	push	{r7}
 801417e:	b083      	sub	sp, #12
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	895b      	ldrh	r3, [r3, #10]
    }
 8014188:	4618      	mov	r0, r3
 801418a:	370c      	adds	r7, #12
 801418c:	46bd      	mov	sp, r7
 801418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014192:	4770      	bx	lr

08014194 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8014194:	b480      	push	{r7}
 8014196:	b083      	sub	sp, #12
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	899b      	ldrh	r3, [r3, #12]
    }
 80141a0:	4618      	mov	r0, r3
 80141a2:	370c      	adds	r7, #12
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr

080141ac <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80141ac:	b480      	push	{r7}
 80141ae:	b083      	sub	sp, #12
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	889b      	ldrh	r3, [r3, #4]
    }
 80141b8:	4618      	mov	r0, r3
 80141ba:	370c      	adds	r7, #12
 80141bc:	46bd      	mov	sp, r7
 80141be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c2:	4770      	bx	lr

080141c4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	889a      	ldrh	r2, [r3, #4]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	799b      	ldrb	r3, [r3, #6]
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	4413      	add	r3, r2
 80141d8:	b29b      	uxth	r3, r3
    }
 80141da:	4618      	mov	r0, r3
 80141dc:	370c      	adds	r7, #12
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr

080141e6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80141e6:	b480      	push	{r7}
 80141e8:	b083      	sub	sp, #12
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	79db      	ldrb	r3, [r3, #7]
 80141f2:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80141f6:	b2db      	uxtb	r3, r3
    }
 80141f8:	4618      	mov	r0, r3
 80141fa:	370c      	adds	r7, #12
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr

08014204 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8014204:	b480      	push	{r7}
 8014206:	b083      	sub	sp, #12
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	79db      	ldrb	r3, [r3, #7]
 8014210:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014214:	b2db      	uxtb	r3, r3
    }
 8014216:	4618      	mov	r0, r3
 8014218:	370c      	adds	r7, #12
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
	...

08014224 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	4a05      	ldr	r2, [pc, #20]	; (8014244 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	601a      	str	r2, [r3, #0]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	4618      	mov	r0, r3
 8014236:	f7ff ff61 	bl	80140fc <_ZN8touchgfx4FontD1Ev>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	4618      	mov	r0, r3
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	0802826c 	.word	0x0802826c

08014248 <_ZN8touchgfx9ConstFontD0Ev>:
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7ff ffe7 	bl	8014224 <_ZN8touchgfx9ConstFontD1Ev>
 8014256:	2118      	movs	r1, #24
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f011 f808 	bl	802526e <_ZdlPvj>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4618      	mov	r0, r3
 8014262:	3708      	adds	r7, #8
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}

08014268 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	4a05      	ldr	r2, [pc, #20]	; (8014288 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	601a      	str	r2, [r3, #0]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	4618      	mov	r0, r3
 801427a:	f7ff ffd3 	bl	8014224 <_ZN8touchgfx9ConstFontD1Ev>
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	4618      	mov	r0, r3
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	08026e8c 	.word	0x08026e8c

0801428c <_ZN8touchgfx13GeneratedFontD0Ev>:
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f7ff ffe7 	bl	8014268 <_ZN8touchgfx13GeneratedFontD1Ev>
 801429a:	2124      	movs	r1, #36	; 0x24
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f010 ffe6 	bl	802526e <_ZdlPvj>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	4618      	mov	r0, r3
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80142ac:	b480      	push	{r7}
 80142ae:	b083      	sub	sp, #12
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6a1b      	ldr	r3, [r3, #32]
    }
 80142b8:	4618      	mov	r0, r3
 80142ba:	370c      	adds	r7, #12
 80142bc:	46bd      	mov	sp, r7
 80142be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c2:	4770      	bx	lr

080142c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b08c      	sub	sp, #48	; 0x30
 80142c8:	af08      	add	r7, sp, #32
 80142ca:	60f8      	str	r0, [r7, #12]
 80142cc:	60b9      	str	r1, [r7, #8]
 80142ce:	4611      	mov	r1, r2
 80142d0:	461a      	mov	r2, r3
 80142d2:	460b      	mov	r3, r1
 80142d4:	80fb      	strh	r3, [r7, #6]
 80142d6:	4613      	mov	r3, r2
 80142d8:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 80142da:	68f8      	ldr	r0, [r7, #12]
 80142dc:	88b9      	ldrh	r1, [r7, #4]
 80142de:	88fa      	ldrh	r2, [r7, #6]
 80142e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80142e2:	9306      	str	r3, [sp, #24]
 80142e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80142e6:	9305      	str	r3, [sp, #20]
 80142e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80142ec:	9304      	str	r3, [sp, #16]
 80142ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142f2:	9303      	str	r3, [sp, #12]
 80142f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142f8:	9302      	str	r3, [sp, #8]
 80142fa:	7f3b      	ldrb	r3, [r7, #28]
 80142fc:	9301      	str	r3, [sp, #4]
 80142fe:	7e3b      	ldrb	r3, [r7, #24]
 8014300:	9300      	str	r3, [sp, #0]
 8014302:	460b      	mov	r3, r1
 8014304:	68b9      	ldr	r1, [r7, #8]
 8014306:	f007 f903 	bl	801b510 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 801430a:	4a08      	ldr	r2, [pc, #32]	; (801432c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	601a      	str	r2, [r3, #0]
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014314:	619a      	str	r2, [r3, #24]
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801431a:	61da      	str	r2, [r3, #28]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014320:	621a      	str	r2, [r3, #32]
{
}
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	4618      	mov	r0, r3
 8014326:	3710      	adds	r7, #16
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}
 801432c:	08026e8c 	.word	0x08026e8c

08014330 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8014330:	b480      	push	{r7}
 8014332:	b085      	sub	sp, #20
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	699b      	ldr	r3, [r3, #24]
 801433e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	889b      	ldrh	r3, [r3, #4]
 8014344:	0adb      	lsrs	r3, r3, #11
 8014346:	b29b      	uxth	r3, r3
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	68fa      	ldr	r2, [r7, #12]
 801434c:	4413      	add	r3, r2
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	4413      	add	r3, r2
}
 8014356:	4618      	mov	r0, r3
 8014358:	3714      	adds	r7, #20
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr

08014362 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8014362:	b480      	push	{r7}
 8014364:	b089      	sub	sp, #36	; 0x24
 8014366:	af00      	add	r7, sp, #0
 8014368:	60f8      	str	r0, [r7, #12]
 801436a:	460b      	mov	r3, r1
 801436c:	607a      	str	r2, [r7, #4]
 801436e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d003      	beq.n	801437e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	7b1b      	ldrb	r3, [r3, #12]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d101      	bne.n	8014382 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801437e:	2300      	movs	r3, #0
 8014380:	e030      	b.n	80143e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	69da      	ldr	r2, [r3, #28]
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	7b5b      	ldrb	r3, [r3, #13]
 801438e:	021b      	lsls	r3, r3, #8
 8014390:	b21b      	sxth	r3, r3
 8014392:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014396:	b219      	sxth	r1, r3
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	7adb      	ldrb	r3, [r3, #11]
 801439c:	b21b      	sxth	r3, r3
 801439e:	430b      	orrs	r3, r1
 80143a0:	b21b      	sxth	r3, r3
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4413      	add	r3, r2
 80143a8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	7b1b      	ldrb	r3, [r3, #12]
 80143ae:	837b      	strh	r3, [r7, #26]
 80143b0:	8b7b      	ldrh	r3, [r7, #26]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d015      	beq.n	80143e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80143b6:	69fb      	ldr	r3, [r7, #28]
 80143b8:	881b      	ldrh	r3, [r3, #0]
 80143ba:	897a      	ldrh	r2, [r7, #10]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d103      	bne.n	80143c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80143c6:	e00d      	b.n	80143e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80143c8:	69fb      	ldr	r3, [r7, #28]
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	897a      	ldrh	r2, [r7, #10]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d306      	bcc.n	80143e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80143d2:	8b7b      	ldrh	r3, [r7, #26]
 80143d4:	3b01      	subs	r3, #1
 80143d6:	837b      	strh	r3, [r7, #26]
 80143d8:	69fb      	ldr	r3, [r7, #28]
 80143da:	3304      	adds	r3, #4
 80143dc:	61fb      	str	r3, [r7, #28]
 80143de:	e7e7      	b.n	80143b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80143e0:	bf00      	nop
        }
    }
    return 0;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3724      	adds	r7, #36	; 0x24
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80143f0:	b580      	push	{r7, lr}
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	4801      	ldr	r0, [pc, #4]	; (80143fc <__tcf_0+0xc>)
 80143f6:	f7ff ff37 	bl	8014268 <_ZN8touchgfx13GeneratedFontD1Ev>
 80143fa:	bd80      	pop	{r7, pc}
 80143fc:	20008514 	.word	0x20008514

08014400 <_Z23getFont_verdana_10_4bppv>:
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b08a      	sub	sp, #40	; 0x28
 8014404:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8014406:	4b1e      	ldr	r3, [pc, #120]	; (8014480 <_Z23getFont_verdana_10_4bppv+0x80>)
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	f3bf 8f5b 	dmb	ish
 801440e:	b2db      	uxtb	r3, r3
 8014410:	f003 0301 	and.w	r3, r3, #1
 8014414:	2b00      	cmp	r3, #0
 8014416:	bf0c      	ite	eq
 8014418:	2301      	moveq	r3, #1
 801441a:	2300      	movne	r3, #0
 801441c:	b2db      	uxtb	r3, r3
 801441e:	2b00      	cmp	r3, #0
 8014420:	d02a      	beq.n	8014478 <_Z23getFont_verdana_10_4bppv+0x78>
 8014422:	4817      	ldr	r0, [pc, #92]	; (8014480 <_Z23getFont_verdana_10_4bppv+0x80>)
 8014424:	f010 ff25 	bl	8025272 <__cxa_guard_acquire>
 8014428:	4603      	mov	r3, r0
 801442a:	2b00      	cmp	r3, #0
 801442c:	bf14      	ite	ne
 801442e:	2301      	movne	r3, #1
 8014430:	2300      	moveq	r3, #0
 8014432:	b2db      	uxtb	r3, r3
 8014434:	2b00      	cmp	r3, #0
 8014436:	d01f      	beq.n	8014478 <_Z23getFont_verdana_10_4bppv+0x78>
 8014438:	2300      	movs	r3, #0
 801443a:	9309      	str	r3, [sp, #36]	; 0x24
 801443c:	2300      	movs	r3, #0
 801443e:	9308      	str	r3, [sp, #32]
 8014440:	233f      	movs	r3, #63	; 0x3f
 8014442:	9307      	str	r3, [sp, #28]
 8014444:	4b0f      	ldr	r3, [pc, #60]	; (8014484 <_Z23getFont_verdana_10_4bppv+0x84>)
 8014446:	9306      	str	r3, [sp, #24]
 8014448:	4b0f      	ldr	r3, [pc, #60]	; (8014488 <_Z23getFont_verdana_10_4bppv+0x88>)
 801444a:	9305      	str	r3, [sp, #20]
 801444c:	2300      	movs	r3, #0
 801444e:	9304      	str	r3, [sp, #16]
 8014450:	2300      	movs	r3, #0
 8014452:	9303      	str	r3, [sp, #12]
 8014454:	2301      	movs	r3, #1
 8014456:	9302      	str	r3, [sp, #8]
 8014458:	2304      	movs	r3, #4
 801445a:	9301      	str	r3, [sp, #4]
 801445c:	2300      	movs	r3, #0
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	230a      	movs	r3, #10
 8014462:	2201      	movs	r2, #1
 8014464:	4909      	ldr	r1, [pc, #36]	; (801448c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8014466:	480a      	ldr	r0, [pc, #40]	; (8014490 <_Z23getFont_verdana_10_4bppv+0x90>)
 8014468:	f7ff ff2c 	bl	80142c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801446c:	4804      	ldr	r0, [pc, #16]	; (8014480 <_Z23getFont_verdana_10_4bppv+0x80>)
 801446e:	f010 ff0c 	bl	802528a <__cxa_guard_release>
 8014472:	4808      	ldr	r0, [pc, #32]	; (8014494 <_Z23getFont_verdana_10_4bppv+0x94>)
 8014474:	f010 ff48 	bl	8025308 <atexit>
    return verdana_10_4bpp;
 8014478:	4b05      	ldr	r3, [pc, #20]	; (8014490 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 801447a:	4618      	mov	r0, r3
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	20008538 	.word	0x20008538
 8014484:	080298e8 	.word	0x080298e8
 8014488:	08026ed8 	.word	0x08026ed8
 801448c:	080298b8 	.word	0x080298b8
 8014490:	20008514 	.word	0x20008514
 8014494:	080143f1 	.word	0x080143f1

08014498 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8014498:	b580      	push	{r7, lr}
 801449a:	af00      	add	r7, sp, #0
 801449c:	4801      	ldr	r0, [pc, #4]	; (80144a4 <__tcf_0+0xc>)
 801449e:	f7ff fee3 	bl	8014268 <_ZN8touchgfx13GeneratedFontD1Ev>
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	2000853c 	.word	0x2000853c

080144a8 <_Z23getFont_verdana_20_4bppv>:
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b08a      	sub	sp, #40	; 0x28
 80144ac:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80144ae:	4b1e      	ldr	r3, [pc, #120]	; (8014528 <_Z23getFont_verdana_20_4bppv+0x80>)
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	f3bf 8f5b 	dmb	ish
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	f003 0301 	and.w	r3, r3, #1
 80144bc:	2b00      	cmp	r3, #0
 80144be:	bf0c      	ite	eq
 80144c0:	2301      	moveq	r3, #1
 80144c2:	2300      	movne	r3, #0
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d02a      	beq.n	8014520 <_Z23getFont_verdana_20_4bppv+0x78>
 80144ca:	4817      	ldr	r0, [pc, #92]	; (8014528 <_Z23getFont_verdana_20_4bppv+0x80>)
 80144cc:	f010 fed1 	bl	8025272 <__cxa_guard_acquire>
 80144d0:	4603      	mov	r3, r0
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	bf14      	ite	ne
 80144d6:	2301      	movne	r3, #1
 80144d8:	2300      	moveq	r3, #0
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d01f      	beq.n	8014520 <_Z23getFont_verdana_20_4bppv+0x78>
 80144e0:	2300      	movs	r3, #0
 80144e2:	9309      	str	r3, [sp, #36]	; 0x24
 80144e4:	2300      	movs	r3, #0
 80144e6:	9308      	str	r3, [sp, #32]
 80144e8:	233f      	movs	r3, #63	; 0x3f
 80144ea:	9307      	str	r3, [sp, #28]
 80144ec:	4b0f      	ldr	r3, [pc, #60]	; (801452c <_Z23getFont_verdana_20_4bppv+0x84>)
 80144ee:	9306      	str	r3, [sp, #24]
 80144f0:	4b0f      	ldr	r3, [pc, #60]	; (8014530 <_Z23getFont_verdana_20_4bppv+0x88>)
 80144f2:	9305      	str	r3, [sp, #20]
 80144f4:	2300      	movs	r3, #0
 80144f6:	9304      	str	r3, [sp, #16]
 80144f8:	2300      	movs	r3, #0
 80144fa:	9303      	str	r3, [sp, #12]
 80144fc:	2301      	movs	r3, #1
 80144fe:	9302      	str	r3, [sp, #8]
 8014500:	2304      	movs	r3, #4
 8014502:	9301      	str	r3, [sp, #4]
 8014504:	2300      	movs	r3, #0
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	2314      	movs	r3, #20
 801450a:	2201      	movs	r2, #1
 801450c:	4909      	ldr	r1, [pc, #36]	; (8014534 <_Z23getFont_verdana_20_4bppv+0x8c>)
 801450e:	480a      	ldr	r0, [pc, #40]	; (8014538 <_Z23getFont_verdana_20_4bppv+0x90>)
 8014510:	f7ff fed8 	bl	80142c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8014514:	4804      	ldr	r0, [pc, #16]	; (8014528 <_Z23getFont_verdana_20_4bppv+0x80>)
 8014516:	f010 feb8 	bl	802528a <__cxa_guard_release>
 801451a:	4808      	ldr	r0, [pc, #32]	; (801453c <_Z23getFont_verdana_20_4bppv+0x94>)
 801451c:	f010 fef4 	bl	8025308 <atexit>
    return verdana_20_4bpp;
 8014520:	4b05      	ldr	r3, [pc, #20]	; (8014538 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 8014522:	4618      	mov	r0, r3
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	20008560 	.word	0x20008560
 801452c:	080298ec 	.word	0x080298ec
 8014530:	08026edc 	.word	0x08026edc
 8014534:	080298c8 	.word	0x080298c8
 8014538:	2000853c 	.word	0x2000853c
 801453c:	08014499 	.word	0x08014499

08014540 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8014540:	b580      	push	{r7, lr}
 8014542:	af00      	add	r7, sp, #0
 8014544:	4801      	ldr	r0, [pc, #4]	; (801454c <__tcf_0+0xc>)
 8014546:	f7ff fe8f 	bl	8014268 <_ZN8touchgfx13GeneratedFontD1Ev>
 801454a:	bd80      	pop	{r7, pc}
 801454c:	20008564 	.word	0x20008564

08014550 <_Z23getFont_verdana_40_4bppv>:
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b08a      	sub	sp, #40	; 0x28
 8014554:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8014556:	4b1e      	ldr	r3, [pc, #120]	; (80145d0 <_Z23getFont_verdana_40_4bppv+0x80>)
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	f3bf 8f5b 	dmb	ish
 801455e:	b2db      	uxtb	r3, r3
 8014560:	f003 0301 	and.w	r3, r3, #1
 8014564:	2b00      	cmp	r3, #0
 8014566:	bf0c      	ite	eq
 8014568:	2301      	moveq	r3, #1
 801456a:	2300      	movne	r3, #0
 801456c:	b2db      	uxtb	r3, r3
 801456e:	2b00      	cmp	r3, #0
 8014570:	d02a      	beq.n	80145c8 <_Z23getFont_verdana_40_4bppv+0x78>
 8014572:	4817      	ldr	r0, [pc, #92]	; (80145d0 <_Z23getFont_verdana_40_4bppv+0x80>)
 8014574:	f010 fe7d 	bl	8025272 <__cxa_guard_acquire>
 8014578:	4603      	mov	r3, r0
 801457a:	2b00      	cmp	r3, #0
 801457c:	bf14      	ite	ne
 801457e:	2301      	movne	r3, #1
 8014580:	2300      	moveq	r3, #0
 8014582:	b2db      	uxtb	r3, r3
 8014584:	2b00      	cmp	r3, #0
 8014586:	d01f      	beq.n	80145c8 <_Z23getFont_verdana_40_4bppv+0x78>
 8014588:	2300      	movs	r3, #0
 801458a:	9309      	str	r3, [sp, #36]	; 0x24
 801458c:	2300      	movs	r3, #0
 801458e:	9308      	str	r3, [sp, #32]
 8014590:	233f      	movs	r3, #63	; 0x3f
 8014592:	9307      	str	r3, [sp, #28]
 8014594:	4b0f      	ldr	r3, [pc, #60]	; (80145d4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8014596:	9306      	str	r3, [sp, #24]
 8014598:	4b0f      	ldr	r3, [pc, #60]	; (80145d8 <_Z23getFont_verdana_40_4bppv+0x88>)
 801459a:	9305      	str	r3, [sp, #20]
 801459c:	2300      	movs	r3, #0
 801459e:	9304      	str	r3, [sp, #16]
 80145a0:	2300      	movs	r3, #0
 80145a2:	9303      	str	r3, [sp, #12]
 80145a4:	2301      	movs	r3, #1
 80145a6:	9302      	str	r3, [sp, #8]
 80145a8:	2304      	movs	r3, #4
 80145aa:	9301      	str	r3, [sp, #4]
 80145ac:	2300      	movs	r3, #0
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	2328      	movs	r3, #40	; 0x28
 80145b2:	2201      	movs	r2, #1
 80145b4:	4909      	ldr	r1, [pc, #36]	; (80145dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 80145b6:	480a      	ldr	r0, [pc, #40]	; (80145e0 <_Z23getFont_verdana_40_4bppv+0x90>)
 80145b8:	f7ff fe84 	bl	80142c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80145bc:	4804      	ldr	r0, [pc, #16]	; (80145d0 <_Z23getFont_verdana_40_4bppv+0x80>)
 80145be:	f010 fe64 	bl	802528a <__cxa_guard_release>
 80145c2:	4808      	ldr	r0, [pc, #32]	; (80145e4 <_Z23getFont_verdana_40_4bppv+0x94>)
 80145c4:	f010 fea0 	bl	8025308 <atexit>
    return verdana_40_4bpp;
 80145c8:	4b05      	ldr	r3, [pc, #20]	; (80145e0 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	20008588 	.word	0x20008588
 80145d4:	080298f0 	.word	0x080298f0
 80145d8:	08026ee0 	.word	0x08026ee0
 80145dc:	080298d8 	.word	0x080298d8
 80145e0:	20008564 	.word	0x20008564
 80145e4:	08014541 	.word	0x08014541

080145e8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80145e8:	b480      	push	{r7}
 80145ea:	b083      	sub	sp, #12
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	6039      	str	r1, [r7, #0]
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	4618      	mov	r0, r3
 80145f6:	370c      	adds	r7, #12
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr

08014600 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8014600:	b480      	push	{r7}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	6039      	str	r1, [r7, #0]
    {
    }
 801460a:	bf00      	nop
 801460c:	370c      	adds	r7, #12
 801460e:	46bd      	mov	sp, r7
 8014610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014614:	4770      	bx	lr

08014616 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8014616:	b480      	push	{r7}
 8014618:	b083      	sub	sp, #12
 801461a:	af00      	add	r7, sp, #0
 801461c:	6078      	str	r0, [r7, #4]
 801461e:	6039      	str	r1, [r7, #0]
    {
    }
 8014620:	bf00      	nop
 8014622:	370c      	adds	r7, #12
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 801462c:	b480      	push	{r7}
 801462e:	b083      	sub	sp, #12
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
    {
    }
 8014636:	bf00      	nop
 8014638:	370c      	adds	r7, #12
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr

08014642 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8014642:	b480      	push	{r7}
 8014644:	b083      	sub	sp, #12
 8014646:	af00      	add	r7, sp, #0
 8014648:	6078      	str	r0, [r7, #4]
 801464a:	460b      	mov	r3, r1
 801464c:	70fb      	strb	r3, [r7, #3]
    {
    }
 801464e:	bf00      	nop
 8014650:	370c      	adds	r7, #12
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr

0801465a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 801465a:	b480      	push	{r7}
 801465c:	b083      	sub	sp, #12
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
    {
    }
 8014662:	bf00      	nop
 8014664:	370c      	adds	r7, #12
 8014666:	46bd      	mov	sp, r7
 8014668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466c:	4770      	bx	lr

0801466e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 801466e:	b480      	push	{r7}
 8014670:	b083      	sub	sp, #12
 8014672:	af00      	add	r7, sp, #0
 8014674:	6078      	str	r0, [r7, #4]
    {
    }
 8014676:	bf00      	nop
 8014678:	370c      	adds	r7, #12
 801467a:	46bd      	mov	sp, r7
 801467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014680:	4770      	bx	lr
	...

08014684 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
    {
 801468c:	4a04      	ldr	r2, [pc, #16]	; (80146a0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	601a      	str	r2, [r3, #0]
    }
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	4618      	mov	r0, r3
 8014696:	370c      	adds	r7, #12
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr
 80146a0:	08026fec 	.word	0x08026fec

080146a4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
    }
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7ff ffe9 	bl	8014684 <_ZN8touchgfx15UIEventListenerD1Ev>
 80146b2:	2104      	movs	r1, #4
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f010 fdda 	bl	802526e <_ZdlPvj>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	4618      	mov	r0, r3
 80146be:	3708      	adds	r7, #8
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80146c4:	b480      	push	{r7}
 80146c6:	b083      	sub	sp, #12
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	460b      	mov	r3, r1
 80146ce:	70fb      	strb	r3, [r7, #3]
    {
    }
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	683a      	ldr	r2, [r7, #0]
 80146ea:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80146ee:	6810      	ldr	r0, [r2, #0]
 80146f0:	6851      	ldr	r1, [r2, #4]
 80146f2:	c303      	stmia	r3!, {r0, r1}
    };
 80146f4:	bf00      	nop
 80146f6:	370c      	adds	r7, #12
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
    {
 8014708:	4a04      	ldr	r2, [pc, #16]	; (801471c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	601a      	str	r2, [r3, #0]
    }
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	4618      	mov	r0, r3
 8014712:	370c      	adds	r7, #12
 8014714:	46bd      	mov	sp, r7
 8014716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471a:	4770      	bx	lr
 801471c:	08026fd4 	.word	0x08026fd4

08014720 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
    }
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7ff ffe9 	bl	8014700 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801472e:	2104      	movs	r1, #4
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f010 fd9c 	bl	802526e <_ZdlPvj>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	4618      	mov	r0, r3
 801473a:	3708      	adds	r7, #8
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8014740:	b480      	push	{r7}
 8014742:	af00      	add	r7, sp, #0
    {
        return instance;
 8014744:	4b03      	ldr	r3, [pc, #12]	; (8014754 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8014746:	681b      	ldr	r3, [r3, #0]
    }
 8014748:	4618      	mov	r0, r3
 801474a:	46bd      	mov	sp, r7
 801474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop
 8014754:	200094d8 	.word	0x200094d8

08014758 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8014758:	b480      	push	{r7}
 801475a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 801475c:	4b0b      	ldr	r3, [pc, #44]	; (801478c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8014764:	2b00      	cmp	r3, #0
 8014766:	d008      	beq.n	801477a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8014768:	4b08      	ldr	r3, [pc, #32]	; (801478c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801476e:	2b00      	cmp	r3, #0
 8014770:	d003      	beq.n	801477a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8014772:	4b06      	ldr	r3, [pc, #24]	; (801478c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014778:	e002      	b.n	8014780 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 801477a:	4b04      	ldr	r3, [pc, #16]	; (801478c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	689b      	ldr	r3, [r3, #8]
        }
    }
 8014780:	4618      	mov	r0, r3
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr
 801478a:	bf00      	nop
 801478c:	200094d8 	.word	0x200094d8

08014790 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8014790:	b480      	push	{r7}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8014798:	4a07      	ldr	r2, [pc, #28]	; (80147b8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	601a      	str	r2, [r3, #0]
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2200      	movs	r2, #0
 80147a2:	605a      	str	r2, [r3, #4]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	721a      	strb	r2, [r3, #8]
    {
    }
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	4618      	mov	r0, r3
 80147ae:	370c      	adds	r7, #12
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr
 80147b8:	08026fb0 	.word	0x08026fb0

080147bc <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
    {
 80147c4:	4a04      	ldr	r2, [pc, #16]	; (80147d8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	601a      	str	r2, [r3, #0]
    }
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	4618      	mov	r0, r3
 80147ce:	370c      	adds	r7, #12
 80147d0:	46bd      	mov	sp, r7
 80147d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d6:	4770      	bx	lr
 80147d8:	08026fb0 	.word	0x08026fb0

080147dc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
    }
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f7ff ffe9 	bl	80147bc <_ZN8touchgfx10TransitionD1Ev>
 80147ea:	210c      	movs	r1, #12
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f010 fd3e 	bl	802526e <_ZdlPvj>
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4618      	mov	r0, r3
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80147fc:	b480      	push	{r7}
 80147fe:	b083      	sub	sp, #12
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
    {
    }
 8014804:	bf00      	nop
 8014806:	370c      	adds	r7, #12
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr

08014810 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8014810:	b480      	push	{r7}
 8014812:	b083      	sub	sp, #12
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
    {
    }
 8014818:	bf00      	nop
 801481a:	370c      	adds	r7, #12
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr

08014824 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8014824:	b480      	push	{r7}
 8014826:	b083      	sub	sp, #12
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
    {
    }
 801482c:	bf00      	nop
 801482e:	370c      	adds	r7, #12
 8014830:	46bd      	mov	sp, r7
 8014832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014836:	4770      	bx	lr

08014838 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8014840:	f005 fe48 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 8014844:	4603      	mov	r3, r0
 8014846:	681a      	ldr	r2, [r3, #0]
 8014848:	3230      	adds	r2, #48	; 0x30
 801484a:	6812      	ldr	r2, [r2, #0]
 801484c:	4618      	mov	r0, r3
 801484e:	4790      	blx	r2
    }
 8014850:	bf00      	nop
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8014858:	b480      	push	{r7}
 801485a:	b083      	sub	sp, #12
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	683a      	ldr	r2, [r7, #0]
 8014866:	605a      	str	r2, [r3, #4]
    }
 8014868:	bf00      	nop
 801486a:	370c      	adds	r7, #12
 801486c:	46bd      	mov	sp, r7
 801486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014872:	4770      	bx	lr

08014874 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	4a05      	ldr	r2, [pc, #20]	; (8014894 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	f7ff fefd 	bl	8014684 <_ZN8touchgfx15UIEventListenerD1Ev>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	08028118 	.word	0x08028118

08014898 <_ZN8touchgfx11ApplicationD0Ev>:
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7ff ffe7 	bl	8014874 <_ZN8touchgfx11ApplicationD1Ev>
 80148a6:	f44f 719c 	mov.w	r1, #312	; 0x138
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f010 fcdf 	bl	802526e <_ZdlPvj>
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	4618      	mov	r0, r3
 80148b4:	3708      	adds	r7, #8
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
	...

080148bc <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	4618      	mov	r0, r3
 80148c8:	f005 fe26 	bl	801a518 <_ZN8touchgfx11ApplicationC1Ev>
 80148cc:	4a09      	ldr	r2, [pc, #36]	; (80148f4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	601a      	str	r2, [r3, #0]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2200      	movs	r2, #0
 80148d6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2200      	movs	r2, #0
 80148de:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	4a04      	ldr	r2, [pc, #16]	; (80148f8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80148e6:	6013      	str	r3, [r2, #0]
    }
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	4618      	mov	r0, r3
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	08026f6c 	.word	0x08026f6c
 80148f8:	20009524 	.word	0x20009524

080148fc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f000 f804 	bl	8014912 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801490a:	bf00      	nop
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8014912:	b580      	push	{r7, lr}
 8014914:	b082      	sub	sp, #8
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8014920:	2b00      	cmp	r3, #0
 8014922:	d00f      	beq.n	8014944 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	330c      	adds	r3, #12
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	4610      	mov	r0, r2
 8014938:	4798      	blx	r3
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d001      	beq.n	8014944 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8014940:	2301      	movs	r3, #1
 8014942:	e000      	b.n	8014946 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8014944:	2300      	movs	r3, #0
 8014946:	2b00      	cmp	r3, #0
 8014948:	d00e      	beq.n	8014968 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	3308      	adds	r3, #8
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	4610      	mov	r0, r2
 801495e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2200      	movs	r2, #0
 8014964:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8014968:	bf00      	nop
 801496a:	3708      	adds	r7, #8
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8014970:	b480      	push	{r7}
 8014972:	b083      	sub	sp, #12
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	683a      	ldr	r2, [r7, #0]
 801497e:	601a      	str	r2, [r3, #0]
    }
 8014980:	bf00      	nop
 8014982:	370c      	adds	r7, #12
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr

0801498c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	4a05      	ldr	r2, [pc, #20]	; (80149ac <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	601a      	str	r2, [r3, #0]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff ff69 	bl	8014874 <_ZN8touchgfx11ApplicationD1Ev>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	4618      	mov	r0, r3
 80149a6:	3708      	adds	r7, #8
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}
 80149ac:	08026f6c 	.word	0x08026f6c

080149b0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7ff ffe7 	bl	801498c <_ZN8touchgfx14MVPApplicationD1Ev>
 80149be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f010 fc53 	bl	802526e <_ZdlPvj>
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	4618      	mov	r0, r3
 80149cc:	3708      	adds	r7, #8
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
	...

080149d4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	4a08      	ldr	r2, [pc, #32]	; (8014a00 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	601a      	str	r2, [r3, #0]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80149e8:	4618      	mov	r0, r3
 80149ea:	f000 fab9 	bl	8014f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7ff ffcb 	bl	801498c <_ZN8touchgfx14MVPApplicationD1Ev>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	4618      	mov	r0, r3
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	08026f10 	.word	0x08026f10

08014a04 <_ZN23FrontendApplicationBaseD0Ev>:
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b082      	sub	sp, #8
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f7ff ffe1 	bl	80149d4 <_ZN23FrontendApplicationBaseD1Ev>
 8014a12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f010 fc29 	bl	802526e <_ZdlPvj>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3708      	adds	r7, #8
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}

08014a26 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8014a26:	b480      	push	{r7}
 8014a28:	b083      	sub	sp, #12
 8014a2a:	af00      	add	r7, sp, #0
 8014a2c:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2201      	movs	r2, #1
 8014a32:	721a      	strb	r2, [r3, #8]
    }
 8014a34:	bf00      	nop
 8014a36:	370c      	adds	r7, #12
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr

08014a40 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	683a      	ldr	r2, [r7, #0]
 8014a4e:	605a      	str	r2, [r3, #4]
    }
 8014a50:	bf00      	nop
 8014a52:	370c      	adds	r7, #12
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr

08014a5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7ff ff26 	bl	80148bc <_ZN8touchgfx14MVPApplicationC1Ev>
 8014a70:	4a12      	ldr	r2, [pc, #72]	; (8014abc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	601a      	str	r2, [r3, #0]
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f000 f89d 	bl	8014bbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	68ba      	ldr	r2, [r7, #8]
 8014a8e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8014a92:	f7ff fe55 	bl	8014740 <_ZN8touchgfx3HAL11getInstanceEv>
 8014a96:	4603      	mov	r3, r0
 8014a98:	681a      	ldr	r2, [r3, #0]
 8014a9a:	3208      	adds	r2, #8
 8014a9c:	6812      	ldr	r2, [r2, #0]
 8014a9e:	2100      	movs	r1, #0
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8014aa4:	f7ff fe58 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f00b fc35 	bl	802031a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3710      	adds	r7, #16
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	08026f10 	.word	0x08026f10

08014ac0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	6039      	str	r1, [r7, #0]
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4618      	mov	r0, r3
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr

08014ad8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	683a      	ldr	r2, [r7, #0]
 8014ae6:	4611      	mov	r1, r2
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7ff ffe9 	bl	8014ac0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	685a      	ldr	r2, [r3, #4]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	605a      	str	r2, [r3, #4]
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	683a      	ldr	r2, [r7, #0]
 8014afa:	3308      	adds	r3, #8
 8014afc:	3208      	adds	r2, #8
 8014afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b02:	e883 0003 	stmia.w	r3, {r0, r1}
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8014b10:	b590      	push	{r4, r7, lr}
 8014b12:	b089      	sub	sp, #36	; 0x24
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8014b1e:	4b10      	ldr	r3, [pc, #64]	; (8014b60 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8014b20:	61bb      	str	r3, [r7, #24]
 8014b22:	2300      	movs	r3, #0
 8014b24:	61fb      	str	r3, [r7, #28]
 8014b26:	f107 0008 	add.w	r0, r7, #8
 8014b2a:	f107 0318 	add.w	r3, r7, #24
 8014b2e:	cb0c      	ldmia	r3, {r2, r3}
 8014b30:	6879      	ldr	r1, [r7, #4]
 8014b32:	f000 f85f 	bl	8014bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8014b36:	f107 0308 	add.w	r3, r7, #8
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f7ff ffcb 	bl	8014ad8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8014b42:	f107 0308 	add.w	r3, r7, #8
 8014b46:	4618      	mov	r0, r3
 8014b48:	f000 fa0a 	bl	8014f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8014b58:	bf00      	nop
 8014b5a:	3724      	adds	r7, #36	; 0x24
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd90      	pop	{r4, r7, pc}
 8014b60:	08014b65 	.word	0x08014b65

08014b64 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b084      	sub	sp, #16
 8014b68:	af02      	add	r7, sp, #8
 8014b6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8014b78:	461a      	mov	r2, r3
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014b80:	9300      	str	r3, [sp, #0]
 8014b82:	4b04      	ldr	r3, [pc, #16]	; (8014b94 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8014b84:	4804      	ldr	r0, [pc, #16]	; (8014b98 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 8014b86:	f000 f867 	bl	8014c58 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8014b8a:	bf00      	nop
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	20009518 	.word	0x20009518
 8014b98:	20009514 	.word	0x20009514

08014b9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8014b9c:	b480      	push	{r7}
 8014b9e:	b083      	sub	sp, #12
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	4a04      	ldr	r2, [pc, #16]	; (8014bb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	601a      	str	r2, [r3, #0]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	4618      	mov	r0, r3
 8014bae:	370c      	adds	r7, #12
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb6:	4770      	bx	lr
 8014bb8:	08026fd4 	.word	0x08026fd4

08014bbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7ff ffe8 	bl	8014b9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8014bcc:	4a08      	ldr	r2, [pc, #32]	; (8014bf0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	601a      	str	r2, [r3, #0]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	605a      	str	r2, [r3, #4]
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	609a      	str	r2, [r3, #8]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2200      	movs	r2, #0
 8014be2:	60da      	str	r2, [r3, #12]
    {
    }
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	4618      	mov	r0, r3
 8014be8:	3708      	adds	r7, #8
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	08026f54 	.word	0x08026f54

08014bf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b084      	sub	sp, #16
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	60f8      	str	r0, [r7, #12]
 8014bfc:	60b9      	str	r1, [r7, #8]
 8014bfe:	4639      	mov	r1, r7
 8014c00:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7ff ffc8 	bl	8014b9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8014c0c:	4a08      	ldr	r2, [pc, #32]	; (8014c30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	68ba      	ldr	r2, [r7, #8]
 8014c16:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	3308      	adds	r3, #8
 8014c1c:	463a      	mov	r2, r7
 8014c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c22:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3710      	adds	r7, #16
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	08026f54 	.word	0x08026f54

08014c34 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7ff fda6 	bl	8014790 <_ZN8touchgfx10TransitionC1Ev>
 8014c44:	4a03      	ldr	r2, [pc, #12]	; (8014c54 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	601a      	str	r2, [r3, #0]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3708      	adds	r7, #8
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	08026eec 	.word	0x08026eec

08014c58 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014c58:	b590      	push	{r4, r7, lr}
 8014c5a:	b08f      	sub	sp, #60	; 0x3c
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	607a      	str	r2, [r7, #4]
 8014c64:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	689a      	ldr	r2, [r3, #8]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	689b      	ldr	r3, [r3, #8]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	3320      	adds	r3, #32
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	4610      	mov	r0, r2
 8014c76:	4798      	blx	r3
 8014c78:	4603      	mov	r3, r0
 8014c7a:	2b6b      	cmp	r3, #107	; 0x6b
 8014c7c:	d805      	bhi.n	8014c8a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8014c7e:	4b7e      	ldr	r3, [pc, #504]	; (8014e78 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8014c80:	4a7e      	ldr	r2, [pc, #504]	; (8014e7c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014c82:	21a7      	movs	r1, #167	; 0xa7
 8014c84:	487e      	ldr	r0, [pc, #504]	; (8014e80 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8014c86:	f010 fb21 	bl	80252cc <__assert_func>
 8014c8a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	685a      	ldr	r2, [r3, #4]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	3320      	adds	r3, #32
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	4610      	mov	r0, r2
 8014c9c:	4798      	blx	r3
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	2b0f      	cmp	r3, #15
 8014ca2:	d805      	bhi.n	8014cb0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8014ca4:	4b77      	ldr	r3, [pc, #476]	; (8014e84 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8014ca6:	4a75      	ldr	r2, [pc, #468]	; (8014e7c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014ca8:	21a8      	movs	r1, #168	; 0xa8
 8014caa:	4875      	ldr	r0, [pc, #468]	; (8014e80 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8014cac:	f010 fb0e 	bl	80252cc <__assert_func>
 8014cb0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	68da      	ldr	r2, [r3, #12]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	3320      	adds	r3, #32
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	4610      	mov	r0, r2
 8014cc2:	4798      	blx	r3
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	2b0b      	cmp	r3, #11
 8014cc8:	d805      	bhi.n	8014cd6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8014cca:	4b6f      	ldr	r3, [pc, #444]	; (8014e88 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8014ccc:	4a6b      	ldr	r2, [pc, #428]	; (8014e7c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8014cce:	21a9      	movs	r1, #169	; 0xa9
 8014cd0:	486b      	ldr	r0, [pc, #428]	; (8014e80 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8014cd2:	f010 fafb 	bl	80252cc <__assert_func>
 8014cd6:	bf00      	nop
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	627b      	str	r3, [r7, #36]	; 0x24
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8014ce4:	f005 fbf6 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	4618      	mov	r0, r3
 8014cec:	f005 fbf8 	bl	801a4e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8014cf0:	6a3b      	ldr	r3, [r7, #32]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d008      	beq.n	8014d0a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8014cf8:	6a3b      	ldr	r3, [r7, #32]
 8014cfa:	681a      	ldr	r2, [r3, #0]
 8014cfc:	6a3b      	ldr	r3, [r7, #32]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	330c      	adds	r3, #12
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	4610      	mov	r0, r2
 8014d08:	4798      	blx	r3
    if (*currentTrans)
 8014d0a:	6a3b      	ldr	r3, [r7, #32]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d007      	beq.n	8014d22 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8014d12:	6a3b      	ldr	r3, [r7, #32]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	6a3b      	ldr	r3, [r7, #32]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4610      	mov	r0, r2
 8014d20:	4798      	blx	r3
    if (*currentScreen)
 8014d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d008      	beq.n	8014d3c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8014d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	3314      	adds	r3, #20
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	4610      	mov	r0, r2
 8014d3a:	4798      	blx	r3
    if (*currentPresenter)
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d008      	beq.n	8014d56 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8014d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d46:	681a      	ldr	r2, [r3, #0]
 8014d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	3304      	adds	r3, #4
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	4610      	mov	r0, r2
 8014d54:	4798      	blx	r3
    if (*currentScreen)
 8014d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d007      	beq.n	8014d6e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8014d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	4610      	mov	r0, r2
 8014d6c:	4798      	blx	r3
    if (*currentPresenter)
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d008      	beq.n	8014d88 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8014d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	3308      	adds	r3, #8
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	4610      	mov	r0, r2
 8014d86:	4798      	blx	r3
}
 8014d88:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	2100      	movs	r1, #0
 8014d90:	4618      	mov	r0, r3
 8014d92:	f000 f87b 	bl	8014e8c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8014d96:	4603      	mov	r3, r0
 8014d98:	4619      	mov	r1, r3
 8014d9a:	200c      	movs	r0, #12
 8014d9c:	f7ff fc24 	bl	80145e8 <_ZnwjPv>
 8014da0:	4604      	mov	r4, r0
 8014da2:	4620      	mov	r0, r4
 8014da4:	f7ff ff46 	bl	8014c34 <_ZN8touchgfx12NoTransitionC1Ev>
 8014da8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	689b      	ldr	r3, [r3, #8]
 8014dae:	2100      	movs	r1, #0
 8014db0:	4618      	mov	r0, r3
 8014db2:	f000 f87e 	bl	8014eb2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8014db6:	4603      	mov	r3, r0
 8014db8:	4619      	mov	r1, r3
 8014dba:	206c      	movs	r0, #108	; 0x6c
 8014dbc:	f7ff fc14 	bl	80145e8 <_ZnwjPv>
 8014dc0:	4604      	mov	r4, r0
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f001 f828 	bl	8015e18 <_ZN10screenViewC1Ev>
 8014dc8:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	2100      	movs	r1, #0
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f000 f881 	bl	8014ed8 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	4619      	mov	r1, r3
 8014dda:	2010      	movs	r0, #16
 8014ddc:	f7ff fc04 	bl	80145e8 <_ZnwjPv>
 8014de0:	4604      	mov	r4, r0
 8014de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014de4:	4620      	mov	r0, r4
 8014de6:	f000 ffc1 	bl	8015d6c <_ZN15screenPresenterC1ER10screenView>
 8014dea:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014df0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014df6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dfc:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d002      	beq.n	8014e0a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8014e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e06:	3304      	adds	r3, #4
 8014e08:	e000      	b.n	8014e0c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014e10:	f7ff fdae 	bl	8014970 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8014e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e16:	3304      	adds	r3, #4
 8014e18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7ff fe10 	bl	8014a40 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8014e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e24:	4618      	mov	r0, r3
 8014e26:	f000 f86a 	bl	8014efe <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8014e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2c:	61fb      	str	r3, [r7, #28]
 8014e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e30:	61bb      	str	r3, [r7, #24]
 8014e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e34:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	330c      	adds	r3, #12
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	69f8      	ldr	r0, [r7, #28]
 8014e40:	4798      	blx	r3
    newPresenter->activate();
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	69b8      	ldr	r0, [r7, #24]
 8014e4a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8014e4c:	6979      	ldr	r1, [r7, #20]
 8014e4e:	69f8      	ldr	r0, [r7, #28]
 8014e50:	f006 ff53 	bl	801bcfa <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	3310      	adds	r3, #16
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	6978      	ldr	r0, [r7, #20]
 8014e5e:	4798      	blx	r3
    newTransition->invalidate();
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	3314      	adds	r3, #20
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	6978      	ldr	r0, [r7, #20]
 8014e6a:	4798      	blx	r3
}
 8014e6c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8014e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	373c      	adds	r7, #60	; 0x3c
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd90      	pop	{r4, r7, pc}
 8014e78:	08026454 	.word	0x08026454
 8014e7c:	080264e4 	.word	0x080264e4
 8014e80:	080265e8 	.word	0x080265e8
 8014e84:	0802662c 	.word	0x0802662c
 8014e88:	080266d0 	.word	0x080266d0

08014e8c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	460b      	mov	r3, r1
 8014e96:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	3324      	adds	r3, #36	; 0x24
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	887a      	ldrh	r2, [r7, #2]
 8014ea2:	4611      	mov	r1, r2
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	4798      	blx	r3
 8014ea8:	4603      	mov	r3, r0
    }
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3708      	adds	r7, #8
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}

08014eb2 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8014eb2:	b580      	push	{r7, lr}
 8014eb4:	b082      	sub	sp, #8
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	6078      	str	r0, [r7, #4]
 8014eba:	460b      	mov	r3, r1
 8014ebc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	3324      	adds	r3, #36	; 0x24
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	887a      	ldrh	r2, [r7, #2]
 8014ec8:	4611      	mov	r1, r2
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	4798      	blx	r3
 8014ece:	4603      	mov	r3, r0
    }
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	460b      	mov	r3, r1
 8014ee2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	3324      	adds	r3, #36	; 0x24
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	887a      	ldrh	r2, [r7, #2]
 8014eee:	4611      	mov	r1, r2
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	4798      	blx	r3
 8014ef4:	4603      	mov	r3, r0
    }
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3708      	adds	r7, #8
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}

08014efe <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8014efe:	b480      	push	{r7}
 8014f00:	b083      	sub	sp, #12
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
 8014f06:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	683a      	ldr	r2, [r7, #0]
 8014f0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014f0e:	bf00      	nop
 8014f10:	370c      	adds	r7, #12
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr
	...

08014f1c <_ZN8touchgfx12NoTransitionD1Ev>:
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b082      	sub	sp, #8
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
 8014f24:	4a05      	ldr	r2, [pc, #20]	; (8014f3c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	601a      	str	r2, [r3, #0]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7ff fc45 	bl	80147bc <_ZN8touchgfx10TransitionD1Ev>
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	4618      	mov	r0, r3
 8014f36:	3708      	adds	r7, #8
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	08026eec 	.word	0x08026eec

08014f40 <_ZN8touchgfx12NoTransitionD0Ev>:
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f7ff ffe7 	bl	8014f1c <_ZN8touchgfx12NoTransitionD1Ev>
 8014f4e:	210c      	movs	r1, #12
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f010 f98c 	bl	802526e <_ZdlPvj>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3708      	adds	r7, #8
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	4a05      	ldr	r2, [pc, #20]	; (8014f80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	601a      	str	r2, [r3, #0]
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7ff fbc5 	bl	8014700 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}
 8014f80:	08026f54 	.word	0x08026f54

08014f84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b082      	sub	sp, #8
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f7ff ffe7 	bl	8014f60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8014f92:	2110      	movs	r1, #16
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f010 f96a 	bl	802526e <_ZdlPvj>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	3708      	adds	r7, #8
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	bd80      	pop	{r7, pc}

08014fa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b082      	sub	sp, #8
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	68d2      	ldr	r2, [r2, #12]
 8014fb4:	1052      	asrs	r2, r2, #1
 8014fb6:	1899      	adds	r1, r3, r2
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	f003 0301 	and.w	r3, r3, #1
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d102      	bne.n	8014fca <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	689b      	ldr	r3, [r3, #8]
 8014fc8:	e00a      	b.n	8014fe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	685b      	ldr	r3, [r3, #4]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	68d2      	ldr	r2, [r2, #12]
 8014fd2:	1052      	asrs	r2, r2, #1
 8014fd4:	4413      	add	r3, r2
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	687a      	ldr	r2, [r7, #4]
 8014fda:	6892      	ldr	r2, [r2, #8]
 8014fdc:	4413      	add	r3, r2
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4608      	mov	r0, r1
 8014fe2:	4798      	blx	r3
    }
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8014fec:	b480      	push	{r7}
 8014fee:	b083      	sub	sp, #12
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d010      	beq.n	801501e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	689b      	ldr	r3, [r3, #8]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d107      	bne.n	8015014 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	f003 0301 	and.w	r3, r3, #1
 801500c:	2b00      	cmp	r3, #0
 801500e:	d101      	bne.n	8015014 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8015010:	2301      	movs	r3, #1
 8015012:	e000      	b.n	8015016 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8015014:	2300      	movs	r3, #0
 8015016:	2b01      	cmp	r3, #1
 8015018:	d001      	beq.n	801501e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801501a:	2301      	movs	r3, #1
 801501c:	e000      	b.n	8015020 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801501e:	2300      	movs	r3, #0
    }
 8015020:	4618      	mov	r0, r3
 8015022:	370c      	adds	r7, #12
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr

0801502c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 801502c:	b480      	push	{r7}
 801502e:	b083      	sub	sp, #12
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	683a      	ldr	r2, [r7, #0]
 801503a:	601a      	str	r2, [r3, #0]
    }
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	4618      	mov	r0, r3
 8015040:	370c      	adds	r7, #12
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr

0801504a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801504a:	b480      	push	{r7}
 801504c:	b083      	sub	sp, #12
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2200      	movs	r2, #0
 8015056:	801a      	strh	r2, [r3, #0]
        y = 0;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2200      	movs	r2, #0
 801505c:	805a      	strh	r2, [r3, #2]
        width = 0;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2200      	movs	r2, #0
 8015062:	809a      	strh	r2, [r3, #4]
        height = 0;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2200      	movs	r2, #0
 8015068:	80da      	strh	r2, [r3, #6]
    }
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	4618      	mov	r0, r3
 801506e:	370c      	adds	r7, #12
 8015070:	46bd      	mov	sp, r7
 8015072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015076:	4770      	bx	lr

08015078 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8015078:	b480      	push	{r7}
 801507a:	b085      	sub	sp, #20
 801507c:	af00      	add	r7, sp, #0
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	4608      	mov	r0, r1
 8015082:	4611      	mov	r1, r2
 8015084:	461a      	mov	r2, r3
 8015086:	4603      	mov	r3, r0
 8015088:	817b      	strh	r3, [r7, #10]
 801508a:	460b      	mov	r3, r1
 801508c:	813b      	strh	r3, [r7, #8]
 801508e:	4613      	mov	r3, r2
 8015090:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	897a      	ldrh	r2, [r7, #10]
 8015096:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	893a      	ldrh	r2, [r7, #8]
 801509c:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	88fa      	ldrh	r2, [r7, #6]
 80150a2:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	8b3a      	ldrh	r2, [r7, #24]
 80150a8:	80da      	strh	r2, [r3, #6]
    }
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	4618      	mov	r0, r3
 80150ae:	3714      	adds	r7, #20
 80150b0:	46bd      	mov	sp, r7
 80150b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b6:	4770      	bx	lr

080150b8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af02      	add	r7, sp, #8
 80150be:	6078      	str	r0, [r7, #4]
        : rect(0, 0, 0, 0),
          parent(0),
          nextSibling(0),
          nextDrawChainElement(0),
          touchable(false),
          visible(true)
 80150c0:	4a13      	ldr	r2, [pc, #76]	; (8015110 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	601a      	str	r2, [r3, #0]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	1d18      	adds	r0, r3, #4
 80150ca:	2300      	movs	r3, #0
 80150cc:	9300      	str	r3, [sp, #0]
 80150ce:	2300      	movs	r3, #0
 80150d0:	2200      	movs	r2, #0
 80150d2:	2100      	movs	r1, #0
 80150d4:	f7ff ffd0 	bl	8015078 <_ZN8touchgfx4RectC1Essss>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	330c      	adds	r3, #12
 80150dc:	4618      	mov	r0, r3
 80150de:	f7ff ffb4 	bl	801504a <_ZN8touchgfx4RectC1Ev>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2200      	movs	r2, #0
 80150e6:	615a      	str	r2, [r3, #20]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	619a      	str	r2, [r3, #24]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	2200      	movs	r2, #0
 80150f2:	61da      	str	r2, [r3, #28]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2201      	movs	r2, #1
 8015100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	4618      	mov	r0, r3
 8015108:	3708      	adds	r7, #8
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	08028208 	.word	0x08028208

08015114 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8015114:	b480      	push	{r7}
 8015116:	b083      	sub	sp, #12
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
    {
 801511c:	4a04      	ldr	r2, [pc, #16]	; (8015130 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	601a      	str	r2, [r3, #0]
    }
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	4618      	mov	r0, r3
 8015126:	370c      	adds	r7, #12
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr
 8015130:	08028208 	.word	0x08028208

08015134 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
    }
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f7ff ffe9 	bl	8015114 <_ZN8touchgfx8DrawableD1Ev>
 8015142:	2128      	movs	r1, #40	; 0x28
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f010 f892 	bl	802526e <_ZdlPvj>
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	4618      	mov	r0, r3
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801515c:	2300      	movs	r3, #0
    }
 801515e:	4618      	mov	r0, r3
 8015160:	370c      	adds	r7, #12
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr

0801516a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801516a:	b580      	push	{r7, lr}
 801516c:	b084      	sub	sp, #16
 801516e:	af00      	add	r7, sp, #0
 8015170:	60f8      	str	r0, [r7, #12]
 8015172:	4608      	mov	r0, r1
 8015174:	4611      	mov	r1, r2
 8015176:	461a      	mov	r2, r3
 8015178:	4603      	mov	r3, r0
 801517a:	817b      	strh	r3, [r7, #10]
 801517c:	460b      	mov	r3, r1
 801517e:	813b      	strh	r3, [r7, #8]
 8015180:	4613      	mov	r3, r2
 8015182:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8015184:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015188:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801518c:	4619      	mov	r1, r3
 801518e:	68f8      	ldr	r0, [r7, #12]
 8015190:	f000 f82a 	bl	80151e8 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8015194:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8015198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801519c:	4619      	mov	r1, r3
 801519e:	68f8      	ldr	r0, [r7, #12]
 80151a0:	f000 f87e 	bl	80152a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80151a4:	bf00      	nop
 80151a6:	3710      	adds	r7, #16
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80151ac:	b480      	push	{r7}
 80151ae:	b083      	sub	sp, #12
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	460b      	mov	r3, r1
 80151b6:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	887a      	ldrh	r2, [r7, #2]
 80151bc:	809a      	strh	r2, [r3, #4]
    }
 80151be:	bf00      	nop
 80151c0:	370c      	adds	r7, #12
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr

080151ca <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80151ca:	b480      	push	{r7}
 80151cc:	b083      	sub	sp, #12
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
 80151d2:	460b      	mov	r3, r1
 80151d4:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	887a      	ldrh	r2, [r7, #2]
 80151da:	80da      	strh	r2, [r3, #6]
    }
 80151dc:	bf00      	nop
 80151de:	370c      	adds	r7, #12
 80151e0:	46bd      	mov	sp, r7
 80151e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e6:	4770      	bx	lr

080151e8 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	460b      	mov	r3, r1
 80151f2:	807b      	strh	r3, [r7, #2]
 80151f4:	4613      	mov	r3, r2
 80151f6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	332c      	adds	r3, #44	; 0x2c
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8015204:	4611      	mov	r1, r2
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	4798      	blx	r3
        setY(y);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	3330      	adds	r3, #48	; 0x30
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015216:	4611      	mov	r1, r2
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	4798      	blx	r3
    }
 801521c:	bf00      	nop
 801521e:	3708      	adds	r7, #8
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}

08015224 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8015224:	b480      	push	{r7}
 8015226:	b083      	sub	sp, #12
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
 801522c:	460b      	mov	r3, r1
 801522e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	887a      	ldrh	r2, [r7, #2]
 8015234:	811a      	strh	r2, [r3, #8]
    }
 8015236:	bf00      	nop
 8015238:	370c      	adds	r7, #12
 801523a:	46bd      	mov	sp, r7
 801523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015240:	4770      	bx	lr

08015242 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8015242:	b480      	push	{r7}
 8015244:	b083      	sub	sp, #12
 8015246:	af00      	add	r7, sp, #0
 8015248:	6078      	str	r0, [r7, #4]
 801524a:	460b      	mov	r3, r1
 801524c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	887a      	ldrh	r2, [r7, #2]
 8015252:	815a      	strh	r2, [r3, #10]
    }
 8015254:	bf00      	nop
 8015256:	370c      	adds	r7, #12
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8015260:	b480      	push	{r7}
 8015262:	b083      	sub	sp, #12
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
    {
    }
 8015268:	bf00      	nop
 801526a:	370c      	adds	r7, #12
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr

08015274 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
    {
    }
 801527e:	bf00      	nop
 8015280:	370c      	adds	r7, #12
 8015282:	46bd      	mov	sp, r7
 8015284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015288:	4770      	bx	lr

0801528a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 801528a:	b480      	push	{r7}
 801528c:	b083      	sub	sp, #12
 801528e:	af00      	add	r7, sp, #0
 8015290:	6078      	str	r0, [r7, #4]
 8015292:	6039      	str	r1, [r7, #0]
    {
    }
 8015294:	bf00      	nop
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	460b      	mov	r3, r1
 80152aa:	807b      	strh	r3, [r7, #2]
 80152ac:	4613      	mov	r3, r2
 80152ae:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	3334      	adds	r3, #52	; 0x34
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80152bc:	4611      	mov	r1, r2
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	4798      	blx	r3
        setHeight(height);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	3338      	adds	r3, #56	; 0x38
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80152ce:	4611      	mov	r1, r2
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	4798      	blx	r3
    }
 80152d4:	bf00      	nop
 80152d6:	3708      	adds	r7, #8
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}

080152dc <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 80152dc:	b480      	push	{r7}
 80152de:	b083      	sub	sp, #12
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
    {
    }
 80152e6:	bf00      	nop
 80152e8:	370c      	adds	r7, #12
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr

080152f2 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80152f2:	b480      	push	{r7}
 80152f4:	b083      	sub	sp, #12
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
    {
    }
 80152fa:	bf00      	nop
 80152fc:	370c      	adds	r7, #12
 80152fe:	46bd      	mov	sp, r7
 8015300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015304:	4770      	bx	lr

08015306 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8015306:	b480      	push	{r7}
 8015308:	b083      	sub	sp, #12
 801530a:	af00      	add	r7, sp, #0
 801530c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8015314:	4618      	mov	r0, r3
 8015316:	370c      	adds	r7, #12
 8015318:	46bd      	mov	sp, r7
 801531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531e:	4770      	bx	lr

08015320 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8015320:	b480      	push	{r7}
 8015322:	b083      	sub	sp, #12
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 801532e:	4618      	mov	r0, r3
 8015330:	370c      	adds	r7, #12
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr

0801533a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801533a:	b580      	push	{r7, lr}
 801533c:	b082      	sub	sp, #8
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
 8015342:	460b      	mov	r3, r1
 8015344:	807b      	strh	r3, [r7, #2]
 8015346:	4613      	mov	r3, r2
 8015348:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	3350      	adds	r3, #80	; 0x50
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	8879      	ldrh	r1, [r7, #2]
 8015354:	687a      	ldr	r2, [r7, #4]
 8015356:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801535a:	b292      	uxth	r2, r2
 801535c:	1a8a      	subs	r2, r1, r2
 801535e:	b292      	uxth	r2, r2
 8015360:	b210      	sxth	r0, r2
 8015362:	8839      	ldrh	r1, [r7, #0]
 8015364:	687a      	ldr	r2, [r7, #4]
 8015366:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801536a:	b292      	uxth	r2, r2
 801536c:	1a8a      	subs	r2, r1, r2
 801536e:	b292      	uxth	r2, r2
 8015370:	b212      	sxth	r2, r2
 8015372:	4601      	mov	r1, r0
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	4798      	blx	r3
    }
 8015378:	bf00      	nop
 801537a:	3708      	adds	r7, #8
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8015380:	b480      	push	{r7}
 8015382:	b083      	sub	sp, #12
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801538e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015396:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801539e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80153a0:	bf00      	nop
 80153a2:	370c      	adds	r7, #12
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b084      	sub	sp, #16
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80153b8:	68f8      	ldr	r0, [r7, #12]
 80153ba:	f7ff ffe1 	bl	8015380 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681a      	ldr	r2, [r3, #0]
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	68fa      	ldr	r2, [r7, #12]
 80153ca:	601a      	str	r2, [r3, #0]
    }
 80153cc:	bf00      	nop
 80153ce:	3710      	adds	r7, #16
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b082      	sub	sp, #8
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
    {
 80153dc:	4a06      	ldr	r2, [pc, #24]	; (80153f8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	601a      	str	r2, [r3, #0]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	3304      	adds	r3, #4
 80153e6:	4618      	mov	r0, r3
 80153e8:	f000 f9b0 	bl	801574c <_ZN8touchgfx9ContainerD1Ev>
    }
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	4618      	mov	r0, r3
 80153f0:	3708      	adds	r7, #8
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}
 80153f6:	bf00      	nop
 80153f8:	080282fc 	.word	0x080282fc

080153fc <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
    }
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7ff ffe5 	bl	80153d4 <_ZN8touchgfx6ScreenD1Ev>
 801540a:	213c      	movs	r1, #60	; 0x3c
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f00f ff2e 	bl	802526e <_ZdlPvj>
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 801541c:	b480      	push	{r7}
 801541e:	b083      	sub	sp, #12
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
    {
    }
 8015424:	bf00      	nop
 8015426:	370c      	adds	r7, #12
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr

08015430 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
    {
    }
 8015438:	bf00      	nop
 801543a:	370c      	adds	r7, #12
 801543c:	46bd      	mov	sp, r7
 801543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015442:	4770      	bx	lr

08015444 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8015444:	b480      	push	{r7}
 8015446:	b083      	sub	sp, #12
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
    {
    }
 801544c:	bf00      	nop
 801544e:	370c      	adds	r7, #12
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr

08015458 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8015458:	b480      	push	{r7}
 801545a:	b083      	sub	sp, #12
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
    {
    }
 8015460:	bf00      	nop
 8015462:	370c      	adds	r7, #12
 8015464:	46bd      	mov	sp, r7
 8015466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546a:	4770      	bx	lr

0801546c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801546c:	b480      	push	{r7}
 801546e:	b083      	sub	sp, #12
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	460b      	mov	r3, r1
 8015476:	70fb      	strb	r3, [r7, #3]
    {
    }
 8015478:	bf00      	nop
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	3304      	adds	r3, #4
 8015492:	6839      	ldr	r1, [r7, #0]
 8015494:	4618      	mov	r0, r3
 8015496:	f002 fffd 	bl	8018494 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801549a:	bf00      	nop
 801549c:	3708      	adds	r7, #8
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}

080154a2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80154a2:	b580      	push	{r7, lr}
 80154a4:	b084      	sub	sp, #16
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	60f8      	str	r0, [r7, #12]
 80154aa:	607b      	str	r3, [r7, #4]
 80154ac:	460b      	mov	r3, r1
 80154ae:	817b      	strh	r3, [r7, #10]
 80154b0:	4613      	mov	r3, r2
 80154b2:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff ff25 	bl	8015306 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80154bc:	4603      	mov	r3, r0
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d008      	beq.n	80154d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff ff2b 	bl	8015320 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80154ca:	4603      	mov	r3, r0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d001      	beq.n	80154d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80154d0:	2301      	movs	r3, #1
 80154d2:	e000      	b.n	80154d6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80154d4:	2300      	movs	r3, #0
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d002      	beq.n	80154e0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80154da:	68fa      	ldr	r2, [r7, #12]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	601a      	str	r2, [r3, #0]
        }
    }
 80154e0:	bf00      	nop
 80154e2:	3710      	adds	r7, #16
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7ff fde0 	bl	80150b8 <_ZN8touchgfx8DrawableC1Ev>
 80154f8:	4a03      	ldr	r2, [pc, #12]	; (8015508 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	4618      	mov	r0, r3
 8015502:	3708      	adds	r7, #8
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	0802707c 	.word	0x0802707c

0801550c <_ZN8touchgfx6WidgetD1Ev>:
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	4a05      	ldr	r2, [pc, #20]	; (801552c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	601a      	str	r2, [r3, #0]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	4618      	mov	r0, r3
 801551e:	f7ff fdf9 	bl	8015114 <_ZN8touchgfx8DrawableD1Ev>
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	4618      	mov	r0, r3
 8015526:	3708      	adds	r7, #8
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}
 801552c:	0802707c 	.word	0x0802707c

08015530 <_ZN8touchgfx6WidgetD0Ev>:
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	f7ff ffe7 	bl	801550c <_ZN8touchgfx6WidgetD1Ev>
 801553e:	2128      	movs	r1, #40	; 0x28
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f00f fe94 	bl	802526e <_ZdlPvj>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	4618      	mov	r0, r3
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	4618      	mov	r0, r3
 801555c:	2326      	movs	r3, #38	; 0x26
 801555e:	461a      	mov	r2, r3
 8015560:	2100      	movs	r1, #0
 8015562:	f00f ff3f 	bl	80253e4 <memset>
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	4618      	mov	r0, r3
 801556a:	f7ff ffbd 	bl	80154e8 <_ZN8touchgfx6WidgetC1Ev>
 801556e:	4a09      	ldr	r2, [pc, #36]	; (8015594 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	601a      	str	r2, [r3, #0]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	22ff      	movs	r2, #255	; 0xff
 8015578:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	3328      	adds	r3, #40	; 0x28
 8015580:	2100      	movs	r1, #0
 8015582:	4618      	mov	r0, r3
 8015584:	f7ff fd52 	bl	801502c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	4618      	mov	r0, r3
 801558c:	3708      	adds	r7, #8
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}
 8015592:	bf00      	nop
 8015594:	08027fd8 	.word	0x08027fd8

08015598 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8015598:	b480      	push	{r7}
 801559a:	b083      	sub	sp, #12
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	683a      	ldr	r2, [r7, #0]
 80155a6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80155a8:	bf00      	nop
 80155aa:	370c      	adds	r7, #12
 80155ac:	46bd      	mov	sp, r7
 80155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b2:	4770      	bx	lr

080155b4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	4a05      	ldr	r2, [pc, #20]	; (80155d4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	601a      	str	r2, [r3, #0]
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7ff ff05 	bl	80153d4 <_ZN8touchgfx6ScreenD1Ev>
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	4618      	mov	r0, r3
 80155ce:	3708      	adds	r7, #8
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	08027048 	.word	0x08027048

080155d8 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	6878      	ldr	r0, [r7, #4]
 80155e2:	f7ff ffe7 	bl	80155b4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 80155e6:	2140      	movs	r1, #64	; 0x40
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f00f fe40 	bl	802526e <_ZdlPvj>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	4618      	mov	r0, r3
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	4a08      	ldr	r2, [pc, #32]	; (8015624 <_ZN14screenViewBaseD1Ev+0x2c>)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	601a      	str	r2, [r3, #0]
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	3340      	adds	r3, #64	; 0x40
 801560a:	4618      	mov	r0, r3
 801560c:	f000 f8c0 	bl	8015790 <_ZN8touchgfx3BoxD1Ev>
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	4618      	mov	r0, r3
 8015614:	f7ff ffce 	bl	80155b4 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	4618      	mov	r0, r3
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	08027014 	.word	0x08027014

08015628 <_ZN14screenViewBaseD0Ev>:
 8015628:	b580      	push	{r7, lr}
 801562a:	b082      	sub	sp, #8
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f7ff ffe1 	bl	80155f8 <_ZN14screenViewBaseD1Ev>
 8015636:	216c      	movs	r1, #108	; 0x6c
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f00f fe18 	bl	802526e <_ZdlPvj>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4618      	mov	r0, r3
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}

08015648 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8015648:	b590      	push	{r4, r7, lr}
 801564a:	b083      	sub	sp, #12
 801564c:	af00      	add	r7, sp, #0
 801564e:	4603      	mov	r3, r0
 8015650:	71fb      	strb	r3, [r7, #7]
 8015652:	460b      	mov	r3, r1
 8015654:	71bb      	strb	r3, [r7, #6]
 8015656:	4613      	mov	r3, r2
 8015658:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801565a:	f7ff f871 	bl	8014740 <_ZN8touchgfx3HAL11getInstanceEv>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d105      	bne.n	8015670 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8015664:	4b0a      	ldr	r3, [pc, #40]	; (8015690 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8015666:	4a0b      	ldr	r2, [pc, #44]	; (8015694 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8015668:	2135      	movs	r1, #53	; 0x35
 801566a:	480b      	ldr	r0, [pc, #44]	; (8015698 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 801566c:	f00f fe2e 	bl	80252cc <__assert_func>
 8015670:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8015672:	f7ff f871 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8015676:	6803      	ldr	r3, [r0, #0]
 8015678:	3328      	adds	r3, #40	; 0x28
 801567a:	681c      	ldr	r4, [r3, #0]
 801567c:	797b      	ldrb	r3, [r7, #5]
 801567e:	79ba      	ldrb	r2, [r7, #6]
 8015680:	79f9      	ldrb	r1, [r7, #7]
 8015682:	47a0      	blx	r4
 8015684:	4603      	mov	r3, r0
    }
 8015686:	4618      	mov	r0, r3
 8015688:	370c      	adds	r7, #12
 801568a:	46bd      	mov	sp, r7
 801568c:	bd90      	pop	{r4, r7, pc}
 801568e:	bf00      	nop
 8015690:	08026774 	.word	0x08026774
 8015694:	080267b8 	.word	0x080267b8
 8015698:	08026814 	.word	0x08026814

0801569c <_ZN14screenViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>

screenViewBase::screenViewBase()
 801569c:	b590      	push	{r4, r7, lr}
 801569e:	b085      	sub	sp, #20
 80156a0:	af02      	add	r7, sp, #8
 80156a2:	6078      	str	r0, [r7, #4]
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	4618      	mov	r0, r3
 80156a8:	f000 f83a 	bl	8015720 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 80156ac:	4a16      	ldr	r2, [pc, #88]	; (8015708 <_ZN14screenViewBaseC1Ev+0x6c>)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	601a      	str	r2, [r3, #0]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	3340      	adds	r3, #64	; 0x40
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7ff ff4a 	bl	8015550 <_ZN8touchgfx3BoxC1Ev>
{

    __background.setPosition(0, 0, 480, 272);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80156c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80156c6:	9300      	str	r3, [sp, #0]
 80156c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80156cc:	2200      	movs	r2, #0
 80156ce:	2100      	movs	r1, #0
 80156d0:	f7ff fd4b 	bl	801516a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80156da:	2200      	movs	r2, #0
 80156dc:	2100      	movs	r1, #0
 80156de:	2000      	movs	r0, #0
 80156e0:	f7ff ffb2 	bl	8015648 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80156e4:	4603      	mov	r3, r0
 80156e6:	4619      	mov	r1, r3
 80156e8:	4620      	mov	r0, r4
 80156ea:	f7ff ff55 	bl	8015598 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    add(__background);
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	3340      	adds	r3, #64	; 0x40
 80156f4:	4619      	mov	r1, r3
 80156f6:	4610      	mov	r0, r2
 80156f8:	f7ff fec4 	bl	8015484 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	4618      	mov	r0, r3
 8015700:	370c      	adds	r7, #12
 8015702:	46bd      	mov	sp, r7
 8015704:	bd90      	pop	{r4, r7, pc}
 8015706:	bf00      	nop
 8015708:	08027014 	.word	0x08027014

0801570c <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]

}
 8015714:	bf00      	nop
 8015716:	370c      	adds	r7, #12
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	4618      	mov	r0, r3
 801572c:	f006 f96a 	bl	801ba04 <_ZN8touchgfx6ScreenC1Ev>
 8015730:	4a05      	ldr	r2, [pc, #20]	; (8015748 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	601a      	str	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2200      	movs	r2, #0
 801573a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	4618      	mov	r0, r3
 8015740:	3708      	adds	r7, #8
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	08027048 	.word	0x08027048

0801574c <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	4a05      	ldr	r2, [pc, #20]	; (801576c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	601a      	str	r2, [r3, #0]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4618      	mov	r0, r3
 801575e:	f7ff fcd9 	bl	8015114 <_ZN8touchgfx8DrawableD1Ev>
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	4618      	mov	r0, r3
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	080277c4 	.word	0x080277c4

08015770 <_ZN8touchgfx9ContainerD0Ev>:
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f7ff ffe7 	bl	801574c <_ZN8touchgfx9ContainerD1Ev>
 801577e:	212c      	movs	r1, #44	; 0x2c
 8015780:	6878      	ldr	r0, [r7, #4]
 8015782:	f00f fd74 	bl	802526e <_ZdlPvj>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	4618      	mov	r0, r3
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	4a05      	ldr	r2, [pc, #20]	; (80157b0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	601a      	str	r2, [r3, #0]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7ff feb3 	bl	801550c <_ZN8touchgfx6WidgetD1Ev>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	4618      	mov	r0, r3
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	08027fd8 	.word	0x08027fd8

080157b4 <_ZN8touchgfx3BoxD0Ev>:
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b082      	sub	sp, #8
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f7ff ffe7 	bl	8015790 <_ZN8touchgfx3BoxD1Ev>
 80157c2:	212c      	movs	r1, #44	; 0x2c
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f00f fd52 	bl	802526e <_ZdlPvj>
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	4618      	mov	r0, r3
 80157ce:	3708      	adds	r7, #8
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 80157d4:	b480      	push	{r7}
 80157d6:	af00      	add	r7, sp, #0
    return bitmap_database;
 80157d8:	4b02      	ldr	r3, [pc, #8]	; (80157e4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80157da:	4618      	mov	r0, r3
 80157dc:	46bd      	mov	sp, r7
 80157de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e2:	4770      	bx	lr
 80157e4:	080270d8 	.word	0x080270d8

080157e8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80157e8:	b480      	push	{r7}
 80157ea:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80157ec:	2301      	movs	r3, #1
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80157f8:	b480      	push	{r7}
 80157fa:	b085      	sub	sp, #20
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	60f8      	str	r0, [r7, #12]
 8015800:	460b      	mov	r3, r1
 8015802:	607a      	str	r2, [r7, #4]
 8015804:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8015806:	2300      	movs	r3, #0
    }
 8015808:	4618      	mov	r0, r3
 801580a:	3714      	adds	r7, #20
 801580c:	46bd      	mov	sp, r7
 801580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015812:	4770      	bx	lr

08015814 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801581c:	2300      	movs	r3, #0
    }
 801581e:	4618      	mov	r0, r3
 8015820:	370c      	adds	r7, #12
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr
	...

0801582c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801582c:	b480      	push	{r7}
 801582e:	b085      	sub	sp, #20
 8015830:	af00      	add	r7, sp, #0
 8015832:	60f8      	str	r0, [r7, #12]
 8015834:	60b9      	str	r1, [r7, #8]
 8015836:	4613      	mov	r3, r2
 8015838:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 801583a:	4a07      	ldr	r2, [pc, #28]	; (8015858 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8015840:	4a06      	ldr	r2, [pc, #24]	; (801585c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8015846:	4a06      	ldr	r2, [pc, #24]	; (8015860 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8015848:	88fb      	ldrh	r3, [r7, #6]
 801584a:	8013      	strh	r3, [r2, #0]
    }
 801584c:	bf00      	nop
 801584e:	3714      	adds	r7, #20
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr
 8015858:	20009528 	.word	0x20009528
 801585c:	20009530 	.word	0x20009530
 8015860:	2000952c 	.word	0x2000952c

08015864 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8015864:	b40e      	push	{r1, r2, r3}
 8015866:	b580      	push	{r7, lr}
 8015868:	b085      	sub	sp, #20
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801586e:	f107 0320 	add.w	r3, r7, #32
 8015872:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	69fa      	ldr	r2, [r7, #28]
 8015878:	2100      	movs	r1, #0
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f005 fc7e 	bl	801b17c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015880:	4603      	mov	r3, r0
 8015882:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015884:	89fb      	ldrh	r3, [r7, #14]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3714      	adds	r7, #20
 801588a:	46bd      	mov	sp, r7
 801588c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015890:	b003      	add	sp, #12
 8015892:	4770      	bx	lr

08015894 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8015894:	b40c      	push	{r2, r3}
 8015896:	b580      	push	{r7, lr}
 8015898:	b084      	sub	sp, #16
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
 801589e:	460b      	mov	r3, r1
 80158a0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80158a2:	f107 031c 	add.w	r3, r7, #28
 80158a6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80158a8:	78f9      	ldrb	r1, [r7, #3]
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	69ba      	ldr	r2, [r7, #24]
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f005 fc64 	bl	801b17c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80158b4:	4603      	mov	r3, r0
 80158b6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80158b8:	89fb      	ldrh	r3, [r7, #14]
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	3710      	adds	r7, #16
 80158be:	46bd      	mov	sp, r7
 80158c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80158c4:	b002      	add	sp, #8
 80158c6:	4770      	bx	lr

080158c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b08a      	sub	sp, #40	; 0x28
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
 80158d0:	460b      	mov	r3, r1
 80158d2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d016      	beq.n	801590a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	331a      	adds	r3, #26
 80158e0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80158e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e4:	8adb      	ldrh	r3, [r3, #22]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d105      	bne.n	80158f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80158ea:	4b43      	ldr	r3, [pc, #268]	; (80159f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80158ec:	4a43      	ldr	r2, [pc, #268]	; (80159fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80158ee:	21c0      	movs	r1, #192	; 0xc0
 80158f0:	4843      	ldr	r0, [pc, #268]	; (8015a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80158f2:	f00f fceb 	bl	80252cc <__assert_func>
            return buffer[pos];
 80158f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f8:	8a9b      	ldrh	r3, [r3, #20]
 80158fa:	461a      	mov	r2, r3
 80158fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d001      	beq.n	801590a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015906:	2301      	movs	r3, #1
 8015908:	e000      	b.n	801590c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801590a:	2300      	movs	r3, #0
 801590c:	2b00      	cmp	r3, #0
 801590e:	d06a      	beq.n	80159e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	f006 fef1 	bl	801c6f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	331a      	adds	r3, #26
 801591a:	623b      	str	r3, [r7, #32]
 801591c:	2301      	movs	r3, #1
 801591e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8015920:	6a3b      	ldr	r3, [r7, #32]
 8015922:	8adb      	ldrh	r3, [r3, #22]
 8015924:	8bfa      	ldrh	r2, [r7, #30]
 8015926:	429a      	cmp	r2, r3
 8015928:	d305      	bcc.n	8015936 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801592a:	4b36      	ldr	r3, [pc, #216]	; (8015a04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801592c:	4a36      	ldr	r2, [pc, #216]	; (8015a08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801592e:	21c5      	movs	r1, #197	; 0xc5
 8015930:	4833      	ldr	r0, [pc, #204]	; (8015a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015932:	f00f fccb 	bl	80252cc <__assert_func>
            const uint16_t index = pos + offset;
 8015936:	6a3b      	ldr	r3, [r7, #32]
 8015938:	8a9a      	ldrh	r2, [r3, #20]
 801593a:	8bfb      	ldrh	r3, [r7, #30]
 801593c:	4413      	add	r3, r2
 801593e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8015940:	8bbb      	ldrh	r3, [r7, #28]
 8015942:	2b09      	cmp	r3, #9
 8015944:	d801      	bhi.n	801594a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8015946:	8bbb      	ldrh	r3, [r7, #28]
 8015948:	e001      	b.n	801594e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801594a:	8bbb      	ldrh	r3, [r7, #28]
 801594c:	3b0a      	subs	r3, #10
 801594e:	6a3a      	ldr	r2, [r7, #32]
 8015950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015954:	f640 123f 	movw	r2, #2367	; 0x93f
 8015958:	4293      	cmp	r3, r2
 801595a:	bf0c      	ite	eq
 801595c:	2301      	moveq	r3, #1
 801595e:	2300      	movne	r3, #0
 8015960:	b2db      	uxtb	r3, r3
 8015962:	2b00      	cmp	r3, #0
 8015964:	d03f      	beq.n	80159e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	331a      	adds	r3, #26
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	321a      	adds	r2, #26
 801596e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8015970:	68ba      	ldr	r2, [r7, #8]
 8015972:	8ad2      	ldrh	r2, [r2, #22]
 8015974:	2a00      	cmp	r2, #0
 8015976:	d105      	bne.n	8015984 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8015978:	4b1f      	ldr	r3, [pc, #124]	; (80159f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801597a:	4a20      	ldr	r2, [pc, #128]	; (80159fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801597c:	21c0      	movs	r1, #192	; 0xc0
 801597e:	4820      	ldr	r0, [pc, #128]	; (8015a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015980:	f00f fca4 	bl	80252cc <__assert_func>
            return buffer[pos];
 8015984:	68ba      	ldr	r2, [r7, #8]
 8015986:	8a92      	ldrh	r2, [r2, #20]
 8015988:	4611      	mov	r1, r2
 801598a:	68ba      	ldr	r2, [r7, #8]
 801598c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8015990:	613b      	str	r3, [r7, #16]
 8015992:	4613      	mov	r3, r2
 8015994:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	8adb      	ldrh	r3, [r3, #22]
 801599a:	2b01      	cmp	r3, #1
 801599c:	d806      	bhi.n	80159ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801599e:	4b1b      	ldr	r3, [pc, #108]	; (8015a0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80159a0:	4a1b      	ldr	r2, [pc, #108]	; (8015a10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80159a2:	f240 110d 	movw	r1, #269	; 0x10d
 80159a6:	4816      	ldr	r0, [pc, #88]	; (8015a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80159a8:	f00f fc90 	bl	80252cc <__assert_func>
            const uint16_t index = pos + 1;
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	8a9b      	ldrh	r3, [r3, #20]
 80159b0:	3301      	adds	r3, #1
 80159b2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80159b4:	89bb      	ldrh	r3, [r7, #12]
 80159b6:	2b09      	cmp	r3, #9
 80159b8:	d801      	bhi.n	80159be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80159ba:	89bb      	ldrh	r3, [r7, #12]
 80159bc:	e000      	b.n	80159c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80159be:	2300      	movs	r3, #0
 80159c0:	693a      	ldr	r2, [r7, #16]
 80159c2:	89f9      	ldrh	r1, [r7, #14]
 80159c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80159c8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	331a      	adds	r3, #26
 80159ce:	61bb      	str	r3, [r7, #24]
 80159d0:	f640 133f 	movw	r3, #2367	; 0x93f
 80159d4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	8a9b      	ldrh	r3, [r3, #20]
 80159da:	4619      	mov	r1, r3
 80159dc:	69bb      	ldr	r3, [r7, #24]
 80159de:	8afa      	ldrh	r2, [r7, #22]
 80159e0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80159e4:	bf00      	nop
        }
    }
    return getNextChar();
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f006 fd6a 	bl	801c4c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80159ec:	4603      	mov	r3, r0
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3728      	adds	r7, #40	; 0x28
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	08026854 	.word	0x08026854
 80159fc:	08026860 	.word	0x08026860
 8015a00:	0802690c 	.word	0x0802690c
 8015a04:	08026954 	.word	0x08026954
 8015a08:	08026964 	.word	0x08026964
 8015a0c:	08026a38 	.word	0x08026a38
 8015a10:	08026a44 	.word	0x08026a44

08015a14 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	f006 fd09 	bl	801c434 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8015a22:	bf00      	nop
 8015a24:	3708      	adds	r7, #8
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}
	...

08015a2c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8015a2c:	b590      	push	{r4, r7, lr}
 8015a2e:	b085      	sub	sp, #20
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	4603      	mov	r3, r0
 8015a34:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015a36:	2300      	movs	r3, #0
 8015a38:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8015a3a:	88fb      	ldrh	r3, [r7, #6]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d127      	bne.n	8015a90 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8015a40:	88fb      	ldrh	r3, [r7, #6]
 8015a42:	4a1e      	ldr	r2, [pc, #120]	; (8015abc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d016      	beq.n	8015a7a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8015a4c:	88fb      	ldrh	r3, [r7, #6]
 8015a4e:	4a1b      	ldr	r2, [pc, #108]	; (8015abc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a54:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	68ba      	ldr	r2, [r7, #8]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	4a18      	ldr	r2, [pc, #96]	; (8015ac0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015a60:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	685b      	ldr	r3, [r3, #4]
 8015a66:	68ba      	ldr	r2, [r7, #8]
 8015a68:	4413      	add	r3, r2
 8015a6a:	4a16      	ldr	r2, [pc, #88]	; (8015ac4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015a6c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8015a6e:	68bb      	ldr	r3, [r7, #8]
 8015a70:	689b      	ldr	r3, [r3, #8]
 8015a72:	68ba      	ldr	r2, [r7, #8]
 8015a74:	4413      	add	r3, r2
 8015a76:	60fb      	str	r3, [r7, #12]
 8015a78:	e00a      	b.n	8015a90 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015a7a:	4b11      	ldr	r3, [pc, #68]	; (8015ac0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015a7c:	4a12      	ldr	r2, [pc, #72]	; (8015ac8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8015a7e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8015a80:	2200      	movs	r2, #0
 8015a82:	4b10      	ldr	r3, [pc, #64]	; (8015ac4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015a84:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015a86:	88fb      	ldrh	r3, [r7, #6]
 8015a88:	4a10      	ldr	r2, [pc, #64]	; (8015acc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8015a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a8e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d00d      	beq.n	8015ab2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015a96:	4a0e      	ldr	r2, [pc, #56]	; (8015ad0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015a98:	88fb      	ldrh	r3, [r7, #6]
 8015a9a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8015a9c:	f000 f822 	bl	8015ae4 <_ZN17TypedTextDatabase8getFontsEv>
 8015aa0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015aa2:	f000 f817 	bl	8015ad4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	4621      	mov	r1, r4
 8015aac:	68f8      	ldr	r0, [r7, #12]
 8015aae:	f7ff febd 	bl	801582c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015ab2:	bf00      	nop
 8015ab4:	3714      	adds	r7, #20
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd90      	pop	{r4, r7, pc}
 8015aba:	bf00      	nop
 8015abc:	2000858c 	.word	0x2000858c
 8015ac0:	20008594 	.word	0x20008594
 8015ac4:	20008598 	.word	0x20008598
 8015ac8:	080298f4 	.word	0x080298f4
 8015acc:	080298fc 	.word	0x080298fc
 8015ad0:	20008590 	.word	0x20008590

08015ad4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8015ad8:	2301      	movs	r3, #1
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr

08015ae4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8015ae4:	b480      	push	{r7}
 8015ae6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8015ae8:	4b02      	ldr	r3, [pc, #8]	; (8015af4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	46bd      	mov	sp, r7
 8015aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af2:	4770      	bx	lr
 8015af4:	2000859c 	.word	0x2000859c

08015af8 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2b01      	cmp	r3, #1
 8015b06:	d113      	bne.n	8015b30 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b0e:	4293      	cmp	r3, r2
 8015b10:	d10e      	bne.n	8015b30 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8015b12:	f7fe fcc9 	bl	80144a8 <_Z23getFont_verdana_20_4bppv>
 8015b16:	4603      	mov	r3, r0
};
 8015b18:	4a07      	ldr	r2, [pc, #28]	; (8015b38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015b1a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8015b1c:	f7fe fd18 	bl	8014550 <_Z23getFont_verdana_40_4bppv>
 8015b20:	4603      	mov	r3, r0
};
 8015b22:	4a05      	ldr	r2, [pc, #20]	; (8015b38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015b24:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8015b26:	f7fe fc6b 	bl	8014400 <_Z23getFont_verdana_10_4bppv>
 8015b2a:	4603      	mov	r3, r0
};
 8015b2c:	4a02      	ldr	r2, [pc, #8]	; (8015b38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015b2e:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 8015b30:	bf00      	nop
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}
 8015b38:	2000859c 	.word	0x2000859c

08015b3c <_GLOBAL__sub_I_touchgfx_fonts>:
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	af00      	add	r7, sp, #0
 8015b40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015b44:	2001      	movs	r0, #1
 8015b46:	f7ff ffd7 	bl	8015af8 <_Z41__static_initialization_and_destruction_0ii>
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b082      	sub	sp, #8
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	4a05      	ldr	r2, [pc, #20]	; (8015b6c <_ZN19FrontendApplicationD1Ev+0x20>)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	601a      	str	r2, [r3, #0]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fe ff39 	bl	80149d4 <_ZN23FrontendApplicationBaseD1Ev>
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	4618      	mov	r0, r3
 8015b66:	3708      	adds	r7, #8
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	08027144 	.word	0x08027144

08015b70 <_ZN19FrontendApplicationD0Ev>:
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f7ff ffe7 	bl	8015b4c <_ZN19FrontendApplicationD1Ev>
 8015b7e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f00f fb73 	bl	802526e <_ZdlPvj>
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3708      	adds	r7, #8
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}

08015b92 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8015b92:	b580      	push	{r7, lr}
 8015b94:	b082      	sub	sp, #8
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f000 f82d 	bl	8015c00 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f004 fb75 	bl	801a298 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8015bae:	bf00      	nop
 8015bb0:	3708      	adds	r7, #8
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
	...

08015bb8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	687a      	ldr	r2, [r7, #4]
 8015bc8:	68b9      	ldr	r1, [r7, #8]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7fe ff46 	bl	8014a5c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8015bd0:	4a03      	ldr	r2, [pc, #12]	; (8015be0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	601a      	str	r2, [r3, #0]
{

}
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3710      	adds	r7, #16
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	08027144 	.word	0x08027144

08015be4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8015be4:	b480      	push	{r7}
 8015be6:	b083      	sub	sp, #12
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	2200      	movs	r2, #0
 8015bf0:	601a      	str	r2, [r3, #0]
{

}
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	370c      	adds	r7, #12
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr

08015c00 <_ZN5Model4tickEv>:

void Model::tick()
{
 8015c00:	b480      	push	{r7}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]

}
 8015c08:	bf00      	nop
 8015c0a:	370c      	adds	r7, #12
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c12:	4770      	bx	lr

08015c14 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8015c14:	b480      	push	{r7}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
    {
    }
 8015c1c:	bf00      	nop
 8015c1e:	370c      	adds	r7, #12
 8015c20:	46bd      	mov	sp, r7
 8015c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c26:	4770      	bx	lr

08015c28 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8015c28:	b480      	push	{r7}
 8015c2a:	b083      	sub	sp, #12
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
    {
    }
 8015c30:	bf00      	nop
 8015c32:	370c      	adds	r7, #12
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr

08015c3c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8015c3c:	b480      	push	{r7}
 8015c3e:	b083      	sub	sp, #12
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
    {
 8015c44:	4a04      	ldr	r2, [pc, #16]	; (8015c58 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	601a      	str	r2, [r3, #0]
    }
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	370c      	adds	r7, #12
 8015c50:	46bd      	mov	sp, r7
 8015c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c56:	4770      	bx	lr
 8015c58:	080271c0 	.word	0x080271c0

08015c5c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b082      	sub	sp, #8
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
    }
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f7ff ffe9 	bl	8015c3c <_ZN8touchgfx9PresenterD1Ev>
 8015c6a:	2104      	movs	r1, #4
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f00f fafe 	bl	802526e <_ZdlPvj>
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	4618      	mov	r0, r3
 8015c76:	3708      	adds	r7, #8
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8015c7c:	b480      	push	{r7}
 8015c7e:	b083      	sub	sp, #12
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
    {
 8015c84:	4a04      	ldr	r2, [pc, #16]	; (8015c98 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	601a      	str	r2, [r3, #0]
    }
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	370c      	adds	r7, #12
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr
 8015c98:	080271c0 	.word	0x080271c0

08015c9c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8015c9c:	b480      	push	{r7}
 8015c9e:	b083      	sub	sp, #12
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	4a06      	ldr	r2, [pc, #24]	; (8015cc0 <_ZN13ModelListenerC1Ev+0x24>)
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	601a      	str	r2, [r3, #0]
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2200      	movs	r2, #0
 8015cae:	605a      	str	r2, [r3, #4]
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	370c      	adds	r7, #12
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbc:	4770      	bx	lr
 8015cbe:	bf00      	nop
 8015cc0:	080271b0 	.word	0x080271b0

08015cc4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8015cc4:	b480      	push	{r7}
 8015cc6:	b083      	sub	sp, #12
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	4a04      	ldr	r2, [pc, #16]	; (8015ce0 <_ZN13ModelListenerD1Ev+0x1c>)
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	601a      	str	r2, [r3, #0]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	370c      	adds	r7, #12
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr
 8015ce0:	080271b0 	.word	0x080271b0

08015ce4 <_ZN13ModelListenerD0Ev>:
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f7ff ffe9 	bl	8015cc4 <_ZN13ModelListenerD1Ev>
 8015cf2:	2108      	movs	r1, #8
 8015cf4:	6878      	ldr	r0, [r7, #4]
 8015cf6:	f00f faba 	bl	802526e <_ZdlPvj>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3708      	adds	r7, #8
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}

08015d04 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	4a09      	ldr	r2, [pc, #36]	; (8015d34 <_ZN15screenPresenterD1Ev+0x30>)
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	601a      	str	r2, [r3, #0]
 8015d12:	4a09      	ldr	r2, [pc, #36]	; (8015d38 <_ZN15screenPresenterD1Ev+0x34>)
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	605a      	str	r2, [r3, #4]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	3304      	adds	r3, #4
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7ff ffd1 	bl	8015cc4 <_ZN13ModelListenerD1Ev>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7ff ff89 	bl	8015c3c <_ZN8touchgfx9PresenterD1Ev>
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3708      	adds	r7, #8
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}
 8015d34:	08027188 	.word	0x08027188
 8015d38:	080271a0 	.word	0x080271a0

08015d3c <_ZThn4_N15screenPresenterD1Ev>:
 8015d3c:	f1a0 0004 	sub.w	r0, r0, #4
 8015d40:	e7e0      	b.n	8015d04 <_ZN15screenPresenterD1Ev>
 8015d42:	bf00      	nop

08015d44 <_ZN15screenPresenterD0Ev>:
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f7ff ffd9 	bl	8015d04 <_ZN15screenPresenterD1Ev>
 8015d52:	2110      	movs	r1, #16
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f00f fa8a 	bl	802526e <_ZdlPvj>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3708      	adds	r7, #8
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd80      	pop	{r7, pc}

08015d64 <_ZThn4_N15screenPresenterD0Ev>:
 8015d64:	f1a0 0004 	sub.w	r0, r0, #4
 8015d68:	e7ec      	b.n	8015d44 <_ZN15screenPresenterD0Ev>
	...

08015d6c <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b082      	sub	sp, #8
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
    : view(v)
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7ff ff7f 	bl	8015c7c <_ZN8touchgfx9PresenterC1Ev>
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	3304      	adds	r3, #4
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7ff ff8a 	bl	8015c9c <_ZN13ModelListenerC1Ev>
 8015d88:	4a06      	ldr	r2, [pc, #24]	; (8015da4 <_ZN15screenPresenterC1ER10screenView+0x38>)
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	601a      	str	r2, [r3, #0]
 8015d8e:	4a06      	ldr	r2, [pc, #24]	; (8015da8 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	605a      	str	r2, [r3, #4]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	683a      	ldr	r2, [r7, #0]
 8015d98:	60da      	str	r2, [r3, #12]
{

}
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3708      	adds	r7, #8
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	08027188 	.word	0x08027188
 8015da8:	080271a0 	.word	0x080271a0

08015dac <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 8015dac:	b480      	push	{r7}
 8015dae:	b083      	sub	sp, #12
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]

}
 8015db4:	bf00      	nop
 8015db6:	370c      	adds	r7, #12
 8015db8:	46bd      	mov	sp, r7
 8015dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dbe:	4770      	bx	lr

08015dc0 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b083      	sub	sp, #12
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]

}
 8015dc8:	bf00      	nop
 8015dca:	370c      	adds	r7, #12
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd2:	4770      	bx	lr

08015dd4 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	4a05      	ldr	r2, [pc, #20]	; (8015df4 <_ZN10screenViewD1Ev+0x20>)
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	601a      	str	r2, [r3, #0]
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7ff fc07 	bl	80155f8 <_ZN14screenViewBaseD1Ev>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	4618      	mov	r0, r3
 8015dee:	3708      	adds	r7, #8
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	080271d8 	.word	0x080271d8

08015df8 <_ZN10screenViewD0Ev>:
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f7ff ffe7 	bl	8015dd4 <_ZN10screenViewD1Ev>
 8015e06:	216c      	movs	r1, #108	; 0x6c
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f00f fa30 	bl	802526e <_ZdlPvj>
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	4618      	mov	r0, r3
 8015e12:	3708      	adds	r7, #8
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7ff fc3a 	bl	801569c <_ZN14screenViewBaseC1Ev>
 8015e28:	4a03      	ldr	r2, [pc, #12]	; (8015e38 <_ZN10screenViewC1Ev+0x20>)
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	601a      	str	r2, [r3, #0]
{

}
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	4618      	mov	r0, r3
 8015e32:	3708      	adds	r7, #8
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}
 8015e38:	080271d8 	.word	0x080271d8

08015e3c <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	4618      	mov	r0, r3
 8015e48:	f7ff fc60 	bl	801570c <_ZN14screenViewBase11setupScreenEv>
}
 8015e4c:	bf00      	nop
 8015e4e:	3708      	adds	r7, #8
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}

08015e54 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b082      	sub	sp, #8
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7ff faf0 	bl	8015444 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015e64:	bf00      	nop
 8015e66:	3708      	adds	r7, #8
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
    {
 8015e74:	4a04      	ldr	r2, [pc, #16]	; (8015e88 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	601a      	str	r2, [r3, #0]
    }
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	370c      	adds	r7, #12
 8015e80:	46bd      	mov	sp, r7
 8015e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e86:	4770      	bx	lr
 8015e88:	08027224 	.word	0x08027224

08015e8c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b082      	sub	sp, #8
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
    }
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f7ff ffe9 	bl	8015e6c <_ZN8touchgfx15TouchControllerD1Ev>
 8015e9a:	2104      	movs	r1, #4
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f00f f9e6 	bl	802526e <_ZdlPvj>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3708      	adds	r7, #8
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}

08015eac <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8015eb4:	4b05      	ldr	r3, [pc, #20]	; (8015ecc <_ZN20STM32TouchController4initEv+0x20>)
 8015eb6:	4a06      	ldr	r2, [pc, #24]	; (8015ed0 <_ZN20STM32TouchController4initEv+0x24>)
 8015eb8:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8015eba:	4b04      	ldr	r3, [pc, #16]	; (8015ecc <_ZN20STM32TouchController4initEv+0x20>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	68db      	ldr	r3, [r3, #12]
 8015ec0:	2070      	movs	r0, #112	; 0x70
 8015ec2:	4798      	blx	r3
}
 8015ec4:	bf00      	nop
 8015ec6:	3708      	adds	r7, #8
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}
 8015ecc:	200085a8 	.word	0x200085a8
 8015ed0:	20000008 	.word	0x20000008

08015ed4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b084      	sub	sp, #16
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	60f8      	str	r0, [r7, #12]
 8015edc:	60b9      	str	r1, [r7, #8]
 8015ede:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8015ee0:	4b0f      	ldr	r3, [pc, #60]	; (8015f20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d015      	beq.n	8015f14 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8015ee8:	4b0d      	ldr	r3, [pc, #52]	; (8015f20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	691b      	ldr	r3, [r3, #16]
 8015eee:	2070      	movs	r0, #112	; 0x70
 8015ef0:	4798      	blx	r3
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	bf14      	ite	ne
 8015ef8:	2301      	movne	r3, #1
 8015efa:	2300      	moveq	r3, #0
 8015efc:	b2db      	uxtb	r3, r3
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d008      	beq.n	8015f14 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8015f02:	4b07      	ldr	r3, [pc, #28]	; (8015f20 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	695b      	ldr	r3, [r3, #20]
 8015f08:	68ba      	ldr	r2, [r7, #8]
 8015f0a:	6879      	ldr	r1, [r7, #4]
 8015f0c:	2070      	movs	r0, #112	; 0x70
 8015f0e:	4798      	blx	r3
            return true;
 8015f10:	2301      	movs	r3, #1
 8015f12:	e000      	b.n	8015f16 <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3710      	adds	r7, #16
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	200085a8 	.word	0x200085a8

08015f24 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b082      	sub	sp, #8
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	460b      	mov	r3, r1
 8015f2e:	70fb      	strb	r3, [r7, #3]
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f7f0 fee9 	bl	8006d08 <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 8015f36:	bf00      	nop
 8015f38:	3708      	adds	r7, #8
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}

08015f3e <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t* Buffer,
                                           uint16_t Length)
{
 8015f3e:	b580      	push	{r7, lr}
 8015f40:	b08a      	sub	sp, #40	; 0x28
 8015f42:	af04      	add	r7, sp, #16
 8015f44:	60f8      	str	r0, [r7, #12]
 8015f46:	4608      	mov	r0, r1
 8015f48:	4611      	mov	r1, r2
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	72fb      	strb	r3, [r7, #11]
 8015f50:	460b      	mov	r3, r1
 8015f52:	813b      	strh	r3, [r7, #8]
 8015f54:	4613      	mov	r3, r2
 8015f56:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8015f5c:	7afb      	ldrb	r3, [r7, #11]
 8015f5e:	b299      	uxth	r1, r3
 8015f60:	88f8      	ldrh	r0, [r7, #6]
 8015f62:	893a      	ldrh	r2, [r7, #8]
 8015f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015f68:	9302      	str	r3, [sp, #8]
 8015f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f6c:	9301      	str	r3, [sp, #4]
 8015f6e:	6a3b      	ldr	r3, [r7, #32]
 8015f70:	9300      	str	r3, [sp, #0]
 8015f72:	4603      	mov	r3, r0
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	f7f1 f80b 	bl	8006f90 <HAL_I2C_Mem_Read>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 8015f7e:	7dfb      	ldrb	r3, [r7, #23]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d004      	beq.n	8015f8e <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* I2C error occurred */
        I2Cx_Error(i2c_handler, Addr);
 8015f84:	7afb      	ldrb	r3, [r7, #11]
 8015f86:	4619      	mov	r1, r3
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	f7ff ffcb 	bl	8015f24 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 8015f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	3718      	adds	r7, #24
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b08a      	sub	sp, #40	; 0x28
 8015f9c:	af04      	add	r7, sp, #16
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	4608      	mov	r0, r1
 8015fa2:	4611      	mov	r1, r2
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	72fb      	strb	r3, [r7, #11]
 8015faa:	460b      	mov	r3, r1
 8015fac:	813b      	strh	r3, [r7, #8]
 8015fae:	4613      	mov	r3, r2
 8015fb0:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8015fb6:	7afb      	ldrb	r3, [r7, #11]
 8015fb8:	b299      	uxth	r1, r3
 8015fba:	88f8      	ldrh	r0, [r7, #6]
 8015fbc:	893a      	ldrh	r2, [r7, #8]
 8015fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015fc2:	9302      	str	r3, [sp, #8]
 8015fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fc6:	9301      	str	r3, [sp, #4]
 8015fc8:	6a3b      	ldr	r3, [r7, #32]
 8015fca:	9300      	str	r3, [sp, #0]
 8015fcc:	4603      	mov	r3, r0
 8015fce:	68f8      	ldr	r0, [r7, #12]
 8015fd0:	f7f0 feca 	bl	8006d68 <HAL_I2C_Mem_Write>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 8015fd8:	7dfb      	ldrb	r3, [r7, #23]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d004      	beq.n	8015fe8 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
 8015fde:	7afb      	ldrb	r3, [r7, #11]
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	68f8      	ldr	r0, [r7, #12]
 8015fe4:	f7ff ff9e 	bl	8015f24 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 8015fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3718      	adds	r7, #24
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
	...

08015ff4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b084      	sub	sp, #16
 8015ff8:	af02      	add	r7, sp, #8
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	71fb      	strb	r3, [r7, #7]
 8015ffe:	460b      	mov	r3, r1
 8016000:	71bb      	strb	r3, [r7, #6]
 8016002:	4613      	mov	r3, r2
 8016004:	717b      	strb	r3, [r7, #5]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 8016006:	79bb      	ldrb	r3, [r7, #6]
 8016008:	b29a      	uxth	r2, r3
 801600a:	79f9      	ldrb	r1, [r7, #7]
 801600c:	2301      	movs	r3, #1
 801600e:	9301      	str	r3, [sp, #4]
 8016010:	1d7b      	adds	r3, r7, #5
 8016012:	9300      	str	r3, [sp, #0]
 8016014:	2301      	movs	r3, #1
 8016016:	4803      	ldr	r0, [pc, #12]	; (8016024 <TS_IO_Write+0x30>)
 8016018:	f7ff ffbe 	bl	8015f98 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 801601c:	bf00      	nop
 801601e:	3708      	adds	r7, #8
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}
 8016024:	200098d0 	.word	0x200098d0

08016028 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b086      	sub	sp, #24
 801602c:	af02      	add	r7, sp, #8
 801602e:	4603      	mov	r3, r0
 8016030:	460a      	mov	r2, r1
 8016032:	71fb      	strb	r3, [r7, #7]
 8016034:	4613      	mov	r3, r2
 8016036:	71bb      	strb	r3, [r7, #6]
    uint8_t read_value = 0;
 8016038:	2300      	movs	r3, #0
 801603a:	73fb      	strb	r3, [r7, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 801603c:	79bb      	ldrb	r3, [r7, #6]
 801603e:	b29a      	uxth	r2, r3
 8016040:	79f9      	ldrb	r1, [r7, #7]
 8016042:	2301      	movs	r3, #1
 8016044:	9301      	str	r3, [sp, #4]
 8016046:	f107 030f 	add.w	r3, r7, #15
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	2301      	movs	r3, #1
 801604e:	4804      	ldr	r0, [pc, #16]	; (8016060 <TS_IO_Read+0x38>)
 8016050:	f7ff ff75 	bl	8015f3e <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
 8016054:	7bfb      	ldrb	r3, [r7, #15]
}
 8016056:	4618      	mov	r0, r3
 8016058:	3710      	adds	r7, #16
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop
 8016060:	200098d0 	.word	0x200098d0

08016064 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	4a05      	ldr	r2, [pc, #20]	; (8016084 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	601a      	str	r2, [r3, #0]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	4618      	mov	r0, r3
 8016076:	f7ff fef9 	bl	8015e6c <_ZN8touchgfx15TouchControllerD1Ev>
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	4618      	mov	r0, r3
 801607e:	3708      	adds	r7, #8
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	0802720c 	.word	0x0802720c

08016088 <_ZN20STM32TouchControllerD0Ev>:
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f7ff ffe7 	bl	8016064 <_ZN20STM32TouchControllerD1Ev>
 8016096:	2104      	movs	r1, #4
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f00f f8e8 	bl	802526e <_ZdlPvj>
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	4618      	mov	r0, r3
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80160a8:	b480      	push	{r7}
 80160aa:	b083      	sub	sp, #12
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	4603      	mov	r3, r0
 80160b0:	71fb      	strb	r3, [r7, #7]

}
 80160b2:	bf00      	nop
 80160b4:	370c      	adds	r7, #12
 80160b6:	46bd      	mov	sp, r7
 80160b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160bc:	4770      	bx	lr

080160be <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80160be:	b480      	push	{r7}
 80160c0:	b083      	sub	sp, #12
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	4603      	mov	r3, r0
 80160c6:	71fb      	strb	r3, [r7, #7]

}
 80160c8:	bf00      	nop
 80160ca:	370c      	adds	r7, #12
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80160d4:	b480      	push	{r7}
 80160d6:	b083      	sub	sp, #12
 80160d8:	af00      	add	r7, sp, #0
 80160da:	4603      	mov	r3, r0
 80160dc:	71fb      	strb	r3, [r7, #7]

}
 80160de:	bf00      	nop
 80160e0:	370c      	adds	r7, #12
 80160e2:	46bd      	mov	sp, r7
 80160e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e8:	4770      	bx	lr
	...

080160ec <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
    {
 80160f4:	4a04      	ldr	r2, [pc, #16]	; (8016108 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	601a      	str	r2, [r3, #0]
    }
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr
 8016108:	08027a68 	.word	0x08027a68

0801610c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801610c:	b580      	push	{r7, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
    }
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7ff ffe9 	bl	80160ec <_ZN8touchgfx3HALD1Ev>
 801611a:	217c      	movs	r1, #124	; 0x7c
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f00f f8a6 	bl	802526e <_ZdlPvj>
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	4618      	mov	r0, r3
 8016126:	3708      	adds	r7, #8
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}

0801612c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801612c:	b480      	push	{r7}
 801612e:	b083      	sub	sp, #12
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
 8016134:	460b      	mov	r3, r1
 8016136:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	78fa      	ldrb	r2, [r7, #3]
 801613c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	2201      	movs	r2, #1
 8016144:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8016148:	bf00      	nop
 801614a:	370c      	adds	r7, #12
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr

08016154 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8016162:	2b00      	cmp	r3, #0
 8016164:	d009      	beq.n	801617a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	685a      	ldr	r2, [r3, #4]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	4610      	mov	r0, r2
 8016174:	4798      	blx	r3
 8016176:	4603      	mov	r3, r0
 8016178:	e000      	b.n	801617c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 801617a:	2300      	movs	r3, #0
        }
    }
 801617c:	4618      	mov	r0, r3
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}

08016184 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f003 f83f 	bl	8019210 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	3390      	adds	r3, #144	; 0x90
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	4798      	blx	r3
    }
 801619e:	bf00      	nop
 80161a0:	3708      	adds	r7, #8
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}

080161a6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80161a6:	b480      	push	{r7}
 80161a8:	b083      	sub	sp, #12
 80161aa:	af00      	add	r7, sp, #0
 80161ac:	6078      	str	r0, [r7, #4]
 80161ae:	6039      	str	r1, [r7, #0]
    {
        return false;
 80161b0:	2300      	movs	r3, #0
    }
 80161b2:	4618      	mov	r0, r3
 80161b4:	370c      	adds	r7, #12
 80161b6:	46bd      	mov	sp, r7
 80161b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161bc:	4770      	bx	lr
	...

080161c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	607a      	str	r2, [r7, #4]
 80161cc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80161ce:	68bb      	ldr	r3, [r7, #8]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d106      	bne.n	80161e2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80161d4:	4b11      	ldr	r3, [pc, #68]	; (801621c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80161d6:	4a12      	ldr	r2, [pc, #72]	; (8016220 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80161d8:	f240 216b 	movw	r1, #619	; 0x26b
 80161dc:	4811      	ldr	r0, [pc, #68]	; (8016224 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80161de:	f00f f875 	bl	80252cc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	68ba      	ldr	r2, [r7, #8]
 80161e6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	687a      	ldr	r2, [r7, #4]
 80161ec:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	683a      	ldr	r2, [r7, #0]
 80161f2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	bf14      	ite	ne
 80161fa:	2301      	movne	r3, #1
 80161fc:	2300      	moveq	r3, #0
 80161fe:	b2da      	uxtb	r2, r3
 8016200:	4b09      	ldr	r3, [pc, #36]	; (8016228 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8016202:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	2b00      	cmp	r3, #0
 8016208:	bf14      	ite	ne
 801620a:	2301      	movne	r3, #1
 801620c:	2300      	moveq	r3, #0
 801620e:	b2da      	uxtb	r2, r3
 8016210:	4b06      	ldr	r3, [pc, #24]	; (801622c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8016212:	701a      	strb	r2, [r3, #0]
    }
 8016214:	bf00      	nop
 8016216:	3710      	adds	r7, #16
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	08026af8 	.word	0x08026af8
 8016220:	08026b30 	.word	0x08026b30
 8016224:	08026b80 	.word	0x08026b80
 8016228:	200094d4 	.word	0x200094d4
 801622c:	200094d5 	.word	0x200094d5

08016230 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8016230:	b480      	push	{r7}
 8016232:	b083      	sub	sp, #12
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8016238:	2300      	movs	r3, #0
    }
 801623a:	4618      	mov	r0, r3
 801623c:	370c      	adds	r7, #12
 801623e:	46bd      	mov	sp, r7
 8016240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016244:	4770      	bx	lr

08016246 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8016246:	b580      	push	{r7, lr}
 8016248:	b082      	sub	sp, #8
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
 801624e:	460b      	mov	r3, r1
 8016250:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016256:	2b00      	cmp	r3, #0
 8016258:	d004      	beq.n	8016264 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801625e:	887a      	ldrh	r2, [r7, #2]
 8016260:	4610      	mov	r0, r2
 8016262:	4798      	blx	r3
        }
    }
 8016264:	bf00      	nop
 8016266:	3708      	adds	r7, #8
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}

0801626c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801626c:	b580      	push	{r7, lr}
 801626e:	b082      	sub	sp, #8
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	685a      	ldr	r2, [r3, #4]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	685b      	ldr	r3, [r3, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	3318      	adds	r3, #24
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	4610      	mov	r0, r2
 8016284:	4798      	blx	r3
 8016286:	4603      	mov	r3, r0
    }
 8016288:	4618      	mov	r0, r3
 801628a:	3708      	adds	r7, #8
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8016290:	b480      	push	{r7}
 8016292:	b083      	sub	sp, #12
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d017      	beq.n	80162d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80162a8:	4b1a      	ldr	r3, [pc, #104]	; (8016314 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d12a      	bne.n	8016306 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80162b0:	4b19      	ldr	r3, [pc, #100]	; (8016318 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80162b2:	881a      	ldrh	r2, [r3, #0]
 80162b4:	4b19      	ldr	r3, [pc, #100]	; (801631c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80162b6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80162b8:	4b19      	ldr	r3, [pc, #100]	; (8016320 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80162ba:	881a      	ldrh	r2, [r3, #0]
 80162bc:	4b19      	ldr	r3, [pc, #100]	; (8016324 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80162be:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80162c0:	4b16      	ldr	r3, [pc, #88]	; (801631c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80162c2:	881a      	ldrh	r2, [r3, #0]
 80162c4:	4b16      	ldr	r3, [pc, #88]	; (8016320 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80162c6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80162c8:	4b16      	ldr	r3, [pc, #88]	; (8016324 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80162ca:	881a      	ldrh	r2, [r3, #0]
 80162cc:	4b12      	ldr	r3, [pc, #72]	; (8016318 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80162ce:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80162d0:	4b10      	ldr	r3, [pc, #64]	; (8016314 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80162d2:	2201      	movs	r2, #1
 80162d4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80162d6:	e016      	b.n	8016306 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80162d8:	4b0e      	ldr	r3, [pc, #56]	; (8016314 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80162da:	781b      	ldrb	r3, [r3, #0]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d012      	beq.n	8016306 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80162e0:	4b0f      	ldr	r3, [pc, #60]	; (8016320 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80162e2:	881a      	ldrh	r2, [r3, #0]
 80162e4:	4b0d      	ldr	r3, [pc, #52]	; (801631c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80162e6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80162e8:	4b0b      	ldr	r3, [pc, #44]	; (8016318 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80162ea:	881a      	ldrh	r2, [r3, #0]
 80162ec:	4b0d      	ldr	r3, [pc, #52]	; (8016324 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80162ee:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80162f0:	4b0c      	ldr	r3, [pc, #48]	; (8016324 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80162f2:	881a      	ldrh	r2, [r3, #0]
 80162f4:	4b0a      	ldr	r3, [pc, #40]	; (8016320 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80162f6:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80162f8:	4b08      	ldr	r3, [pc, #32]	; (801631c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80162fa:	881a      	ldrh	r2, [r3, #0]
 80162fc:	4b06      	ldr	r3, [pc, #24]	; (8016318 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80162fe:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8016300:	4b04      	ldr	r3, [pc, #16]	; (8016314 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016302:	2200      	movs	r2, #0
 8016304:	701a      	strb	r2, [r3, #0]
    }
 8016306:	bf00      	nop
 8016308:	370c      	adds	r7, #12
 801630a:	46bd      	mov	sp, r7
 801630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016310:	4770      	bx	lr
 8016312:	bf00      	nop
 8016314:	200094ce 	.word	0x200094ce
 8016318:	200094ca 	.word	0x200094ca
 801631c:	200094d0 	.word	0x200094d0
 8016320:	200094cc 	.word	0x200094cc
 8016324:	200094d2 	.word	0x200094d2

08016328 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	4618      	mov	r0, r3
 8016334:	f002 f9f3 	bl	801871e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016338:	bf00      	nop
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	4a05      	ldr	r2, [pc, #20]	; (8016360 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	601a      	str	r2, [r3, #0]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	4618      	mov	r0, r3
 8016352:	f7ff fecb 	bl	80160ec <_ZN8touchgfx3HALD1Ev>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	3708      	adds	r7, #8
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}
 8016360:	08027450 	.word	0x08027450

08016364 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6878      	ldr	r0, [r7, #4]
 801636e:	f7ff ffe7 	bl	8016340 <_ZN20TouchGFXGeneratedHALD1Ev>
 8016372:	217c      	movs	r1, #124	; 0x7c
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f00e ff7a 	bl	802526e <_ZdlPvj>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	4618      	mov	r0, r3
 801637e:	3708      	adds	r7, #8
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}

08016384 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016384:	b580      	push	{r7, lr}
 8016386:	b082      	sub	sp, #8
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	4618      	mov	r0, r3
 8016390:	f7ff ffca 	bl	8016328 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8016394:	bf00      	nop
 8016396:	3708      	adds	r7, #8
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}

0801639c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b082      	sub	sp, #8
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	4618      	mov	r0, r3
 80163a8:	f001 fb0e 	bl	80179c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80163ac:	bf00      	nop
 80163ae:	3708      	adds	r7, #8
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}

080163b4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	4618      	mov	r0, r3
 80163c0:	f001 fb8e 	bl	8017ae0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80163c4:	4603      	mov	r3, r0
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3708      	adds	r7, #8
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}

080163ce <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80163ce:	b580      	push	{r7, lr}
 80163d0:	b082      	sub	sp, #8
 80163d2:	af00      	add	r7, sp, #0
 80163d4:	6078      	str	r0, [r7, #4]
 80163d6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6839      	ldr	r1, [r7, #0]
 80163dc:	4618      	mov	r0, r3
 80163de:	f001 fb8d 	bl	8017afc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80163e2:	bf00      	nop
 80163e4:	3708      	adds	r7, #8
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}

080163ea <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80163ea:	b580      	push	{r7, lr}
 80163ec:	b082      	sub	sp, #8
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	6078      	str	r0, [r7, #4]
 80163f2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6839      	ldr	r1, [r7, #0]
 80163f8:	4618      	mov	r0, r3
 80163fa:	f001 fb95 	bl	8017b28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80163fe:	bf00      	nop
 8016400:	3708      	adds	r7, #8
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}

08016406 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016406:	b580      	push	{r7, lr}
 8016408:	b084      	sub	sp, #16
 801640a:	af00      	add	r7, sp, #0
 801640c:	60f8      	str	r0, [r7, #12]
 801640e:	60b9      	str	r1, [r7, #8]
 8016410:	607a      	str	r2, [r7, #4]
 8016412:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8016414:	68f8      	ldr	r0, [r7, #12]
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	687a      	ldr	r2, [r7, #4]
 801641a:	68b9      	ldr	r1, [r7, #8]
 801641c:	f001 fb94 	bl	8017b48 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8016420:	4603      	mov	r3, r0
}
 8016422:	4618      	mov	r0, r3
 8016424:	3710      	adds	r7, #16
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}

0801642a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b082      	sub	sp, #8
 801642e:	af00      	add	r7, sp, #0
 8016430:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	4618      	mov	r0, r3
 8016436:	f001 faf9 	bl	8017a2c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801643a:	bf00      	nop
 801643c:	3708      	adds	r7, #8
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}

08016442 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8016442:	b580      	push	{r7, lr}
 8016444:	b082      	sub	sp, #8
 8016446:	af00      	add	r7, sp, #0
 8016448:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	4618      	mov	r0, r3
 801644e:	f001 fafd 	bl	8017a4c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8016452:	bf00      	nop
 8016454:	3708      	adds	r7, #8
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}

0801645a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801645a:	b580      	push	{r7, lr}
 801645c:	b082      	sub	sp, #8
 801645e:	af00      	add	r7, sp, #0
 8016460:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	4618      	mov	r0, r3
 8016466:	f001 faff 	bl	8017a68 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801646a:	bf00      	nop
 801646c:	3708      	adds	r7, #8
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}

08016472 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8016472:	b580      	push	{r7, lr}
 8016474:	b082      	sub	sp, #8
 8016476:	af00      	add	r7, sp, #0
 8016478:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	4618      	mov	r0, r3
 801647e:	f001 fb01 	bl	8017a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8016482:	bf00      	nop
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
	...

0801648c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801648c:	b580      	push	{r7, lr}
 801648e:	b082      	sub	sp, #8
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	4a05      	ldr	r2, [pc, #20]	; (80164ac <_ZN11TouchGFXHALD1Ev+0x20>)
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	601a      	str	r2, [r3, #0]
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	4618      	mov	r0, r3
 801649e:	f7ff ff4f 	bl	8016340 <_ZN20TouchGFXGeneratedHALD1Ev>
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	4618      	mov	r0, r3
 80164a6:	3708      	adds	r7, #8
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	0802723c 	.word	0x0802723c

080164b0 <_ZN11TouchGFXHALD0Ev>:
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f7ff ffe7 	bl	801648c <_ZN11TouchGFXHALD1Ev>
 80164be:	217c      	movs	r1, #124	; 0x7c
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f00e fed4 	bl	802526e <_ZdlPvj>
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	4618      	mov	r0, r3
 80164ca:	3708      	adds	r7, #8
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}

080164d0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 80164d4:	2101      	movs	r1, #1
 80164d6:	4811      	ldr	r0, [pc, #68]	; (801651c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80164d8:	f7fa ff0a 	bl	80112f0 <osSemaphoreCreate>
 80164dc:	4603      	mov	r3, r0
 80164de:	4a10      	ldr	r2, [pc, #64]	; (8016520 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80164e0:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80164e2:	4b0f      	ldr	r3, [pc, #60]	; (8016520 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d105      	bne.n	80164f6 <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 80164ea:	4b0e      	ldr	r3, [pc, #56]	; (8016524 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80164ec:	4a0e      	ldr	r2, [pc, #56]	; (8016528 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80164ee:	2125      	movs	r1, #37	; 0x25
 80164f0:	480e      	ldr	r0, [pc, #56]	; (801652c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80164f2:	f00e feeb 	bl	80252cc <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 80164f6:	2101      	movs	r1, #1
 80164f8:	480d      	ldr	r0, [pc, #52]	; (8016530 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80164fa:	f7fa fef9 	bl	80112f0 <osSemaphoreCreate>
 80164fe:	4603      	mov	r3, r0
 8016500:	4a0c      	ldr	r2, [pc, #48]	; (8016534 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8016502:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8016504:	4b0b      	ldr	r3, [pc, #44]	; (8016534 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d105      	bne.n	8016518 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 801650c:	4b0a      	ldr	r3, [pc, #40]	; (8016538 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 801650e:	4a06      	ldr	r2, [pc, #24]	; (8016528 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8016510:	2128      	movs	r1, #40	; 0x28
 8016512:	4806      	ldr	r0, [pc, #24]	; (801652c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8016514:	f00e feda 	bl	80252cc <__assert_func>
}
 8016518:	bf00      	nop
 801651a:	bd80      	pop	{r7, pc}
 801651c:	080272f0 	.word	0x080272f0
 8016520:	200085ac 	.word	0x200085ac
 8016524:	08026bc4 	.word	0x08026bc4
 8016528:	08026c10 	.word	0x08026c10
 801652c:	08026c40 	.word	0x08026c40
 8016530:	080272f8 	.word	0x080272f8
 8016534:	200085b0 	.word	0x200085b0
 8016538:	08026c6c 	.word	0x08026c6c

0801653c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801653c:	b580      	push	{r7, lr}
 801653e:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8016540:	4b04      	ldr	r3, [pc, #16]	; (8016554 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	f04f 31ff 	mov.w	r1, #4294967295
 8016548:	4618      	mov	r0, r3
 801654a:	f7fa ff11 	bl	8011370 <osSemaphoreWait>
}
 801654e:	bf00      	nop
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	200085ac 	.word	0x200085ac

08016558 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8016558:	b580      	push	{r7, lr}
 801655a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801655c:	4b03      	ldr	r3, [pc, #12]	; (801656c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	4618      	mov	r0, r3
 8016562:	f7fa ff53 	bl	801140c <osSemaphoreRelease>
}
 8016566:	bf00      	nop
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	200085ac 	.word	0x200085ac

08016570 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016570:	b580      	push	{r7, lr}
 8016572:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8016574:	4b03      	ldr	r3, [pc, #12]	; (8016584 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2100      	movs	r1, #0
 801657a:	4618      	mov	r0, r3
 801657c:	f7fa fef8 	bl	8011370 <osSemaphoreWait>
}
 8016580:	bf00      	nop
 8016582:	bd80      	pop	{r7, pc}
 8016584:	200085ac 	.word	0x200085ac

08016588 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016588:	b580      	push	{r7, lr}
 801658a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 801658c:	4b03      	ldr	r3, [pc, #12]	; (801659c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	4618      	mov	r0, r3
 8016592:	f7fa ff3b 	bl	801140c <osSemaphoreRelease>
}
 8016596:	bf00      	nop
 8016598:	bd80      	pop	{r7, pc}
 801659a:	bf00      	nop
 801659c:	200085ac 	.word	0x200085ac

080165a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 80165a4:	4b03      	ldr	r3, [pc, #12]	; (80165b4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4618      	mov	r0, r3
 80165aa:	f7fa ff2f 	bl	801140c <osSemaphoreRelease>
}
 80165ae:	bf00      	nop
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop
 80165b4:	200085b0 	.word	0x200085b0

080165b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 80165bc:	4b07      	ldr	r3, [pc, #28]	; (80165dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2100      	movs	r1, #0
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7fa fed4 	bl	8011370 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 80165c8:	4b04      	ldr	r3, [pc, #16]	; (80165dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	f04f 31ff 	mov.w	r1, #4294967295
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7fa fecd 	bl	8011370 <osSemaphoreWait>
}
 80165d6:	bf00      	nop
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	200085b0 	.word	0x200085b0

080165e0 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	4603      	mov	r3, r0
 80165e8:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80165ea:	88fb      	ldrh	r3, [r7, #6]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7fa fe6b 	bl	80112c8 <osDelay>
}
 80165f2:	bf00      	nop
 80165f4:	3708      	adds	r7, #8
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}
	...

080165fc <__NVIC_EnableIRQ>:
{
 80165fc:	b480      	push	{r7}
 80165fe:	b083      	sub	sp, #12
 8016600:	af00      	add	r7, sp, #0
 8016602:	4603      	mov	r3, r0
 8016604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801660a:	2b00      	cmp	r3, #0
 801660c:	db0b      	blt.n	8016626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801660e:	79fb      	ldrb	r3, [r7, #7]
 8016610:	f003 021f 	and.w	r2, r3, #31
 8016614:	4907      	ldr	r1, [pc, #28]	; (8016634 <__NVIC_EnableIRQ+0x38>)
 8016616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801661a:	095b      	lsrs	r3, r3, #5
 801661c:	2001      	movs	r0, #1
 801661e:	fa00 f202 	lsl.w	r2, r0, r2
 8016622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016626:	bf00      	nop
 8016628:	370c      	adds	r7, #12
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr
 8016632:	bf00      	nop
 8016634:	e000e100 	.word	0xe000e100

08016638 <__NVIC_DisableIRQ>:
{
 8016638:	b480      	push	{r7}
 801663a:	b083      	sub	sp, #12
 801663c:	af00      	add	r7, sp, #0
 801663e:	4603      	mov	r3, r0
 8016640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016646:	2b00      	cmp	r3, #0
 8016648:	db12      	blt.n	8016670 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801664a:	79fb      	ldrb	r3, [r7, #7]
 801664c:	f003 021f 	and.w	r2, r3, #31
 8016650:	490a      	ldr	r1, [pc, #40]	; (801667c <__NVIC_DisableIRQ+0x44>)
 8016652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016656:	095b      	lsrs	r3, r3, #5
 8016658:	2001      	movs	r0, #1
 801665a:	fa00 f202 	lsl.w	r2, r0, r2
 801665e:	3320      	adds	r3, #32
 8016660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8016664:	f3bf 8f4f 	dsb	sy
}
 8016668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801666a:	f3bf 8f6f 	isb	sy
}
 801666e:	bf00      	nop
}
 8016670:	bf00      	nop
 8016672:	370c      	adds	r7, #12
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr
 801667c:	e000e100 	.word	0xe000e100

08016680 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8016680:	b480      	push	{r7}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
        : color(0)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2200      	movs	r2, #0
 801668c:	601a      	str	r2, [r3, #0]
    }
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	4618      	mov	r0, r3
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr

0801669c <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 801669c:	b480      	push	{r7}
 801669e:	b083      	sub	sp, #12
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
        return color;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
    }
 80166a8:	4618      	mov	r0, r3
 80166aa:	370c      	adds	r7, #12
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr

080166b4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80166b4:	b480      	push	{r7}
 80166b6:	b083      	sub	sp, #12
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
    {
 80166bc:	4a04      	ldr	r2, [pc, #16]	; (80166d0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	601a      	str	r2, [r3, #0]
    }
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	4618      	mov	r0, r3
 80166c6:	370c      	adds	r7, #12
 80166c8:	46bd      	mov	sp, r7
 80166ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ce:	4770      	bx	lr
 80166d0:	08027358 	.word	0x08027358

080166d4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
    }
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f7ff ffe9 	bl	80166b4 <_ZN8touchgfx9DMA_QueueD1Ev>
 80166e2:	2104      	movs	r1, #4
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f00e fdc2 	bl	802526e <_ZdlPvj>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4618      	mov	r0, r3
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b082      	sub	sp, #8
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	3344      	adds	r3, #68	; 0x44
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	4798      	blx	r3
    }
 8016708:	bf00      	nop
 801670a:	3708      	adds	r7, #8
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8016710:	b480      	push	{r7}
 8016712:	b083      	sub	sp, #12
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
    {
 8016718:	4a04      	ldr	r2, [pc, #16]	; (801672c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	601a      	str	r2, [r3, #0]
    }
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	4618      	mov	r0, r3
 8016722:	370c      	adds	r7, #12
 8016724:	46bd      	mov	sp, r7
 8016726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672a:	4770      	bx	lr
 801672c:	08027eb4 	.word	0x08027eb4

08016730 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
    }
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f7ff ffe9 	bl	8016710 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801673e:	210c      	movs	r1, #12
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f00e fd94 	bl	802526e <_ZdlPvj>
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	4618      	mov	r0, r3
 801674a:	3708      	adds	r7, #8
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016750:	b480      	push	{r7}
 8016752:	b083      	sub	sp, #12
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801675a:	4a09      	ldr	r2, [pc, #36]	; (8016780 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	601a      	str	r2, [r3, #0]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	683a      	ldr	r2, [r7, #0]
 8016764:	605a      	str	r2, [r3, #4]
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	2200      	movs	r2, #0
 801676a:	721a      	strb	r2, [r3, #8]
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2200      	movs	r2, #0
 8016770:	725a      	strb	r2, [r3, #9]
    {
    }
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	4618      	mov	r0, r3
 8016776:	370c      	adds	r7, #12
 8016778:	46bd      	mov	sp, r7
 801677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677e:	4770      	bx	lr
 8016780:	08027eb4 	.word	0x08027eb4

08016784 <_ZN10STM32F7DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8016784:	b480      	push	{r7}
 8016786:	b083      	sub	sp, #12
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 801678c:	2301      	movs	r3, #1
    }
 801678e:	4618      	mov	r0, r3
 8016790:	370c      	adds	r7, #12
 8016792:	46bd      	mov	sp, r7
 8016794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016798:	4770      	bx	lr

0801679a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801679a:	b580      	push	{r7, lr}
 801679c:	b082      	sub	sp, #8
 801679e:	af00      	add	r7, sp, #0
 80167a0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80167a2:	687a      	ldr	r2, [r7, #4]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	3328      	adds	r3, #40	; 0x28
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	4610      	mov	r0, r2
 80167ae:	4798      	blx	r3
    }
 80167b0:	bf00      	nop
 80167b2:	3708      	adds	r7, #8
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}

080167b8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b082      	sub	sp, #8
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	685a      	ldr	r2, [r3, #4]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	685b      	ldr	r3, [r3, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	3314      	adds	r3, #20
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	4610      	mov	r0, r2
 80167d0:	4798      	blx	r3
    }
 80167d2:	bf00      	nop
 80167d4:	3708      	adds	r7, #8
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd80      	pop	{r7, pc}

080167da <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80167da:	b580      	push	{r7, lr}
 80167dc:	b082      	sub	sp, #8
 80167de:	af00      	add	r7, sp, #0
 80167e0:	6078      	str	r0, [r7, #4]
    (void)handle; // Unused argument
    HAL::getInstance()->signalDMAInterrupt();
 80167e2:	f7fd ffad 	bl	8014740 <_ZN8touchgfx3HAL11getInstanceEv>
 80167e6:	4603      	mov	r3, r0
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7ff ffe5 	bl	80167b8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80167ee:	bf00      	nop
 80167f0:	3708      	adds	r7, #8
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}

080167f6 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80167f6:	b580      	push	{r7, lr}
 80167f8:	b082      	sub	sp, #8
 80167fa:	af00      	add	r7, sp, #0
 80167fc:	6078      	str	r0, [r7, #4]
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	3318      	adds	r3, #24
 8016802:	4618      	mov	r0, r3
 8016804:	f7ff ff3c 	bl	8016680 <_ZN8touchgfx9colortypeC1Ev>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	4618      	mov	r0, r3
 801680c:	3708      	adds	r7, #8
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}
	...

08016814 <_ZN10STM32F7DMAC1Ev>:
}

STM32F7DMA::STM32F7DMA()
 8016814:	b5b0      	push	{r4, r5, r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801681c:	687a      	ldr	r2, [r7, #4]
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	330c      	adds	r3, #12
 8016822:	4619      	mov	r1, r3
 8016824:	4610      	mov	r0, r2
 8016826:	f7ff ff93 	bl	8016750 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801682a:	4a0e      	ldr	r2, [pc, #56]	; (8016864 <_ZN10STM32F7DMAC1Ev+0x50>)
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	601a      	str	r2, [r3, #0]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f103 000c 	add.w	r0, r3, #12
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	3320      	adds	r3, #32
 801683a:	2260      	movs	r2, #96	; 0x60
 801683c:	4619      	mov	r1, r3
 801683e:	f002 fe47 	bl	80194d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	3320      	adds	r3, #32
 8016846:	245f      	movs	r4, #95	; 0x5f
 8016848:	461d      	mov	r5, r3
 801684a:	2c00      	cmp	r4, #0
 801684c:	db05      	blt.n	801685a <_ZN10STM32F7DMAC1Ev+0x46>
 801684e:	4628      	mov	r0, r5
 8016850:	f7ff ffd1 	bl	80167f6 <_ZN8touchgfx6BlitOpC1Ev>
 8016854:	3520      	adds	r5, #32
 8016856:	3c01      	subs	r4, #1
 8016858:	e7f7      	b.n	801684a <_ZN10STM32F7DMAC1Ev+0x36>
{
}
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	4618      	mov	r0, r3
 801685e:	3708      	adds	r7, #8
 8016860:	46bd      	mov	sp, r7
 8016862:	bdb0      	pop	{r4, r5, r7, pc}
 8016864:	08027308 	.word	0x08027308

08016868 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	4a09      	ldr	r2, [pc, #36]	; (8016898 <_ZN10STM32F7DMAD1Ev+0x30>)
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016876:	205a      	movs	r0, #90	; 0x5a
 8016878:	f7ff fede 	bl	8016638 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	330c      	adds	r3, #12
 8016880:	4618      	mov	r0, r3
 8016882:	f000 faad 	bl	8016de0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	4618      	mov	r0, r3
 801688a:	f7ff ff41 	bl	8016710 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	4618      	mov	r0, r3
 8016892:	3708      	adds	r7, #8
 8016894:	46bd      	mov	sp, r7
 8016896:	bd80      	pop	{r7, pc}
 8016898:	08027308 	.word	0x08027308

0801689c <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 801689c:	b580      	push	{r7, lr}
 801689e:	b082      	sub	sp, #8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
}
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f7ff ffdf 	bl	8016868 <_ZN10STM32F7DMAD1Ev>
 80168aa:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f00e fcdd 	bl	802526e <_ZdlPvj>
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	4618      	mov	r0, r3
 80168b8:	3708      	adds	r7, #8
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
	...

080168c0 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b084      	sub	sp, #16
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80168c8:	4b10      	ldr	r3, [pc, #64]	; (801690c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80168ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168cc:	4a0f      	ldr	r2, [pc, #60]	; (801690c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80168ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80168d2:	6313      	str	r3, [r2, #48]	; 0x30
 80168d4:	4b0d      	ldr	r3, [pc, #52]	; (801690c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80168d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80168dc:	60fb      	str	r3, [r7, #12]
 80168de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80168e0:	4b0a      	ldr	r3, [pc, #40]	; (801690c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80168e2:	691b      	ldr	r3, [r3, #16]
 80168e4:	4a09      	ldr	r2, [pc, #36]	; (801690c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80168e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80168ea:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80168ec:	4b07      	ldr	r3, [pc, #28]	; (801690c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80168ee:	691b      	ldr	r3, [r3, #16]
 80168f0:	4a06      	ldr	r2, [pc, #24]	; (801690c <_ZN10STM32F7DMA10initializeEv+0x4c>)
 80168f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80168f6:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80168f8:	4b05      	ldr	r3, [pc, #20]	; (8016910 <_ZN10STM32F7DMA10initializeEv+0x50>)
 80168fa:	4a06      	ldr	r2, [pc, #24]	; (8016914 <_ZN10STM32F7DMA10initializeEv+0x54>)
 80168fc:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80168fe:	205a      	movs	r0, #90	; 0x5a
 8016900:	f7ff fe7c 	bl	80165fc <__NVIC_EnableIRQ>
}
 8016904:	bf00      	nop
 8016906:	3710      	adds	r7, #16
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}
 801690c:	40023800 	.word	0x40023800
 8016910:	20009810 	.word	0x20009810
 8016914:	080167db 	.word	0x080167db

08016918 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b084      	sub	sp, #16
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	460b      	mov	r3, r1
 8016922:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8016924:	2300      	movs	r3, #0
 8016926:	60fb      	str	r3, [r7, #12]

    switch (format)
 8016928:	78fb      	ldrb	r3, [r7, #3]
 801692a:	2b0b      	cmp	r3, #11
 801692c:	d826      	bhi.n	801697c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801692e:	a201      	add	r2, pc, #4	; (adr r2, 8016934 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8016930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016934:	08016971 	.word	0x08016971
 8016938:	0801696b 	.word	0x0801696b
 801693c:	08016965 	.word	0x08016965
 8016940:	0801697d 	.word	0x0801697d
 8016944:	0801697d 	.word	0x0801697d
 8016948:	0801697d 	.word	0x0801697d
 801694c:	0801697d 	.word	0x0801697d
 8016950:	08016977 	.word	0x08016977
 8016954:	08016977 	.word	0x08016977
 8016958:	08016977 	.word	0x08016977
 801695c:	08016977 	.word	0x08016977
 8016960:	08016977 	.word	0x08016977
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8016964:	2300      	movs	r3, #0
 8016966:	60fb      	str	r3, [r7, #12]
        break;
 8016968:	e00e      	b.n	8016988 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801696a:	2301      	movs	r3, #1
 801696c:	60fb      	str	r3, [r7, #12]
        break;
 801696e:	e00b      	b.n	8016988 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8016970:	2302      	movs	r3, #2
 8016972:	60fb      	str	r3, [r7, #12]
        break;
 8016974:	e008      	b.n	8016988 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8016976:	2305      	movs	r3, #5
 8016978:	60fb      	str	r3, [r7, #12]
        break;
 801697a:	e005      	b.n	8016988 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801697c:	4b05      	ldr	r3, [pc, #20]	; (8016994 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801697e:	4a06      	ldr	r2, [pc, #24]	; (8016998 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8016980:	2165      	movs	r1, #101	; 0x65
 8016982:	4806      	ldr	r0, [pc, #24]	; (801699c <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8016984:	f00e fca2 	bl	80252cc <__assert_func>
        break;
    }

    return dma2dColorMode;
 8016988:	68fb      	ldr	r3, [r7, #12]
}
 801698a:	4618      	mov	r0, r3
 801698c:	3710      	adds	r7, #16
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}
 8016992:	bf00      	nop
 8016994:	08026ca8 	.word	0x08026ca8
 8016998:	08026cc4 	.word	0x08026cc4
 801699c:	08026d10 	.word	0x08026d10

080169a0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32F7DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	460b      	mov	r3, r1
 80169aa:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80169ac:	2300      	movs	r3, #0
 80169ae:	60fb      	str	r3, [r7, #12]

    switch (format)
 80169b0:	78fb      	ldrb	r3, [r7, #3]
 80169b2:	2b0a      	cmp	r3, #10
 80169b4:	d821      	bhi.n	80169fa <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80169b6:	a201      	add	r2, pc, #4	; (adr r2, 80169bc <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80169b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169bc:	080169f5 	.word	0x080169f5
 80169c0:	080169ef 	.word	0x080169ef
 80169c4:	080169e9 	.word	0x080169e9
 80169c8:	080169fb 	.word	0x080169fb
 80169cc:	080169fb 	.word	0x080169fb
 80169d0:	080169fb 	.word	0x080169fb
 80169d4:	080169fb 	.word	0x080169fb
 80169d8:	080169ef 	.word	0x080169ef
 80169dc:	080169ef 	.word	0x080169ef
 80169e0:	080169ef 	.word	0x080169ef
 80169e4:	080169ef 	.word	0x080169ef
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80169e8:	2300      	movs	r3, #0
 80169ea:	60fb      	str	r3, [r7, #12]
        break;
 80169ec:	e00b      	b.n	8016a06 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80169ee:	2301      	movs	r3, #1
 80169f0:	60fb      	str	r3, [r7, #12]
        break;
 80169f2:	e008      	b.n	8016a06 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80169f4:	2302      	movs	r3, #2
 80169f6:	60fb      	str	r3, [r7, #12]
        break;
 80169f8:	e005      	b.n	8016a06 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80169fa:	4b05      	ldr	r3, [pc, #20]	; (8016a10 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80169fc:	4a05      	ldr	r2, [pc, #20]	; (8016a14 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80169fe:	2186      	movs	r1, #134	; 0x86
 8016a00:	4805      	ldr	r0, [pc, #20]	; (8016a18 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8016a02:	f00e fc63 	bl	80252cc <__assert_func>
        break;
    }

    return dma2dColorMode;
 8016a06:	68fb      	ldr	r3, [r7, #12]
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	3710      	adds	r7, #16
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	08026ca8 	.word	0x08026ca8
 8016a14:	08026d3c 	.word	0x08026d3c
 8016a18:	08026d10 	.word	0x08026d10

08016a1c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8016a24:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	370c      	adds	r7, #12
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a32:	4770      	bx	lr

08016a34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016a34:	b590      	push	{r4, r7, lr}
 8016a36:	b089      	sub	sp, #36	; 0x24
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
 8016a3c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	7f5b      	ldrb	r3, [r3, #29]
 8016a42:	4619      	mov	r1, r3
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7ff ff67 	bl	8016918 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016a4a:	61f8      	str	r0, [r7, #28]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	7f9b      	ldrb	r3, [r3, #30]
 8016a50:	4619      	mov	r1, r3
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f7ff ff60 	bl	8016918 <_ZN10STM32F7DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016a58:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	7f9b      	ldrb	r3, [r3, #30]
 8016a5e:	4619      	mov	r1, r3
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7ff ff9d 	bl	80169a0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016a66:	6178      	str	r0, [r7, #20]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	8adb      	ldrh	r3, [r3, #22]
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	8a1b      	ldrh	r3, [r3, #16]
 8016a72:	1ad2      	subs	r2, r2, r3
 8016a74:	4b97      	ldr	r3, [pc, #604]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	8adb      	ldrh	r3, [r3, #22]
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	8a1b      	ldrh	r3, [r3, #16]
 8016a82:	1ad2      	subs	r2, r2, r3
 8016a84:	4b93      	ldr	r3, [pc, #588]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016a86:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	8a9b      	ldrh	r3, [r3, #20]
 8016a8c:	461a      	mov	r2, r3
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	8a1b      	ldrh	r3, [r3, #16]
 8016a92:	1ad2      	subs	r2, r2, r3
 8016a94:	4b8f      	ldr	r3, [pc, #572]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016a96:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8016a98:	4a8e      	ldr	r2, [pc, #568]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016a9a:	697b      	ldr	r3, [r7, #20]
 8016a9c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	8a5b      	ldrh	r3, [r3, #18]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	8a1b      	ldrh	r3, [r3, #16]
 8016aa8:	041b      	lsls	r3, r3, #16
 8016aaa:	431a      	orrs	r2, r3
 8016aac:	4b89      	ldr	r3, [pc, #548]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016aae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	68da      	ldr	r2, [r3, #12]
 8016ab4:	4b87      	ldr	r3, [pc, #540]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016ab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	685a      	ldr	r2, [r3, #4]
 8016abc:	4b85      	ldr	r3, [pc, #532]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016abe:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ac8:	d02f      	beq.n	8016b2a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
 8016aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ace:	f200 80bb 	bhi.w	8016c48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
 8016ad2:	2b80      	cmp	r3, #128	; 0x80
 8016ad4:	d00e      	beq.n	8016af4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
 8016ad6:	2b80      	cmp	r3, #128	; 0x80
 8016ad8:	f200 80b6 	bhi.w	8016c48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
 8016adc:	2b40      	cmp	r3, #64	; 0x40
 8016ade:	f000 809e 	beq.w	8016c1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 8016ae2:	2b40      	cmp	r3, #64	; 0x40
 8016ae4:	f200 80b0 	bhi.w	8016c48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
 8016ae8:	2b04      	cmp	r3, #4
 8016aea:	d039      	beq.n	8016b60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12c>
 8016aec:	2b20      	cmp	r3, #32
 8016aee:	f000 8096 	beq.w	8016c1e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
 8016af2:	e0a9      	b.n	8016c48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	7f1b      	ldrb	r3, [r3, #28]
 8016af8:	061b      	lsls	r3, r3, #24
 8016afa:	4619      	mov	r1, r3
 8016afc:	4a75      	ldr	r2, [pc, #468]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016afe:	4b76      	ldr	r3, [pc, #472]	; (8016cd8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016b00:	430b      	orrs	r3, r1
 8016b02:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	3318      	adds	r3, #24
 8016b08:	4c72      	ldr	r4, [pc, #456]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7ff fdc6 	bl	801669c <_ZNK8touchgfx9colortypecvmEv>
 8016b10:	4603      	mov	r3, r0
 8016b12:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8016b14:	4a6f      	ldr	r2, [pc, #444]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	68da      	ldr	r2, [r3, #12]
 8016b1e:	4b6d      	ldr	r3, [pc, #436]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b20:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8016b22:	4b6c      	ldr	r3, [pc, #432]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b24:	4a6d      	ldr	r2, [pc, #436]	; (8016cdc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016b26:	601a      	str	r2, [r3, #0]
        break;
 8016b28:	e0cf      	b.n	8016cca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	7f1b      	ldrb	r3, [r3, #28]
 8016b2e:	061b      	lsls	r3, r3, #24
 8016b30:	4619      	mov	r1, r3
 8016b32:	4a68      	ldr	r2, [pc, #416]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b34:	4b6a      	ldr	r3, [pc, #424]	; (8016ce0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8016b36:	430b      	orrs	r3, r1
 8016b38:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	3318      	adds	r3, #24
 8016b3e:	4c65      	ldr	r4, [pc, #404]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7ff fdab 	bl	801669c <_ZNK8touchgfx9colortypecvmEv>
 8016b46:	4603      	mov	r3, r0
 8016b48:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8016b4a:	4a62      	ldr	r2, [pc, #392]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	68da      	ldr	r2, [r3, #12]
 8016b54:	4b5f      	ldr	r3, [pc, #380]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b56:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8016b58:	4b5e      	ldr	r3, [pc, #376]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b5a:	4a60      	ldr	r2, [pc, #384]	; (8016cdc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016b5c:	601a      	str	r2, [r3, #0]
        break;
 8016b5e:	e0b4      	b.n	8016cca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	7f1b      	ldrb	r3, [r3, #28]
 8016b64:	061b      	lsls	r3, r3, #24
 8016b66:	461a      	mov	r2, r3
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	4313      	orrs	r3, r2
 8016b6c:	4a59      	ldr	r2, [pc, #356]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016b72:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8016b74:	4a57      	ldr	r2, [pc, #348]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b76:	69bb      	ldr	r3, [r7, #24]
 8016b78:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	68da      	ldr	r2, [r3, #12]
 8016b7e:	4b55      	ldr	r3, [pc, #340]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b80:	615a      	str	r2, [r3, #20]

        if (blitOp.srcFormat == Bitmap::L8)
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	7f5b      	ldrb	r3, [r3, #29]
 8016b86:	2b0b      	cmp	r3, #11
 8016b88:	d145      	bne.n	8016c16 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	689b      	ldr	r3, [r3, #8]
 8016b8e:	613b      	str	r3, [r7, #16]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	1d1a      	adds	r2, r3, #4
 8016b94:	4b4f      	ldr	r3, [pc, #316]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016b96:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	881b      	ldrh	r3, [r3, #0]
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d002      	beq.n	8016ba8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x174>
 8016ba2:	2b01      	cmp	r3, #1
 8016ba4:	d00d      	beq.n	8016bc2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
 8016ba6:	e01a      	b.n	8016bde <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1aa>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8016ba8:	4b4a      	ldr	r3, [pc, #296]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016baa:	69da      	ldr	r2, [r3, #28]
 8016bac:	4b4d      	ldr	r3, [pc, #308]	; (8016ce4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8016bae:	4013      	ands	r3, r2
 8016bb0:	693a      	ldr	r2, [r7, #16]
 8016bb2:	8852      	ldrh	r2, [r2, #2]
 8016bb4:	3a01      	subs	r2, #1
 8016bb6:	0212      	lsls	r2, r2, #8
 8016bb8:	4611      	mov	r1, r2
 8016bba:	4a46      	ldr	r2, [pc, #280]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016bbc:	430b      	orrs	r3, r1
 8016bbe:	61d3      	str	r3, [r2, #28]
                break;
 8016bc0:	e013      	b.n	8016bea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b6>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8016bc2:	4b44      	ldr	r3, [pc, #272]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016bc4:	69da      	ldr	r2, [r3, #28]
 8016bc6:	4b47      	ldr	r3, [pc, #284]	; (8016ce4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8016bc8:	4013      	ands	r3, r2
 8016bca:	693a      	ldr	r2, [r7, #16]
 8016bcc:	8852      	ldrh	r2, [r2, #2]
 8016bce:	3a01      	subs	r2, #1
 8016bd0:	0212      	lsls	r2, r2, #8
 8016bd2:	4313      	orrs	r3, r2
 8016bd4:	4a3f      	ldr	r2, [pc, #252]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016bd6:	f043 0310 	orr.w	r3, r3, #16
 8016bda:	61d3      	str	r3, [r2, #28]
                break;
 8016bdc:	e005      	b.n	8016bea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b6>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8016bde:	4b42      	ldr	r3, [pc, #264]	; (8016ce8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8016be0:	4a42      	ldr	r2, [pc, #264]	; (8016cec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8016be2:	21fa      	movs	r1, #250	; 0xfa
 8016be4:	4842      	ldr	r0, [pc, #264]	; (8016cf0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8016be6:	f00e fb71 	bl	80252cc <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8016bea:	4b3a      	ldr	r3, [pc, #232]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016bec:	69db      	ldr	r3, [r3, #28]
 8016bee:	4a39      	ldr	r2, [pc, #228]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016bf0:	f043 0320 	orr.w	r3, r3, #32
 8016bf4:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8016bf6:	4b37      	ldr	r3, [pc, #220]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016bf8:	69db      	ldr	r3, [r3, #28]
 8016bfa:	f003 0320 	and.w	r3, r3, #32
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	bf14      	ite	ne
 8016c02:	2301      	movne	r3, #1
 8016c04:	2300      	moveq	r3, #0
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d001      	beq.n	8016c10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
            {
                __NOP();
 8016c0c:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8016c0e:	e7f2      	b.n	8016bf6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8016c10:	4b30      	ldr	r3, [pc, #192]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c12:	2210      	movs	r2, #16
 8016c14:	609a      	str	r2, [r3, #8]
        }

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8016c16:	4b2f      	ldr	r3, [pc, #188]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c18:	4a30      	ldr	r2, [pc, #192]	; (8016cdc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016c1a:	601a      	str	r2, [r3, #0]
        break;
 8016c1c:	e055      	b.n	8016cca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	7f1b      	ldrb	r3, [r3, #28]
 8016c22:	061b      	lsls	r3, r3, #24
 8016c24:	461a      	mov	r2, r3
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	4313      	orrs	r3, r2
 8016c2a:	4a2a      	ldr	r2, [pc, #168]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016c30:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8016c32:	4a28      	ldr	r2, [pc, #160]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c34:	69bb      	ldr	r3, [r7, #24]
 8016c36:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	68da      	ldr	r2, [r3, #12]
 8016c3c:	4b25      	ldr	r3, [pc, #148]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c3e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8016c40:	4b24      	ldr	r3, [pc, #144]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c42:	4a26      	ldr	r2, [pc, #152]	; (8016cdc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016c44:	601a      	str	r2, [r3, #0]
        break;
 8016c46:	e040      	b.n	8016cca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	7f1b      	ldrb	r3, [r3, #28]
 8016c4c:	061b      	lsls	r3, r3, #24
 8016c4e:	461a      	mov	r2, r3
 8016c50:	69fb      	ldr	r3, [r7, #28]
 8016c52:	4313      	orrs	r3, r2
 8016c54:	4a1f      	ldr	r2, [pc, #124]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016c5a:	61d3      	str	r3, [r2, #28]

        if (blitOp.srcFormat == Bitmap::L8)
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	7f5b      	ldrb	r3, [r3, #29]
 8016c60:	2b0b      	cmp	r3, #11
 8016c62:	d12d      	bne.n	8016cc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	689b      	ldr	r3, [r3, #8]
 8016c68:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	1d1a      	adds	r2, r3, #4
 8016c6e:	4b19      	ldr	r3, [pc, #100]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c70:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8016c72:	4b18      	ldr	r3, [pc, #96]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c74:	69da      	ldr	r2, [r3, #28]
 8016c76:	4b1b      	ldr	r3, [pc, #108]	; (8016ce4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8016c78:	4013      	ands	r3, r2
 8016c7a:	68fa      	ldr	r2, [r7, #12]
 8016c7c:	8852      	ldrh	r2, [r2, #2]
 8016c7e:	3a01      	subs	r2, #1
 8016c80:	0212      	lsls	r2, r2, #8
 8016c82:	4313      	orrs	r3, r2
 8016c84:	4a13      	ldr	r2, [pc, #76]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c86:	f043 0310 	orr.w	r3, r3, #16
 8016c8a:	61d3      	str	r3, [r2, #28]

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8016c8c:	4b11      	ldr	r3, [pc, #68]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c8e:	69db      	ldr	r3, [r3, #28]
 8016c90:	4a10      	ldr	r2, [pc, #64]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c92:	f043 0320 	orr.w	r3, r3, #32
 8016c96:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8016c98:	4b0e      	ldr	r3, [pc, #56]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016c9a:	69db      	ldr	r3, [r3, #28]
 8016c9c:	f003 0320 	and.w	r3, r3, #32
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	bf14      	ite	ne
 8016ca4:	2301      	movne	r3, #1
 8016ca6:	2300      	moveq	r3, #0
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d001      	beq.n	8016cb2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
            {
                __NOP();
 8016cae:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8016cb0:	e7f2      	b.n	8016c98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8016cb2:	4b08      	ldr	r3, [pc, #32]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016cb4:	2210      	movs	r2, #16
 8016cb6:	609a      	str	r2, [r3, #8]
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8016cb8:	4b06      	ldr	r3, [pc, #24]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016cba:	4a0e      	ldr	r2, [pc, #56]	; (8016cf4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8016cbc:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8016cbe:	e003      	b.n	8016cc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8016cc0:	4b04      	ldr	r3, [pc, #16]	; (8016cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016cc2:	f240 2201 	movw	r2, #513	; 0x201
 8016cc6:	601a      	str	r2, [r3, #0]
        break;
 8016cc8:	bf00      	nop
    }
}
 8016cca:	bf00      	nop
 8016ccc:	3724      	adds	r7, #36	; 0x24
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd90      	pop	{r4, r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	4002b000 	.word	0x4002b000
 8016cd8:	0002000a 	.word	0x0002000a
 8016cdc:	00020201 	.word	0x00020201
 8016ce0:	00020009 	.word	0x00020009
 8016ce4:	ffff00ef 	.word	0xffff00ef
 8016ce8:	08026d8c 	.word	0x08026d8c
 8016cec:	08026da8 	.word	0x08026da8
 8016cf0:	08026d10 	.word	0x08026d10
 8016cf4:	00010201 	.word	0x00010201

08016cf8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8016cf8:	b590      	push	{r4, r7, lr}
 8016cfa:	b085      	sub	sp, #20
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8016d02:	683b      	ldr	r3, [r7, #0]
 8016d04:	7f9b      	ldrb	r3, [r3, #30]
 8016d06:	4619      	mov	r1, r3
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f7ff fe49 	bl	80169a0 <_ZN10STM32F7DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016d0e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8016d10:	4a2f      	ldr	r2, [pc, #188]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	8a5b      	ldrh	r3, [r3, #18]
 8016d1a:	461a      	mov	r2, r3
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	8a1b      	ldrh	r3, [r3, #16]
 8016d20:	041b      	lsls	r3, r3, #16
 8016d22:	431a      	orrs	r2, r3
 8016d24:	4b2a      	ldr	r3, [pc, #168]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	68da      	ldr	r2, [r3, #12]
 8016d2c:	4b28      	ldr	r3, [pc, #160]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	8adb      	ldrh	r3, [r3, #22]
 8016d34:	461a      	mov	r2, r3
 8016d36:	683b      	ldr	r3, [r7, #0]
 8016d38:	8a1b      	ldrh	r3, [r3, #16]
 8016d3a:	1ad2      	subs	r2, r2, r3
 8016d3c:	4b24      	ldr	r3, [pc, #144]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d3e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	2b08      	cmp	r3, #8
 8016d46:	d12e      	bne.n	8016da6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	8adb      	ldrh	r3, [r3, #22]
 8016d4c:	461a      	mov	r2, r3
 8016d4e:	683b      	ldr	r3, [r7, #0]
 8016d50:	8a1b      	ldrh	r3, [r3, #16]
 8016d52:	1ad2      	subs	r2, r2, r3
 8016d54:	4b1e      	ldr	r3, [pc, #120]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d56:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	8adb      	ldrh	r3, [r3, #22]
 8016d5c:	461a      	mov	r2, r3
 8016d5e:	683b      	ldr	r3, [r7, #0]
 8016d60:	8a1b      	ldrh	r3, [r3, #16]
 8016d62:	1ad2      	subs	r2, r2, r3
 8016d64:	4b1a      	ldr	r3, [pc, #104]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d66:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8016d68:	4a19      	ldr	r2, [pc, #100]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	7f1b      	ldrb	r3, [r3, #28]
 8016d72:	061b      	lsls	r3, r3, #24
 8016d74:	4619      	mov	r1, r3
 8016d76:	4a16      	ldr	r2, [pc, #88]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d78:	4b16      	ldr	r3, [pc, #88]	; (8016dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8016d7a:	430b      	orrs	r3, r1
 8016d7c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8016d7e:	683b      	ldr	r3, [r7, #0]
 8016d80:	3318      	adds	r3, #24
 8016d82:	4c13      	ldr	r4, [pc, #76]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7ff fc89 	bl	801669c <_ZNK8touchgfx9colortypecvmEv>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	68da      	ldr	r2, [r3, #12]
 8016d92:	4b0f      	ldr	r3, [pc, #60]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d94:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016d96:	683b      	ldr	r3, [r7, #0]
 8016d98:	68da      	ldr	r2, [r3, #12]
 8016d9a:	4b0d      	ldr	r3, [pc, #52]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016d9c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        DMA2D->CR = (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND);
 8016d9e:	4b0c      	ldr	r3, [pc, #48]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016da0:	4a0d      	ldr	r2, [pc, #52]	; (8016dd8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8016da2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        DMA2D->CR = (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M);
    }
}
 8016da4:	e010      	b.n	8016dc8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8016da6:	4a0a      	ldr	r2, [pc, #40]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8016dac:	4b08      	ldr	r3, [pc, #32]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016dae:	2200      	movs	r2, #0
 8016db0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	3318      	adds	r3, #24
 8016db6:	4c06      	ldr	r4, [pc, #24]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7ff fc6f 	bl	801669c <_ZNK8touchgfx9colortypecvmEv>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	63a3      	str	r3, [r4, #56]	; 0x38
        DMA2D->CR = (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M);
 8016dc2:	4b03      	ldr	r3, [pc, #12]	; (8016dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8016dc4:	4a05      	ldr	r2, [pc, #20]	; (8016ddc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8016dc6:	601a      	str	r2, [r3, #0]
}
 8016dc8:	bf00      	nop
 8016dca:	3714      	adds	r7, #20
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd90      	pop	{r4, r7, pc}
 8016dd0:	4002b000 	.word	0x4002b000
 8016dd4:	00010009 	.word	0x00010009
 8016dd8:	00020201 	.word	0x00020201
 8016ddc:	00030201 	.word	0x00030201

08016de0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
 8016de8:	4a05      	ldr	r2, [pc, #20]	; (8016e00 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	601a      	str	r2, [r3, #0]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7ff fc5f 	bl	80166b4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	08027f04 	.word	0x08027f04

08016e04 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f7ff ffe7 	bl	8016de0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016e12:	2114      	movs	r1, #20
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f00e fa2a 	bl	802526e <_ZdlPvj>
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	3708      	adds	r7, #8
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}

08016e24 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8016e24:	b480      	push	{r7}
 8016e26:	b083      	sub	sp, #12
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8016e2c:	4a04      	ldr	r2, [pc, #16]	; (8016e40 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	6013      	str	r3, [r2, #0]
    }
 8016e32:	bf00      	nop
 8016e34:	370c      	adds	r7, #12
 8016e36:	46bd      	mov	sp, r7
 8016e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3c:	4770      	bx	lr
 8016e3e:	bf00      	nop
 8016e40:	20009534 	.word	0x20009534

08016e44 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016e44:	b480      	push	{r7}
 8016e46:	b085      	sub	sp, #20
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	60f8      	str	r0, [r7, #12]
 8016e4c:	60b9      	str	r1, [r7, #8]
 8016e4e:	607a      	str	r2, [r7, #4]
 8016e50:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8016e52:	4a0b      	ldr	r2, [pc, #44]	; (8016e80 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	601a      	str	r2, [r3, #0]
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	68ba      	ldr	r2, [r7, #8]
 8016e5c:	605a      	str	r2, [r3, #4]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	687a      	ldr	r2, [r7, #4]
 8016e62:	609a      	str	r2, [r3, #8]
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	683a      	ldr	r2, [r7, #0]
 8016e68:	60da      	str	r2, [r3, #12]
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	69ba      	ldr	r2, [r7, #24]
 8016e6e:	611a      	str	r2, [r3, #16]
    {
    }
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	4618      	mov	r0, r3
 8016e74:	3714      	adds	r7, #20
 8016e76:	46bd      	mov	sp, r7
 8016e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7c:	4770      	bx	lr
 8016e7e:	bf00      	nop
 8016e80:	08027440 	.word	0x08027440

08016e84 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8016e84:	b480      	push	{r7}
 8016e86:	b083      	sub	sp, #12
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
    {
 8016e8c:	4a04      	ldr	r2, [pc, #16]	; (8016ea0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	601a      	str	r2, [r3, #0]
    }
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	4618      	mov	r0, r3
 8016e96:	370c      	adds	r7, #12
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr
 8016ea0:	08027440 	.word	0x08027440

08016ea4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b082      	sub	sp, #8
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
    }
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f7ff ffe9 	bl	8016e84 <_ZN8touchgfx7MVPHeapD1Ev>
 8016eb2:	2114      	movs	r1, #20
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f00e f9da 	bl	802526e <_ZdlPvj>
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	3708      	adds	r7, #8
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}

08016ec4 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8016ec4:	b480      	push	{r7}
 8016ec6:	b083      	sub	sp, #12
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
    {
 8016ecc:	4a04      	ldr	r2, [pc, #16]	; (8016ee0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	601a      	str	r2, [r3, #0]
    }
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	370c      	adds	r7, #12
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr
 8016ee0:	0802803c 	.word	0x0802803c

08016ee4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b082      	sub	sp, #8
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
    }
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f7ff ffe9 	bl	8016ec4 <_ZN8touchgfx3LCDD1Ev>
 8016ef2:	2108      	movs	r1, #8
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f00e f9ba 	bl	802526e <_ZdlPvj>
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	4618      	mov	r0, r3
 8016efe:	3708      	adds	r7, #8
 8016f00:	46bd      	mov	sp, r7
 8016f02:	bd80      	pop	{r7, pc}

08016f04 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8016f04:	b480      	push	{r7}
 8016f06:	b083      	sub	sp, #12
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2200      	movs	r2, #0
 8016f10:	801a      	strh	r2, [r3, #0]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2200      	movs	r2, #0
 8016f16:	805a      	strh	r2, [r3, #2]
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	809a      	strh	r2, [r3, #4]
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2200      	movs	r2, #0
 8016f22:	80da      	strh	r2, [r3, #6]
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2200      	movs	r2, #0
 8016f28:	811a      	strh	r2, [r3, #8]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	815a      	strh	r2, [r3, #10]
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2200      	movs	r2, #0
 8016f34:	819a      	strh	r2, [r3, #12]
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	2200      	movs	r2, #0
 8016f3a:	739a      	strb	r2, [r3, #14]
        {
        }
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	4618      	mov	r0, r3
 8016f40:	370c      	adds	r7, #12
 8016f42:	46bd      	mov	sp, r7
 8016f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f48:	4770      	bx	lr

08016f4a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016f4a:	b580      	push	{r7, lr}
 8016f4c:	b082      	sub	sp, #8
 8016f4e:	af00      	add	r7, sp, #0
 8016f50:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7ff ffd5 	bl	8016f04 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	611a      	str	r2, [r3, #16]
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2200      	movs	r2, #0
 8016f64:	829a      	strh	r2, [r3, #20]
    {
    }
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3708      	adds	r7, #8
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}

08016f70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
 8016f7c:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 8016f7e:	4a4a      	ldr	r2, [pc, #296]	; (80170a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	601a      	str	r2, [r3, #0]
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	68ba      	ldr	r2, [r7, #8]
 8016f88:	605a      	str	r2, [r3, #4]
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	609a      	str	r2, [r3, #8]
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	683a      	ldr	r2, [r7, #0]
 8016f94:	60da      	str	r2, [r3, #12]
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	611a      	str	r2, [r3, #16]
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	615a      	str	r2, [r3, #20]
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	619a      	str	r2, [r3, #24]
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	331c      	adds	r3, #28
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7ff ffcc 	bl	8016f4a <_ZN8touchgfx8GesturesC1Ev>
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	2200      	movs	r2, #0
 8016fbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	645a      	str	r2, [r3, #68]	; 0x44
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	2200      	movs	r2, #0
 8016fce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	64da      	str	r2, [r3, #76]	; 0x4c
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	3350      	adds	r3, #80	; 0x50
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7fe f82c 	bl	801504a <_ZN8touchgfx4RectC1Ev>
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	2201      	movs	r2, #1
 8016ff6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	2200      	movs	r2, #0
 8017006:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	2201      	movs	r2, #1
 801700e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	2200      	movs	r2, #0
 8017016:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2200      	movs	r2, #0
 801701e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	2200      	movs	r2, #0
 8017026:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2200      	movs	r2, #0
 801702e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	2200      	movs	r2, #0
 8017036:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	2200      	movs	r2, #0
 801703e:	671a      	str	r2, [r3, #112]	; 0x70
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	2200      	movs	r2, #0
 8017044:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	2200      	movs	r2, #0
 801704c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	2201      	movs	r2, #1
 8017054:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	2201      	movs	r2, #1
 801705c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8017060:	4a12      	ldr	r2, [pc, #72]	; (80170ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8017066:	4a12      	ldr	r2, [pc, #72]	; (80170b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 8017068:	8b3b      	ldrh	r3, [r7, #24]
 801706a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801706c:	4a11      	ldr	r2, [pc, #68]	; (80170b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 801706e:	8bbb      	ldrh	r3, [r7, #28]
 8017070:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8017072:	4b11      	ldr	r3, [pc, #68]	; (80170b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 8017074:	2200      	movs	r2, #0
 8017076:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8017078:	4b0d      	ldr	r3, [pc, #52]	; (80170b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 801707a:	881a      	ldrh	r2, [r3, #0]
 801707c:	4b0f      	ldr	r3, [pc, #60]	; (80170bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 801707e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8017080:	4b0c      	ldr	r3, [pc, #48]	; (80170b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 8017082:	881a      	ldrh	r2, [r3, #0]
 8017084:	4b0e      	ldr	r3, [pc, #56]	; (80170c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 8017086:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8017088:	8b3a      	ldrh	r2, [r7, #24]
 801708a:	8bbb      	ldrh	r3, [r7, #28]
 801708c:	429a      	cmp	r2, r3
 801708e:	bf34      	ite	cc
 8017090:	2301      	movcc	r3, #1
 8017092:	2300      	movcs	r3, #0
 8017094:	b2db      	uxtb	r3, r3
 8017096:	461a      	mov	r2, r3
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	4618      	mov	r0, r3
 80170a2:	3710      	adds	r7, #16
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}
 80170a8:	08027a68 	.word	0x08027a68
 80170ac:	200094d8 	.word	0x200094d8
 80170b0:	200094ca 	.word	0x200094ca
 80170b4:	200094cc 	.word	0x200094cc
 80170b8:	200094ce 	.word	0x200094ce
 80170bc:	200094d0 	.word	0x200094d0
 80170c0:	200094d2 	.word	0x200094d2

080170c4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7fd fd1d 	bl	8014b10 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 80170d6:	bf00      	nop
 80170d8:	3708      	adds	r7, #8
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
	...

080170e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b086      	sub	sp, #24
 80170e4:	af02      	add	r7, sp, #8
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
 80170ec:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80170ee:	68f8      	ldr	r0, [r7, #12]
 80170f0:	69bb      	ldr	r3, [r7, #24]
 80170f2:	9300      	str	r3, [sp, #0]
 80170f4:	683b      	ldr	r3, [r7, #0]
 80170f6:	687a      	ldr	r2, [r7, #4]
 80170f8:	68b9      	ldr	r1, [r7, #8]
 80170fa:	f7ff fea3 	bl	8016e44 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80170fe:	4a04      	ldr	r2, [pc, #16]	; (8017110 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	601a      	str	r2, [r3, #0]
    {

    }
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	4618      	mov	r0, r3
 8017108:	3710      	adds	r7, #16
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}
 801710e:	bf00      	nop
 8017110:	0802742c 	.word	0x0802742c

08017114 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8017114:	b580      	push	{r7, lr}
 8017116:	af00      	add	r7, sp, #0
 8017118:	4801      	ldr	r0, [pc, #4]	; (8017120 <__tcf_0+0xc>)
 801711a:	f000 f959 	bl	80173d0 <_ZN12FrontendHeapD1Ev>
 801711e:	bd80      	pop	{r7, pc}
 8017120:	200085b4 	.word	0x200085b4

08017124 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8017124:	b580      	push	{r7, lr}
 8017126:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8017128:	4b12      	ldr	r3, [pc, #72]	; (8017174 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	f3bf 8f5b 	dmb	ish
 8017130:	b2db      	uxtb	r3, r3
 8017132:	f003 0301 	and.w	r3, r3, #1
 8017136:	2b00      	cmp	r3, #0
 8017138:	bf0c      	ite	eq
 801713a:	2301      	moveq	r3, #1
 801713c:	2300      	movne	r3, #0
 801713e:	b2db      	uxtb	r3, r3
 8017140:	2b00      	cmp	r3, #0
 8017142:	d013      	beq.n	801716c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8017144:	480b      	ldr	r0, [pc, #44]	; (8017174 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8017146:	f00e f894 	bl	8025272 <__cxa_guard_acquire>
 801714a:	4603      	mov	r3, r0
 801714c:	2b00      	cmp	r3, #0
 801714e:	bf14      	ite	ne
 8017150:	2301      	movne	r3, #1
 8017152:	2300      	moveq	r3, #0
 8017154:	b2db      	uxtb	r3, r3
 8017156:	2b00      	cmp	r3, #0
 8017158:	d008      	beq.n	801716c <_ZN12FrontendHeap11getInstanceEv+0x48>
 801715a:	4807      	ldr	r0, [pc, #28]	; (8017178 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 801715c:	f000 f868 	bl	8017230 <_ZN12FrontendHeapC1Ev>
 8017160:	4804      	ldr	r0, [pc, #16]	; (8017174 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8017162:	f00e f892 	bl	802528a <__cxa_guard_release>
 8017166:	4805      	ldr	r0, [pc, #20]	; (801717c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8017168:	f00e f8ce 	bl	8025308 <atexit>
        return instance;
 801716c:	4b02      	ldr	r3, [pc, #8]	; (8017178 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 801716e:	4618      	mov	r0, r3
 8017170:	bd80      	pop	{r7, pc}
 8017172:	bf00      	nop
 8017174:	200087c4 	.word	0x200087c4
 8017178:	200085b4 	.word	0x200085b4
 801717c:	08017115 	.word	0x08017115

08017180 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	4a05      	ldr	r2, [pc, #20]	; (80171a0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	601a      	str	r2, [r3, #0]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	4618      	mov	r0, r3
 8017192:	f7ff fe77 	bl	8016e84 <_ZN8touchgfx7MVPHeapD1Ev>
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	4618      	mov	r0, r3
 801719a:	3708      	adds	r7, #8
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	0802742c 	.word	0x0802742c

080171a4 <_ZN16FrontendHeapBaseD0Ev>:
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b082      	sub	sp, #8
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f7ff ffe7 	bl	8017180 <_ZN16FrontendHeapBaseD1Ev>
 80171b2:	2114      	movs	r1, #20
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f00e f85a 	bl	802526e <_ZdlPvj>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	4618      	mov	r0, r3
 80171be:	3708      	adds	r7, #8
 80171c0:	46bd      	mov	sp, r7
 80171c2:	bd80      	pop	{r7, pc}

080171c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b082      	sub	sp, #8
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	4618      	mov	r0, r3
 80171d0:	f001 f8be 	bl	8018350 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80171d4:	4a03      	ldr	r2, [pc, #12]	; (80171e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	601a      	str	r2, [r3, #0]
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	4618      	mov	r0, r3
 80171de:	3708      	adds	r7, #8
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	080273f8 	.word	0x080273f8

080171e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b082      	sub	sp, #8
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f001 f8ac 	bl	8018350 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80171f8:	4a03      	ldr	r2, [pc, #12]	; (8017208 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	601a      	str	r2, [r3, #0]
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	4618      	mov	r0, r3
 8017202:	3708      	adds	r7, #8
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}
 8017208:	080273c4 	.word	0x080273c4

0801720c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801720c:	b580      	push	{r7, lr}
 801720e:	b082      	sub	sp, #8
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	4618      	mov	r0, r3
 8017218:	f001 f89a 	bl	8018350 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801721c:	4a03      	ldr	r2, [pc, #12]	; (801722c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	601a      	str	r2, [r3, #0]
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	4618      	mov	r0, r3
 8017226:	3708      	adds	r7, #8
 8017228:	46bd      	mov	sp, r7
 801722a:	bd80      	pop	{r7, pc}
 801722c:	08027390 	.word	0x08027390

08017230 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8017230:	b590      	push	{r4, r7, lr}
 8017232:	b085      	sub	sp, #20
 8017234:	af02      	add	r7, sp, #8
 8017236:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f103 0114 	add.w	r1, r3, #20
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	33b8      	adds	r3, #184	; 0xb8
                     app(model, *this)
 8017250:	9300      	str	r3, [sp, #0]
 8017252:	4623      	mov	r3, r4
 8017254:	f7ff ff44 	bl	80170e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8017258:	4a15      	ldr	r2, [pc, #84]	; (80172b0 <_ZN12FrontendHeapC1Ev+0x80>)
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	601a      	str	r2, [r3, #0]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	3314      	adds	r3, #20
 8017262:	4618      	mov	r0, r3
 8017264:	f7ff ffae 	bl	80171c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	332c      	adds	r3, #44	; 0x2c
 801726c:	4618      	mov	r0, r3
 801726e:	f7ff ffbb 	bl	80171e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	33a0      	adds	r3, #160	; 0xa0
 8017276:	4618      	mov	r0, r3
 8017278:	f7ff ffc8 	bl	801720c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	33b4      	adds	r3, #180	; 0xb4
 8017280:	4618      	mov	r0, r3
 8017282:	f7fe fcaf 	bl	8015be4 <_ZN5ModelC1Ev>
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	33b4      	adds	r3, #180	; 0xb4
 8017290:	687a      	ldr	r2, [r7, #4]
 8017292:	4619      	mov	r1, r3
 8017294:	f7fe fc90 	bl	8015bb8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8017298:	687a      	ldr	r2, [r7, #4]
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	33b8      	adds	r3, #184	; 0xb8
 801729e:	4619      	mov	r1, r3
 80172a0:	4610      	mov	r0, r2
 80172a2:	f7ff ff0f 	bl	80170c4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	4618      	mov	r0, r3
 80172aa:	370c      	adds	r7, #12
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd90      	pop	{r4, r7, pc}
 80172b0:	0802737c 	.word	0x0802737c

080172b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b086      	sub	sp, #24
 80172b8:	af02      	add	r7, sp, #8
 80172ba:	60f8      	str	r0, [r7, #12]
 80172bc:	60b9      	str	r1, [r7, #8]
 80172be:	607a      	str	r2, [r7, #4]
 80172c0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80172c2:	68f8      	ldr	r0, [r7, #12]
 80172c4:	8bbb      	ldrh	r3, [r7, #28]
 80172c6:	9301      	str	r3, [sp, #4]
 80172c8:	8b3b      	ldrh	r3, [r7, #24]
 80172ca:	9300      	str	r3, [sp, #0]
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	687a      	ldr	r2, [r7, #4]
 80172d0:	68b9      	ldr	r1, [r7, #8]
 80172d2:	f7ff fe4d 	bl	8016f70 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80172d6:	4a04      	ldr	r2, [pc, #16]	; (80172e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	601a      	str	r2, [r3, #0]
    }
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	4618      	mov	r0, r3
 80172e0:	3710      	adds	r7, #16
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	08027450 	.word	0x08027450

080172ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b086      	sub	sp, #24
 80172f0:	af02      	add	r7, sp, #8
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	60b9      	str	r1, [r7, #8]
 80172f6:	607a      	str	r2, [r7, #4]
 80172f8:	603b      	str	r3, [r7, #0]
 80172fa:	68f8      	ldr	r0, [r7, #12]
 80172fc:	8bbb      	ldrh	r3, [r7, #28]
 80172fe:	9301      	str	r3, [sp, #4]
 8017300:	8b3b      	ldrh	r3, [r7, #24]
 8017302:	9300      	str	r3, [sp, #0]
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	687a      	ldr	r2, [r7, #4]
 8017308:	68b9      	ldr	r1, [r7, #8]
 801730a:	f7ff ffd3 	bl	80172b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801730e:	4a04      	ldr	r2, [pc, #16]	; (8017320 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	601a      	str	r2, [r3, #0]
    }
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	4618      	mov	r0, r3
 8017318:	3710      	adds	r7, #16
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}
 801731e:	bf00      	nop
 8017320:	0802723c 	.word	0x0802723c

08017324 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8017324:	b480      	push	{r7}
 8017326:	b083      	sub	sp, #12
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
 801732c:	4a04      	ldr	r2, [pc, #16]	; (8017340 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	601a      	str	r2, [r3, #0]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	4618      	mov	r0, r3
 8017336:	370c      	adds	r7, #12
 8017338:	46bd      	mov	sp, r7
 801733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801733e:	4770      	bx	lr
 8017340:	08027224 	.word	0x08027224

08017344 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	4618      	mov	r0, r3
 8017350:	f7ff ffe8 	bl	8017324 <_ZN8touchgfx15TouchControllerC1Ev>
 8017354:	4a03      	ldr	r2, [pc, #12]	; (8017364 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	601a      	str	r2, [r3, #0]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	4618      	mov	r0, r3
 801735e:	3708      	adds	r7, #8
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	0802720c 	.word	0x0802720c

08017368 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8017368:	b590      	push	{r4, r7, lr}
 801736a:	b085      	sub	sp, #20
 801736c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801736e:	f7fe fa31 	bl	80157d4 <_ZN14BitmapDatabase11getInstanceEv>
 8017372:	4604      	mov	r4, r0
 8017374:	f7fe fa38 	bl	80157e8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8017378:	4603      	mov	r3, r0
 801737a:	4619      	mov	r1, r3
 801737c:	2300      	movs	r3, #0
 801737e:	9300      	str	r3, [sp, #0]
 8017380:	2300      	movs	r3, #0
 8017382:	2200      	movs	r2, #0
 8017384:	4620      	mov	r0, r4
 8017386:	f005 fcbb 	bl	801cd00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801738a:	4809      	ldr	r0, [pc, #36]	; (80173b0 <touchgfx_init+0x48>)
 801738c:	f7ff fd4a 	bl	8016e24 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8017390:	2000      	movs	r0, #0
 8017392:	f7fe fb4b 	bl	8015a2c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8017396:	4807      	ldr	r0, [pc, #28]	; (80173b4 <touchgfx_init+0x4c>)
 8017398:	f005 fbf4 	bl	801cb84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 801739c:	f7ff fec2 	bl	8017124 <_ZN12FrontendHeap11getInstanceEv>
 80173a0:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 80173a2:	4805      	ldr	r0, [pc, #20]	; (80173b8 <touchgfx_init+0x50>)
 80173a4:	f7fe fffa 	bl	801639c <_ZN11TouchGFXHAL10initializeEv>
}
 80173a8:	bf00      	nop
 80173aa:	370c      	adds	r7, #12
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd90      	pop	{r4, r7, pc}
 80173b0:	20009444 	.word	0x20009444
 80173b4:	2000005c 	.word	0x2000005c
 80173b8:	20009448 	.word	0x20009448

080173bc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80173c0:	4802      	ldr	r0, [pc, #8]	; (80173cc <touchgfx_taskEntry+0x10>)
 80173c2:	f001 f9dc 	bl	801877e <_ZN8touchgfx3HAL9taskEntryEv>
}
 80173c6:	bf00      	nop
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	20009448 	.word	0x20009448

080173d0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	4a0f      	ldr	r2, [pc, #60]	; (8017418 <_ZN12FrontendHeapD1Ev+0x48>)
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	601a      	str	r2, [r3, #0]
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	33b8      	adds	r3, #184	; 0xb8
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7fe fbb2 	bl	8015b4c <_ZN19FrontendApplicationD1Ev>
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	33a0      	adds	r3, #160	; 0xa0
 80173ec:	4618      	mov	r0, r3
 80173ee:	f000 f827 	bl	8017440 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	332c      	adds	r3, #44	; 0x2c
 80173f6:	4618      	mov	r0, r3
 80173f8:	f000 f844 	bl	8017484 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	3314      	adds	r3, #20
 8017400:	4618      	mov	r0, r3
 8017402:	f000 f861 	bl	80174c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4618      	mov	r0, r3
 801740a:	f7ff feb9 	bl	8017180 <_ZN16FrontendHeapBaseD1Ev>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	4618      	mov	r0, r3
 8017412:	3708      	adds	r7, #8
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	0802737c 	.word	0x0802737c

0801741c <_ZN12FrontendHeapD0Ev>:
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f7ff ffd3 	bl	80173d0 <_ZN12FrontendHeapD1Ev>
 801742a:	f44f 7104 	mov.w	r1, #528	; 0x210
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f00d ff1d 	bl	802526e <_ZdlPvj>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4618      	mov	r0, r3
 8017438:	3708      	adds	r7, #8
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}
	...

08017440 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017440:	b580      	push	{r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
 8017448:	4a05      	ldr	r2, [pc, #20]	; (8017460 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	601a      	str	r2, [r3, #0]
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	4618      	mov	r0, r3
 8017452:	f000 ff7b 	bl	801834c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	4618      	mov	r0, r3
 801745a:	3708      	adds	r7, #8
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}
 8017460:	08027390 	.word	0x08027390

08017464 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017464:	b580      	push	{r7, lr}
 8017466:	b082      	sub	sp, #8
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f7ff ffe7 	bl	8017440 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017472:	2114      	movs	r1, #20
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f00d fefa 	bl	802526e <_ZdlPvj>
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	4618      	mov	r0, r3
 801747e:	3708      	adds	r7, #8
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}

08017484 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	4a05      	ldr	r2, [pc, #20]	; (80174a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	601a      	str	r2, [r3, #0]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	4618      	mov	r0, r3
 8017496:	f000 ff59 	bl	801834c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	4618      	mov	r0, r3
 801749e:	3708      	adds	r7, #8
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}
 80174a4:	080273c4 	.word	0x080273c4

080174a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b082      	sub	sp, #8
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	6078      	str	r0, [r7, #4]
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	f7ff ffe7 	bl	8017484 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80174b6:	2174      	movs	r1, #116	; 0x74
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f00d fed8 	bl	802526e <_ZdlPvj>
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	4618      	mov	r0, r3
 80174c2:	3708      	adds	r7, #8
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}

080174c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
 80174d0:	4a05      	ldr	r2, [pc, #20]	; (80174e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	601a      	str	r2, [r3, #0]
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	4618      	mov	r0, r3
 80174da:	f000 ff37 	bl	801834c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	4618      	mov	r0, r3
 80174e2:	3708      	adds	r7, #8
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}
 80174e8:	080273f8 	.word	0x080273f8

080174ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b082      	sub	sp, #8
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
 80174f4:	6878      	ldr	r0, [r7, #4]
 80174f6:	f7ff ffe7 	bl	80174c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80174fa:	2118      	movs	r1, #24
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f00d feb6 	bl	802526e <_ZdlPvj>
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	4618      	mov	r0, r3
 8017506:	3708      	adds	r7, #8
 8017508:	46bd      	mov	sp, r7
 801750a:	bd80      	pop	{r7, pc}

0801750c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 801750c:	b580      	push	{r7, lr}
 801750e:	b082      	sub	sp, #8
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	4a05      	ldr	r2, [pc, #20]	; (801752c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	601a      	str	r2, [r3, #0]
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	4618      	mov	r0, r3
 801751e:	f7ff fcd1 	bl	8016ec4 <_ZN8touchgfx3LCDD1Ev>
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	4618      	mov	r0, r3
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	08029194 	.word	0x08029194

08017530 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f7ff ffe7 	bl	801750c <_ZN8touchgfx8LCD24bppD1Ev>
 801753e:	2158      	movs	r1, #88	; 0x58
 8017540:	6878      	ldr	r0, [r7, #4]
 8017542:	f00d fe94 	bl	802526e <_ZdlPvj>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4618      	mov	r0, r3
 801754a:	3708      	adds	r7, #8
 801754c:	46bd      	mov	sp, r7
 801754e:	bd80      	pop	{r7, pc}

08017550 <_Z41__static_initialization_and_destruction_0ii>:
 8017550:	b580      	push	{r7, lr}
 8017552:	b084      	sub	sp, #16
 8017554:	af02      	add	r7, sp, #8
 8017556:	6078      	str	r0, [r7, #4]
 8017558:	6039      	str	r1, [r7, #0]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	2b01      	cmp	r3, #1
 801755e:	d119      	bne.n	8017594 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017566:	4293      	cmp	r3, r2
 8017568:	d114      	bne.n	8017594 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801756a:	4818      	ldr	r0, [pc, #96]	; (80175cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801756c:	f7ff feea 	bl	8017344 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8017570:	4817      	ldr	r0, [pc, #92]	; (80175d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017572:	f7ff f94f 	bl	8016814 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8017576:	4817      	ldr	r0, [pc, #92]	; (80175d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017578:	f007 fd82 	bl	801f080 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801757c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017580:	9301      	str	r3, [sp, #4]
 8017582:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8017586:	9300      	str	r3, [sp, #0]
 8017588:	4b10      	ldr	r3, [pc, #64]	; (80175cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801758a:	4a12      	ldr	r2, [pc, #72]	; (80175d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801758c:	4910      	ldr	r1, [pc, #64]	; (80175d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801758e:	4812      	ldr	r0, [pc, #72]	; (80175d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017590:	f7ff feac 	bl	80172ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d113      	bne.n	80175c2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175a0:	4293      	cmp	r3, r2
 80175a2:	d10e      	bne.n	80175c2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80175a4:	480c      	ldr	r0, [pc, #48]	; (80175d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80175a6:	f7fe ff71 	bl	801648c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80175aa:	480c      	ldr	r0, [pc, #48]	; (80175dc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80175ac:	f7fc fd84 	bl	80140b8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80175b0:	4808      	ldr	r0, [pc, #32]	; (80175d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80175b2:	f7ff ffab 	bl	801750c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80175b6:	4806      	ldr	r0, [pc, #24]	; (80175d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80175b8:	f7ff f956 	bl	8016868 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80175bc:	4803      	ldr	r0, [pc, #12]	; (80175cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80175be:	f7fe fd51 	bl	8016064 <_ZN20STM32TouchControllerD1Ev>
}
 80175c2:	bf00      	nop
 80175c4:	3708      	adds	r7, #8
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}
 80175ca:	bf00      	nop
 80175cc:	200087c8 	.word	0x200087c8
 80175d0:	200087cc 	.word	0x200087cc
 80175d4:	200093ec 	.word	0x200093ec
 80175d8:	20009448 	.word	0x20009448
 80175dc:	2000005c 	.word	0x2000005c

080175e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80175e0:	b480      	push	{r7}
 80175e2:	b083      	sub	sp, #12
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80175e8:	2301      	movs	r3, #1
    }
 80175ea:	4618      	mov	r0, r3
 80175ec:	370c      	adds	r7, #12
 80175ee:	46bd      	mov	sp, r7
 80175f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f4:	4770      	bx	lr

080175f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80175f6:	b480      	push	{r7}
 80175f8:	b083      	sub	sp, #12
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80175fe:	230c      	movs	r3, #12
    }
 8017600:	4618      	mov	r0, r3
 8017602:	370c      	adds	r7, #12
 8017604:	46bd      	mov	sp, r7
 8017606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760a:	4770      	bx	lr

0801760c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 801760c:	b480      	push	{r7}
 801760e:	b083      	sub	sp, #12
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
 8017614:	460b      	mov	r3, r1
 8017616:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017618:	887a      	ldrh	r2, [r7, #2]
 801761a:	4613      	mov	r3, r2
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	4413      	add	r3, r2
 8017620:	009b      	lsls	r3, r3, #2
 8017622:	3308      	adds	r3, #8
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	4413      	add	r3, r2
    }
 8017628:	4618      	mov	r0, r3
 801762a:	370c      	adds	r7, #12
 801762c:	46bd      	mov	sp, r7
 801762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017632:	4770      	bx	lr

08017634 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8017634:	b480      	push	{r7}
 8017636:	b083      	sub	sp, #12
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
 801763c:	460b      	mov	r3, r1
 801763e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017640:	887a      	ldrh	r2, [r7, #2]
 8017642:	4613      	mov	r3, r2
 8017644:	005b      	lsls	r3, r3, #1
 8017646:	4413      	add	r3, r2
 8017648:	009b      	lsls	r3, r3, #2
 801764a:	3308      	adds	r3, #8
 801764c:	687a      	ldr	r2, [r7, #4]
 801764e:	4413      	add	r3, r2
    }
 8017650:	4618      	mov	r0, r3
 8017652:	370c      	adds	r7, #12
 8017654:	46bd      	mov	sp, r7
 8017656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765a:	4770      	bx	lr

0801765c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801765c:	b480      	push	{r7}
 801765e:	b083      	sub	sp, #12
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017664:	2301      	movs	r3, #1
    }
 8017666:	4618      	mov	r0, r3
 8017668:	370c      	adds	r7, #12
 801766a:	46bd      	mov	sp, r7
 801766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017670:	4770      	bx	lr

08017672 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017672:	b480      	push	{r7}
 8017674:	b083      	sub	sp, #12
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801767a:	236c      	movs	r3, #108	; 0x6c
    }
 801767c:	4618      	mov	r0, r3
 801767e:	370c      	adds	r7, #12
 8017680:	46bd      	mov	sp, r7
 8017682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017686:	4770      	bx	lr

08017688 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017688:	b480      	push	{r7}
 801768a:	b083      	sub	sp, #12
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
 8017690:	460b      	mov	r3, r1
 8017692:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017694:	887b      	ldrh	r3, [r7, #2]
 8017696:	226c      	movs	r2, #108	; 0x6c
 8017698:	fb02 f303 	mul.w	r3, r2, r3
 801769c:	3308      	adds	r3, #8
 801769e:	687a      	ldr	r2, [r7, #4]
 80176a0:	4413      	add	r3, r2
    }
 80176a2:	4618      	mov	r0, r3
 80176a4:	370c      	adds	r7, #12
 80176a6:	46bd      	mov	sp, r7
 80176a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ac:	4770      	bx	lr

080176ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80176ae:	b480      	push	{r7}
 80176b0:	b083      	sub	sp, #12
 80176b2:	af00      	add	r7, sp, #0
 80176b4:	6078      	str	r0, [r7, #4]
 80176b6:	460b      	mov	r3, r1
 80176b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80176ba:	887b      	ldrh	r3, [r7, #2]
 80176bc:	226c      	movs	r2, #108	; 0x6c
 80176be:	fb02 f303 	mul.w	r3, r2, r3
 80176c2:	3308      	adds	r3, #8
 80176c4:	687a      	ldr	r2, [r7, #4]
 80176c6:	4413      	add	r3, r2
    }
 80176c8:	4618      	mov	r0, r3
 80176ca:	370c      	adds	r7, #12
 80176cc:	46bd      	mov	sp, r7
 80176ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d2:	4770      	bx	lr

080176d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80176d4:	b480      	push	{r7}
 80176d6:	b083      	sub	sp, #12
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80176dc:	2301      	movs	r3, #1
    }
 80176de:	4618      	mov	r0, r3
 80176e0:	370c      	adds	r7, #12
 80176e2:	46bd      	mov	sp, r7
 80176e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e8:	4770      	bx	lr

080176ea <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80176ea:	b480      	push	{r7}
 80176ec:	b083      	sub	sp, #12
 80176ee:	af00      	add	r7, sp, #0
 80176f0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80176f2:	2310      	movs	r3, #16
    }
 80176f4:	4618      	mov	r0, r3
 80176f6:	370c      	adds	r7, #12
 80176f8:	46bd      	mov	sp, r7
 80176fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fe:	4770      	bx	lr

08017700 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017700:	b480      	push	{r7}
 8017702:	b083      	sub	sp, #12
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	460b      	mov	r3, r1
 801770a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801770c:	887b      	ldrh	r3, [r7, #2]
 801770e:	011b      	lsls	r3, r3, #4
 8017710:	3308      	adds	r3, #8
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	4413      	add	r3, r2
    }
 8017716:	4618      	mov	r0, r3
 8017718:	370c      	adds	r7, #12
 801771a:	46bd      	mov	sp, r7
 801771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017720:	4770      	bx	lr

08017722 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017722:	b480      	push	{r7}
 8017724:	b083      	sub	sp, #12
 8017726:	af00      	add	r7, sp, #0
 8017728:	6078      	str	r0, [r7, #4]
 801772a:	460b      	mov	r3, r1
 801772c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801772e:	887b      	ldrh	r3, [r7, #2]
 8017730:	011b      	lsls	r3, r3, #4
 8017732:	3308      	adds	r3, #8
 8017734:	687a      	ldr	r2, [r7, #4]
 8017736:	4413      	add	r3, r2
    }
 8017738:	4618      	mov	r0, r3
 801773a:	370c      	adds	r7, #12
 801773c:	46bd      	mov	sp, r7
 801773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017742:	4770      	bx	lr

08017744 <_GLOBAL__sub_I_touchgfx_init>:
 8017744:	b580      	push	{r7, lr}
 8017746:	af00      	add	r7, sp, #0
 8017748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801774c:	2001      	movs	r0, #1
 801774e:	f7ff feff 	bl	8017550 <_Z41__static_initialization_and_destruction_0ii>
 8017752:	bd80      	pop	{r7, pc}

08017754 <_GLOBAL__sub_D_touchgfx_init>:
 8017754:	b580      	push	{r7, lr}
 8017756:	af00      	add	r7, sp, #0
 8017758:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801775c:	2000      	movs	r0, #0
 801775e:	f7ff fef7 	bl	8017550 <_Z41__static_initialization_and_destruction_0ii>
 8017762:	bd80      	pop	{r7, pc}

08017764 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	3318      	adds	r3, #24
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	6878      	ldr	r0, [r7, #4]
 8017776:	4798      	blx	r3
    }
 8017778:	bf00      	nop
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}

08017780 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8017780:	b480      	push	{r7}
 8017782:	b083      	sub	sp, #12
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	460b      	mov	r3, r1
 801778a:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	78fa      	ldrb	r2, [r7, #3]
 8017790:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8017794:	bf00      	nop
 8017796:	370c      	adds	r7, #12
 8017798:	46bd      	mov	sp, r7
 801779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779e:	4770      	bx	lr

080177a0 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80177a0:	b480      	push	{r7}
 80177a2:	b083      	sub	sp, #12
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80177ae:	3301      	adds	r3, #1
 80177b0:	b2da      	uxtb	r2, r3
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80177b8:	bf00      	nop
 80177ba:	370c      	adds	r7, #12
 80177bc:	46bd      	mov	sp, r7
 80177be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177c2:	4770      	bx	lr

080177c4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
 80177cc:	460b      	mov	r3, r1
 80177ce:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80177d0:	78fb      	ldrb	r3, [r7, #3]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d002      	beq.n	80177dc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80177d6:	78fb      	ldrb	r3, [r7, #3]
 80177d8:	2b02      	cmp	r3, #2
 80177da:	d105      	bne.n	80177e8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	78fa      	ldrb	r2, [r7, #3]
 80177e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 80177e4:	2301      	movs	r3, #1
 80177e6:	e027      	b.n	8017838 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80177e8:	78fb      	ldrb	r3, [r7, #3]
 80177ea:	2b01      	cmp	r3, #1
 80177ec:	d123      	bne.n	8017836 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d014      	beq.n	8017820 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	3380      	adds	r3, #128	; 0x80
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	4798      	blx	r3
 8017802:	4603      	mov	r3, r0
 8017804:	461a      	mov	r2, r3
 8017806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801780a:	429a      	cmp	r2, r3
 801780c:	d008      	beq.n	8017820 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801780e:	4b0c      	ldr	r3, [pc, #48]	; (8017840 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	f083 0301 	eor.w	r3, r3, #1
 8017816:	b2db      	uxtb	r3, r3
 8017818:	2b00      	cmp	r3, #0
 801781a:	d001      	beq.n	8017820 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801781c:	2301      	movs	r3, #1
 801781e:	e000      	b.n	8017822 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017820:	2300      	movs	r3, #0
 8017822:	2b00      	cmp	r3, #0
 8017824:	d005      	beq.n	8017832 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	78fa      	ldrb	r2, [r7, #3]
 801782a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801782e:	2301      	movs	r3, #1
 8017830:	e002      	b.n	8017838 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8017832:	2300      	movs	r3, #0
 8017834:	e000      	b.n	8017838 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8017836:	2300      	movs	r3, #0
    }
 8017838:	4618      	mov	r0, r3
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	200094d4 	.word	0x200094d4

08017844 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8017844:	b480      	push	{r7}
 8017846:	b083      	sub	sp, #12
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	683a      	ldr	r2, [r7, #0]
 8017852:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8017854:	bf00      	nop
 8017856:	370c      	adds	r7, #12
 8017858:	46bd      	mov	sp, r7
 801785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785e:	4770      	bx	lr

08017860 <__NVIC_EnableIRQ>:
{
 8017860:	b480      	push	{r7}
 8017862:	b083      	sub	sp, #12
 8017864:	af00      	add	r7, sp, #0
 8017866:	4603      	mov	r3, r0
 8017868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801786a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801786e:	2b00      	cmp	r3, #0
 8017870:	db0b      	blt.n	801788a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017872:	79fb      	ldrb	r3, [r7, #7]
 8017874:	f003 021f 	and.w	r2, r3, #31
 8017878:	4907      	ldr	r1, [pc, #28]	; (8017898 <__NVIC_EnableIRQ+0x38>)
 801787a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801787e:	095b      	lsrs	r3, r3, #5
 8017880:	2001      	movs	r0, #1
 8017882:	fa00 f202 	lsl.w	r2, r0, r2
 8017886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801788a:	bf00      	nop
 801788c:	370c      	adds	r7, #12
 801788e:	46bd      	mov	sp, r7
 8017890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017894:	4770      	bx	lr
 8017896:	bf00      	nop
 8017898:	e000e100 	.word	0xe000e100

0801789c <__NVIC_DisableIRQ>:
{
 801789c:	b480      	push	{r7}
 801789e:	b083      	sub	sp, #12
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	4603      	mov	r3, r0
 80178a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80178a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	db12      	blt.n	80178d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80178ae:	79fb      	ldrb	r3, [r7, #7]
 80178b0:	f003 021f 	and.w	r2, r3, #31
 80178b4:	490a      	ldr	r1, [pc, #40]	; (80178e0 <__NVIC_DisableIRQ+0x44>)
 80178b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178ba:	095b      	lsrs	r3, r3, #5
 80178bc:	2001      	movs	r0, #1
 80178be:	fa00 f202 	lsl.w	r2, r0, r2
 80178c2:	3320      	adds	r3, #32
 80178c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80178c8:	f3bf 8f4f 	dsb	sy
}
 80178cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80178ce:	f3bf 8f6f 	isb	sy
}
 80178d2:	bf00      	nop
}
 80178d4:	bf00      	nop
 80178d6:	370c      	adds	r7, #12
 80178d8:	46bd      	mov	sp, r7
 80178da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178de:	4770      	bx	lr
 80178e0:	e000e100 	.word	0xe000e100

080178e4 <__NVIC_SetPriority>:
{
 80178e4:	b480      	push	{r7}
 80178e6:	b083      	sub	sp, #12
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	4603      	mov	r3, r0
 80178ec:	6039      	str	r1, [r7, #0]
 80178ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80178f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	db0a      	blt.n	801790e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	b2da      	uxtb	r2, r3
 80178fc:	490c      	ldr	r1, [pc, #48]	; (8017930 <__NVIC_SetPriority+0x4c>)
 80178fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017902:	0112      	lsls	r2, r2, #4
 8017904:	b2d2      	uxtb	r2, r2
 8017906:	440b      	add	r3, r1
 8017908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801790c:	e00a      	b.n	8017924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801790e:	683b      	ldr	r3, [r7, #0]
 8017910:	b2da      	uxtb	r2, r3
 8017912:	4908      	ldr	r1, [pc, #32]	; (8017934 <__NVIC_SetPriority+0x50>)
 8017914:	79fb      	ldrb	r3, [r7, #7]
 8017916:	f003 030f 	and.w	r3, r3, #15
 801791a:	3b04      	subs	r3, #4
 801791c:	0112      	lsls	r2, r2, #4
 801791e:	b2d2      	uxtb	r2, r2
 8017920:	440b      	add	r3, r1
 8017922:	761a      	strb	r2, [r3, #24]
}
 8017924:	bf00      	nop
 8017926:	370c      	adds	r7, #12
 8017928:	46bd      	mov	sp, r7
 801792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792e:	4770      	bx	lr
 8017930:	e000e100 	.word	0xe000e100
 8017934:	e000ed00 	.word	0xe000ed00

08017938 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8017938:	b480      	push	{r7}
 801793a:	b085      	sub	sp, #20
 801793c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801793e:	4b21      	ldr	r3, [pc, #132]	; (80179c4 <SCB_CleanInvalidateDCache+0x8c>)
 8017940:	2200      	movs	r2, #0
 8017942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8017946:	f3bf 8f4f 	dsb	sy
}
 801794a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 801794c:	4b1d      	ldr	r3, [pc, #116]	; (80179c4 <SCB_CleanInvalidateDCache+0x8c>)
 801794e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017952:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	0b5b      	lsrs	r3, r3, #13
 8017958:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801795c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	08db      	lsrs	r3, r3, #3
 8017962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017966:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	015a      	lsls	r2, r3, #5
 801796c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8017970:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8017972:	68ba      	ldr	r2, [r7, #8]
 8017974:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8017976:	4913      	ldr	r1, [pc, #76]	; (80179c4 <SCB_CleanInvalidateDCache+0x8c>)
 8017978:	4313      	orrs	r3, r2
 801797a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	1e5a      	subs	r2, r3, #1
 8017982:	60ba      	str	r2, [r7, #8]
 8017984:	2b00      	cmp	r3, #0
 8017986:	bf14      	ite	ne
 8017988:	2301      	movne	r3, #1
 801798a:	2300      	moveq	r3, #0
 801798c:	b2db      	uxtb	r3, r3
 801798e:	2b00      	cmp	r3, #0
 8017990:	d000      	beq.n	8017994 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8017992:	e7e9      	b.n	8017968 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	1e5a      	subs	r2, r3, #1
 8017998:	60fa      	str	r2, [r7, #12]
 801799a:	2b00      	cmp	r3, #0
 801799c:	bf14      	ite	ne
 801799e:	2301      	movne	r3, #1
 80179a0:	2300      	moveq	r3, #0
 80179a2:	b2db      	uxtb	r3, r3
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d000      	beq.n	80179aa <SCB_CleanInvalidateDCache+0x72>
    do {
 80179a8:	e7d9      	b.n	801795e <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80179aa:	f3bf 8f4f 	dsb	sy
}
 80179ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80179b0:	f3bf 8f6f 	isb	sy
}
 80179b4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80179b6:	bf00      	nop
 80179b8:	3714      	adds	r7, #20
 80179ba:	46bd      	mov	sp, r7
 80179bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c0:	4770      	bx	lr
 80179c2:	bf00      	nop
 80179c4:	e000ed00 	.word	0xe000ed00

080179c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80179c8:	b5b0      	push	{r4, r5, r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	4618      	mov	r0, r3
 80179d4:	f001 f994 	bl	8018d00 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 80179d8:	687d      	ldr	r5, [r7, #4]
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	334c      	adds	r3, #76	; 0x4c
 80179e0:	681c      	ldr	r4, [r3, #0]
 80179e2:	f002 fd77 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 80179e6:	4603      	mov	r3, r0
 80179e8:	4619      	mov	r1, r3
 80179ea:	4628      	mov	r0, r5
 80179ec:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	490d      	ldr	r1, [pc, #52]	; (8017a28 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80179f2:	4618      	mov	r0, r3
 80179f4:	f7ff ff26 	bl	8017844 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2101      	movs	r1, #1
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7ff fee1 	bl	80177c4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	3370      	adds	r3, #112	; 0x70
 8017a0a:	681c      	ldr	r4, [r3, #0]
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	2200      	movs	r2, #0
 8017a10:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8017a14:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	2101      	movs	r1, #1
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7ff feb0 	bl	8017780 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8017a20:	bf00      	nop
 8017a22:	3708      	adds	r7, #8
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bdb0      	pop	{r4, r5, r7, pc}
 8017a28:	080165e1 	.word	0x080165e1

08017a2c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017a34:	2109      	movs	r1, #9
 8017a36:	205a      	movs	r0, #90	; 0x5a
 8017a38:	f7ff ff54 	bl	80178e4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017a3c:	2109      	movs	r1, #9
 8017a3e:	2058      	movs	r0, #88	; 0x58
 8017a40:	f7ff ff50 	bl	80178e4 <__NVIC_SetPriority>
}
 8017a44:	bf00      	nop
 8017a46:	3708      	adds	r7, #8
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}

08017a4c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017a54:	205a      	movs	r0, #90	; 0x5a
 8017a56:	f7ff ff03 	bl	8017860 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8017a5a:	2058      	movs	r0, #88	; 0x58
 8017a5c:	f7ff ff00 	bl	8017860 <__NVIC_EnableIRQ>
}
 8017a60:	bf00      	nop
 8017a62:	3708      	adds	r7, #8
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}

08017a68 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017a70:	205a      	movs	r0, #90	; 0x5a
 8017a72:	f7ff ff13 	bl	801789c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8017a76:	2058      	movs	r0, #88	; 0x58
 8017a78:	f7ff ff10 	bl	801789c <__NVIC_DisableIRQ>
}
 8017a7c:	bf00      	nop
 8017a7e:	3708      	adds	r7, #8
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017a84:	b480      	push	{r7}
 8017a86:	b083      	sub	sp, #12
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017a8c:	4b11      	ldr	r3, [pc, #68]	; (8017ad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017a8e:	68db      	ldr	r3, [r3, #12]
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017a96:	b29b      	uxth	r3, r3
 8017a98:	3b01      	subs	r3, #1
 8017a9a:	b29a      	uxth	r2, r3
 8017a9c:	4b0e      	ldr	r3, [pc, #56]	; (8017ad8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017a9e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017aa0:	4b0c      	ldr	r3, [pc, #48]	; (8017ad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017aa2:	691b      	ldr	r3, [r3, #16]
 8017aa4:	b29b      	uxth	r3, r3
 8017aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017aaa:	b29b      	uxth	r3, r3
 8017aac:	3b01      	subs	r3, #1
 8017aae:	b29a      	uxth	r2, r3
 8017ab0:	4b0a      	ldr	r3, [pc, #40]	; (8017adc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8017ab2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8017ab4:	4b08      	ldr	r3, [pc, #32]	; (8017ad8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017ab6:	881a      	ldrh	r2, [r3, #0]
 8017ab8:	4b06      	ldr	r3, [pc, #24]	; (8017ad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017aba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8017abc:	4b05      	ldr	r3, [pc, #20]	; (8017ad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ac0:	4a04      	ldr	r2, [pc, #16]	; (8017ad4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017ac2:	f043 0301 	orr.w	r3, r3, #1
 8017ac6:	6353      	str	r3, [r2, #52]	; 0x34
}
 8017ac8:	bf00      	nop
 8017aca:	370c      	adds	r7, #12
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr
 8017ad4:	40016800 	.word	0x40016800
 8017ad8:	200094c4 	.word	0x200094c4
 8017adc:	200094c6 	.word	0x200094c6

08017ae0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8017ae0:	b480      	push	{r7}
 8017ae2:	b083      	sub	sp, #12
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8017ae8:	4b03      	ldr	r3, [pc, #12]	; (8017af8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8017aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017aec:	4618      	mov	r0, r3
 8017aee:	370c      	adds	r7, #12
 8017af0:	46bd      	mov	sp, r7
 8017af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af6:	4770      	bx	lr
 8017af8:	40016884 	.word	0x40016884

08017afc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017afc:	b480      	push	{r7}
 8017afe:	b083      	sub	sp, #12
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8017b06:	4a06      	ldr	r2, [pc, #24]	; (8017b20 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017b0c:	4b05      	ldr	r3, [pc, #20]	; (8017b24 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8017b0e:	2201      	movs	r2, #1
 8017b10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017b12:	bf00      	nop
 8017b14:	370c      	adds	r7, #12
 8017b16:	46bd      	mov	sp, r7
 8017b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1c:	4770      	bx	lr
 8017b1e:	bf00      	nop
 8017b20:	40016884 	.word	0x40016884
 8017b24:	40016800 	.word	0x40016800

08017b28 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	6839      	ldr	r1, [r7, #0]
 8017b36:	4618      	mov	r0, r3
 8017b38:	f000 fdf7 	bl	801872a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 8017b3c:	f7ff fefc 	bl	8017938 <SCB_CleanInvalidateDCache>
}
 8017b40:	bf00      	nop
 8017b42:	3708      	adds	r7, #8
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b084      	sub	sp, #16
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
 8017b54:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8017b56:	68f8      	ldr	r0, [r7, #12]
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	68b9      	ldr	r1, [r7, #8]
 8017b5e:	f000 ff18 	bl	8018992 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8017b62:	4603      	mov	r3, r0
}
 8017b64:	4618      	mov	r0, r3
 8017b66:	3710      	adds	r7, #16
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	bd80      	pop	{r7, pc}

08017b6c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	b085      	sub	sp, #20
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017b74:	4b0d      	ldr	r3, [pc, #52]	; (8017bac <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b78:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8017b7a:	4b0c      	ldr	r3, [pc, #48]	; (8017bac <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017b7c:	68db      	ldr	r3, [r3, #12]
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	3301      	adds	r3, #1
 8017b88:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8017b8a:	89fa      	ldrh	r2, [r7, #14]
 8017b8c:	89bb      	ldrh	r3, [r7, #12]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d304      	bcc.n	8017b9c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8017b92:	89fa      	ldrh	r2, [r7, #14]
 8017b94:	89bb      	ldrh	r3, [r7, #12]
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	b29b      	uxth	r3, r3
 8017b9a:	e000      	b.n	8017b9e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8017b9c:	2300      	movs	r3, #0
}
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	3714      	adds	r7, #20
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba8:	4770      	bx	lr
 8017baa:	bf00      	nop
 8017bac:	40016800 	.word	0x40016800

08017bb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b082      	sub	sp, #8
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 8017bb8:	f7ff febe 	bl	8017938 <SCB_CleanInvalidateDCache>
}
 8017bbc:	bf00      	nop
 8017bbe:	3708      	adds	r7, #8
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
 8017bcc:	f7ff feb4 	bl	8017938 <SCB_CleanInvalidateDCache>
}
 8017bd0:	bf00      	nop
 8017bd2:	3708      	adds	r7, #8
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}

08017bd8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b082      	sub	sp, #8
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8017be0:	4b1a      	ldr	r3, [pc, #104]	; (8017c4c <HAL_LTDC_LineEventCallback+0x74>)
 8017be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017be4:	4a1a      	ldr	r2, [pc, #104]	; (8017c50 <HAL_LTDC_LineEventCallback+0x78>)
 8017be6:	8812      	ldrh	r2, [r2, #0]
 8017be8:	4293      	cmp	r3, r2
 8017bea:	bf0c      	ite	eq
 8017bec:	2301      	moveq	r3, #1
 8017bee:	2300      	movne	r3, #0
 8017bf0:	b2db      	uxtb	r3, r3
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d017      	beq.n	8017c26 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8017bf6:	4b17      	ldr	r3, [pc, #92]	; (8017c54 <HAL_LTDC_LineEventCallback+0x7c>)
 8017bf8:	881b      	ldrh	r3, [r3, #0]
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f7ef ff5b 	bl	8007ab8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8017c02:	f7fc fd9d 	bl	8014740 <_ZN8touchgfx3HAL11getInstanceEv>
 8017c06:	4603      	mov	r3, r0
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7ff fdc9 	bl	80177a0 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8017c0e:	f7fe fcc7 	bl	80165a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8017c12:	f7fc fd95 	bl	8014740 <_ZN8touchgfx3HAL11getInstanceEv>
 8017c16:	4603      	mov	r3, r0
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f001 faf9 	bl	8019210 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8017c1e:	2000      	movs	r0, #0
 8017c20:	f7fe fa42 	bl	80160a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8017c24:	e00e      	b.n	8017c44 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8017c26:	4b0a      	ldr	r3, [pc, #40]	; (8017c50 <HAL_LTDC_LineEventCallback+0x78>)
 8017c28:	881b      	ldrh	r3, [r3, #0]
 8017c2a:	4619      	mov	r1, r3
 8017c2c:	6878      	ldr	r0, [r7, #4]
 8017c2e:	f7ef ff43 	bl	8007ab8 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8017c32:	2000      	movs	r0, #0
 8017c34:	f7fe fa43 	bl	80160be <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8017c38:	f7fc fd82 	bl	8014740 <_ZN8touchgfx3HAL11getInstanceEv>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7ff fd90 	bl	8017764 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8017c44:	bf00      	nop
 8017c46:	3708      	adds	r7, #8
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	40016800 	.word	0x40016800
 8017c50:	200094c4 	.word	0x200094c4
 8017c54:	200094c6 	.word	0x200094c6

08017c58 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017c5c:	2201      	movs	r2, #1
 8017c5e:	490e      	ldr	r1, [pc, #56]	; (8017c98 <MX_USB_HOST_Init+0x40>)
 8017c60:	480e      	ldr	r0, [pc, #56]	; (8017c9c <MX_USB_HOST_Init+0x44>)
 8017c62:	f7f7 fcb1 	bl	800f5c8 <USBH_Init>
 8017c66:	4603      	mov	r3, r0
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d001      	beq.n	8017c70 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017c6c:	f7e9 fea4 	bl	80019b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017c70:	490b      	ldr	r1, [pc, #44]	; (8017ca0 <MX_USB_HOST_Init+0x48>)
 8017c72:	480a      	ldr	r0, [pc, #40]	; (8017c9c <MX_USB_HOST_Init+0x44>)
 8017c74:	f7f7 fd5e 	bl	800f734 <USBH_RegisterClass>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d001      	beq.n	8017c82 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017c7e:	f7e9 fe9b 	bl	80019b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017c82:	4806      	ldr	r0, [pc, #24]	; (8017c9c <MX_USB_HOST_Init+0x44>)
 8017c84:	f7f7 fde2 	bl	800f84c <USBH_Start>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d001      	beq.n	8017c92 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017c8e:	f7e9 fe93 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017c92:	bf00      	nop
 8017c94:	bd80      	pop	{r7, pc}
 8017c96:	bf00      	nop
 8017c98:	08017ca5 	.word	0x08017ca5
 8017c9c:	2000a444 	.word	0x2000a444
 8017ca0:	20000038 	.word	0x20000038

08017ca4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b083      	sub	sp, #12
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	460b      	mov	r3, r1
 8017cae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017cb0:	78fb      	ldrb	r3, [r7, #3]
 8017cb2:	3b01      	subs	r3, #1
 8017cb4:	2b04      	cmp	r3, #4
 8017cb6:	d819      	bhi.n	8017cec <USBH_UserProcess+0x48>
 8017cb8:	a201      	add	r2, pc, #4	; (adr r2, 8017cc0 <USBH_UserProcess+0x1c>)
 8017cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cbe:	bf00      	nop
 8017cc0:	08017ced 	.word	0x08017ced
 8017cc4:	08017cdd 	.word	0x08017cdd
 8017cc8:	08017ced 	.word	0x08017ced
 8017ccc:	08017ce5 	.word	0x08017ce5
 8017cd0:	08017cd5 	.word	0x08017cd5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8017cd4:	4b09      	ldr	r3, [pc, #36]	; (8017cfc <USBH_UserProcess+0x58>)
 8017cd6:	2203      	movs	r2, #3
 8017cd8:	701a      	strb	r2, [r3, #0]
  break;
 8017cda:	e008      	b.n	8017cee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017cdc:	4b07      	ldr	r3, [pc, #28]	; (8017cfc <USBH_UserProcess+0x58>)
 8017cde:	2202      	movs	r2, #2
 8017ce0:	701a      	strb	r2, [r3, #0]
  break;
 8017ce2:	e004      	b.n	8017cee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8017ce4:	4b05      	ldr	r3, [pc, #20]	; (8017cfc <USBH_UserProcess+0x58>)
 8017ce6:	2201      	movs	r2, #1
 8017ce8:	701a      	strb	r2, [r3, #0]
  break;
 8017cea:	e000      	b.n	8017cee <USBH_UserProcess+0x4a>

  default:
  break;
 8017cec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8017cee:	bf00      	nop
 8017cf0:	370c      	adds	r7, #12
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf8:	4770      	bx	lr
 8017cfa:	bf00      	nop
 8017cfc:	200094c8 	.word	0x200094c8

08017d00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b08a      	sub	sp, #40	; 0x28
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d08:	f107 0314 	add.w	r3, r7, #20
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	601a      	str	r2, [r3, #0]
 8017d10:	605a      	str	r2, [r3, #4]
 8017d12:	609a      	str	r2, [r3, #8]
 8017d14:	60da      	str	r2, [r3, #12]
 8017d16:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017d20:	d13c      	bne.n	8017d9c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017d22:	4b20      	ldr	r3, [pc, #128]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d26:	4a1f      	ldr	r2, [pc, #124]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d28:	f043 0301 	orr.w	r3, r3, #1
 8017d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8017d2e:	4b1d      	ldr	r3, [pc, #116]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d32:	f003 0301 	and.w	r3, r3, #1
 8017d36:	613b      	str	r3, [r7, #16]
 8017d38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8017d3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8017d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d40:	2302      	movs	r3, #2
 8017d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d44:	2300      	movs	r3, #0
 8017d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017d48:	2303      	movs	r3, #3
 8017d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017d4c:	230a      	movs	r3, #10
 8017d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017d50:	f107 0314 	add.w	r3, r7, #20
 8017d54:	4619      	mov	r1, r3
 8017d56:	4814      	ldr	r0, [pc, #80]	; (8017da8 <HAL_HCD_MspInit+0xa8>)
 8017d58:	f7ec fef8 	bl	8004b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017d5c:	4b11      	ldr	r3, [pc, #68]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d60:	4a10      	ldr	r2, [pc, #64]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d66:	6353      	str	r3, [r2, #52]	; 0x34
 8017d68:	4b0e      	ldr	r3, [pc, #56]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017d70:	60fb      	str	r3, [r7, #12]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	4b0b      	ldr	r3, [pc, #44]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d78:	4a0a      	ldr	r2, [pc, #40]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8017d80:	4b08      	ldr	r3, [pc, #32]	; (8017da4 <HAL_HCD_MspInit+0xa4>)
 8017d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017d88:	60bb      	str	r3, [r7, #8]
 8017d8a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	2105      	movs	r1, #5
 8017d90:	2043      	movs	r0, #67	; 0x43
 8017d92:	f7eb fe5d 	bl	8003a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017d96:	2043      	movs	r0, #67	; 0x43
 8017d98:	f7eb fe76 	bl	8003a88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017d9c:	bf00      	nop
 8017d9e:	3728      	adds	r7, #40	; 0x28
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}
 8017da4:	40023800 	.word	0x40023800
 8017da8:	40020000 	.word	0x40020000

08017dac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b082      	sub	sp, #8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f7f8 f9f3 	bl	80101a6 <USBH_LL_IncTimer>
}
 8017dc0:	bf00      	nop
 8017dc2:	3708      	adds	r7, #8
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd80      	pop	{r7, pc}

08017dc8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7f8 fa37 	bl	801024a <USBH_LL_Connect>
}
 8017ddc:	bf00      	nop
 8017dde:	3708      	adds	r7, #8
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7f8 fa4c 	bl	8010290 <USBH_LL_Disconnect>
}
 8017df8:	bf00      	nop
 8017dfa:	3708      	adds	r7, #8
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b082      	sub	sp, #8
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
 8017e08:	460b      	mov	r3, r1
 8017e0a:	70fb      	strb	r3, [r7, #3]
 8017e0c:	4613      	mov	r3, r2
 8017e0e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017e16:	4618      	mov	r0, r3
 8017e18:	f7f8 fa81 	bl	801031e <USBH_LL_NotifyURBChange>
#endif
}
 8017e1c:	bf00      	nop
 8017e1e:	3708      	adds	r7, #8
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}

08017e24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b082      	sub	sp, #8
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017e32:	4618      	mov	r0, r3
 8017e34:	f7f8 f9e1 	bl	80101fa <USBH_LL_PortEnabled>
}
 8017e38:	bf00      	nop
 8017e3a:	3708      	adds	r7, #8
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b082      	sub	sp, #8
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7f8 f9ed 	bl	801022e <USBH_LL_PortDisabled>
}
 8017e54:	bf00      	nop
 8017e56:	3708      	adds	r7, #8
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bd80      	pop	{r7, pc}

08017e5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b082      	sub	sp, #8
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017e6a:	2b01      	cmp	r3, #1
 8017e6c:	d12a      	bne.n	8017ec4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8017e6e:	4a18      	ldr	r2, [pc, #96]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	4a15      	ldr	r2, [pc, #84]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017e7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017e7e:	4b14      	ldr	r3, [pc, #80]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017e80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017e84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017e86:	4b12      	ldr	r3, [pc, #72]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017e88:	2208      	movs	r2, #8
 8017e8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017e8c:	4b10      	ldr	r3, [pc, #64]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017e8e:	2201      	movs	r2, #1
 8017e90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017e92:	4b0f      	ldr	r3, [pc, #60]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017e94:	2200      	movs	r2, #0
 8017e96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017e98:	4b0d      	ldr	r3, [pc, #52]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017e9a:	2202      	movs	r2, #2
 8017e9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017e9e:	4b0c      	ldr	r3, [pc, #48]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017ea4:	480a      	ldr	r0, [pc, #40]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017ea6:	f7ed f93a 	bl	800511e <HAL_HCD_Init>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d001      	beq.n	8017eb4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8017eb0:	f7e9 fd82 	bl	80019b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8017eb4:	4806      	ldr	r0, [pc, #24]	; (8017ed0 <USBH_LL_Init+0x74>)
 8017eb6:	f7ed fd17 	bl	80058e8 <HAL_HCD_GetCurrentFrame>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	4619      	mov	r1, r3
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f7f8 f962 	bl	8010188 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017ec4:	2300      	movs	r3, #0
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3708      	adds	r7, #8
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}
 8017ece:	bf00      	nop
 8017ed0:	2000a828 	.word	0x2000a828

08017ed4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b084      	sub	sp, #16
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017edc:	2300      	movs	r3, #0
 8017ede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7ed fc86 	bl	80057fc <HAL_HCD_Start>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017ef4:	7bfb      	ldrb	r3, [r7, #15]
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f000 f95c 	bl	80181b4 <USBH_Get_USB_Status>
 8017efc:	4603      	mov	r3, r0
 8017efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3710      	adds	r7, #16
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}

08017f0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017f0a:	b580      	push	{r7, lr}
 8017f0c:	b084      	sub	sp, #16
 8017f0e:	af00      	add	r7, sp, #0
 8017f10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f12:	2300      	movs	r3, #0
 8017f14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017f16:	2300      	movs	r3, #0
 8017f18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7ed fc8e 	bl	8005842 <HAL_HCD_Stop>
 8017f26:	4603      	mov	r3, r0
 8017f28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017f2a:	7bfb      	ldrb	r3, [r7, #15]
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f000 f941 	bl	80181b4 <USBH_Get_USB_Status>
 8017f32:	4603      	mov	r3, r0
 8017f34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017f48:	2301      	movs	r3, #1
 8017f4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017f52:	4618      	mov	r0, r3
 8017f54:	f7ed fcd6 	bl	8005904 <HAL_HCD_GetCurrentSpeed>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b02      	cmp	r3, #2
 8017f5c:	d00c      	beq.n	8017f78 <USBH_LL_GetSpeed+0x38>
 8017f5e:	2b02      	cmp	r3, #2
 8017f60:	d80d      	bhi.n	8017f7e <USBH_LL_GetSpeed+0x3e>
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d002      	beq.n	8017f6c <USBH_LL_GetSpeed+0x2c>
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d003      	beq.n	8017f72 <USBH_LL_GetSpeed+0x32>
 8017f6a:	e008      	b.n	8017f7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8017f70:	e008      	b.n	8017f84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8017f72:	2301      	movs	r3, #1
 8017f74:	73fb      	strb	r3, [r7, #15]
    break;
 8017f76:	e005      	b.n	8017f84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017f78:	2302      	movs	r3, #2
 8017f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8017f7c:	e002      	b.n	8017f84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8017f7e:	2301      	movs	r3, #1
 8017f80:	73fb      	strb	r3, [r7, #15]
    break;
 8017f82:	bf00      	nop
  }
  return  speed;
 8017f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f86:	4618      	mov	r0, r3
 8017f88:	3710      	adds	r7, #16
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}

08017f8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8017f8e:	b580      	push	{r7, lr}
 8017f90:	b084      	sub	sp, #16
 8017f92:	af00      	add	r7, sp, #0
 8017f94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f96:	2300      	movs	r3, #0
 8017f98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f7ed fc69 	bl	800587c <HAL_HCD_ResetPort>
 8017faa:	4603      	mov	r3, r0
 8017fac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017fae:	7bfb      	ldrb	r3, [r7, #15]
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f000 f8ff 	bl	80181b4 <USBH_Get_USB_Status>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3710      	adds	r7, #16
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b082      	sub	sp, #8
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
 8017fcc:	460b      	mov	r3, r1
 8017fce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017fd6:	78fa      	ldrb	r2, [r7, #3]
 8017fd8:	4611      	mov	r1, r2
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7ed fc70 	bl	80058c0 <HAL_HCD_HC_GetXferCount>
 8017fe0:	4603      	mov	r3, r0
}
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	3708      	adds	r7, #8
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	bd80      	pop	{r7, pc}

08017fea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017fea:	b590      	push	{r4, r7, lr}
 8017fec:	b089      	sub	sp, #36	; 0x24
 8017fee:	af04      	add	r7, sp, #16
 8017ff0:	6078      	str	r0, [r7, #4]
 8017ff2:	4608      	mov	r0, r1
 8017ff4:	4611      	mov	r1, r2
 8017ff6:	461a      	mov	r2, r3
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	70fb      	strb	r3, [r7, #3]
 8017ffc:	460b      	mov	r3, r1
 8017ffe:	70bb      	strb	r3, [r7, #2]
 8018000:	4613      	mov	r3, r2
 8018002:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018004:	2300      	movs	r3, #0
 8018006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018008:	2300      	movs	r3, #0
 801800a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8018012:	787c      	ldrb	r4, [r7, #1]
 8018014:	78ba      	ldrb	r2, [r7, #2]
 8018016:	78f9      	ldrb	r1, [r7, #3]
 8018018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801801a:	9302      	str	r3, [sp, #8]
 801801c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018020:	9301      	str	r3, [sp, #4]
 8018022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018026:	9300      	str	r3, [sp, #0]
 8018028:	4623      	mov	r3, r4
 801802a:	f7ed f8da 	bl	80051e2 <HAL_HCD_HC_Init>
 801802e:	4603      	mov	r3, r0
 8018030:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8018032:	7bfb      	ldrb	r3, [r7, #15]
 8018034:	4618      	mov	r0, r3
 8018036:	f000 f8bd 	bl	80181b4 <USBH_Get_USB_Status>
 801803a:	4603      	mov	r3, r0
 801803c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801803e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018040:	4618      	mov	r0, r3
 8018042:	3714      	adds	r7, #20
 8018044:	46bd      	mov	sp, r7
 8018046:	bd90      	pop	{r4, r7, pc}

08018048 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b084      	sub	sp, #16
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
 8018050:	460b      	mov	r3, r1
 8018052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018054:	2300      	movs	r3, #0
 8018056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018058:	2300      	movs	r3, #0
 801805a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018062:	78fa      	ldrb	r2, [r7, #3]
 8018064:	4611      	mov	r1, r2
 8018066:	4618      	mov	r0, r3
 8018068:	f7ed f94a 	bl	8005300 <HAL_HCD_HC_Halt>
 801806c:	4603      	mov	r3, r0
 801806e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018070:	7bfb      	ldrb	r3, [r7, #15]
 8018072:	4618      	mov	r0, r3
 8018074:	f000 f89e 	bl	80181b4 <USBH_Get_USB_Status>
 8018078:	4603      	mov	r3, r0
 801807a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801807c:	7bbb      	ldrb	r3, [r7, #14]
}
 801807e:	4618      	mov	r0, r3
 8018080:	3710      	adds	r7, #16
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}

08018086 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018086:	b590      	push	{r4, r7, lr}
 8018088:	b089      	sub	sp, #36	; 0x24
 801808a:	af04      	add	r7, sp, #16
 801808c:	6078      	str	r0, [r7, #4]
 801808e:	4608      	mov	r0, r1
 8018090:	4611      	mov	r1, r2
 8018092:	461a      	mov	r2, r3
 8018094:	4603      	mov	r3, r0
 8018096:	70fb      	strb	r3, [r7, #3]
 8018098:	460b      	mov	r3, r1
 801809a:	70bb      	strb	r3, [r7, #2]
 801809c:	4613      	mov	r3, r2
 801809e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180a0:	2300      	movs	r3, #0
 80180a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80180a4:	2300      	movs	r3, #0
 80180a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80180ae:	787c      	ldrb	r4, [r7, #1]
 80180b0:	78ba      	ldrb	r2, [r7, #2]
 80180b2:	78f9      	ldrb	r1, [r7, #3]
 80180b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80180b8:	9303      	str	r3, [sp, #12]
 80180ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80180bc:	9302      	str	r3, [sp, #8]
 80180be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c0:	9301      	str	r3, [sp, #4]
 80180c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80180c6:	9300      	str	r3, [sp, #0]
 80180c8:	4623      	mov	r3, r4
 80180ca:	f7ed f93d 	bl	8005348 <HAL_HCD_HC_SubmitRequest>
 80180ce:	4603      	mov	r3, r0
 80180d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80180d2:	7bfb      	ldrb	r3, [r7, #15]
 80180d4:	4618      	mov	r0, r3
 80180d6:	f000 f86d 	bl	80181b4 <USBH_Get_USB_Status>
 80180da:	4603      	mov	r3, r0
 80180dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80180de:	7bbb      	ldrb	r3, [r7, #14]
}
 80180e0:	4618      	mov	r0, r3
 80180e2:	3714      	adds	r7, #20
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd90      	pop	{r4, r7, pc}

080180e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
 80180f0:	460b      	mov	r3, r1
 80180f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80180fa:	78fa      	ldrb	r2, [r7, #3]
 80180fc:	4611      	mov	r1, r2
 80180fe:	4618      	mov	r0, r3
 8018100:	f7ed fbca 	bl	8005898 <HAL_HCD_HC_GetURBState>
 8018104:	4603      	mov	r3, r0
}
 8018106:	4618      	mov	r0, r3
 8018108:	3708      	adds	r7, #8
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}

0801810e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801810e:	b580      	push	{r7, lr}
 8018110:	b082      	sub	sp, #8
 8018112:	af00      	add	r7, sp, #0
 8018114:	6078      	str	r0, [r7, #4]
 8018116:	460b      	mov	r3, r1
 8018118:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8018120:	2b01      	cmp	r3, #1
 8018122:	d103      	bne.n	801812c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018124:	78fb      	ldrb	r3, [r7, #3]
 8018126:	4618      	mov	r0, r3
 8018128:	f000 f870 	bl	801820c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801812c:	20c8      	movs	r0, #200	; 0xc8
 801812e:	f7eb f92b 	bl	8003388 <HAL_Delay>
  return USBH_OK;
 8018132:	2300      	movs	r3, #0
}
 8018134:	4618      	mov	r0, r3
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801813c:	b480      	push	{r7}
 801813e:	b085      	sub	sp, #20
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
 8018144:	460b      	mov	r3, r1
 8018146:	70fb      	strb	r3, [r7, #3]
 8018148:	4613      	mov	r3, r2
 801814a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018152:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018154:	78fb      	ldrb	r3, [r7, #3]
 8018156:	68fa      	ldr	r2, [r7, #12]
 8018158:	212c      	movs	r1, #44	; 0x2c
 801815a:	fb01 f303 	mul.w	r3, r1, r3
 801815e:	4413      	add	r3, r2
 8018160:	333b      	adds	r3, #59	; 0x3b
 8018162:	781b      	ldrb	r3, [r3, #0]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d009      	beq.n	801817c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018168:	78fb      	ldrb	r3, [r7, #3]
 801816a:	68fa      	ldr	r2, [r7, #12]
 801816c:	212c      	movs	r1, #44	; 0x2c
 801816e:	fb01 f303 	mul.w	r3, r1, r3
 8018172:	4413      	add	r3, r2
 8018174:	3354      	adds	r3, #84	; 0x54
 8018176:	78ba      	ldrb	r2, [r7, #2]
 8018178:	701a      	strb	r2, [r3, #0]
 801817a:	e008      	b.n	801818e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801817c:	78fb      	ldrb	r3, [r7, #3]
 801817e:	68fa      	ldr	r2, [r7, #12]
 8018180:	212c      	movs	r1, #44	; 0x2c
 8018182:	fb01 f303 	mul.w	r3, r1, r3
 8018186:	4413      	add	r3, r2
 8018188:	3355      	adds	r3, #85	; 0x55
 801818a:	78ba      	ldrb	r2, [r7, #2]
 801818c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801818e:	2300      	movs	r3, #0
}
 8018190:	4618      	mov	r0, r3
 8018192:	3714      	adds	r7, #20
 8018194:	46bd      	mov	sp, r7
 8018196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819a:	4770      	bx	lr

0801819c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b082      	sub	sp, #8
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	f7eb f8ef 	bl	8003388 <HAL_Delay>
}
 80181aa:	bf00      	nop
 80181ac:	3708      	adds	r7, #8
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
	...

080181b4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80181b4:	b480      	push	{r7}
 80181b6:	b085      	sub	sp, #20
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	4603      	mov	r3, r0
 80181bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80181be:	2300      	movs	r3, #0
 80181c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80181c2:	79fb      	ldrb	r3, [r7, #7]
 80181c4:	2b03      	cmp	r3, #3
 80181c6:	d817      	bhi.n	80181f8 <USBH_Get_USB_Status+0x44>
 80181c8:	a201      	add	r2, pc, #4	; (adr r2, 80181d0 <USBH_Get_USB_Status+0x1c>)
 80181ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181ce:	bf00      	nop
 80181d0:	080181e1 	.word	0x080181e1
 80181d4:	080181e7 	.word	0x080181e7
 80181d8:	080181ed 	.word	0x080181ed
 80181dc:	080181f3 	.word	0x080181f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80181e0:	2300      	movs	r3, #0
 80181e2:	73fb      	strb	r3, [r7, #15]
    break;
 80181e4:	e00b      	b.n	80181fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80181e6:	2302      	movs	r3, #2
 80181e8:	73fb      	strb	r3, [r7, #15]
    break;
 80181ea:	e008      	b.n	80181fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80181ec:	2301      	movs	r3, #1
 80181ee:	73fb      	strb	r3, [r7, #15]
    break;
 80181f0:	e005      	b.n	80181fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80181f2:	2302      	movs	r3, #2
 80181f4:	73fb      	strb	r3, [r7, #15]
    break;
 80181f6:	e002      	b.n	80181fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80181f8:	2302      	movs	r3, #2
 80181fa:	73fb      	strb	r3, [r7, #15]
    break;
 80181fc:	bf00      	nop
  }
  return usb_status;
 80181fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018200:	4618      	mov	r0, r3
 8018202:	3714      	adds	r7, #20
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b084      	sub	sp, #16
 8018210:	af00      	add	r7, sp, #0
 8018212:	4603      	mov	r3, r0
 8018214:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8018216:	79fb      	ldrb	r3, [r7, #7]
 8018218:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801821a:	79fb      	ldrb	r3, [r7, #7]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d102      	bne.n	8018226 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8018220:	2301      	movs	r3, #1
 8018222:	73fb      	strb	r3, [r7, #15]
 8018224:	e001      	b.n	801822a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8018226:	2300      	movs	r3, #0
 8018228:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801822a:	7bfb      	ldrb	r3, [r7, #15]
 801822c:	461a      	mov	r2, r3
 801822e:	2120      	movs	r1, #32
 8018230:	4803      	ldr	r0, [pc, #12]	; (8018240 <MX_DriverVbusFS+0x34>)
 8018232:	f7ec ff5b 	bl	80050ec <HAL_GPIO_WritePin>
}
 8018236:	bf00      	nop
 8018238:	3710      	adds	r7, #16
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}
 801823e:	bf00      	nop
 8018240:	40020c00 	.word	0x40020c00

08018244 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018244:	8880      	ldrh	r0, [r0, #4]
 8018246:	4770      	bx	lr

08018248 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8018248:	2300      	movs	r3, #0
 801824a:	8083      	strh	r3, [r0, #4]
 801824c:	4770      	bx	lr
	...

08018250 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018252:	6803      	ldr	r3, [r0, #0]
 8018254:	460e      	mov	r6, r1
 8018256:	2100      	movs	r1, #0
 8018258:	4605      	mov	r5, r0
 801825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801825c:	4798      	blx	r3
 801825e:	4604      	mov	r4, r0
 8018260:	682b      	ldr	r3, [r5, #0]
 8018262:	4628      	mov	r0, r5
 8018264:	1b34      	subs	r4, r6, r4
 8018266:	6a1b      	ldr	r3, [r3, #32]
 8018268:	b2a4      	uxth	r4, r4
 801826a:	4798      	blx	r3
 801826c:	88ab      	ldrh	r3, [r5, #4]
 801826e:	fbb4 f4f0 	udiv	r4, r4, r0
 8018272:	42a3      	cmp	r3, r4
 8018274:	d805      	bhi.n	8018282 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8018276:	4b0e      	ldr	r3, [pc, #56]	; (80182b0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8018278:	2120      	movs	r1, #32
 801827a:	4a0e      	ldr	r2, [pc, #56]	; (80182b4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801827c:	480e      	ldr	r0, [pc, #56]	; (80182b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801827e:	f00d f825 	bl	80252cc <__assert_func>
 8018282:	682b      	ldr	r3, [r5, #0]
 8018284:	2100      	movs	r1, #0
 8018286:	4628      	mov	r0, r5
 8018288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801828a:	4798      	blx	r3
 801828c:	682b      	ldr	r3, [r5, #0]
 801828e:	4607      	mov	r7, r0
 8018290:	4628      	mov	r0, r5
 8018292:	6a1b      	ldr	r3, [r3, #32]
 8018294:	4798      	blx	r3
 8018296:	1bf3      	subs	r3, r6, r7
 8018298:	b29b      	uxth	r3, r3
 801829a:	fbb3 f2f0 	udiv	r2, r3, r0
 801829e:	fb02 3010 	mls	r0, r2, r0, r3
 80182a2:	b118      	cbz	r0, 80182ac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80182a4:	4b05      	ldr	r3, [pc, #20]	; (80182bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80182a6:	2121      	movs	r1, #33	; 0x21
 80182a8:	4a02      	ldr	r2, [pc, #8]	; (80182b4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80182aa:	e7e7      	b.n	801827c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80182ac:	4620      	mov	r0, r4
 80182ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182b0:	08027504 	.word	0x08027504
 80182b4:	08027672 	.word	0x08027672
 80182b8:	08027519 	.word	0x08027519
 80182bc:	08027547 	.word	0x08027547

080182c0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80182c0:	b538      	push	{r3, r4, r5, lr}
 80182c2:	6803      	ldr	r3, [r0, #0]
 80182c4:	460d      	mov	r5, r1
 80182c6:	4604      	mov	r4, r0
 80182c8:	6a1b      	ldr	r3, [r3, #32]
 80182ca:	4798      	blx	r3
 80182cc:	4285      	cmp	r5, r0
 80182ce:	d905      	bls.n	80182dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80182d0:	4b0c      	ldr	r3, [pc, #48]	; (8018304 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80182d2:	2132      	movs	r1, #50	; 0x32
 80182d4:	4a0c      	ldr	r2, [pc, #48]	; (8018308 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80182d6:	480d      	ldr	r0, [pc, #52]	; (801830c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80182d8:	f00c fff8 	bl	80252cc <__assert_func>
 80182dc:	6823      	ldr	r3, [r4, #0]
 80182de:	4620      	mov	r0, r4
 80182e0:	88a5      	ldrh	r5, [r4, #4]
 80182e2:	69db      	ldr	r3, [r3, #28]
 80182e4:	4798      	blx	r3
 80182e6:	4285      	cmp	r5, r0
 80182e8:	d303      	bcc.n	80182f2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80182ea:	4b09      	ldr	r3, [pc, #36]	; (8018310 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80182ec:	2133      	movs	r1, #51	; 0x33
 80182ee:	4a06      	ldr	r2, [pc, #24]	; (8018308 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80182f0:	e7f1      	b.n	80182d6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80182f2:	6823      	ldr	r3, [r4, #0]
 80182f4:	4620      	mov	r0, r4
 80182f6:	88a1      	ldrh	r1, [r4, #4]
 80182f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182fa:	4798      	blx	r3
 80182fc:	88a3      	ldrh	r3, [r4, #4]
 80182fe:	3301      	adds	r3, #1
 8018300:	80a3      	strh	r3, [r4, #4]
 8018302:	bd38      	pop	{r3, r4, r5, pc}
 8018304:	080275c1 	.word	0x080275c1
 8018308:	080276b5 	.word	0x080276b5
 801830c:	08027519 	.word	0x08027519
 8018310:	080275d8 	.word	0x080275d8

08018314 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8018314:	b570      	push	{r4, r5, r6, lr}
 8018316:	6803      	ldr	r3, [r0, #0]
 8018318:	4616      	mov	r6, r2
 801831a:	4604      	mov	r4, r0
 801831c:	460d      	mov	r5, r1
 801831e:	6a1b      	ldr	r3, [r3, #32]
 8018320:	4798      	blx	r3
 8018322:	4286      	cmp	r6, r0
 8018324:	d905      	bls.n	8018332 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8018326:	4b06      	ldr	r3, [pc, #24]	; (8018340 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8018328:	213c      	movs	r1, #60	; 0x3c
 801832a:	4a06      	ldr	r2, [pc, #24]	; (8018344 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801832c:	4806      	ldr	r0, [pc, #24]	; (8018348 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801832e:	f00c ffcd 	bl	80252cc <__assert_func>
 8018332:	6823      	ldr	r3, [r4, #0]
 8018334:	4629      	mov	r1, r5
 8018336:	4620      	mov	r0, r4
 8018338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801833a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801833e:	4718      	bx	r3
 8018340:	080275c1 	.word	0x080275c1
 8018344:	08027628 	.word	0x08027628
 8018348:	08027519 	.word	0x08027519

0801834c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801834c:	4770      	bx	lr
	...

08018350 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018350:	4a02      	ldr	r2, [pc, #8]	; (801835c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018352:	6002      	str	r2, [r0, #0]
 8018354:	2200      	movs	r2, #0
 8018356:	8082      	strh	r2, [r0, #4]
 8018358:	4770      	bx	lr
 801835a:	bf00      	nop
 801835c:	080275fc 	.word	0x080275fc

08018360 <_ZN8touchgfx9Container13getFirstChildEv>:
 8018360:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018362:	4770      	bx	lr

08018364 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018364:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018366:	2000      	movs	r0, #0
 8018368:	b12b      	cbz	r3, 8018376 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801836a:	b920      	cbnz	r0, 8018376 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801836c:	1a5a      	subs	r2, r3, r1
 801836e:	699b      	ldr	r3, [r3, #24]
 8018370:	4250      	negs	r0, r2
 8018372:	4150      	adcs	r0, r2
 8018374:	e7f8      	b.n	8018368 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8018376:	4770      	bx	lr

08018378 <_ZN8touchgfx9Container9removeAllEv>:
 8018378:	2200      	movs	r2, #0
 801837a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801837c:	b123      	cbz	r3, 8018388 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801837e:	6999      	ldr	r1, [r3, #24]
 8018380:	6281      	str	r1, [r0, #40]	; 0x28
 8018382:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018386:	e7f8      	b.n	801837a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8018388:	4770      	bx	lr

0801838a <_ZN8touchgfx9Container6unlinkEv>:
 801838a:	2300      	movs	r3, #0
 801838c:	6283      	str	r3, [r0, #40]	; 0x28
 801838e:	4770      	bx	lr

08018390 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018394:	461f      	mov	r7, r3
 8018396:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801839a:	460d      	mov	r5, r1
 801839c:	4616      	mov	r6, r2
 801839e:	b103      	cbz	r3, 80183a2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80183a0:	6038      	str	r0, [r7, #0]
 80183a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80183a4:	b314      	cbz	r4, 80183ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80183a6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80183aa:	b1eb      	cbz	r3, 80183e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80183ac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80183b0:	428d      	cmp	r5, r1
 80183b2:	db19      	blt.n	80183e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80183b4:	b289      	uxth	r1, r1
 80183b6:	8923      	ldrh	r3, [r4, #8]
 80183b8:	440b      	add	r3, r1
 80183ba:	b21b      	sxth	r3, r3
 80183bc:	429d      	cmp	r5, r3
 80183be:	da13      	bge.n	80183e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80183c0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80183c4:	4296      	cmp	r6, r2
 80183c6:	db0f      	blt.n	80183e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80183c8:	b292      	uxth	r2, r2
 80183ca:	8963      	ldrh	r3, [r4, #10]
 80183cc:	4413      	add	r3, r2
 80183ce:	b21b      	sxth	r3, r3
 80183d0:	429e      	cmp	r6, r3
 80183d2:	da09      	bge.n	80183e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80183d4:	6823      	ldr	r3, [r4, #0]
 80183d6:	1ab2      	subs	r2, r6, r2
 80183d8:	1a69      	subs	r1, r5, r1
 80183da:	4620      	mov	r0, r4
 80183dc:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80183e0:	b212      	sxth	r2, r2
 80183e2:	463b      	mov	r3, r7
 80183e4:	b209      	sxth	r1, r1
 80183e6:	47c0      	blx	r8
 80183e8:	69a4      	ldr	r4, [r4, #24]
 80183ea:	e7db      	b.n	80183a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80183ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080183f0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80183f0:	2200      	movs	r2, #0
 80183f2:	8002      	strh	r2, [r0, #0]
 80183f4:	8042      	strh	r2, [r0, #2]
 80183f6:	8082      	strh	r2, [r0, #4]
 80183f8:	80c2      	strh	r2, [r0, #6]
 80183fa:	4770      	bx	lr

080183fc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80183fc:	b570      	push	{r4, r5, r6, lr}
 80183fe:	460d      	mov	r5, r1
 8018400:	4616      	mov	r6, r2
 8018402:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018404:	b13c      	cbz	r4, 8018416 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018406:	6823      	ldr	r3, [r4, #0]
 8018408:	4620      	mov	r0, r4
 801840a:	4632      	mov	r2, r6
 801840c:	4629      	mov	r1, r5
 801840e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018410:	4798      	blx	r3
 8018412:	69a4      	ldr	r4, [r4, #24]
 8018414:	e7f6      	b.n	8018404 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018416:	bd70      	pop	{r4, r5, r6, pc}

08018418 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018418:	b538      	push	{r3, r4, r5, lr}
 801841a:	460d      	mov	r5, r1
 801841c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801841e:	b134      	cbz	r4, 801842e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018420:	682b      	ldr	r3, [r5, #0]
 8018422:	4621      	mov	r1, r4
 8018424:	4628      	mov	r0, r5
 8018426:	689b      	ldr	r3, [r3, #8]
 8018428:	4798      	blx	r3
 801842a:	69a4      	ldr	r4, [r4, #24]
 801842c:	e7f7      	b.n	801841e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801842e:	bd38      	pop	{r3, r4, r5, pc}

08018430 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018430:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018432:	b19b      	cbz	r3, 801845c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018434:	428b      	cmp	r3, r1
 8018436:	d109      	bne.n	801844c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8018438:	699a      	ldr	r2, [r3, #24]
 801843a:	2100      	movs	r1, #0
 801843c:	6159      	str	r1, [r3, #20]
 801843e:	6282      	str	r2, [r0, #40]	; 0x28
 8018440:	b902      	cbnz	r2, 8018444 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018442:	4770      	bx	lr
 8018444:	6199      	str	r1, [r3, #24]
 8018446:	4770      	bx	lr
 8018448:	4613      	mov	r3, r2
 801844a:	b13a      	cbz	r2, 801845c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801844c:	699a      	ldr	r2, [r3, #24]
 801844e:	428a      	cmp	r2, r1
 8018450:	d1fa      	bne.n	8018448 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018452:	698a      	ldr	r2, [r1, #24]
 8018454:	619a      	str	r2, [r3, #24]
 8018456:	2300      	movs	r3, #0
 8018458:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801845c:	4770      	bx	lr

0801845e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801845e:	b410      	push	{r4}
 8018460:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018462:	4604      	mov	r4, r0
 8018464:	b92b      	cbnz	r3, 8018472 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8018466:	6803      	ldr	r3, [r0, #0]
 8018468:	4611      	mov	r1, r2
 801846a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801846e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018470:	4718      	bx	r3
 8018472:	b941      	cbnz	r1, 8018486 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018474:	6193      	str	r3, [r2, #24]
 8018476:	6282      	str	r2, [r0, #40]	; 0x28
 8018478:	6154      	str	r4, [r2, #20]
 801847a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801847e:	4770      	bx	lr
 8018480:	4603      	mov	r3, r0
 8018482:	2800      	cmp	r0, #0
 8018484:	d0f9      	beq.n	801847a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018486:	4299      	cmp	r1, r3
 8018488:	6998      	ldr	r0, [r3, #24]
 801848a:	d1f9      	bne.n	8018480 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801848c:	6190      	str	r0, [r2, #24]
 801848e:	618a      	str	r2, [r1, #24]
 8018490:	e7f2      	b.n	8018478 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08018494 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018494:	4288      	cmp	r0, r1
 8018496:	b508      	push	{r3, lr}
 8018498:	d105      	bne.n	80184a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801849a:	4b11      	ldr	r3, [pc, #68]	; (80184e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801849c:	2123      	movs	r1, #35	; 0x23
 801849e:	4a11      	ldr	r2, [pc, #68]	; (80184e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80184a0:	4811      	ldr	r0, [pc, #68]	; (80184e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80184a2:	f00c ff13 	bl	80252cc <__assert_func>
 80184a6:	694b      	ldr	r3, [r1, #20]
 80184a8:	b11b      	cbz	r3, 80184b2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80184aa:	4b10      	ldr	r3, [pc, #64]	; (80184ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80184ac:	2124      	movs	r1, #36	; 0x24
 80184ae:	4a0d      	ldr	r2, [pc, #52]	; (80184e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80184b0:	e7f6      	b.n	80184a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80184b2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80184b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80184b8:	b913      	cbnz	r3, 80184c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80184ba:	6281      	str	r1, [r0, #40]	; 0x28
 80184bc:	bd08      	pop	{r3, pc}
 80184be:	4613      	mov	r3, r2
 80184c0:	699a      	ldr	r2, [r3, #24]
 80184c2:	b12a      	cbz	r2, 80184d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80184c4:	428b      	cmp	r3, r1
 80184c6:	d1fa      	bne.n	80184be <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80184c8:	4b09      	ldr	r3, [pc, #36]	; (80184f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80184ca:	2135      	movs	r1, #53	; 0x35
 80184cc:	4a05      	ldr	r2, [pc, #20]	; (80184e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80184ce:	e7e7      	b.n	80184a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80184d0:	428b      	cmp	r3, r1
 80184d2:	d103      	bne.n	80184dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80184d4:	4b06      	ldr	r3, [pc, #24]	; (80184f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80184d6:	2138      	movs	r1, #56	; 0x38
 80184d8:	4a02      	ldr	r2, [pc, #8]	; (80184e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80184da:	e7e1      	b.n	80184a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80184dc:	6199      	str	r1, [r3, #24]
 80184de:	e7ed      	b.n	80184bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80184e0:	080276f3 	.word	0x080276f3
 80184e4:	08027844 	.word	0x08027844
 80184e8:	0802771f 	.word	0x0802771f
 80184ec:	08027752 	.word	0x08027752
 80184f0:	08027788 	.word	0x08027788

080184f4 <_ZN8touchgfx4RectaNERKS0_>:
 80184f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80184f8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80184fc:	888c      	ldrh	r4, [r1, #4]
 80184fe:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018502:	443c      	add	r4, r7
 8018504:	b2a4      	uxth	r4, r4
 8018506:	fa0f f884 	sxth.w	r8, r4
 801850a:	45c1      	cmp	r9, r8
 801850c:	da2f      	bge.n	801856e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801850e:	8882      	ldrh	r2, [r0, #4]
 8018510:	444a      	add	r2, r9
 8018512:	b292      	uxth	r2, r2
 8018514:	fa0f fe82 	sxth.w	lr, r2
 8018518:	4577      	cmp	r7, lr
 801851a:	da28      	bge.n	801856e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801851c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018520:	88cb      	ldrh	r3, [r1, #6]
 8018522:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018526:	442b      	add	r3, r5
 8018528:	b21b      	sxth	r3, r3
 801852a:	429e      	cmp	r6, r3
 801852c:	da1f      	bge.n	801856e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801852e:	88c3      	ldrh	r3, [r0, #6]
 8018530:	4433      	add	r3, r6
 8018532:	b29b      	uxth	r3, r3
 8018534:	fa0f fc83 	sxth.w	ip, r3
 8018538:	4565      	cmp	r5, ip
 801853a:	da18      	bge.n	801856e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801853c:	454f      	cmp	r7, r9
 801853e:	bfb8      	it	lt
 8018540:	464f      	movlt	r7, r9
 8018542:	42b5      	cmp	r5, r6
 8018544:	bfb8      	it	lt
 8018546:	4635      	movlt	r5, r6
 8018548:	45f0      	cmp	r8, lr
 801854a:	bfd8      	it	le
 801854c:	4622      	movle	r2, r4
 801854e:	1bd2      	subs	r2, r2, r7
 8018550:	8082      	strh	r2, [r0, #4]
 8018552:	884a      	ldrh	r2, [r1, #2]
 8018554:	88c9      	ldrh	r1, [r1, #6]
 8018556:	8007      	strh	r7, [r0, #0]
 8018558:	440a      	add	r2, r1
 801855a:	8045      	strh	r5, [r0, #2]
 801855c:	b292      	uxth	r2, r2
 801855e:	b211      	sxth	r1, r2
 8018560:	458c      	cmp	ip, r1
 8018562:	bfa8      	it	ge
 8018564:	4613      	movge	r3, r2
 8018566:	1b5b      	subs	r3, r3, r5
 8018568:	80c3      	strh	r3, [r0, #6]
 801856a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801856e:	2300      	movs	r3, #0
 8018570:	8003      	strh	r3, [r0, #0]
 8018572:	8043      	strh	r3, [r0, #2]
 8018574:	8083      	strh	r3, [r0, #4]
 8018576:	80c3      	strh	r3, [r0, #6]
 8018578:	e7f7      	b.n	801856a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801857a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801857a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801857e:	2b00      	cmp	r3, #0
 8018580:	dd06      	ble.n	8018590 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8018582:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018586:	2800      	cmp	r0, #0
 8018588:	bfcc      	ite	gt
 801858a:	2000      	movgt	r0, #0
 801858c:	2001      	movle	r0, #1
 801858e:	4770      	bx	lr
 8018590:	2001      	movs	r0, #1
 8018592:	4770      	bx	lr

08018594 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018598:	2300      	movs	r3, #0
 801859a:	4604      	mov	r4, r0
 801859c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801859e:	8003      	strh	r3, [r0, #0]
 80185a0:	8043      	strh	r3, [r0, #2]
 80185a2:	8083      	strh	r3, [r0, #4]
 80185a4:	80c3      	strh	r3, [r0, #6]
 80185a6:	2d00      	cmp	r5, #0
 80185a8:	d040      	beq.n	801862c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80185aa:	1d28      	adds	r0, r5, #4
 80185ac:	f7ff ffe5 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 80185b0:	b988      	cbnz	r0, 80185d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80185b2:	4620      	mov	r0, r4
 80185b4:	f7ff ffe1 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 80185b8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80185bc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80185c0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80185c4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80185c8:	b138      	cbz	r0, 80185da <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80185ca:	8022      	strh	r2, [r4, #0]
 80185cc:	8063      	strh	r3, [r4, #2]
 80185ce:	f8a4 e004 	strh.w	lr, [r4, #4]
 80185d2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80185d6:	69ad      	ldr	r5, [r5, #24]
 80185d8:	e7e5      	b.n	80185a6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80185da:	f9b4 0000 	ldrsh.w	r0, [r4]
 80185de:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80185e2:	4290      	cmp	r0, r2
 80185e4:	4607      	mov	r7, r0
 80185e6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80185ea:	460e      	mov	r6, r1
 80185ec:	bfa8      	it	ge
 80185ee:	4617      	movge	r7, r2
 80185f0:	4299      	cmp	r1, r3
 80185f2:	4472      	add	r2, lr
 80185f4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80185f8:	bfa8      	it	ge
 80185fa:	461e      	movge	r6, r3
 80185fc:	4440      	add	r0, r8
 80185fe:	4471      	add	r1, lr
 8018600:	4463      	add	r3, ip
 8018602:	b200      	sxth	r0, r0
 8018604:	8027      	strh	r7, [r4, #0]
 8018606:	b212      	sxth	r2, r2
 8018608:	8066      	strh	r6, [r4, #2]
 801860a:	b209      	sxth	r1, r1
 801860c:	b21b      	sxth	r3, r3
 801860e:	4290      	cmp	r0, r2
 8018610:	bfac      	ite	ge
 8018612:	ebc7 0200 	rsbge	r2, r7, r0
 8018616:	ebc7 0202 	rsblt	r2, r7, r2
 801861a:	4299      	cmp	r1, r3
 801861c:	bfac      	ite	ge
 801861e:	ebc6 0301 	rsbge	r3, r6, r1
 8018622:	ebc6 0303 	rsblt	r3, r6, r3
 8018626:	80a2      	strh	r2, [r4, #4]
 8018628:	80e3      	strh	r3, [r4, #6]
 801862a:	e7d4      	b.n	80185d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801862c:	4620      	mov	r0, r4
 801862e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018632 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8018632:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018636:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801863a:	b383      	cbz	r3, 801869e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801863c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801863e:	b374      	cbz	r4, 801869e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018640:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018644:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8018648:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801864c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8018650:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018654:	b303      	cbz	r3, 8018698 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018656:	4668      	mov	r0, sp
 8018658:	1d21      	adds	r1, r4, #4
 801865a:	f8ad 5000 	strh.w	r5, [sp]
 801865e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018662:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018666:	f8ad 8006 	strh.w	r8, [sp, #6]
 801866a:	f7ff ff43 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801866e:	4668      	mov	r0, sp
 8018670:	f7ff ff83 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018674:	b980      	cbnz	r0, 8018698 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018676:	f8bd 3000 	ldrh.w	r3, [sp]
 801867a:	4669      	mov	r1, sp
 801867c:	88a2      	ldrh	r2, [r4, #4]
 801867e:	4620      	mov	r0, r4
 8018680:	1a9b      	subs	r3, r3, r2
 8018682:	88e2      	ldrh	r2, [r4, #6]
 8018684:	f8ad 3000 	strh.w	r3, [sp]
 8018688:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801868c:	1a9b      	subs	r3, r3, r2
 801868e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018692:	6823      	ldr	r3, [r4, #0]
 8018694:	689b      	ldr	r3, [r3, #8]
 8018696:	4798      	blx	r3
 8018698:	69a4      	ldr	r4, [r4, #24]
 801869a:	2c00      	cmp	r4, #0
 801869c:	d1d8      	bne.n	8018650 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801869e:	b002      	add	sp, #8
 80186a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080186a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80186a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80186a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80186aa:	460d      	mov	r5, r1
 80186ac:	4616      	mov	r6, r2
 80186ae:	b323      	cbz	r3, 80186fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80186b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80186b2:	b314      	cbz	r4, 80186fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80186b4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80186b8:	b1eb      	cbz	r3, 80186f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80186ba:	6828      	ldr	r0, [r5, #0]
 80186bc:	466b      	mov	r3, sp
 80186be:	6869      	ldr	r1, [r5, #4]
 80186c0:	c303      	stmia	r3!, {r0, r1}
 80186c2:	4668      	mov	r0, sp
 80186c4:	1d21      	adds	r1, r4, #4
 80186c6:	f7ff ff15 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 80186ca:	4668      	mov	r0, sp
 80186cc:	f7ff ff55 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 80186d0:	b988      	cbnz	r0, 80186f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80186d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80186d6:	4669      	mov	r1, sp
 80186d8:	88a2      	ldrh	r2, [r4, #4]
 80186da:	4620      	mov	r0, r4
 80186dc:	1a9b      	subs	r3, r3, r2
 80186de:	88e2      	ldrh	r2, [r4, #6]
 80186e0:	f8ad 3000 	strh.w	r3, [sp]
 80186e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80186e8:	1a9b      	subs	r3, r3, r2
 80186ea:	4632      	mov	r2, r6
 80186ec:	f8ad 3002 	strh.w	r3, [sp, #2]
 80186f0:	6823      	ldr	r3, [r4, #0]
 80186f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186f4:	4798      	blx	r3
 80186f6:	69a4      	ldr	r4, [r4, #24]
 80186f8:	e7db      	b.n	80186b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80186fa:	b002      	add	sp, #8
 80186fc:	bd70      	pop	{r4, r5, r6, pc}

080186fe <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80186fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018702:	4770      	bx	lr

08018704 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8018704:	4770      	bx	lr

08018706 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8018706:	4770      	bx	lr

08018708 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018708:	6803      	ldr	r3, [r0, #0]
 801870a:	b513      	push	{r0, r1, r4, lr}
 801870c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8018710:	2300      	movs	r3, #0
 8018712:	e9cd 3300 	strd	r3, r3, [sp]
 8018716:	466b      	mov	r3, sp
 8018718:	47a0      	blx	r4
 801871a:	b002      	add	sp, #8
 801871c:	bd10      	pop	{r4, pc}

0801871e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801871e:	2301      	movs	r3, #1
 8018720:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018724:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018728:	4770      	bx	lr

0801872a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801872a:	2301      	movs	r3, #1
 801872c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018730:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018734:	4770      	bx	lr

08018736 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018736:	6843      	ldr	r3, [r0, #4]
 8018738:	2201      	movs	r2, #1
 801873a:	725a      	strb	r2, [r3, #9]
 801873c:	6840      	ldr	r0, [r0, #4]
 801873e:	6803      	ldr	r3, [r0, #0]
 8018740:	691b      	ldr	r3, [r3, #16]
 8018742:	4718      	bx	r3

08018744 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018744:	6840      	ldr	r0, [r0, #4]
 8018746:	6803      	ldr	r3, [r0, #0]
 8018748:	689b      	ldr	r3, [r3, #8]
 801874a:	4718      	bx	r3

0801874c <_ZN8touchgfx3HAL10beginFrameEv>:
 801874c:	4b04      	ldr	r3, [pc, #16]	; (8018760 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801874e:	781b      	ldrb	r3, [r3, #0]
 8018750:	b123      	cbz	r3, 801875c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018752:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018756:	f080 0001 	eor.w	r0, r0, #1
 801875a:	4770      	bx	lr
 801875c:	2001      	movs	r0, #1
 801875e:	4770      	bx	lr
 8018760:	200094d4 	.word	0x200094d4

08018764 <_ZN8touchgfx3HAL8endFrameEv>:
 8018764:	b510      	push	{r4, lr}
 8018766:	4604      	mov	r4, r0
 8018768:	6840      	ldr	r0, [r0, #4]
 801876a:	6803      	ldr	r3, [r0, #0]
 801876c:	689b      	ldr	r3, [r3, #8]
 801876e:	4798      	blx	r3
 8018770:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018774:	b113      	cbz	r3, 801877c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018776:	2301      	movs	r3, #1
 8018778:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801877c:	bd10      	pop	{r4, pc}

0801877e <_ZN8touchgfx3HAL9taskEntryEv>:
 801877e:	b508      	push	{r3, lr}
 8018780:	6803      	ldr	r3, [r0, #0]
 8018782:	4604      	mov	r4, r0
 8018784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018786:	4798      	blx	r3
 8018788:	6823      	ldr	r3, [r4, #0]
 801878a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801878c:	4620      	mov	r0, r4
 801878e:	4798      	blx	r3
 8018790:	f7fd ff12 	bl	80165b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018794:	6823      	ldr	r3, [r4, #0]
 8018796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018798:	e7f8      	b.n	801878c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801879c <_ZN8touchgfx3HAL4tickEv>:
 801879c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801879e:	6803      	ldr	r3, [r0, #0]
 80187a0:	4604      	mov	r4, r0
 80187a2:	4d5c      	ldr	r5, [pc, #368]	; (8018914 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80187a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80187a8:	4798      	blx	r3
 80187aa:	2800      	cmp	r0, #0
 80187ac:	f000 8097 	beq.w	80188de <_ZN8touchgfx3HAL4tickEv+0x142>
 80187b0:	2001      	movs	r0, #1
 80187b2:	2600      	movs	r6, #0
 80187b4:	f7fd fc78 	bl	80160a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80187b8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80187bc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80187c0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80187c4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80187c8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80187cc:	b133      	cbz	r3, 80187dc <_ZN8touchgfx3HAL4tickEv+0x40>
 80187ce:	6823      	ldr	r3, [r4, #0]
 80187d0:	4620      	mov	r0, r4
 80187d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80187d6:	4798      	blx	r3
 80187d8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80187dc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80187e0:	2601      	movs	r6, #1
 80187e2:	6862      	ldr	r2, [r4, #4]
 80187e4:	f083 0301 	eor.w	r3, r3, #1
 80187e8:	702e      	strb	r6, [r5, #0]
 80187ea:	7253      	strb	r3, [r2, #9]
 80187ec:	f001 fe72 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 80187f0:	6803      	ldr	r3, [r0, #0]
 80187f2:	4631      	mov	r1, r6
 80187f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187f6:	4798      	blx	r3
 80187f8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80187fc:	b90b      	cbnz	r3, 8018802 <_ZN8touchgfx3HAL4tickEv+0x66>
 80187fe:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018802:	f001 fe67 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 8018806:	6803      	ldr	r3, [r0, #0]
 8018808:	695b      	ldr	r3, [r3, #20]
 801880a:	4798      	blx	r3
 801880c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801880e:	6803      	ldr	r3, [r0, #0]
 8018810:	691b      	ldr	r3, [r3, #16]
 8018812:	4798      	blx	r3
 8018814:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018818:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801881c:	3b01      	subs	r3, #1
 801881e:	b2db      	uxtb	r3, r3
 8018820:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018824:	b10a      	cbz	r2, 801882a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8018826:	2b00      	cmp	r3, #0
 8018828:	d1eb      	bne.n	8018802 <_ZN8touchgfx3HAL4tickEv+0x66>
 801882a:	4a3b      	ldr	r2, [pc, #236]	; (8018918 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801882c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018830:	7813      	ldrb	r3, [r2, #0]
 8018832:	3301      	adds	r3, #1
 8018834:	b25b      	sxtb	r3, r3
 8018836:	4299      	cmp	r1, r3
 8018838:	7013      	strb	r3, [r2, #0]
 801883a:	dc10      	bgt.n	801885e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801883c:	2300      	movs	r3, #0
 801883e:	68e0      	ldr	r0, [r4, #12]
 8018840:	a902      	add	r1, sp, #8
 8018842:	7013      	strb	r3, [r2, #0]
 8018844:	aa03      	add	r2, sp, #12
 8018846:	6803      	ldr	r3, [r0, #0]
 8018848:	68db      	ldr	r3, [r3, #12]
 801884a:	4798      	blx	r3
 801884c:	6823      	ldr	r3, [r4, #0]
 801884e:	2800      	cmp	r0, #0
 8018850:	d051      	beq.n	80188f6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8018852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018856:	4620      	mov	r0, r4
 8018858:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801885c:	4798      	blx	r3
 801885e:	2300      	movs	r3, #0
 8018860:	6960      	ldr	r0, [r4, #20]
 8018862:	f88d 3007 	strb.w	r3, [sp, #7]
 8018866:	b158      	cbz	r0, 8018880 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018868:	6803      	ldr	r3, [r0, #0]
 801886a:	f10d 0107 	add.w	r1, sp, #7
 801886e:	68db      	ldr	r3, [r3, #12]
 8018870:	4798      	blx	r3
 8018872:	b128      	cbz	r0, 8018880 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018876:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801887a:	6803      	ldr	r3, [r0, #0]
 801887c:	68db      	ldr	r3, [r3, #12]
 801887e:	4798      	blx	r3
 8018880:	f104 001c 	add.w	r0, r4, #28
 8018884:	f00c fc3a 	bl	80250fc <_ZN8touchgfx8Gestures4tickEv>
 8018888:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801888c:	b30b      	cbz	r3, 80188d2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801888e:	6920      	ldr	r0, [r4, #16]
 8018890:	6803      	ldr	r3, [r0, #0]
 8018892:	691b      	ldr	r3, [r3, #16]
 8018894:	4798      	blx	r3
 8018896:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018898:	4606      	mov	r6, r0
 801889a:	b903      	cbnz	r3, 801889e <_ZN8touchgfx3HAL4tickEv+0x102>
 801889c:	6720      	str	r0, [r4, #112]	; 0x70
 801889e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80188a0:	4a1e      	ldr	r2, [pc, #120]	; (801891c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80188a2:	1af3      	subs	r3, r6, r3
 80188a4:	4293      	cmp	r3, r2
 80188a6:	d914      	bls.n	80188d2 <_ZN8touchgfx3HAL4tickEv+0x136>
 80188a8:	6920      	ldr	r0, [r4, #16]
 80188aa:	6803      	ldr	r3, [r0, #0]
 80188ac:	699b      	ldr	r3, [r3, #24]
 80188ae:	4798      	blx	r3
 80188b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80188b2:	2264      	movs	r2, #100	; 0x64
 80188b4:	1af3      	subs	r3, r6, r3
 80188b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80188ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80188be:	2800      	cmp	r0, #0
 80188c0:	dc1e      	bgt.n	8018900 <_ZN8touchgfx3HAL4tickEv+0x164>
 80188c2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80188c6:	6920      	ldr	r0, [r4, #16]
 80188c8:	2100      	movs	r1, #0
 80188ca:	6803      	ldr	r3, [r0, #0]
 80188cc:	69db      	ldr	r3, [r3, #28]
 80188ce:	4798      	blx	r3
 80188d0:	6726      	str	r6, [r4, #112]	; 0x70
 80188d2:	f001 fdff 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 80188d6:	6803      	ldr	r3, [r0, #0]
 80188d8:	2100      	movs	r1, #0
 80188da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188dc:	4798      	blx	r3
 80188de:	6823      	ldr	r3, [r4, #0]
 80188e0:	4620      	mov	r0, r4
 80188e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80188e6:	4798      	blx	r3
 80188e8:	2001      	movs	r0, #1
 80188ea:	f7fd fbe8 	bl	80160be <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80188ee:	2300      	movs	r3, #0
 80188f0:	702b      	strb	r3, [r5, #0]
 80188f2:	b004      	add	sp, #16
 80188f4:	bd70      	pop	{r4, r5, r6, pc}
 80188f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80188fa:	4620      	mov	r0, r4
 80188fc:	4798      	blx	r3
 80188fe:	e7ae      	b.n	801885e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018900:	2863      	cmp	r0, #99	; 0x63
 8018902:	bfcb      	itete	gt
 8018904:	2300      	movgt	r3, #0
 8018906:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801890a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801890e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018912:	e7d8      	b.n	80188c6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018914:	200094dc 	.word	0x200094dc
 8018918:	200094dd 	.word	0x200094dd
 801891c:	05f5e100 	.word	0x05f5e100

08018920 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018920:	f7fd be1a 	b.w	8016558 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018924 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018924:	6581      	str	r1, [r0, #88]	; 0x58
 8018926:	301c      	adds	r0, #28
 8018928:	f00c bbe6 	b.w	80250f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801892c <_ZN8touchgfx3HAL5touchEll>:
 801892c:	b530      	push	{r4, r5, lr}
 801892e:	b087      	sub	sp, #28
 8018930:	4604      	mov	r4, r0
 8018932:	a804      	add	r0, sp, #16
 8018934:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018938:	f001 fb96 	bl	801a068 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801893c:	9b04      	ldr	r3, [sp, #16]
 801893e:	a906      	add	r1, sp, #24
 8018940:	a803      	add	r0, sp, #12
 8018942:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018946:	9b05      	ldr	r3, [sp, #20]
 8018948:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801894c:	f001 fbca 	bl	801a0e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018950:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018954:	f104 001c 	add.w	r0, r4, #28
 8018958:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801895c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018960:	b189      	cbz	r1, 8018986 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018962:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8018966:	9300      	str	r3, [sp, #0]
 8018968:	4613      	mov	r3, r2
 801896a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801896e:	462a      	mov	r2, r5
 8018970:	f00c fbd2 	bl	8025118 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018974:	b128      	cbz	r0, 8018982 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018976:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801897a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801897c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018980:	6623      	str	r3, [r4, #96]	; 0x60
 8018982:	b007      	add	sp, #28
 8018984:	bd30      	pop	{r4, r5, pc}
 8018986:	f00c fc0b 	bl	80251a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801898a:	2301      	movs	r3, #1
 801898c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018990:	e7f1      	b.n	8018976 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018992 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018992:	b570      	push	{r4, r5, r6, lr}
 8018994:	2b00      	cmp	r3, #0
 8018996:	d050      	beq.n	8018a3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018998:	ea81 0002 	eor.w	r0, r1, r2
 801899c:	07c6      	lsls	r6, r0, #31
 801899e:	d508      	bpl.n	80189b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80189a0:	3a01      	subs	r2, #1
 80189a2:	18cc      	adds	r4, r1, r3
 80189a4:	42a1      	cmp	r1, r4
 80189a6:	d048      	beq.n	8018a3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80189a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80189ac:	f801 0b01 	strb.w	r0, [r1], #1
 80189b0:	e7f8      	b.n	80189a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80189b2:	07d5      	lsls	r5, r2, #31
 80189b4:	bf42      	ittt	mi
 80189b6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80189ba:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80189be:	f801 0b01 	strbmi.w	r0, [r1], #1
 80189c2:	2b01      	cmp	r3, #1
 80189c4:	d915      	bls.n	80189f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80189c6:	ea82 0001 	eor.w	r0, r2, r1
 80189ca:	0784      	lsls	r4, r0, #30
 80189cc:	d02d      	beq.n	8018a2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80189ce:	1e94      	subs	r4, r2, #2
 80189d0:	4608      	mov	r0, r1
 80189d2:	18ce      	adds	r6, r1, r3
 80189d4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80189d8:	f820 5b02 	strh.w	r5, [r0], #2
 80189dc:	1a35      	subs	r5, r6, r0
 80189de:	2d01      	cmp	r5, #1
 80189e0:	d8f8      	bhi.n	80189d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80189e2:	1e98      	subs	r0, r3, #2
 80189e4:	f003 0301 	and.w	r3, r3, #1
 80189e8:	f020 0001 	bic.w	r0, r0, #1
 80189ec:	3002      	adds	r0, #2
 80189ee:	4401      	add	r1, r0
 80189f0:	4402      	add	r2, r0
 80189f2:	1f14      	subs	r4, r2, #4
 80189f4:	4608      	mov	r0, r1
 80189f6:	18ce      	adds	r6, r1, r3
 80189f8:	1a35      	subs	r5, r6, r0
 80189fa:	2d03      	cmp	r5, #3
 80189fc:	d810      	bhi.n	8018a20 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80189fe:	089c      	lsrs	r4, r3, #2
 8018a00:	00a0      	lsls	r0, r4, #2
 8018a02:	4401      	add	r1, r0
 8018a04:	3801      	subs	r0, #1
 8018a06:	4402      	add	r2, r0
 8018a08:	f06f 0003 	mvn.w	r0, #3
 8018a0c:	fb00 3404 	mla	r4, r0, r4, r3
 8018a10:	440c      	add	r4, r1
 8018a12:	42a1      	cmp	r1, r4
 8018a14:	d011      	beq.n	8018a3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018a16:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018a1a:	f801 3b01 	strb.w	r3, [r1], #1
 8018a1e:	e7f8      	b.n	8018a12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8018a20:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8018a24:	f840 5b04 	str.w	r5, [r0], #4
 8018a28:	e7e6      	b.n	80189f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8018a2a:	0790      	lsls	r0, r2, #30
 8018a2c:	d0e1      	beq.n	80189f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018a2e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018a32:	3b02      	subs	r3, #2
 8018a34:	f821 0b02 	strh.w	r0, [r1], #2
 8018a38:	e7db      	b.n	80189f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018a3a:	2001      	movs	r0, #1
 8018a3c:	bd70      	pop	{r4, r5, r6, pc}

08018a3e <_ZN8touchgfx3HAL7noTouchEv>:
 8018a3e:	b510      	push	{r4, lr}
 8018a40:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018a44:	4604      	mov	r4, r0
 8018a46:	b153      	cbz	r3, 8018a5e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018a48:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018a4c:	2101      	movs	r1, #1
 8018a4e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018a52:	301c      	adds	r0, #28
 8018a54:	f00c fba4 	bl	80251a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018a58:	2300      	movs	r3, #0
 8018a5a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018a5e:	bd10      	pop	{r4, pc}

08018a60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a64:	4604      	mov	r4, r0
 8018a66:	6980      	ldr	r0, [r0, #24]
 8018a68:	b085      	sub	sp, #20
 8018a6a:	460f      	mov	r7, r1
 8018a6c:	4690      	mov	r8, r2
 8018a6e:	4699      	mov	r9, r3
 8018a70:	b930      	cbnz	r0, 8018a80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018a72:	4b1c      	ldr	r3, [pc, #112]	; (8018ae4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8018a74:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8018a78:	4a1b      	ldr	r2, [pc, #108]	; (8018ae8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018a7a:	481c      	ldr	r0, [pc, #112]	; (8018aec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8018a7c:	f00c fc26 	bl	80252cc <__assert_func>
 8018a80:	ad04      	add	r5, sp, #16
 8018a82:	2600      	movs	r6, #0
 8018a84:	f845 6d04 	str.w	r6, [r5, #-4]!
 8018a88:	6806      	ldr	r6, [r0, #0]
 8018a8a:	9501      	str	r5, [sp, #4]
 8018a8c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018a90:	9500      	str	r5, [sp, #0]
 8018a92:	6835      	ldr	r5, [r6, #0]
 8018a94:	47a8      	blx	r5
 8018a96:	4d16      	ldr	r5, [pc, #88]	; (8018af0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018a98:	4606      	mov	r6, r0
 8018a9a:	f8a5 9000 	strh.w	r9, [r5]
 8018a9e:	f7fb fe5b 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8018aa2:	6803      	ldr	r3, [r0, #0]
 8018aa4:	6a1b      	ldr	r3, [r3, #32]
 8018aa6:	4798      	blx	r3
 8018aa8:	2801      	cmp	r0, #1
 8018aaa:	d012      	beq.n	8018ad2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8018aac:	d306      	bcc.n	8018abc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8018aae:	280d      	cmp	r0, #13
 8018ab0:	d80b      	bhi.n	8018aca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018ab2:	4b10      	ldr	r3, [pc, #64]	; (8018af4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018ab4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018ab8:	4a0b      	ldr	r2, [pc, #44]	; (8018ae8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018aba:	e7de      	b.n	8018a7a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018abc:	882b      	ldrh	r3, [r5, #0]
 8018abe:	fb08 7203 	mla	r2, r8, r3, r7
 8018ac2:	9b03      	ldr	r3, [sp, #12]
 8018ac4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018ac8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018aca:	4630      	mov	r0, r6
 8018acc:	b005      	add	sp, #20
 8018ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ad2:	882a      	ldrh	r2, [r5, #0]
 8018ad4:	9b03      	ldr	r3, [sp, #12]
 8018ad6:	fb08 7202 	mla	r2, r8, r2, r7
 8018ada:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ade:	1a9a      	subs	r2, r3, r2
 8018ae0:	63e2      	str	r2, [r4, #60]	; 0x3c
 8018ae2:	e7f2      	b.n	8018aca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018ae4:	080278ed 	.word	0x080278ed
 8018ae8:	08027c06 	.word	0x08027c06
 8018aec:	08027932 	.word	0x08027932
 8018af0:	200094d0 	.word	0x200094d0
 8018af4:	08027958 	.word	0x08027958

08018af8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8018af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018afc:	4698      	mov	r8, r3
 8018afe:	6803      	ldr	r3, [r0, #0]
 8018b00:	b087      	sub	sp, #28
 8018b02:	460e      	mov	r6, r1
 8018b04:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8018b06:	4617      	mov	r7, r2
 8018b08:	4b0d      	ldr	r3, [pc, #52]	; (8018b40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8018b0a:	4604      	mov	r4, r0
 8018b0c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018b10:	f7fb fe22 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8018b14:	6803      	ldr	r3, [r0, #0]
 8018b16:	6a1b      	ldr	r3, [r3, #32]
 8018b18:	4798      	blx	r3
 8018b1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018b1e:	463a      	mov	r2, r7
 8018b20:	4631      	mov	r1, r6
 8018b22:	9302      	str	r3, [sp, #8]
 8018b24:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018b28:	9301      	str	r3, [sp, #4]
 8018b2a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018b2e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8018b32:	9300      	str	r3, [sp, #0]
 8018b34:	4620      	mov	r0, r4
 8018b36:	4643      	mov	r3, r8
 8018b38:	47a8      	blx	r5
 8018b3a:	b007      	add	sp, #28
 8018b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b40:	200094d0 	.word	0x200094d0

08018b44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b48:	4604      	mov	r4, r0
 8018b4a:	b08b      	sub	sp, #44	; 0x2c
 8018b4c:	4610      	mov	r0, r2
 8018b4e:	460d      	mov	r5, r1
 8018b50:	4691      	mov	r9, r2
 8018b52:	461e      	mov	r6, r3
 8018b54:	f004 f82e 	bl	801cbb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018b58:	2800      	cmp	r0, #0
 8018b5a:	f000 80a0 	beq.w	8018c9e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8018b5e:	6823      	ldr	r3, [r4, #0]
 8018b60:	4620      	mov	r0, r4
 8018b62:	f8df b170 	ldr.w	fp, [pc, #368]	; 8018cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 8018b66:	af0a      	add	r7, sp, #40	; 0x28
 8018b68:	6a1b      	ldr	r3, [r3, #32]
 8018b6a:	4798      	blx	r3
 8018b6c:	6823      	ldr	r3, [r4, #0]
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f8df a164 	ldr.w	sl, [pc, #356]	; 8018cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8018b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b76:	4798      	blx	r3
 8018b78:	f8bb 3000 	ldrh.w	r3, [fp]
 8018b7c:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8018b80:	4638      	mov	r0, r7
 8018b82:	9301      	str	r3, [sp, #4]
 8018b84:	f8ba 3000 	ldrh.w	r3, [sl]
 8018b88:	9302      	str	r3, [sp, #8]
 8018b8a:	4b4f      	ldr	r3, [pc, #316]	; (8018cc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8018b8c:	881a      	ldrh	r2, [r3, #0]
 8018b8e:	4698      	mov	r8, r3
 8018b90:	9203      	str	r2, [sp, #12]
 8018b92:	4a4e      	ldr	r2, [pc, #312]	; (8018ccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8018b94:	8812      	ldrh	r2, [r2, #0]
 8018b96:	9204      	str	r2, [sp, #16]
 8018b98:	4a4d      	ldr	r2, [pc, #308]	; (8018cd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 8018b9a:	7812      	ldrb	r2, [r2, #0]
 8018b9c:	2a00      	cmp	r2, #0
 8018b9e:	f040 8081 	bne.w	8018ca4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8018ba2:	f004 f8c1 	bl	801cd28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018ba6:	f8ab 0000 	strh.w	r0, [fp]
 8018baa:	4638      	mov	r0, r7
 8018bac:	f004 f8f6 	bl	801cd9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018bb0:	f8aa 0000 	strh.w	r0, [sl]
 8018bb4:	4638      	mov	r0, r7
 8018bb6:	f004 f8b7 	bl	801cd28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018bba:	f8a8 0000 	strh.w	r0, [r8]
 8018bbe:	4638      	mov	r0, r7
 8018bc0:	f004 f8ec 	bl	801cd9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018bc4:	4b41      	ldr	r3, [pc, #260]	; (8018ccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8018bc6:	8018      	strh	r0, [r3, #0]
 8018bc8:	4648      	mov	r0, r9
 8018bca:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018bce:	f003 fff1 	bl	801cbb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018bd8:	4611      	mov	r1, r2
 8018bda:	4628      	mov	r0, r5
 8018bdc:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018be0:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018be4:	f7fc fb00 	bl	80151e8 <_ZN8touchgfx8Drawable5setXYEss>
 8018be8:	2301      	movs	r3, #1
 8018bea:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018bee:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018bf2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	dd5c      	ble.n	8018cb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8018bfa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	dd58      	ble.n	8018cb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8018c02:	462a      	mov	r2, r5
 8018c04:	ab08      	add	r3, sp, #32
 8018c06:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018c0a:	6851      	ldr	r1, [r2, #4]
 8018c0c:	c303      	stmia	r3!, {r0, r1}
 8018c0e:	4631      	mov	r1, r6
 8018c10:	a808      	add	r0, sp, #32
 8018c12:	f7ff fc6f 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 8018c16:	a807      	add	r0, sp, #28
 8018c18:	f004 f984 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018c1c:	4606      	mov	r6, r0
 8018c1e:	f7fb fd9b 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8018c22:	6803      	ldr	r3, [r0, #0]
 8018c24:	6a1b      	ldr	r3, [r3, #32]
 8018c26:	4798      	blx	r3
 8018c28:	4286      	cmp	r6, r0
 8018c2a:	d04a      	beq.n	8018cc2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8018c2c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018c2e:	b150      	cbz	r0, 8018c46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8018c30:	a807      	add	r0, sp, #28
 8018c32:	f004 f977 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018c36:	4606      	mov	r6, r0
 8018c38:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018c3a:	6803      	ldr	r3, [r0, #0]
 8018c3c:	6a1b      	ldr	r3, [r3, #32]
 8018c3e:	4798      	blx	r3
 8018c40:	1a33      	subs	r3, r6, r0
 8018c42:	4258      	negs	r0, r3
 8018c44:	4158      	adcs	r0, r3
 8018c46:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018c4a:	2600      	movs	r6, #0
 8018c4c:	696b      	ldr	r3, [r5, #20]
 8018c4e:	a908      	add	r1, sp, #32
 8018c50:	682a      	ldr	r2, [r5, #0]
 8018c52:	4628      	mov	r0, r5
 8018c54:	9305      	str	r3, [sp, #20]
 8018c56:	616e      	str	r6, [r5, #20]
 8018c58:	6892      	ldr	r2, [r2, #8]
 8018c5a:	4790      	blx	r2
 8018c5c:	9b05      	ldr	r3, [sp, #20]
 8018c5e:	4652      	mov	r2, sl
 8018c60:	4649      	mov	r1, r9
 8018c62:	616b      	str	r3, [r5, #20]
 8018c64:	4628      	mov	r0, r5
 8018c66:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018c6a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018c6e:	f7fc fabb 	bl	80151e8 <_ZN8touchgfx8Drawable5setXYEss>
 8018c72:	9a01      	ldr	r2, [sp, #4]
 8018c74:	4b17      	ldr	r3, [pc, #92]	; (8018cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8018c76:	4620      	mov	r0, r4
 8018c78:	801a      	strh	r2, [r3, #0]
 8018c7a:	9a02      	ldr	r2, [sp, #8]
 8018c7c:	4b16      	ldr	r3, [pc, #88]	; (8018cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8018c7e:	801a      	strh	r2, [r3, #0]
 8018c80:	9a03      	ldr	r2, [sp, #12]
 8018c82:	4b11      	ldr	r3, [pc, #68]	; (8018cc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8018c84:	801a      	strh	r2, [r3, #0]
 8018c86:	4b11      	ldr	r3, [pc, #68]	; (8018ccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8018c88:	9a04      	ldr	r2, [sp, #16]
 8018c8a:	801a      	strh	r2, [r3, #0]
 8018c8c:	6823      	ldr	r3, [r4, #0]
 8018c8e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018c92:	6a1b      	ldr	r3, [r3, #32]
 8018c94:	4798      	blx	r3
 8018c96:	6823      	ldr	r3, [r4, #0]
 8018c98:	4620      	mov	r0, r4
 8018c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c9c:	4798      	blx	r3
 8018c9e:	b00b      	add	sp, #44	; 0x2c
 8018ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ca4:	f004 f87a 	bl	801cd9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018ca8:	f8ab 0000 	strh.w	r0, [fp]
 8018cac:	4638      	mov	r0, r7
 8018cae:	f004 f83b 	bl	801cd28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018cb2:	e77d      	b.n	8018bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8018cb4:	462a      	mov	r2, r5
 8018cb6:	ab08      	add	r3, sp, #32
 8018cb8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018cbc:	6851      	ldr	r1, [r2, #4]
 8018cbe:	c303      	stmia	r3!, {r0, r1}
 8018cc0:	e7a9      	b.n	8018c16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8018cc2:	2000      	movs	r0, #0
 8018cc4:	e7bf      	b.n	8018c46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8018cc6:	bf00      	nop
 8018cc8:	200094ca 	.word	0x200094ca
 8018ccc:	200094cc 	.word	0x200094cc
 8018cd0:	200094ce 	.word	0x200094ce
 8018cd4:	200094d0 	.word	0x200094d0
 8018cd8:	200094d2 	.word	0x200094d2

08018cdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018cdc:	4b07      	ldr	r3, [pc, #28]	; (8018cfc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018cde:	b510      	push	{r4, lr}
 8018ce0:	781b      	ldrb	r3, [r3, #0]
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	b13b      	cbz	r3, 8018cf6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018ce6:	6803      	ldr	r3, [r0, #0]
 8018ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cea:	4798      	blx	r3
 8018cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018cee:	4283      	cmp	r3, r0
 8018cf0:	d101      	bne.n	8018cf6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018cf2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018cf4:	bd10      	pop	{r4, pc}
 8018cf6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018cf8:	e7fc      	b.n	8018cf4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018cfa:	bf00      	nop
 8018cfc:	200094d4 	.word	0x200094d4

08018d00 <_ZN8touchgfx3HAL10initializeEv>:
 8018d00:	b510      	push	{r4, lr}
 8018d02:	4604      	mov	r4, r0
 8018d04:	f7fd fbe4 	bl	80164d0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8018d08:	6860      	ldr	r0, [r4, #4]
 8018d0a:	6803      	ldr	r3, [r0, #0]
 8018d0c:	68db      	ldr	r3, [r3, #12]
 8018d0e:	4798      	blx	r3
 8018d10:	68e0      	ldr	r0, [r4, #12]
 8018d12:	6803      	ldr	r3, [r0, #0]
 8018d14:	689b      	ldr	r3, [r3, #8]
 8018d16:	4798      	blx	r3
 8018d18:	6823      	ldr	r3, [r4, #0]
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d22:	4718      	bx	r3

08018d24 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018d24:	b508      	push	{r3, lr}
 8018d26:	290d      	cmp	r1, #13
 8018d28:	d817      	bhi.n	8018d5a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018d2a:	e8df f001 	tbb	[pc, r1]
 8018d2e:	090b      	.short	0x090b
 8018d30:	0d0d0d07 	.word	0x0d0d0d07
 8018d34:	1414140d 	.word	0x1414140d
 8018d38:	0d0d1414 	.word	0x0d0d1414
 8018d3c:	2020      	movs	r0, #32
 8018d3e:	bd08      	pop	{r3, pc}
 8018d40:	2018      	movs	r0, #24
 8018d42:	e7fc      	b.n	8018d3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d44:	2010      	movs	r0, #16
 8018d46:	e7fa      	b.n	8018d3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d48:	4b05      	ldr	r3, [pc, #20]	; (8018d60 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018d4a:	f44f 7111 	mov.w	r1, #580	; 0x244
 8018d4e:	4a05      	ldr	r2, [pc, #20]	; (8018d64 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018d50:	4805      	ldr	r0, [pc, #20]	; (8018d68 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018d52:	f00c fabb 	bl	80252cc <__assert_func>
 8018d56:	2008      	movs	r0, #8
 8018d58:	e7f1      	b.n	8018d3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d5a:	2000      	movs	r0, #0
 8018d5c:	e7ef      	b.n	8018d3e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d5e:	bf00      	nop
 8018d60:	08027a2b 	.word	0x08027a2b
 8018d64:	08027dc8 	.word	0x08027dc8
 8018d68:	08027932 	.word	0x08027932

08018d6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018d6c:	b570      	push	{r4, r5, r6, lr}
 8018d6e:	460d      	mov	r5, r1
 8018d70:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018d74:	4616      	mov	r6, r2
 8018d76:	461c      	mov	r4, r3
 8018d78:	f7ff ffd4 	bl	8018d24 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018d7c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018d80:	10c0      	asrs	r0, r0, #3
 8018d82:	fb06 5101 	mla	r1, r6, r1, r5
 8018d86:	fb00 4001 	mla	r0, r0, r1, r4
 8018d8a:	bd70      	pop	{r4, r5, r6, pc}

08018d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8018d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d90:	b08a      	sub	sp, #40	; 0x28
 8018d92:	f04f 0c00 	mov.w	ip, #0
 8018d96:	4604      	mov	r4, r0
 8018d98:	469a      	mov	sl, r3
 8018d9a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8018d9e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8018da2:	f1b8 0f02 	cmp.w	r8, #2
 8018da6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8018daa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018dae:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018db2:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018db6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8018dba:	f8cd c020 	str.w	ip, [sp, #32]
 8018dbe:	d030      	beq.n	8018e22 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8018dc0:	2bff      	cmp	r3, #255	; 0xff
 8018dc2:	d12c      	bne.n	8018e1e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8018dc4:	4560      	cmp	r0, ip
 8018dc6:	bf14      	ite	ne
 8018dc8:	2004      	movne	r0, #4
 8018dca:	2001      	moveq	r0, #1
 8018dcc:	9204      	str	r2, [sp, #16]
 8018dce:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018dd2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018dd6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018dda:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018dde:	f8ad 501a 	strh.w	r5, [sp, #26]
 8018de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018de6:	4620      	mov	r0, r4
 8018de8:	f7ff ff78 	bl	8018cdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018dec:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018df0:	4603      	mov	r3, r0
 8018df2:	4651      	mov	r1, sl
 8018df4:	4620      	mov	r0, r4
 8018df6:	e9cd 9700 	strd	r9, r7, [sp]
 8018dfa:	f7ff ffb7 	bl	8018d6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018dfe:	f8ad 901e 	strh.w	r9, [sp, #30]
 8018e02:	9005      	str	r0, [sp, #20]
 8018e04:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8018e08:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8018e0c:	b106      	cbz	r6, 8018e10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8018e0e:	b98d      	cbnz	r5, 8018e34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8018e10:	4b12      	ldr	r3, [pc, #72]	; (8018e5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8018e12:	f240 11c3 	movw	r1, #451	; 0x1c3
 8018e16:	4a12      	ldr	r2, [pc, #72]	; (8018e60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8018e18:	4812      	ldr	r0, [pc, #72]	; (8018e64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8018e1a:	f00c fa57 	bl	80252cc <__assert_func>
 8018e1e:	2004      	movs	r0, #4
 8018e20:	e7d4      	b.n	8018dcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018e22:	2bff      	cmp	r3, #255	; 0xff
 8018e24:	d104      	bne.n	8018e30 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	bf14      	ite	ne
 8018e2a:	2040      	movne	r0, #64	; 0x40
 8018e2c:	2020      	moveq	r0, #32
 8018e2e:	e7cd      	b.n	8018dcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018e30:	2040      	movs	r0, #64	; 0x40
 8018e32:	e7cb      	b.n	8018dcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8018e34:	6823      	ldr	r3, [r4, #0]
 8018e36:	4620      	mov	r0, r4
 8018e38:	9d02      	ldr	r5, [sp, #8]
 8018e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e3c:	4798      	blx	r3
 8018e3e:	4228      	tst	r0, r5
 8018e40:	d104      	bne.n	8018e4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8018e42:	4b09      	ldr	r3, [pc, #36]	; (8018e68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8018e44:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8018e48:	4a05      	ldr	r2, [pc, #20]	; (8018e60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8018e4a:	e7e5      	b.n	8018e18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8018e4c:	6860      	ldr	r0, [r4, #4]
 8018e4e:	a902      	add	r1, sp, #8
 8018e50:	6803      	ldr	r3, [r0, #0]
 8018e52:	685b      	ldr	r3, [r3, #4]
 8018e54:	4798      	blx	r3
 8018e56:	b00a      	add	sp, #40	; 0x28
 8018e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e5c:	080279ae 	.word	0x080279ae
 8018e60:	08027c6a 	.word	0x08027c6a
 8018e64:	08027932 	.word	0x08027932
 8018e68:	080279e6 	.word	0x080279e6

08018e6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8018e6c:	b510      	push	{r4, lr}
 8018e6e:	b08a      	sub	sp, #40	; 0x28
 8018e70:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8018e74:	9408      	str	r4, [sp, #32]
 8018e76:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8018e7a:	9407      	str	r4, [sp, #28]
 8018e7c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8018e80:	9406      	str	r4, [sp, #24]
 8018e82:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8018e86:	9405      	str	r4, [sp, #20]
 8018e88:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8018e8c:	9404      	str	r4, [sp, #16]
 8018e8e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8018e92:	9403      	str	r4, [sp, #12]
 8018e94:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8018e98:	9402      	str	r4, [sp, #8]
 8018e9a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8018e9e:	e9cd 3400 	strd	r3, r4, [sp]
 8018ea2:	4613      	mov	r3, r2
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	f7ff ff71 	bl	8018d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018eaa:	b00a      	add	sp, #40	; 0x28
 8018eac:	bd10      	pop	{r4, pc}
	...

08018eb0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8018eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eb2:	b08b      	sub	sp, #44	; 0x2c
 8018eb4:	4616      	mov	r6, r2
 8018eb6:	460d      	mov	r5, r1
 8018eb8:	461f      	mov	r7, r3
 8018eba:	4604      	mov	r4, r0
 8018ebc:	f7fb fc4c 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8018ec0:	6803      	ldr	r3, [r0, #0]
 8018ec2:	6a1b      	ldr	r3, [r3, #32]
 8018ec4:	4798      	blx	r3
 8018ec6:	4b0e      	ldr	r3, [pc, #56]	; (8018f00 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8018ec8:	2200      	movs	r2, #0
 8018eca:	4629      	mov	r1, r5
 8018ecc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018ed0:	881b      	ldrh	r3, [r3, #0]
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	9306      	str	r3, [sp, #24]
 8018ed6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018eda:	9305      	str	r3, [sp, #20]
 8018edc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018ee0:	9304      	str	r3, [sp, #16]
 8018ee2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018ee6:	9303      	str	r3, [sp, #12]
 8018ee8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018eec:	9302      	str	r3, [sp, #8]
 8018eee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018ef2:	e9cd 7300 	strd	r7, r3, [sp]
 8018ef6:	4633      	mov	r3, r6
 8018ef8:	f7ff ff48 	bl	8018d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018efc:	b00b      	add	sp, #44	; 0x2c
 8018efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f00:	200094d0 	.word	0x200094d0

08018f04 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8018f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f08:	461f      	mov	r7, r3
 8018f0a:	4b14      	ldr	r3, [pc, #80]	; (8018f5c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8018f0c:	b08a      	sub	sp, #40	; 0x28
 8018f0e:	4616      	mov	r6, r2
 8018f10:	f8b3 8000 	ldrh.w	r8, [r3]
 8018f14:	460d      	mov	r5, r1
 8018f16:	4604      	mov	r4, r0
 8018f18:	f7fb fc1e 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8018f1c:	6803      	ldr	r3, [r0, #0]
 8018f1e:	6a1b      	ldr	r3, [r3, #32]
 8018f20:	4798      	blx	r3
 8018f22:	2302      	movs	r3, #2
 8018f24:	9008      	str	r0, [sp, #32]
 8018f26:	2200      	movs	r2, #0
 8018f28:	4629      	mov	r1, r5
 8018f2a:	4620      	mov	r0, r4
 8018f2c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8018f30:	2301      	movs	r3, #1
 8018f32:	9305      	str	r3, [sp, #20]
 8018f34:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018f38:	9304      	str	r3, [sp, #16]
 8018f3a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018f3e:	9303      	str	r3, [sp, #12]
 8018f40:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018f44:	9302      	str	r3, [sp, #8]
 8018f46:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018f4a:	e9cd 7300 	strd	r7, r3, [sp]
 8018f4e:	4633      	mov	r3, r6
 8018f50:	f7ff ff1c 	bl	8018d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8018f54:	b00a      	add	sp, #40	; 0x28
 8018f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f5a:	bf00      	nop
 8018f5c:	200094d0 	.word	0x200094d0

08018f60 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8018f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f64:	b08b      	sub	sp, #44	; 0x2c
 8018f66:	469b      	mov	fp, r3
 8018f68:	4604      	mov	r4, r0
 8018f6a:	4692      	mov	sl, r2
 8018f6c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018f70:	2600      	movs	r6, #0
 8018f72:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018f76:	4689      	mov	r9, r1
 8018f78:	2fff      	cmp	r7, #255	; 0xff
 8018f7a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018f7e:	9608      	str	r6, [sp, #32]
 8018f80:	bf14      	ite	ne
 8018f82:	2308      	movne	r3, #8
 8018f84:	2302      	moveq	r3, #2
 8018f86:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018f8a:	f7ff fea7 	bl	8018cdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f8e:	465a      	mov	r2, fp
 8018f90:	4603      	mov	r3, r0
 8018f92:	4651      	mov	r1, sl
 8018f94:	4620      	mov	r0, r4
 8018f96:	e9cd 8500 	strd	r8, r5, [sp]
 8018f9a:	f7ff fee7 	bl	8018d6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018f9e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018fa2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018fa6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018faa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018fae:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018fb2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018fb6:	6823      	ldr	r3, [r4, #0]
 8018fb8:	9d02      	ldr	r5, [sp, #8]
 8018fba:	9005      	str	r0, [sp, #20]
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	f8ad 601c 	strh.w	r6, [sp, #28]
 8018fc2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8018fc6:	f8cd 9020 	str.w	r9, [sp, #32]
 8018fca:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fd0:	4798      	blx	r3
 8018fd2:	4228      	tst	r0, r5
 8018fd4:	d106      	bne.n	8018fe4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8018fd6:	4b07      	ldr	r3, [pc, #28]	; (8018ff4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8018fd8:	f240 11fb 	movw	r1, #507	; 0x1fb
 8018fdc:	4a06      	ldr	r2, [pc, #24]	; (8018ff8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8018fde:	4807      	ldr	r0, [pc, #28]	; (8018ffc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8018fe0:	f00c f974 	bl	80252cc <__assert_func>
 8018fe4:	6860      	ldr	r0, [r4, #4]
 8018fe6:	a902      	add	r1, sp, #8
 8018fe8:	6803      	ldr	r3, [r0, #0]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	4798      	blx	r3
 8018fee:	b00b      	add	sp, #44	; 0x2c
 8018ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ff4:	080279e6 	.word	0x080279e6
 8018ff8:	08027d33 	.word	0x08027d33
 8018ffc:	08027932 	.word	0x08027932

08019000 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019004:	461f      	mov	r7, r3
 8019006:	4b0b      	ldr	r3, [pc, #44]	; (8019034 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019008:	460d      	mov	r5, r1
 801900a:	4616      	mov	r6, r2
 801900c:	f8b3 8000 	ldrh.w	r8, [r3]
 8019010:	4604      	mov	r4, r0
 8019012:	f7fb fba1 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8019016:	6803      	ldr	r3, [r0, #0]
 8019018:	6a1b      	ldr	r3, [r3, #32]
 801901a:	4798      	blx	r3
 801901c:	463b      	mov	r3, r7
 801901e:	4632      	mov	r2, r6
 8019020:	4629      	mov	r1, r5
 8019022:	e9cd 8000 	strd	r8, r0, [sp]
 8019026:	4620      	mov	r0, r4
 8019028:	f7ff fea0 	bl	8018d6c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801902c:	b002      	add	sp, #8
 801902e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019032:	bf00      	nop
 8019034:	200094d0 	.word	0x200094d0

08019038 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8019038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801903c:	4698      	mov	r8, r3
 801903e:	b088      	sub	sp, #32
 8019040:	2300      	movs	r3, #0
 8019042:	4617      	mov	r7, r2
 8019044:	4604      	mov	r4, r0
 8019046:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801904a:	9306      	str	r3, [sp, #24]
 801904c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019050:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019054:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019058:	f8ad 5012 	strh.w	r5, [sp, #18]
 801905c:	e9cd 3100 	strd	r3, r1, [sp]
 8019060:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019064:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019068:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801906c:	f88d 301c 	strb.w	r3, [sp, #28]
 8019070:	f7ff fe34 	bl	8018cdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019074:	4642      	mov	r2, r8
 8019076:	4603      	mov	r3, r0
 8019078:	4639      	mov	r1, r7
 801907a:	4620      	mov	r0, r4
 801907c:	f7ff ffc0 	bl	8019000 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019080:	4b16      	ldr	r3, [pc, #88]	; (80190dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8019082:	9003      	str	r0, [sp, #12]
 8019084:	881b      	ldrh	r3, [r3, #0]
 8019086:	f8ad 3016 	strh.w	r3, [sp, #22]
 801908a:	f7fb fb65 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 801908e:	6803      	ldr	r3, [r0, #0]
 8019090:	6a1b      	ldr	r3, [r3, #32]
 8019092:	4798      	blx	r3
 8019094:	f88d 001e 	strb.w	r0, [sp, #30]
 8019098:	f88d 001d 	strb.w	r0, [sp, #29]
 801909c:	b106      	cbz	r6, 80190a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801909e:	b935      	cbnz	r5, 80190ae <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80190a0:	4b0f      	ldr	r3, [pc, #60]	; (80190e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80190a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80190a6:	4a0f      	ldr	r2, [pc, #60]	; (80190e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80190a8:	480f      	ldr	r0, [pc, #60]	; (80190e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80190aa:	f00c f90f 	bl	80252cc <__assert_func>
 80190ae:	6823      	ldr	r3, [r4, #0]
 80190b0:	4620      	mov	r0, r4
 80190b2:	9d00      	ldr	r5, [sp, #0]
 80190b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190b6:	4798      	blx	r3
 80190b8:	4228      	tst	r0, r5
 80190ba:	d104      	bne.n	80190c6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80190bc:	4b0b      	ldr	r3, [pc, #44]	; (80190ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80190be:	f240 11e1 	movw	r1, #481	; 0x1e1
 80190c2:	4a08      	ldr	r2, [pc, #32]	; (80190e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80190c4:	e7f0      	b.n	80190a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80190c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80190c8:	4669      	mov	r1, sp
 80190ca:	6860      	ldr	r0, [r4, #4]
 80190cc:	9306      	str	r3, [sp, #24]
 80190ce:	6803      	ldr	r3, [r0, #0]
 80190d0:	685b      	ldr	r3, [r3, #4]
 80190d2:	4798      	blx	r3
 80190d4:	b008      	add	sp, #32
 80190d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190da:	bf00      	nop
 80190dc:	200094d0 	.word	0x200094d0
 80190e0:	080279ae 	.word	0x080279ae
 80190e4:	08027b1c 	.word	0x08027b1c
 80190e8:	08027932 	.word	0x08027932
 80190ec:	080279e6 	.word	0x080279e6

080190f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80190f0:	b570      	push	{r4, r5, r6, lr}
 80190f2:	b08a      	sub	sp, #40	; 0x28
 80190f4:	4604      	mov	r4, r0
 80190f6:	466b      	mov	r3, sp
 80190f8:	e883 0006 	stmia.w	r3, {r1, r2}
 80190fc:	4b1f      	ldr	r3, [pc, #124]	; (801917c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80190fe:	781b      	ldrb	r3, [r3, #0]
 8019100:	b933      	cbnz	r3, 8019110 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019102:	4b1f      	ldr	r3, [pc, #124]	; (8019180 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8019104:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8019108:	4a1e      	ldr	r2, [pc, #120]	; (8019184 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801910a:	481f      	ldr	r0, [pc, #124]	; (8019188 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801910c:	f00c f8de 	bl	80252cc <__assert_func>
 8019110:	2300      	movs	r3, #0
 8019112:	f8bd 5000 	ldrh.w	r5, [sp]
 8019116:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801911a:	9308      	str	r3, [sp, #32]
 801911c:	2301      	movs	r3, #1
 801911e:	9302      	str	r3, [sp, #8]
 8019120:	6803      	ldr	r3, [r0, #0]
 8019122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019124:	4798      	blx	r3
 8019126:	4632      	mov	r2, r6
 8019128:	4629      	mov	r1, r5
 801912a:	4603      	mov	r3, r0
 801912c:	4620      	mov	r0, r4
 801912e:	f7ff ff67 	bl	8019000 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019132:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019134:	9003      	str	r0, [sp, #12]
 8019136:	9305      	str	r3, [sp, #20]
 8019138:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801913c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019140:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019144:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019148:	4b10      	ldr	r3, [pc, #64]	; (801918c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801914a:	881b      	ldrh	r3, [r3, #0]
 801914c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019150:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019154:	f7fb fb00 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 8019158:	6803      	ldr	r3, [r0, #0]
 801915a:	6a1b      	ldr	r3, [r3, #32]
 801915c:	4798      	blx	r3
 801915e:	23ff      	movs	r3, #255	; 0xff
 8019160:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019164:	a902      	add	r1, sp, #8
 8019166:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801916a:	6860      	ldr	r0, [r4, #4]
 801916c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019170:	6803      	ldr	r3, [r0, #0]
 8019172:	685b      	ldr	r3, [r3, #4]
 8019174:	4798      	blx	r3
 8019176:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019178:	b00a      	add	sp, #40	; 0x28
 801917a:	bd70      	pop	{r4, r5, r6, pc}
 801917c:	200094d5 	.word	0x200094d5
 8019180:	0802787f 	.word	0x0802787f
 8019184:	08027bc0 	.word	0x08027bc0
 8019188:	08027932 	.word	0x08027932
 801918c:	200094d0 	.word	0x200094d0

08019190 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019192:	b08b      	sub	sp, #44	; 0x2c
 8019194:	4604      	mov	r4, r0
 8019196:	466d      	mov	r5, sp
 8019198:	e885 0006 	stmia.w	r5, {r1, r2}
 801919c:	461d      	mov	r5, r3
 801919e:	2300      	movs	r3, #0
 80191a0:	f8bd 6000 	ldrh.w	r6, [sp]
 80191a4:	9308      	str	r3, [sp, #32]
 80191a6:	2301      	movs	r3, #1
 80191a8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80191ac:	9302      	str	r3, [sp, #8]
 80191ae:	6803      	ldr	r3, [r0, #0]
 80191b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191b2:	4798      	blx	r3
 80191b4:	463a      	mov	r2, r7
 80191b6:	4631      	mov	r1, r6
 80191b8:	4603      	mov	r3, r0
 80191ba:	4620      	mov	r0, r4
 80191bc:	f7ff ff20 	bl	8019000 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80191c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80191c4:	9003      	str	r0, [sp, #12]
 80191c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80191ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80191ce:	9505      	str	r5, [sp, #20]
 80191d0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80191d4:	4b0d      	ldr	r3, [pc, #52]	; (801920c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80191d6:	881b      	ldrh	r3, [r3, #0]
 80191d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80191dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80191de:	f8ad 301e 	strh.w	r3, [sp, #30]
 80191e2:	f7fb fab9 	bl	8014758 <_ZN8touchgfx3HAL3lcdEv>
 80191e6:	6803      	ldr	r3, [r0, #0]
 80191e8:	6a1b      	ldr	r3, [r3, #32]
 80191ea:	4798      	blx	r3
 80191ec:	23ff      	movs	r3, #255	; 0xff
 80191ee:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80191f2:	a902      	add	r1, sp, #8
 80191f4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80191f8:	6860      	ldr	r0, [r4, #4]
 80191fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80191fe:	6803      	ldr	r3, [r0, #0]
 8019200:	685b      	ldr	r3, [r3, #4]
 8019202:	4798      	blx	r3
 8019204:	4628      	mov	r0, r5
 8019206:	b00b      	add	sp, #44	; 0x2c
 8019208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801920a:	bf00      	nop
 801920c:	200094d0 	.word	0x200094d0

08019210 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019210:	b570      	push	{r4, r5, r6, lr}
 8019212:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019216:	4604      	mov	r4, r0
 8019218:	b19b      	cbz	r3, 8019242 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801921a:	2002      	movs	r0, #2
 801921c:	f7fc ff5a 	bl	80160d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019220:	2300      	movs	r3, #0
 8019222:	4620      	mov	r0, r4
 8019224:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019228:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801922c:	6823      	ldr	r3, [r4, #0]
 801922e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8019232:	f7ff fd53 	bl	8018cdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019236:	4601      	mov	r1, r0
 8019238:	4620      	mov	r0, r4
 801923a:	462b      	mov	r3, r5
 801923c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019240:	4718      	bx	r3
 8019242:	bd70      	pop	{r4, r5, r6, pc}

08019244 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8019244:	b538      	push	{r3, r4, r5, lr}
 8019246:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 801924a:	4604      	mov	r4, r0
 801924c:	460d      	mov	r5, r1
 801924e:	428a      	cmp	r2, r1
 8019250:	d008      	beq.n	8019264 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 8019252:	2a01      	cmp	r2, #1
 8019254:	6803      	ldr	r3, [r0, #0]
 8019256:	d106      	bne.n	8019266 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8019258:	b929      	cbnz	r1, 8019266 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 801925a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801925e:	4798      	blx	r3
 8019260:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8019264:	bd38      	pop	{r3, r4, r5, pc}
 8019266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801926a:	4620      	mov	r0, r4
 801926c:	e7f7      	b.n	801925e <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

08019270 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019270:	4b0d      	ldr	r3, [pc, #52]	; (80192a8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8019272:	b510      	push	{r4, lr}
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	4604      	mov	r4, r0
 8019278:	b95b      	cbnz	r3, 8019292 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801927a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801927e:	2b02      	cmp	r3, #2
 8019280:	d007      	beq.n	8019292 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019282:	6840      	ldr	r0, [r0, #4]
 8019284:	f000 f930 	bl	80194e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019288:	b118      	cbz	r0, 8019292 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801928a:	6862      	ldr	r2, [r4, #4]
 801928c:	7a53      	ldrb	r3, [r2, #9]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d0fc      	beq.n	801928c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019292:	f7fd f953 	bl	801653c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019296:	4620      	mov	r0, r4
 8019298:	2100      	movs	r1, #0
 801929a:	f7ff ffd3 	bl	8019244 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 801929e:	4620      	mov	r0, r4
 80192a0:	f7ff fd1c 	bl	8018cdc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80192a4:	bd10      	pop	{r4, pc}
 80192a6:	bf00      	nop
 80192a8:	200094d4 	.word	0x200094d4

080192ac <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80192ac:	4770      	bx	lr

080192ae <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80192ae:	2000      	movs	r0, #0
 80192b0:	4770      	bx	lr

080192b2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80192b2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80192b6:	1a13      	subs	r3, r2, r0
 80192b8:	4258      	negs	r0, r3
 80192ba:	4158      	adcs	r0, r3
 80192bc:	4770      	bx	lr

080192be <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80192be:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80192c2:	1a9b      	subs	r3, r3, r2
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	bfdc      	itt	le
 80192c8:	6882      	ldrle	r2, [r0, #8]
 80192ca:	189b      	addle	r3, r3, r2
 80192cc:	2b01      	cmp	r3, #1
 80192ce:	bfcc      	ite	gt
 80192d0:	2000      	movgt	r0, #0
 80192d2:	2001      	movle	r0, #1
 80192d4:	4770      	bx	lr

080192d6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80192d6:	6902      	ldr	r2, [r0, #16]
 80192d8:	6840      	ldr	r0, [r0, #4]
 80192da:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80192de:	4770      	bx	lr

080192e0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80192e0:	6803      	ldr	r3, [r0, #0]
 80192e2:	691b      	ldr	r3, [r3, #16]
 80192e4:	4718      	bx	r3

080192e6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80192e6:	4770      	bx	lr

080192e8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80192e8:	4770      	bx	lr
	...

080192ec <_ZN8touchgfx13DMA_Interface7executeEv>:
 80192ec:	2301      	movs	r3, #1
 80192ee:	b570      	push	{r4, r5, r6, lr}
 80192f0:	7203      	strb	r3, [r0, #8]
 80192f2:	4604      	mov	r4, r0
 80192f4:	6840      	ldr	r0, [r0, #4]
 80192f6:	6803      	ldr	r3, [r0, #0]
 80192f8:	699b      	ldr	r3, [r3, #24]
 80192fa:	4798      	blx	r3
 80192fc:	6803      	ldr	r3, [r0, #0]
 80192fe:	4605      	mov	r5, r0
 8019300:	2b08      	cmp	r3, #8
 8019302:	d01e      	beq.n	8019342 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019304:	d80b      	bhi.n	801931e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019306:	2b02      	cmp	r3, #2
 8019308:	d027      	beq.n	801935a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801930a:	2b04      	cmp	r3, #4
 801930c:	d011      	beq.n	8019332 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801930e:	2b01      	cmp	r3, #1
 8019310:	d028      	beq.n	8019364 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019312:	4b17      	ldr	r3, [pc, #92]	; (8019370 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019314:	218c      	movs	r1, #140	; 0x8c
 8019316:	4a17      	ldr	r2, [pc, #92]	; (8019374 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019318:	4817      	ldr	r0, [pc, #92]	; (8019378 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801931a:	f00b ffd7 	bl	80252cc <__assert_func>
 801931e:	2b40      	cmp	r3, #64	; 0x40
 8019320:	d020      	beq.n	8019364 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019322:	d801      	bhi.n	8019328 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019324:	2b20      	cmp	r3, #32
 8019326:	e7f3      	b.n	8019310 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019328:	2b80      	cmp	r3, #128	; 0x80
 801932a:	d01b      	beq.n	8019364 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801932c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019330:	e7ee      	b.n	8019310 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019332:	6823      	ldr	r3, [r4, #0]
 8019334:	7f01      	ldrb	r1, [r0, #28]
 8019336:	4620      	mov	r0, r4
 8019338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801933a:	4798      	blx	r3
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019340:	e006      	b.n	8019350 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019342:	6823      	ldr	r3, [r4, #0]
 8019344:	7f01      	ldrb	r1, [r0, #28]
 8019346:	4620      	mov	r0, r4
 8019348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801934a:	4798      	blx	r3
 801934c:	6823      	ldr	r3, [r4, #0]
 801934e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019350:	4629      	mov	r1, r5
 8019352:	4620      	mov	r0, r4
 8019354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019358:	4718      	bx	r3
 801935a:	6823      	ldr	r3, [r4, #0]
 801935c:	4620      	mov	r0, r4
 801935e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019360:	4798      	blx	r3
 8019362:	e7f3      	b.n	801934c <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8019364:	6823      	ldr	r3, [r4, #0]
 8019366:	4620      	mov	r0, r4
 8019368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801936a:	4798      	blx	r3
 801936c:	e7e6      	b.n	801933c <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801936e:	bf00      	nop
 8019370:	08027e11 	.word	0x08027e11
 8019374:	08027f20 	.word	0x08027f20
 8019378:	08027e36 	.word	0x08027e36

0801937c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801937c:	b570      	push	{r4, r5, r6, lr}
 801937e:	4604      	mov	r4, r0
 8019380:	460e      	mov	r6, r1
 8019382:	6860      	ldr	r0, [r4, #4]
 8019384:	6803      	ldr	r3, [r0, #0]
 8019386:	685b      	ldr	r3, [r3, #4]
 8019388:	4798      	blx	r3
 801938a:	2800      	cmp	r0, #0
 801938c:	d1f9      	bne.n	8019382 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801938e:	4d0d      	ldr	r5, [pc, #52]	; (80193c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019390:	6828      	ldr	r0, [r5, #0]
 8019392:	6803      	ldr	r3, [r0, #0]
 8019394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019396:	4798      	blx	r3
 8019398:	f7fd f8ea 	bl	8016570 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801939c:	6828      	ldr	r0, [r5, #0]
 801939e:	2101      	movs	r1, #1
 80193a0:	f7ff ff50 	bl	8019244 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80193a4:	6860      	ldr	r0, [r4, #4]
 80193a6:	4631      	mov	r1, r6
 80193a8:	6803      	ldr	r3, [r0, #0]
 80193aa:	689b      	ldr	r3, [r3, #8]
 80193ac:	4798      	blx	r3
 80193ae:	6823      	ldr	r3, [r4, #0]
 80193b0:	4620      	mov	r0, r4
 80193b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193b4:	4798      	blx	r3
 80193b6:	6828      	ldr	r0, [r5, #0]
 80193b8:	6803      	ldr	r3, [r0, #0]
 80193ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80193c0:	4718      	bx	r3
 80193c2:	bf00      	nop
 80193c4:	200094d8 	.word	0x200094d8

080193c8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80193c8:	b508      	push	{r3, lr}
 80193ca:	f7fd f8b7 	bl	801653c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80193ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80193d2:	f7fd b8c1 	b.w	8016558 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080193d6 <_ZN8touchgfx13DMA_Interface5startEv>:
 80193d6:	b510      	push	{r4, lr}
 80193d8:	4604      	mov	r4, r0
 80193da:	6840      	ldr	r0, [r0, #4]
 80193dc:	6803      	ldr	r3, [r0, #0]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	4798      	blx	r3
 80193e2:	b948      	cbnz	r0, 80193f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80193e4:	7a63      	ldrb	r3, [r4, #9]
 80193e6:	b13b      	cbz	r3, 80193f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80193e8:	7a23      	ldrb	r3, [r4, #8]
 80193ea:	b92b      	cbnz	r3, 80193f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80193ec:	6823      	ldr	r3, [r4, #0]
 80193ee:	4620      	mov	r0, r4
 80193f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193f6:	4718      	bx	r3
 80193f8:	bd10      	pop	{r4, pc}
	...

080193fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80193fc:	b510      	push	{r4, lr}
 80193fe:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8019402:	1b12      	subs	r2, r2, r4
 8019404:	2a00      	cmp	r2, #0
 8019406:	bfdc      	itt	le
 8019408:	6883      	ldrle	r3, [r0, #8]
 801940a:	18d2      	addle	r2, r2, r3
 801940c:	2a01      	cmp	r2, #1
 801940e:	dd18      	ble.n	8019442 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019410:	6843      	ldr	r3, [r0, #4]
 8019412:	f101 021c 	add.w	r2, r1, #28
 8019416:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801941a:	f851 4b04 	ldr.w	r4, [r1], #4
 801941e:	4291      	cmp	r1, r2
 8019420:	f843 4b04 	str.w	r4, [r3], #4
 8019424:	d1f9      	bne.n	801941a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8019426:	880a      	ldrh	r2, [r1, #0]
 8019428:	801a      	strh	r2, [r3, #0]
 801942a:	788a      	ldrb	r2, [r1, #2]
 801942c:	709a      	strb	r2, [r3, #2]
 801942e:	68c3      	ldr	r3, [r0, #12]
 8019430:	6882      	ldr	r2, [r0, #8]
 8019432:	f3bf 8f5b 	dmb	ish
 8019436:	3301      	adds	r3, #1
 8019438:	429a      	cmp	r2, r3
 801943a:	bfd8      	it	le
 801943c:	1a9b      	suble	r3, r3, r2
 801943e:	60c3      	str	r3, [r0, #12]
 8019440:	bd10      	pop	{r4, pc}
 8019442:	4b03      	ldr	r3, [pc, #12]	; (8019450 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019444:	2139      	movs	r1, #57	; 0x39
 8019446:	4a03      	ldr	r2, [pc, #12]	; (8019454 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8019448:	4803      	ldr	r0, [pc, #12]	; (8019458 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801944a:	f00b ff3f 	bl	80252cc <__assert_func>
 801944e:	bf00      	nop
 8019450:	08027e5c 	.word	0x08027e5c
 8019454:	08027f50 	.word	0x08027f50
 8019458:	08027e36 	.word	0x08027e36

0801945c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801945c:	b510      	push	{r4, lr}
 801945e:	6803      	ldr	r3, [r0, #0]
 8019460:	4604      	mov	r4, r0
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	4798      	blx	r3
 8019466:	b128      	cbz	r0, 8019474 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019468:	4b07      	ldr	r3, [pc, #28]	; (8019488 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801946a:	213f      	movs	r1, #63	; 0x3f
 801946c:	4a07      	ldr	r2, [pc, #28]	; (801948c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801946e:	4808      	ldr	r0, [pc, #32]	; (8019490 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019470:	f00b ff2c 	bl	80252cc <__assert_func>
 8019474:	6923      	ldr	r3, [r4, #16]
 8019476:	68a2      	ldr	r2, [r4, #8]
 8019478:	f3bf 8f5b 	dmb	ish
 801947c:	3301      	adds	r3, #1
 801947e:	429a      	cmp	r2, r3
 8019480:	bfd8      	it	le
 8019482:	1a9b      	suble	r3, r3, r2
 8019484:	6123      	str	r3, [r4, #16]
 8019486:	bd10      	pop	{r4, pc}
 8019488:	08027e7f 	.word	0x08027e7f
 801948c:	08027f9e 	.word	0x08027f9e
 8019490:	08027e36 	.word	0x08027e36

08019494 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019494:	b570      	push	{r4, r5, r6, lr}
 8019496:	4604      	mov	r4, r0
 8019498:	6840      	ldr	r0, [r0, #4]
 801949a:	6803      	ldr	r3, [r0, #0]
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	4798      	blx	r3
 80194a0:	4605      	mov	r5, r0
 80194a2:	b930      	cbnz	r0, 80194b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80194a4:	7a23      	ldrb	r3, [r4, #8]
 80194a6:	b123      	cbz	r3, 80194b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80194a8:	6860      	ldr	r0, [r4, #4]
 80194aa:	6803      	ldr	r3, [r0, #0]
 80194ac:	695b      	ldr	r3, [r3, #20]
 80194ae:	4798      	blx	r3
 80194b0:	7225      	strb	r5, [r4, #8]
 80194b2:	6860      	ldr	r0, [r4, #4]
 80194b4:	6803      	ldr	r3, [r0, #0]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	4798      	blx	r3
 80194ba:	b928      	cbnz	r0, 80194c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80194bc:	6823      	ldr	r3, [r4, #0]
 80194be:	4620      	mov	r0, r4
 80194c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194c6:	4718      	bx	r3
 80194c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194cc:	f7fd b85c 	b.w	8016588 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080194d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80194d0:	b510      	push	{r4, lr}
 80194d2:	6082      	str	r2, [r0, #8]
 80194d4:	2200      	movs	r2, #0
 80194d6:	4c03      	ldr	r4, [pc, #12]	; (80194e4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80194d8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80194dc:	e9c0 4100 	strd	r4, r1, [r0]
 80194e0:	bd10      	pop	{r4, pc}
 80194e2:	bf00      	nop
 80194e4:	08027f04 	.word	0x08027f04

080194e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80194e8:	6840      	ldr	r0, [r0, #4]
 80194ea:	6803      	ldr	r3, [r0, #0]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	4718      	bx	r3

080194f0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80194f0:	2300      	movs	r3, #0
 80194f2:	8083      	strh	r3, [r0, #4]
 80194f4:	80c3      	strh	r3, [r0, #6]
 80194f6:	8003      	strh	r3, [r0, #0]
 80194f8:	8043      	strh	r3, [r0, #2]
 80194fa:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80194fe:	2bff      	cmp	r3, #255	; 0xff
 8019500:	bf01      	itttt	eq
 8019502:	890b      	ldrheq	r3, [r1, #8]
 8019504:	8083      	strheq	r3, [r0, #4]
 8019506:	894b      	ldrheq	r3, [r1, #10]
 8019508:	80c3      	strheq	r3, [r0, #6]
 801950a:	4770      	bx	lr

0801950c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801950c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801950e:	4604      	mov	r4, r0
 8019510:	466b      	mov	r3, sp
 8019512:	6808      	ldr	r0, [r1, #0]
 8019514:	6849      	ldr	r1, [r1, #4]
 8019516:	c303      	stmia	r3!, {r0, r1}
 8019518:	6823      	ldr	r3, [r4, #0]
 801951a:	4669      	mov	r1, sp
 801951c:	4620      	mov	r0, r4
 801951e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019520:	4798      	blx	r3
 8019522:	4b08      	ldr	r3, [pc, #32]	; (8019544 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801952a:	b10a      	cbz	r2, 8019530 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801952c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801952e:	b900      	cbnz	r0, 8019532 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019530:	6898      	ldr	r0, [r3, #8]
 8019532:	6803      	ldr	r3, [r0, #0]
 8019534:	4669      	mov	r1, sp
 8019536:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019538:	699d      	ldr	r5, [r3, #24]
 801953a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801953e:	47a8      	blx	r5
 8019540:	b003      	add	sp, #12
 8019542:	bd30      	pop	{r4, r5, pc}
 8019544:	200094d8 	.word	0x200094d8

08019548 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019548:	2000      	movs	r0, #0
 801954a:	4770      	bx	lr

0801954c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019550:	b08d      	sub	sp, #52	; 0x34
 8019552:	4688      	mov	r8, r1
 8019554:	f8d3 c000 	ldr.w	ip, [r3]
 8019558:	9916      	ldr	r1, [sp, #88]	; 0x58
 801955a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801955e:	680f      	ldr	r7, [r1, #0]
 8019560:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8019564:	eba7 070c 	sub.w	r7, r7, ip
 8019568:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801956c:	edd3 6a07 	vldr	s13, [r3, #28]
 8019570:	42bc      	cmp	r4, r7
 8019572:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019574:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019578:	bfa8      	it	ge
 801957a:	463c      	movge	r4, r7
 801957c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019580:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019584:	ee07 4a90 	vmov	s15, r4
 8019588:	eb09 0e0c 	add.w	lr, r9, ip
 801958c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019590:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019594:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019598:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801959c:	4571      	cmp	r1, lr
 801959e:	ee25 4a04 	vmul.f32	s8, s10, s8
 80195a2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80195a6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80195aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80195ae:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80195b2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80195b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80195ba:	ee36 0a84 	vadd.f32	s0, s13, s8
 80195be:	ee61 1a87 	vmul.f32	s3, s3, s14
 80195c2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80195c6:	f340 808c 	ble.w	80196e2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80195ca:	eba1 060e 	sub.w	r6, r1, lr
 80195ce:	fb96 f5f4 	sdiv	r5, r6, r4
 80195d2:	ee07 5a10 	vmov	s14, r5
 80195d6:	2d00      	cmp	r5, #0
 80195d8:	fb04 6615 	mls	r6, r4, r5, r6
 80195dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195e0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80195e4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80195e8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80195ec:	dd12      	ble.n	8019614 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80195ee:	ee70 6a44 	vsub.f32	s13, s0, s8
 80195f2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80195f6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80195fa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80195fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019602:	bf14      	ite	ne
 8019604:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019608:	eeb0 7a67 	vmoveq.f32	s14, s15
 801960c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019610:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019614:	fb05 f204 	mul.w	r2, r5, r4
 8019618:	1abf      	subs	r7, r7, r2
 801961a:	4494      	add	ip, r2
 801961c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019620:	4411      	add	r1, r2
 8019622:	eb09 020c 	add.w	r2, r9, ip
 8019626:	b209      	sxth	r1, r1
 8019628:	443a      	add	r2, r7
 801962a:	428a      	cmp	r2, r1
 801962c:	bfc4      	itt	gt
 801962e:	eba1 0209 	subgt.w	r2, r1, r9
 8019632:	eba2 070c 	subgt.w	r7, r2, ip
 8019636:	2f00      	cmp	r7, #0
 8019638:	dd50      	ble.n	80196dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801963a:	fb97 f1f4 	sdiv	r1, r7, r4
 801963e:	fb04 7211 	mls	r2, r4, r1, r7
 8019642:	b90a      	cbnz	r2, 8019648 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019644:	3901      	subs	r1, #1
 8019646:	4622      	mov	r2, r4
 8019648:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801964c:	6840      	ldr	r0, [r0, #4]
 801964e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019652:	44b6      	add	lr, r6
 8019654:	f8d0 a000 	ldr.w	sl, [r0]
 8019658:	2900      	cmp	r1, #0
 801965a:	bfcc      	ite	gt
 801965c:	46a1      	movgt	r9, r4
 801965e:	4691      	movle	r9, r2
 8019660:	900b      	str	r0, [sp, #44]	; 0x2c
 8019662:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019664:	fb04 e505 	mla	r5, r4, r5, lr
 8019668:	eef0 6a42 	vmov.f32	s13, s4
 801966c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019670:	9008      	str	r0, [sp, #32]
 8019672:	eeb0 7a61 	vmov.f32	s14, s3
 8019676:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019678:	695b      	ldr	r3, [r3, #20]
 801967a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801967e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019682:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019686:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019688:	445b      	add	r3, fp
 801968a:	9307      	str	r3, [sp, #28]
 801968c:	ee16 3a90 	vmov	r3, s13
 8019690:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019694:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019698:	ee21 3a23 	vmul.f32	s6, s2, s7
 801969c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80196a0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80196a4:	ee17 7a90 	vmov	r7, s15
 80196a8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80196ac:	fb97 f7f4 	sdiv	r7, r7, r4
 80196b0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80196b4:	ee17 ca90 	vmov	ip, s15
 80196b8:	fb9c fcf4 	sdiv	ip, ip, r4
 80196bc:	fb0c 3306 	mla	r3, ip, r6, r3
 80196c0:	9302      	str	r3, [sp, #8]
 80196c2:	ee17 3a10 	vmov	r3, s14
 80196c6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80196ca:	fb07 3706 	mla	r7, r7, r6, r3
 80196ce:	eba9 0306 	sub.w	r3, r9, r6
 80196d2:	e9cd 4700 	strd	r4, r7, [sp]
 80196d6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80196da:	47a0      	blx	r4
 80196dc:	b00d      	add	sp, #52	; 0x34
 80196de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196e2:	2500      	movs	r5, #0
 80196e4:	462e      	mov	r6, r5
 80196e6:	e799      	b.n	801961c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080196e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80196e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196ec:	b0db      	sub	sp, #364	; 0x16c
 80196ee:	461d      	mov	r5, r3
 80196f0:	4614      	mov	r4, r2
 80196f2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80196f6:	910f      	str	r1, [sp, #60]	; 0x3c
 80196f8:	4629      	mov	r1, r5
 80196fa:	930a      	str	r3, [sp, #40]	; 0x28
 80196fc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019700:	9009      	str	r0, [sp, #36]	; 0x24
 8019702:	930b      	str	r3, [sp, #44]	; 0x2c
 8019704:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019708:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801970c:	9310      	str	r3, [sp, #64]	; 0x40
 801970e:	6803      	ldr	r3, [r0, #0]
 8019710:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8019712:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019716:	47b8      	blx	r7
 8019718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801971a:	6058      	str	r0, [r3, #4]
 801971c:	2800      	cmp	r0, #0
 801971e:	f000 83a1 	beq.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019722:	682b      	ldr	r3, [r5, #0]
 8019724:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019728:	ed94 7a02 	vldr	s14, [r4, #8]
 801972c:	9314      	str	r3, [sp, #80]	; 0x50
 801972e:	686b      	ldr	r3, [r5, #4]
 8019730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019734:	9315      	str	r3, [sp, #84]	; 0x54
 8019736:	4bc1      	ldr	r3, [pc, #772]	; (8019a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019738:	7819      	ldrb	r1, [r3, #0]
 801973a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801973e:	2900      	cmp	r1, #0
 8019740:	bf16      	itet	ne
 8019742:	4619      	movne	r1, r3
 8019744:	4611      	moveq	r1, r2
 8019746:	4613      	movne	r3, r2
 8019748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801974c:	9116      	str	r1, [sp, #88]	; 0x58
 801974e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8019752:	f240 8387 	bls.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019756:	ed94 7a07 	vldr	s14, [r4, #28]
 801975a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019762:	f240 837f 	bls.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019766:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801976a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019772:	f240 8377 	bls.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019776:	6822      	ldr	r2, [r4, #0]
 8019778:	4bb1      	ldr	r3, [pc, #708]	; (8019a40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801977a:	429a      	cmp	r2, r3
 801977c:	f2c0 8372 	blt.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019780:	49b0      	ldr	r1, [pc, #704]	; (8019a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019782:	6963      	ldr	r3, [r4, #20]
 8019784:	428a      	cmp	r2, r1
 8019786:	f300 836d 	bgt.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801978a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801978e:	48ae      	ldr	r0, [pc, #696]	; (8019a48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019790:	33ff      	adds	r3, #255	; 0xff
 8019792:	4283      	cmp	r3, r0
 8019794:	f200 8366 	bhi.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801979a:	4dac      	ldr	r5, [pc, #688]	; (8019a4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801979c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80197a0:	33ff      	adds	r3, #255	; 0xff
 80197a2:	42ab      	cmp	r3, r5
 80197a4:	f200 835e 	bhi.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80197a8:	6862      	ldr	r2, [r4, #4]
 80197aa:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80197ae:	33ff      	adds	r3, #255	; 0xff
 80197b0:	4283      	cmp	r3, r0
 80197b2:	f200 8357 	bhi.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80197b6:	69a1      	ldr	r1, [r4, #24]
 80197b8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80197bc:	33ff      	adds	r3, #255	; 0xff
 80197be:	4283      	cmp	r3, r0
 80197c0:	f200 8350 	bhi.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80197c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80197c6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80197ca:	30ff      	adds	r0, #255	; 0xff
 80197cc:	42a8      	cmp	r0, r5
 80197ce:	f200 8349 	bhi.w	8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80197d2:	428a      	cmp	r2, r1
 80197d4:	f280 8110 	bge.w	80199f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80197d8:	429a      	cmp	r2, r3
 80197da:	f300 8119 	bgt.w	8019a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80197de:	4299      	cmp	r1, r3
 80197e0:	f280 811d 	bge.w	8019a1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80197e4:	2502      	movs	r5, #2
 80197e6:	2701      	movs	r7, #1
 80197e8:	46a9      	mov	r9, r5
 80197ea:	46b8      	mov	r8, r7
 80197ec:	f04f 0a00 	mov.w	sl, #0
 80197f0:	4621      	mov	r1, r4
 80197f2:	a849      	add	r0, sp, #292	; 0x124
 80197f4:	f002 ffe6 	bl	801c7c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80197f8:	4622      	mov	r2, r4
 80197fa:	4653      	mov	r3, sl
 80197fc:	a949      	add	r1, sp, #292	; 0x124
 80197fe:	f8cd 9000 	str.w	r9, [sp]
 8019802:	a819      	add	r0, sp, #100	; 0x64
 8019804:	f003 f90e 	bl	801ca24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019808:	4622      	mov	r2, r4
 801980a:	4653      	mov	r3, sl
 801980c:	a949      	add	r1, sp, #292	; 0x124
 801980e:	f8cd 8000 	str.w	r8, [sp]
 8019812:	a829      	add	r0, sp, #164	; 0xa4
 8019814:	f003 f906 	bl	801ca24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019818:	4643      	mov	r3, r8
 801981a:	4622      	mov	r2, r4
 801981c:	a949      	add	r1, sp, #292	; 0x124
 801981e:	f8cd 9000 	str.w	r9, [sp]
 8019822:	a839      	add	r0, sp, #228	; 0xe4
 8019824:	f003 f8fe 	bl	801ca24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019828:	42af      	cmp	r7, r5
 801982a:	af12      	add	r7, sp, #72	; 0x48
 801982c:	bfb7      	itett	lt
 801982e:	2300      	movlt	r3, #0
 8019830:	2301      	movge	r3, #1
 8019832:	ad29      	addlt	r5, sp, #164	; 0xa4
 8019834:	ac19      	addlt	r4, sp, #100	; 0x64
 8019836:	bfb1      	iteee	lt
 8019838:	930e      	strlt	r3, [sp, #56]	; 0x38
 801983a:	ad19      	addge	r5, sp, #100	; 0x64
 801983c:	930e      	strge	r3, [sp, #56]	; 0x38
 801983e:	ac29      	addge	r4, sp, #164	; 0xa4
 8019840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019842:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019846:	e887 0003 	stmia.w	r7, {r0, r1}
 801984a:	b928      	cbnz	r0, 8019858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801984c:	4b80      	ldr	r3, [pc, #512]	; (8019a50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801984e:	6818      	ldr	r0, [r3, #0]
 8019850:	6803      	ldr	r3, [r0, #0]
 8019852:	6a1b      	ldr	r3, [r3, #32]
 8019854:	4798      	blx	r3
 8019856:	6038      	str	r0, [r7, #0]
 8019858:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801985a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801985e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019862:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019864:	930c      	str	r3, [sp, #48]	; 0x30
 8019866:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019868:	6963      	ldr	r3, [r4, #20]
 801986a:	440b      	add	r3, r1
 801986c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019870:	4408      	add	r0, r1
 8019872:	b200      	sxth	r0, r0
 8019874:	4283      	cmp	r3, r0
 8019876:	900d      	str	r0, [sp, #52]	; 0x34
 8019878:	f280 80dd 	bge.w	8019a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801987c:	428b      	cmp	r3, r1
 801987e:	da08      	bge.n	8019892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019880:	2a00      	cmp	r2, #0
 8019882:	dd06      	ble.n	8019892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019884:	1acb      	subs	r3, r1, r3
 8019886:	429a      	cmp	r2, r3
 8019888:	f2c0 80e4 	blt.w	8019a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801988c:	2b00      	cmp	r3, #0
 801988e:	f300 80e2 	bgt.w	8019a56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019892:	6967      	ldr	r7, [r4, #20]
 8019894:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801989a:	443b      	add	r3, r7
 801989c:	461f      	mov	r7, r3
 801989e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198a0:	1bdf      	subs	r7, r3, r7
 80198a2:	4297      	cmp	r7, r2
 80198a4:	bfa8      	it	ge
 80198a6:	4617      	movge	r7, r2
 80198a8:	2f00      	cmp	r7, #0
 80198aa:	f340 8166 	ble.w	8019b7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80198ae:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80198b0:	6829      	ldr	r1, [r5, #0]
 80198b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80198b6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80198ba:	4411      	add	r1, r2
 80198bc:	6820      	ldr	r0, [r4, #0]
 80198be:	4299      	cmp	r1, r3
 80198c0:	dd1a      	ble.n	80198f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80198c2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80198c6:	4402      	add	r2, r0
 80198c8:	440b      	add	r3, r1
 80198ca:	b21b      	sxth	r3, r3
 80198cc:	429a      	cmp	r2, r3
 80198ce:	dc13      	bgt.n	80198f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80198d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80198d2:	a912      	add	r1, sp, #72	; 0x48
 80198d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	9206      	str	r2, [sp, #24]
 80198dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80198de:	9500      	str	r5, [sp, #0]
 80198e0:	9205      	str	r2, [sp, #20]
 80198e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198e4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80198e8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80198ea:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80198ee:	aa49      	add	r2, sp, #292	; 0x124
 80198f0:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 80198f4:	4623      	mov	r3, r4
 80198f6:	47c8      	blx	r9
 80198f8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80198fc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019900:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019908:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801990c:	68a1      	ldr	r1, [r4, #8]
 801990e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019912:	ed94 6a08 	vldr	s12, [r4, #32]
 8019916:	edd4 6a07 	vldr	s13, [r4, #28]
 801991a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801991e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019922:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019926:	e9d4 2300 	ldrd	r2, r3, [r4]
 801992a:	edc4 6a07 	vstr	s13, [r4, #28]
 801992e:	441a      	add	r2, r3
 8019930:	6963      	ldr	r3, [r4, #20]
 8019932:	3301      	adds	r3, #1
 8019934:	6022      	str	r2, [r4, #0]
 8019936:	6163      	str	r3, [r4, #20]
 8019938:	69a3      	ldr	r3, [r4, #24]
 801993a:	3b01      	subs	r3, #1
 801993c:	61a3      	str	r3, [r4, #24]
 801993e:	6923      	ldr	r3, [r4, #16]
 8019940:	440b      	add	r3, r1
 8019942:	68e1      	ldr	r1, [r4, #12]
 8019944:	428b      	cmp	r3, r1
 8019946:	6123      	str	r3, [r4, #16]
 8019948:	db15      	blt.n	8019976 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801994a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801994e:	3201      	adds	r2, #1
 8019950:	1a5b      	subs	r3, r3, r1
 8019952:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019956:	6022      	str	r2, [r4, #0]
 8019958:	6123      	str	r3, [r4, #16]
 801995a:	edc4 6a07 	vstr	s13, [r4, #28]
 801995e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019962:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019966:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801996a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801996e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019972:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019976:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801997a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801997e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019986:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801998a:	68a9      	ldr	r1, [r5, #8]
 801998c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019990:	ed95 6a08 	vldr	s12, [r5, #32]
 8019994:	edd5 6a07 	vldr	s13, [r5, #28]
 8019998:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801999c:	ee76 6a86 	vadd.f32	s13, s13, s12
 80199a0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80199a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80199a8:	edc5 6a07 	vstr	s13, [r5, #28]
 80199ac:	441a      	add	r2, r3
 80199ae:	696b      	ldr	r3, [r5, #20]
 80199b0:	3301      	adds	r3, #1
 80199b2:	602a      	str	r2, [r5, #0]
 80199b4:	616b      	str	r3, [r5, #20]
 80199b6:	69ab      	ldr	r3, [r5, #24]
 80199b8:	3b01      	subs	r3, #1
 80199ba:	61ab      	str	r3, [r5, #24]
 80199bc:	692b      	ldr	r3, [r5, #16]
 80199be:	440b      	add	r3, r1
 80199c0:	68e9      	ldr	r1, [r5, #12]
 80199c2:	428b      	cmp	r3, r1
 80199c4:	612b      	str	r3, [r5, #16]
 80199c6:	db15      	blt.n	80199f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80199c8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80199cc:	3201      	adds	r2, #1
 80199ce:	1a5b      	subs	r3, r3, r1
 80199d0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80199d4:	602a      	str	r2, [r5, #0]
 80199d6:	612b      	str	r3, [r5, #16]
 80199d8:	edc5 6a07 	vstr	s13, [r5, #28]
 80199dc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80199e0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80199e4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80199e8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80199ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199f0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80199f4:	3f01      	subs	r7, #1
 80199f6:	e757      	b.n	80198a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80199f8:	4299      	cmp	r1, r3
 80199fa:	dc13      	bgt.n	8019a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80199fc:	429a      	cmp	r2, r3
 80199fe:	da14      	bge.n	8019a2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019a00:	2502      	movs	r5, #2
 8019a02:	2703      	movs	r7, #3
 8019a04:	f04f 0800 	mov.w	r8, #0
 8019a08:	46a9      	mov	r9, r5
 8019a0a:	f04f 0a01 	mov.w	sl, #1
 8019a0e:	e6ef      	b.n	80197f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019a10:	2501      	movs	r5, #1
 8019a12:	2700      	movs	r7, #0
 8019a14:	46a9      	mov	r9, r5
 8019a16:	46b8      	mov	r8, r7
 8019a18:	f04f 0a02 	mov.w	sl, #2
 8019a1c:	e6e8      	b.n	80197f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019a1e:	2501      	movs	r5, #1
 8019a20:	2702      	movs	r7, #2
 8019a22:	e6e1      	b.n	80197e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019a24:	2500      	movs	r5, #0
 8019a26:	2701      	movs	r7, #1
 8019a28:	e7f4      	b.n	8019a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019a2a:	2702      	movs	r7, #2
 8019a2c:	2503      	movs	r5, #3
 8019a2e:	f04f 0900 	mov.w	r9, #0
 8019a32:	46b8      	mov	r8, r7
 8019a34:	e7e9      	b.n	8019a0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019a36:	4613      	mov	r3, r2
 8019a38:	e728      	b.n	801988c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019a3a:	bf00      	nop
 8019a3c:	200094ce 	.word	0x200094ce
 8019a40:	fffd8f01 	.word	0xfffd8f01
 8019a44:	00027100 	.word	0x00027100
 8019a48:	0004e1ff 	.word	0x0004e1ff
 8019a4c:	0004e1fe 	.word	0x0004e1fe
 8019a50:	200094d8 	.word	0x200094d8
 8019a54:	4613      	mov	r3, r2
 8019a56:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019a58:	469e      	mov	lr, r3
 8019a5a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8019a5c:	469c      	mov	ip, r3
 8019a5e:	9111      	str	r1, [sp, #68]	; 0x44
 8019a60:	f04f 0900 	mov.w	r9, #0
 8019a64:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019a68:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019a6c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8019a70:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8019a74:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019a78:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019a7c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019a80:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019a84:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019a88:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019a8c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019a90:	f1bc 0f00 	cmp.w	ip, #0
 8019a94:	d147      	bne.n	8019b26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019a96:	eb03 0c07 	add.w	ip, r3, r7
 8019a9a:	1ad7      	subs	r7, r2, r3
 8019a9c:	f1b9 0f00 	cmp.w	r9, #0
 8019aa0:	d009      	beq.n	8019ab6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019aa2:	9029      	str	r0, [sp, #164]	; 0xa4
 8019aa4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019aa8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019aac:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019ab0:	912d      	str	r1, [sp, #180]	; 0xb4
 8019ab2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019ab6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019ab8:	f04f 0800 	mov.w	r8, #0
 8019abc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019ac0:	9111      	str	r1, [sp, #68]	; 0x44
 8019ac2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019ac6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019aca:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019ace:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019ad2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019ad6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019ada:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019ade:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019ae2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019ae6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019aea:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019aee:	f1be 0f00 	cmp.w	lr, #0
 8019af2:	d031      	beq.n	8019b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019af4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019af6:	4450      	add	r0, sl
 8019af8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019afc:	4431      	add	r1, r6
 8019afe:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019b02:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019b06:	4549      	cmp	r1, r9
 8019b08:	db08      	blt.n	8019b1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019b0a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019b0e:	3001      	adds	r0, #1
 8019b10:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019b14:	eba1 0109 	sub.w	r1, r1, r9
 8019b18:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019b1c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019b20:	f04f 0801 	mov.w	r8, #1
 8019b24:	e7e3      	b.n	8019aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019b26:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019b28:	4450      	add	r0, sl
 8019b2a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019b2e:	4431      	add	r1, r6
 8019b30:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019b34:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019b38:	4541      	cmp	r1, r8
 8019b3a:	db08      	blt.n	8019b4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019b3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019b40:	3001      	adds	r0, #1
 8019b42:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019b46:	eba1 0108 	sub.w	r1, r1, r8
 8019b4a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019b4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019b52:	f04f 0901 	mov.w	r9, #1
 8019b56:	e79b      	b.n	8019a90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019b58:	449c      	add	ip, r3
 8019b5a:	1aff      	subs	r7, r7, r3
 8019b5c:	f1b8 0f00 	cmp.w	r8, #0
 8019b60:	d009      	beq.n	8019b76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019b62:	9019      	str	r0, [sp, #100]	; 0x64
 8019b64:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019b68:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019b6c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019b70:	911d      	str	r1, [sp, #116]	; 0x74
 8019b72:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019b76:	1ad2      	subs	r2, r2, r3
 8019b78:	e68b      	b.n	8019892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b7c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	f000 80d1 	beq.w	8019d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019b84:	ad19      	add	r5, sp, #100	; 0x64
 8019b86:	ac39      	add	r4, sp, #228	; 0xe4
 8019b88:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019b8a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019b8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b92:	930c      	str	r3, [sp, #48]	; 0x30
 8019b94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b96:	6963      	ldr	r3, [r4, #20]
 8019b98:	440b      	add	r3, r1
 8019b9a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019b9e:	4408      	add	r0, r1
 8019ba0:	b200      	sxth	r0, r0
 8019ba2:	4283      	cmp	r3, r0
 8019ba4:	900d      	str	r0, [sp, #52]	; 0x34
 8019ba6:	f280 80c1 	bge.w	8019d2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019baa:	428b      	cmp	r3, r1
 8019bac:	da08      	bge.n	8019bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019bae:	2a00      	cmp	r2, #0
 8019bb0:	dd06      	ble.n	8019bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019bb2:	1acb      	subs	r3, r1, r3
 8019bb4:	429a      	cmp	r2, r3
 8019bb6:	f2c0 80bb 	blt.w	8019d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	f300 80b9 	bgt.w	8019d32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019bc0:	6967      	ldr	r7, [r4, #20]
 8019bc2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bc8:	443b      	add	r3, r7
 8019bca:	461f      	mov	r7, r3
 8019bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bce:	1bdf      	subs	r7, r3, r7
 8019bd0:	4297      	cmp	r7, r2
 8019bd2:	bfa8      	it	ge
 8019bd4:	4617      	movge	r7, r2
 8019bd6:	2f00      	cmp	r7, #0
 8019bd8:	f340 813c 	ble.w	8019e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019bdc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019bde:	6829      	ldr	r1, [r5, #0]
 8019be0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019be4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019be8:	4411      	add	r1, r2
 8019bea:	6820      	ldr	r0, [r4, #0]
 8019bec:	4299      	cmp	r1, r3
 8019bee:	dd1a      	ble.n	8019c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019bf0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019bf4:	4402      	add	r2, r0
 8019bf6:	440b      	add	r3, r1
 8019bf8:	b21b      	sxth	r3, r3
 8019bfa:	429a      	cmp	r2, r3
 8019bfc:	dc13      	bgt.n	8019c26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019bfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c00:	a912      	add	r1, sp, #72	; 0x48
 8019c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	9206      	str	r2, [sp, #24]
 8019c0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c0c:	9500      	str	r5, [sp, #0]
 8019c0e:	9205      	str	r2, [sp, #20]
 8019c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c12:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019c16:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019c18:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019c1c:	aa49      	add	r2, sp, #292	; 0x124
 8019c1e:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8019c22:	4623      	mov	r3, r4
 8019c24:	47c8      	blx	r9
 8019c26:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019c2a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019c2e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019c32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c36:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019c3a:	68a1      	ldr	r1, [r4, #8]
 8019c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c40:	ed94 6a08 	vldr	s12, [r4, #32]
 8019c44:	edd4 6a07 	vldr	s13, [r4, #28]
 8019c48:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019c4c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019c50:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019c54:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019c58:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c5c:	441a      	add	r2, r3
 8019c5e:	6963      	ldr	r3, [r4, #20]
 8019c60:	3301      	adds	r3, #1
 8019c62:	6022      	str	r2, [r4, #0]
 8019c64:	6163      	str	r3, [r4, #20]
 8019c66:	69a3      	ldr	r3, [r4, #24]
 8019c68:	3b01      	subs	r3, #1
 8019c6a:	61a3      	str	r3, [r4, #24]
 8019c6c:	6923      	ldr	r3, [r4, #16]
 8019c6e:	440b      	add	r3, r1
 8019c70:	68e1      	ldr	r1, [r4, #12]
 8019c72:	428b      	cmp	r3, r1
 8019c74:	6123      	str	r3, [r4, #16]
 8019c76:	db15      	blt.n	8019ca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019c78:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019c7c:	3201      	adds	r2, #1
 8019c7e:	1a5b      	subs	r3, r3, r1
 8019c80:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019c84:	6022      	str	r2, [r4, #0]
 8019c86:	6123      	str	r3, [r4, #16]
 8019c88:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c8c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019c90:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c94:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019c98:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ca0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019ca4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019ca8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019cac:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019cb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019cb4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019cb8:	68a9      	ldr	r1, [r5, #8]
 8019cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019cbe:	ed95 6a08 	vldr	s12, [r5, #32]
 8019cc2:	edd5 6a07 	vldr	s13, [r5, #28]
 8019cc6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019cca:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019cce:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019cd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019cd6:	edc5 6a07 	vstr	s13, [r5, #28]
 8019cda:	441a      	add	r2, r3
 8019cdc:	696b      	ldr	r3, [r5, #20]
 8019cde:	3301      	adds	r3, #1
 8019ce0:	602a      	str	r2, [r5, #0]
 8019ce2:	616b      	str	r3, [r5, #20]
 8019ce4:	69ab      	ldr	r3, [r5, #24]
 8019ce6:	3b01      	subs	r3, #1
 8019ce8:	61ab      	str	r3, [r5, #24]
 8019cea:	692b      	ldr	r3, [r5, #16]
 8019cec:	440b      	add	r3, r1
 8019cee:	68e9      	ldr	r1, [r5, #12]
 8019cf0:	428b      	cmp	r3, r1
 8019cf2:	612b      	str	r3, [r5, #16]
 8019cf4:	db15      	blt.n	8019d22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019cf6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019cfa:	3201      	adds	r2, #1
 8019cfc:	1a5b      	subs	r3, r3, r1
 8019cfe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019d02:	602a      	str	r2, [r5, #0]
 8019d04:	612b      	str	r3, [r5, #16]
 8019d06:	edc5 6a07 	vstr	s13, [r5, #28]
 8019d0a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019d0e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019d12:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019d16:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d1e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019d22:	3f01      	subs	r7, #1
 8019d24:	e757      	b.n	8019bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019d26:	ad39      	add	r5, sp, #228	; 0xe4
 8019d28:	ac19      	add	r4, sp, #100	; 0x64
 8019d2a:	e72d      	b.n	8019b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019d2c:	4613      	mov	r3, r2
 8019d2e:	e744      	b.n	8019bba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019d30:	4613      	mov	r3, r2
 8019d32:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019d34:	469e      	mov	lr, r3
 8019d36:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019d3a:	461f      	mov	r7, r3
 8019d3c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019d40:	f04f 0900 	mov.w	r9, #0
 8019d44:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019d48:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019d4c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019d50:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019d54:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019d58:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019d5a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019d5e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019d62:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019d66:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019d6a:	960e      	str	r6, [sp, #56]	; 0x38
 8019d6c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019d70:	2f00      	cmp	r7, #0
 8019d72:	d146      	bne.n	8019e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019d74:	449c      	add	ip, r3
 8019d76:	1ad7      	subs	r7, r2, r3
 8019d78:	f1b9 0f00 	cmp.w	r9, #0
 8019d7c:	d009      	beq.n	8019d92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019d7e:	9039      	str	r0, [sp, #228]	; 0xe4
 8019d80:	913d      	str	r1, [sp, #244]	; 0xf4
 8019d82:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019d86:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019d8a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019d8e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019d92:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019d94:	f04f 0800 	mov.w	r8, #0
 8019d98:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019d9c:	910e      	str	r1, [sp, #56]	; 0x38
 8019d9e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019da2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019da6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019daa:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019dae:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019db2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019db6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019dba:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019dbe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019dc2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019dc6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019dca:	f1be 0f00 	cmp.w	lr, #0
 8019dce:	d030      	beq.n	8019e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019dd0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019dd2:	4450      	add	r0, sl
 8019dd4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019dd8:	4431      	add	r1, r6
 8019dda:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019dde:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019de2:	4549      	cmp	r1, r9
 8019de4:	db08      	blt.n	8019df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019de6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019dea:	3001      	adds	r0, #1
 8019dec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019df0:	eba1 0109 	sub.w	r1, r1, r9
 8019df4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019df8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019dfc:	f04f 0801 	mov.w	r8, #1
 8019e00:	e7e3      	b.n	8019dca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019e02:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019e04:	4450      	add	r0, sl
 8019e06:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019e0a:	4431      	add	r1, r6
 8019e0c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019e10:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019e14:	4541      	cmp	r1, r8
 8019e16:	db08      	blt.n	8019e2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019e18:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019e1c:	3001      	adds	r0, #1
 8019e1e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019e22:	eba1 0108 	sub.w	r1, r1, r8
 8019e26:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019e2a:	3f01      	subs	r7, #1
 8019e2c:	f04f 0901 	mov.w	r9, #1
 8019e30:	e79e      	b.n	8019d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019e32:	449c      	add	ip, r3
 8019e34:	1aff      	subs	r7, r7, r3
 8019e36:	f1b8 0f00 	cmp.w	r8, #0
 8019e3a:	d009      	beq.n	8019e50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019e3c:	9019      	str	r0, [sp, #100]	; 0x64
 8019e3e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019e42:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019e46:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019e4a:	911d      	str	r1, [sp, #116]	; 0x74
 8019e4c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019e50:	1ad2      	subs	r2, r2, r3
 8019e52:	e6b5      	b.n	8019bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	b923      	cbnz	r3, 8019e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019e5a:	4b04      	ldr	r3, [pc, #16]	; (8019e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019e5c:	6818      	ldr	r0, [r3, #0]
 8019e5e:	6803      	ldr	r3, [r0, #0]
 8019e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e62:	4798      	blx	r3
 8019e64:	b05b      	add	sp, #364	; 0x16c
 8019e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e6a:	bf00      	nop
 8019e6c:	200094d8 	.word	0x200094d8

08019e70 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019e70:	2b02      	cmp	r3, #2
 8019e72:	b510      	push	{r4, lr}
 8019e74:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019e78:	d00b      	beq.n	8019e92 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8019e7a:	2b03      	cmp	r3, #3
 8019e7c:	d00e      	beq.n	8019e9c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8019e7e:	2b01      	cmp	r3, #1
 8019e80:	d001      	beq.n	8019e86 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8019e82:	1860      	adds	r0, r4, r1
 8019e84:	bd10      	pop	{r4, pc}
 8019e86:	8880      	ldrh	r0, [r0, #4]
 8019e88:	4420      	add	r0, r4
 8019e8a:	b200      	sxth	r0, r0
 8019e8c:	1a80      	subs	r0, r0, r2
 8019e8e:	3801      	subs	r0, #1
 8019e90:	e7f8      	b.n	8019e84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019e92:	8880      	ldrh	r0, [r0, #4]
 8019e94:	4420      	add	r0, r4
 8019e96:	b200      	sxth	r0, r0
 8019e98:	1a40      	subs	r0, r0, r1
 8019e9a:	e7f8      	b.n	8019e8e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8019e9c:	18a0      	adds	r0, r4, r2
 8019e9e:	e7f1      	b.n	8019e84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08019ea0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8019ea0:	2b02      	cmp	r3, #2
 8019ea2:	b510      	push	{r4, lr}
 8019ea4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8019ea8:	d006      	beq.n	8019eb8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8019eaa:	2b03      	cmp	r3, #3
 8019eac:	d00a      	beq.n	8019ec4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019eae:	2b01      	cmp	r3, #1
 8019eb0:	bf14      	ite	ne
 8019eb2:	18a0      	addne	r0, r4, r2
 8019eb4:	1860      	addeq	r0, r4, r1
 8019eb6:	bd10      	pop	{r4, pc}
 8019eb8:	88c0      	ldrh	r0, [r0, #6]
 8019eba:	4420      	add	r0, r4
 8019ebc:	b200      	sxth	r0, r0
 8019ebe:	1a80      	subs	r0, r0, r2
 8019ec0:	3801      	subs	r0, #1
 8019ec2:	e7f8      	b.n	8019eb6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8019ec4:	88c0      	ldrh	r0, [r0, #6]
 8019ec6:	4420      	add	r0, r4
 8019ec8:	b200      	sxth	r0, r0
 8019eca:	1a40      	subs	r0, r0, r1
 8019ecc:	e7f8      	b.n	8019ec0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08019ed0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019ed0:	4b01      	ldr	r3, [pc, #4]	; (8019ed8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	601a      	str	r2, [r3, #0]
 8019ed6:	4770      	bx	lr
 8019ed8:	200094e0 	.word	0x200094e0

08019edc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019edc:	4603      	mov	r3, r0
 8019ede:	b1c8      	cbz	r0, 8019f14 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019ee0:	0c02      	lsrs	r2, r0, #16
 8019ee2:	0412      	lsls	r2, r2, #16
 8019ee4:	b9a2      	cbnz	r2, 8019f10 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8019ee6:	0403      	lsls	r3, r0, #16
 8019ee8:	2010      	movs	r0, #16
 8019eea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019eee:	bf04      	itt	eq
 8019ef0:	021b      	lsleq	r3, r3, #8
 8019ef2:	3008      	addeq	r0, #8
 8019ef4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019ef8:	bf04      	itt	eq
 8019efa:	011b      	lsleq	r3, r3, #4
 8019efc:	3004      	addeq	r0, #4
 8019efe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019f02:	bf04      	itt	eq
 8019f04:	009b      	lsleq	r3, r3, #2
 8019f06:	3002      	addeq	r0, #2
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	db04      	blt.n	8019f16 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019f0c:	3001      	adds	r0, #1
 8019f0e:	4770      	bx	lr
 8019f10:	2000      	movs	r0, #0
 8019f12:	e7ea      	b.n	8019eea <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019f14:	2020      	movs	r0, #32
 8019f16:	4770      	bx	lr

08019f18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f1c:	b087      	sub	sp, #28
 8019f1e:	4681      	mov	r9, r0
 8019f20:	4698      	mov	r8, r3
 8019f22:	4610      	mov	r0, r2
 8019f24:	460d      	mov	r5, r1
 8019f26:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019f2a:	b981      	cbnz	r1, 8019f4e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019f2c:	b14b      	cbz	r3, 8019f42 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019f2e:	460b      	mov	r3, r1
 8019f30:	464a      	mov	r2, r9
 8019f32:	4641      	mov	r1, r8
 8019f34:	e9cd 4700 	strd	r4, r7, [sp]
 8019f38:	f7ff ffee 	bl	8019f18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019f3c:	b007      	add	sp, #28
 8019f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f42:	f04f 33ff 	mov.w	r3, #4294967295
 8019f46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019f4a:	603b      	str	r3, [r7, #0]
 8019f4c:	e7f6      	b.n	8019f3c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019f4e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8019f52:	d107      	bne.n	8019f64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8019f54:	fb09 f602 	mul.w	r6, r9, r2
 8019f58:	fbb6 f0f4 	udiv	r0, r6, r4
 8019f5c:	fb04 6610 	mls	r6, r4, r0, r6
 8019f60:	603e      	str	r6, [r7, #0]
 8019f62:	e7eb      	b.n	8019f3c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019f64:	2601      	movs	r6, #1
 8019f66:	fa09 fb01 	lsl.w	fp, r9, r1
 8019f6a:	408e      	lsls	r6, r1
 8019f6c:	fbbb f3f4 	udiv	r3, fp, r4
 8019f70:	3e01      	subs	r6, #1
 8019f72:	9302      	str	r3, [sp, #8]
 8019f74:	fb0a f303 	mul.w	r3, sl, r3
 8019f78:	4016      	ands	r6, r2
 8019f7a:	9303      	str	r3, [sp, #12]
 8019f7c:	4630      	mov	r0, r6
 8019f7e:	f7ff ffad 	bl	8019edc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019f82:	464a      	mov	r2, r9
 8019f84:	460b      	mov	r3, r1
 8019f86:	4601      	mov	r1, r0
 8019f88:	4630      	mov	r0, r6
 8019f8a:	e9cd 4700 	strd	r4, r7, [sp]
 8019f8e:	f7ff ffc3 	bl	8019f18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019f92:	9b02      	ldr	r3, [sp, #8]
 8019f94:	4606      	mov	r6, r0
 8019f96:	eb05 0108 	add.w	r1, r5, r8
 8019f9a:	fb04 bb13 	mls	fp, r4, r3, fp
 8019f9e:	4658      	mov	r0, fp
 8019fa0:	f7ff ff9c 	bl	8019edc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019fa4:	ab05      	add	r3, sp, #20
 8019fa6:	465a      	mov	r2, fp
 8019fa8:	e9cd 4300 	strd	r4, r3, [sp]
 8019fac:	4603      	mov	r3, r0
 8019fae:	4650      	mov	r0, sl
 8019fb0:	f7ff ffb2 	bl	8019f18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019fb4:	6839      	ldr	r1, [r7, #0]
 8019fb6:	9a05      	ldr	r2, [sp, #20]
 8019fb8:	9b03      	ldr	r3, [sp, #12]
 8019fba:	4411      	add	r1, r2
 8019fbc:	fbb1 f2f4 	udiv	r2, r1, r4
 8019fc0:	18d3      	adds	r3, r2, r3
 8019fc2:	fb04 1412 	mls	r4, r4, r2, r1
 8019fc6:	441e      	add	r6, r3
 8019fc8:	603c      	str	r4, [r7, #0]
 8019fca:	4430      	add	r0, r6
 8019fcc:	e7b6      	b.n	8019f3c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08019fce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019fce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fd2:	b085      	sub	sp, #20
 8019fd4:	f1b0 0900 	subs.w	r9, r0, #0
 8019fd8:	461d      	mov	r5, r3
 8019fda:	4617      	mov	r7, r2
 8019fdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019fde:	bfbb      	ittet	lt
 8019fe0:	f1c9 0900 	rsblt	r9, r9, #0
 8019fe4:	f04f 36ff 	movlt.w	r6, #4294967295
 8019fe8:	2601      	movge	r6, #1
 8019fea:	6823      	ldrlt	r3, [r4, #0]
 8019fec:	bfbc      	itt	lt
 8019fee:	425b      	neglt	r3, r3
 8019ff0:	6023      	strlt	r3, [r4, #0]
 8019ff2:	2a00      	cmp	r2, #0
 8019ff4:	da04      	bge.n	801a000 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019ff6:	6823      	ldr	r3, [r4, #0]
 8019ff8:	4257      	negs	r7, r2
 8019ffa:	4276      	negs	r6, r6
 8019ffc:	425b      	negs	r3, r3
 8019ffe:	6023      	str	r3, [r4, #0]
 801a000:	2d00      	cmp	r5, #0
 801a002:	4638      	mov	r0, r7
 801a004:	bfba      	itte	lt
 801a006:	426d      	neglt	r5, r5
 801a008:	f04f 38ff 	movlt.w	r8, #4294967295
 801a00c:	f04f 0801 	movge.w	r8, #1
 801a010:	f7ff ff64 	bl	8019edc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a014:	ab03      	add	r3, sp, #12
 801a016:	463a      	mov	r2, r7
 801a018:	e9cd 5300 	strd	r5, r3, [sp]
 801a01c:	4603      	mov	r3, r0
 801a01e:	4648      	mov	r0, r9
 801a020:	f7ff ff7a 	bl	8019f18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a024:	6823      	ldr	r3, [r4, #0]
 801a026:	9a03      	ldr	r2, [sp, #12]
 801a028:	4546      	cmp	r6, r8
 801a02a:	441a      	add	r2, r3
 801a02c:	fb92 f3f5 	sdiv	r3, r2, r5
 801a030:	4418      	add	r0, r3
 801a032:	fb05 2313 	mls	r3, r5, r3, r2
 801a036:	bf18      	it	ne
 801a038:	4240      	negne	r0, r0
 801a03a:	1c72      	adds	r2, r6, #1
 801a03c:	6023      	str	r3, [r4, #0]
 801a03e:	d105      	bne.n	801a04c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a040:	2b00      	cmp	r3, #0
 801a042:	f1c3 0200 	rsb	r2, r3, #0
 801a046:	db0b      	blt.n	801a060 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a048:	6022      	str	r2, [r4, #0]
 801a04a:	e006      	b.n	801a05a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a04c:	2e01      	cmp	r6, #1
 801a04e:	d104      	bne.n	801a05a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a050:	2b00      	cmp	r3, #0
 801a052:	da02      	bge.n	801a05a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a054:	442b      	add	r3, r5
 801a056:	3801      	subs	r0, #1
 801a058:	6023      	str	r3, [r4, #0]
 801a05a:	b005      	add	sp, #20
 801a05c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a060:	3801      	subs	r0, #1
 801a062:	1b52      	subs	r2, r2, r5
 801a064:	e7f0      	b.n	801a048 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a068 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a068:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a06c:	4c1c      	ldr	r4, [pc, #112]	; (801a0e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a06e:	4605      	mov	r5, r0
 801a070:	6807      	ldr	r7, [r0, #0]
 801a072:	69a3      	ldr	r3, [r4, #24]
 801a074:	b92b      	cbnz	r3, 801a082 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a076:	6840      	ldr	r0, [r0, #4]
 801a078:	e9c5 7000 	strd	r7, r0, [r5]
 801a07c:	b004      	add	sp, #16
 801a07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a082:	f04f 0802 	mov.w	r8, #2
 801a086:	68a2      	ldr	r2, [r4, #8]
 801a088:	ae04      	add	r6, sp, #16
 801a08a:	6820      	ldr	r0, [r4, #0]
 801a08c:	fb93 f1f8 	sdiv	r1, r3, r8
 801a090:	440a      	add	r2, r1
 801a092:	69e1      	ldr	r1, [r4, #28]
 801a094:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a098:	463a      	mov	r2, r7
 801a09a:	9600      	str	r6, [sp, #0]
 801a09c:	f7ff ff97 	bl	8019fce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a0a0:	69a3      	ldr	r3, [r4, #24]
 801a0a2:	4607      	mov	r7, r0
 801a0a4:	686a      	ldr	r2, [r5, #4]
 801a0a6:	6a21      	ldr	r1, [r4, #32]
 801a0a8:	9600      	str	r6, [sp, #0]
 801a0aa:	6860      	ldr	r0, [r4, #4]
 801a0ac:	f7ff ff8f 	bl	8019fce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a0b0:	69a3      	ldr	r3, [r4, #24]
 801a0b2:	6962      	ldr	r2, [r4, #20]
 801a0b4:	4407      	add	r7, r0
 801a0b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a0b8:	9600      	str	r6, [sp, #0]
 801a0ba:	68e0      	ldr	r0, [r4, #12]
 801a0bc:	fb93 f8f8 	sdiv	r8, r3, r8
 801a0c0:	4442      	add	r2, r8
 801a0c2:	9203      	str	r2, [sp, #12]
 801a0c4:	682a      	ldr	r2, [r5, #0]
 801a0c6:	f7ff ff82 	bl	8019fce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a0ca:	4680      	mov	r8, r0
 801a0cc:	9600      	str	r6, [sp, #0]
 801a0ce:	69a3      	ldr	r3, [r4, #24]
 801a0d0:	686a      	ldr	r2, [r5, #4]
 801a0d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a0d4:	6920      	ldr	r0, [r4, #16]
 801a0d6:	f7ff ff7a 	bl	8019fce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a0da:	4440      	add	r0, r8
 801a0dc:	e7cc      	b.n	801a078 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a0de:	bf00      	nop
 801a0e0:	200094e4 	.word	0x200094e4

0801a0e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a0e4:	4b07      	ldr	r3, [pc, #28]	; (801a104 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a0e6:	b510      	push	{r4, lr}
 801a0e8:	781b      	ldrb	r3, [r3, #0]
 801a0ea:	2b01      	cmp	r3, #1
 801a0ec:	d108      	bne.n	801a100 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a0ee:	4b06      	ldr	r3, [pc, #24]	; (801a108 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a0f0:	880c      	ldrh	r4, [r1, #0]
 801a0f2:	881b      	ldrh	r3, [r3, #0]
 801a0f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a0f8:	3b01      	subs	r3, #1
 801a0fa:	1b1b      	subs	r3, r3, r4
 801a0fc:	8003      	strh	r3, [r0, #0]
 801a0fe:	800a      	strh	r2, [r1, #0]
 801a100:	bd10      	pop	{r4, pc}
 801a102:	bf00      	nop
 801a104:	200094ce 	.word	0x200094ce
 801a108:	200094d2 	.word	0x200094d2

0801a10c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a10c:	4b0a      	ldr	r3, [pc, #40]	; (801a138 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a10e:	b510      	push	{r4, lr}
 801a110:	781b      	ldrb	r3, [r3, #0]
 801a112:	2b01      	cmp	r3, #1
 801a114:	d10e      	bne.n	801a134 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a116:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a11a:	8843      	ldrh	r3, [r0, #2]
 801a11c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a120:	18ca      	adds	r2, r1, r3
 801a122:	4b06      	ldr	r3, [pc, #24]	; (801a13c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a124:	8044      	strh	r4, [r0, #2]
 801a126:	881b      	ldrh	r3, [r3, #0]
 801a128:	1a9b      	subs	r3, r3, r2
 801a12a:	8003      	strh	r3, [r0, #0]
 801a12c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a130:	8081      	strh	r1, [r0, #4]
 801a132:	80c3      	strh	r3, [r0, #6]
 801a134:	bd10      	pop	{r4, pc}
 801a136:	bf00      	nop
 801a138:	200094ce 	.word	0x200094ce
 801a13c:	200094ca 	.word	0x200094ca

0801a140 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a140:	4b07      	ldr	r3, [pc, #28]	; (801a160 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a142:	b510      	push	{r4, lr}
 801a144:	781b      	ldrb	r3, [r3, #0]
 801a146:	2b01      	cmp	r3, #1
 801a148:	d108      	bne.n	801a15c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a14a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a14e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a152:	8003      	strh	r3, [r0, #0]
 801a154:	8893      	ldrh	r3, [r2, #4]
 801a156:	3b01      	subs	r3, #1
 801a158:	1b1b      	subs	r3, r3, r4
 801a15a:	800b      	strh	r3, [r1, #0]
 801a15c:	bd10      	pop	{r4, pc}
 801a15e:	bf00      	nop
 801a160:	200094ce 	.word	0x200094ce

0801a164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a164:	4b08      	ldr	r3, [pc, #32]	; (801a188 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a166:	b513      	push	{r0, r1, r4, lr}
 801a168:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a16c:	2400      	movs	r4, #0
 801a16e:	4b07      	ldr	r3, [pc, #28]	; (801a18c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801a170:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a174:	466a      	mov	r2, sp
 801a176:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a17a:	9400      	str	r4, [sp, #0]
 801a17c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a180:	f7ff ffde 	bl	801a140 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a184:	b002      	add	sp, #8
 801a186:	bd10      	pop	{r4, pc}
 801a188:	200094ca 	.word	0x200094ca
 801a18c:	200094cc 	.word	0x200094cc

0801a190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a190:	4b0a      	ldr	r3, [pc, #40]	; (801a1bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a192:	460a      	mov	r2, r1
 801a194:	b510      	push	{r4, lr}
 801a196:	781b      	ldrb	r3, [r3, #0]
 801a198:	2b01      	cmp	r3, #1
 801a19a:	d10d      	bne.n	801a1b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a19c:	8881      	ldrh	r1, [r0, #4]
 801a19e:	8803      	ldrh	r3, [r0, #0]
 801a1a0:	440b      	add	r3, r1
 801a1a2:	4601      	mov	r1, r0
 801a1a4:	3b01      	subs	r3, #1
 801a1a6:	f821 3b02 	strh.w	r3, [r1], #2
 801a1aa:	f7ff ffc9 	bl	801a140 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a1ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a1b2:	88c2      	ldrh	r2, [r0, #6]
 801a1b4:	80c3      	strh	r3, [r0, #6]
 801a1b6:	8082      	strh	r2, [r0, #4]
 801a1b8:	bd10      	pop	{r4, pc}
 801a1ba:	bf00      	nop
 801a1bc:	200094ce 	.word	0x200094ce

0801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a1c0:	4b09      	ldr	r3, [pc, #36]	; (801a1e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a1c2:	b507      	push	{r0, r1, r2, lr}
 801a1c4:	2100      	movs	r1, #0
 801a1c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a1ca:	4b08      	ldr	r3, [pc, #32]	; (801a1ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a1cc:	9100      	str	r1, [sp, #0]
 801a1ce:	4669      	mov	r1, sp
 801a1d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a1d4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a1d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a1dc:	f7ff ffd8 	bl	801a190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1e0:	b003      	add	sp, #12
 801a1e2:	f85d fb04 	ldr.w	pc, [sp], #4
 801a1e6:	bf00      	nop
 801a1e8:	200094ca 	.word	0x200094ca
 801a1ec:	200094cc 	.word	0x200094cc

0801a1f0 <_ZN8touchgfx11Application13requestRedrawEv>:
 801a1f0:	4b06      	ldr	r3, [pc, #24]	; (801a20c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a1f2:	2100      	movs	r1, #0
 801a1f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a1f8:	4b05      	ldr	r3, [pc, #20]	; (801a210 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a1fa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801a1fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a202:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801a206:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801a20a:	4770      	bx	lr
 801a20c:	200094ca 	.word	0x200094ca
 801a210:	200094cc 	.word	0x200094cc

0801a214 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a214:	4b03      	ldr	r3, [pc, #12]	; (801a224 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a216:	6818      	ldr	r0, [r3, #0]
 801a218:	b110      	cbz	r0, 801a220 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a21a:	6803      	ldr	r3, [r0, #0]
 801a21c:	699b      	ldr	r3, [r3, #24]
 801a21e:	4718      	bx	r3
 801a220:	4770      	bx	lr
 801a222:	bf00      	nop
 801a224:	20009514 	.word	0x20009514

0801a228 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a228:	4770      	bx	lr
	...

0801a22c <_ZN8touchgfx11Application4drawEv>:
 801a22c:	4b09      	ldr	r3, [pc, #36]	; (801a254 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a22e:	b507      	push	{r0, r1, r2, lr}
 801a230:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a234:	2100      	movs	r1, #0
 801a236:	4b08      	ldr	r3, [pc, #32]	; (801a258 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a238:	9100      	str	r1, [sp, #0]
 801a23a:	4669      	mov	r1, sp
 801a23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a240:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a244:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a248:	6803      	ldr	r3, [r0, #0]
 801a24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a24c:	4798      	blx	r3
 801a24e:	b003      	add	sp, #12
 801a250:	f85d fb04 	ldr.w	pc, [sp], #4
 801a254:	200094ca 	.word	0x200094ca
 801a258:	200094cc 	.word	0x200094cc

0801a25c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a25c:	4b03      	ldr	r3, [pc, #12]	; (801a26c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a25e:	6818      	ldr	r0, [r3, #0]
 801a260:	b110      	cbz	r0, 801a268 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a262:	6803      	ldr	r3, [r0, #0]
 801a264:	69db      	ldr	r3, [r3, #28]
 801a266:	4718      	bx	r3
 801a268:	4770      	bx	lr
 801a26a:	bf00      	nop
 801a26c:	20009514 	.word	0x20009514

0801a270 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a270:	4b03      	ldr	r3, [pc, #12]	; (801a280 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a272:	6818      	ldr	r0, [r3, #0]
 801a274:	b110      	cbz	r0, 801a27c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a276:	6803      	ldr	r3, [r0, #0]
 801a278:	6a1b      	ldr	r3, [r3, #32]
 801a27a:	4718      	bx	r3
 801a27c:	4770      	bx	lr
 801a27e:	bf00      	nop
 801a280:	20009514 	.word	0x20009514

0801a284 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a284:	4b03      	ldr	r3, [pc, #12]	; (801a294 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a286:	6818      	ldr	r0, [r3, #0]
 801a288:	b110      	cbz	r0, 801a290 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a28a:	6803      	ldr	r3, [r0, #0]
 801a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a28e:	4718      	bx	r3
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	20009514 	.word	0x20009514

0801a298 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a298:	b570      	push	{r4, r5, r6, lr}
 801a29a:	4d34      	ldr	r5, [pc, #208]	; (801a36c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 801a29c:	4604      	mov	r4, r0
 801a29e:	6828      	ldr	r0, [r5, #0]
 801a2a0:	b140      	cbz	r0, 801a2b4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a2a2:	7a03      	ldrb	r3, [r0, #8]
 801a2a4:	b933      	cbnz	r3, 801a2b4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a2a6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a2aa:	6803      	ldr	r3, [r0, #0]
 801a2ac:	689b      	ldr	r3, [r3, #8]
 801a2ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2b2:	4718      	bx	r3
 801a2b4:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801a2b8:	b97b      	cbnz	r3, 801a2da <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a2ba:	b170      	cbz	r0, 801a2da <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a2bc:	7a03      	ldrb	r3, [r0, #8]
 801a2be:	b163      	cbz	r3, 801a2da <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a2c0:	4b2b      	ldr	r3, [pc, #172]	; (801a370 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a2c2:	6818      	ldr	r0, [r3, #0]
 801a2c4:	b110      	cbz	r0, 801a2cc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a2c6:	6803      	ldr	r3, [r0, #0]
 801a2c8:	691b      	ldr	r3, [r3, #16]
 801a2ca:	4798      	blx	r3
 801a2cc:	6828      	ldr	r0, [r5, #0]
 801a2ce:	6803      	ldr	r3, [r0, #0]
 801a2d0:	68db      	ldr	r3, [r3, #12]
 801a2d2:	4798      	blx	r3
 801a2d4:	2301      	movs	r3, #1
 801a2d6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801a2da:	2500      	movs	r5, #0
 801a2dc:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801a2e0:	42a8      	cmp	r0, r5
 801a2e2:	dd0c      	ble.n	801a2fe <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801a2e4:	1963      	adds	r3, r4, r5
 801a2e6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801a2ea:	b132      	cbz	r2, 801a2fa <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801a2ec:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a2f0:	4413      	add	r3, r2
 801a2f2:	6858      	ldr	r0, [r3, #4]
 801a2f4:	6803      	ldr	r3, [r0, #0]
 801a2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2f8:	4798      	blx	r3
 801a2fa:	3501      	adds	r5, #1
 801a2fc:	e7ee      	b.n	801a2dc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801a2fe:	2300      	movs	r3, #0
 801a300:	461a      	mov	r2, r3
 801a302:	4298      	cmp	r0, r3
 801a304:	d114      	bne.n	801a330 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801a306:	1d25      	adds	r5, r4, #4
 801a308:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801a30c:	1e48      	subs	r0, r1, #1
 801a30e:	b280      	uxth	r0, r0
 801a310:	4291      	cmp	r1, r2
 801a312:	dd24      	ble.n	801a35e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 801a314:	4288      	cmp	r0, r1
 801a316:	d2fb      	bcs.n	801a310 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 801a318:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801a31c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801a320:	3304      	adds	r3, #4
 801a322:	428b      	cmp	r3, r1
 801a324:	d018      	beq.n	801a358 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801a326:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801a32a:	f843 6c04 	str.w	r6, [r3, #-4]
 801a32e:	e7f8      	b.n	801a322 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 801a330:	18e1      	adds	r1, r4, r3
 801a332:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801a336:	b16d      	cbz	r5, 801a354 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 801a338:	429a      	cmp	r2, r3
 801a33a:	d00a      	beq.n	801a352 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 801a33c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801a340:	4431      	add	r1, r6
 801a342:	684e      	ldr	r6, [r1, #4]
 801a344:	b291      	uxth	r1, r2
 801a346:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a34a:	604e      	str	r6, [r1, #4]
 801a34c:	18a1      	adds	r1, r4, r2
 801a34e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a352:	3201      	adds	r2, #1
 801a354:	3301      	adds	r3, #1
 801a356:	e7d4      	b.n	801a302 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801a358:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801a35c:	e7d4      	b.n	801a308 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801a35e:	4b04      	ldr	r3, [pc, #16]	; (801a370 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 801a360:	6818      	ldr	r0, [r3, #0]
 801a362:	b110      	cbz	r0, 801a36a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801a364:	6803      	ldr	r3, [r0, #0]
 801a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a368:	e7a1      	b.n	801a2ae <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a36a:	bd70      	pop	{r4, r5, r6, pc}
 801a36c:	20009518 	.word	0x20009518
 801a370:	20009514 	.word	0x20009514

0801a374 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a374:	b570      	push	{r4, r5, r6, lr}
 801a376:	4606      	mov	r6, r0
 801a378:	460c      	mov	r4, r1
 801a37a:	b929      	cbnz	r1, 801a388 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801a37c:	4b0c      	ldr	r3, [pc, #48]	; (801a3b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801a37e:	2164      	movs	r1, #100	; 0x64
 801a380:	4a0c      	ldr	r2, [pc, #48]	; (801a3b4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801a382:	480d      	ldr	r0, [pc, #52]	; (801a3b8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801a384:	f00a ffa2 	bl	80252cc <__assert_func>
 801a388:	2300      	movs	r3, #0
 801a38a:	4d0c      	ldr	r5, [pc, #48]	; (801a3bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801a38c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801a390:	6828      	ldr	r0, [r5, #0]
 801a392:	b110      	cbz	r0, 801a39a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801a394:	6803      	ldr	r3, [r0, #0]
 801a396:	695b      	ldr	r3, [r3, #20]
 801a398:	4798      	blx	r3
 801a39a:	602c      	str	r4, [r5, #0]
 801a39c:	4620      	mov	r0, r4
 801a39e:	6823      	ldr	r3, [r4, #0]
 801a3a0:	68db      	ldr	r3, [r3, #12]
 801a3a2:	4798      	blx	r3
 801a3a4:	6833      	ldr	r3, [r6, #0]
 801a3a6:	4630      	mov	r0, r6
 801a3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a3aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a3ae:	4718      	bx	r3
 801a3b0:	08028084 	.word	0x08028084
 801a3b4:	08028154 	.word	0x08028154
 801a3b8:	0802808e 	.word	0x0802808e
 801a3bc:	20009514 	.word	0x20009514

0801a3c0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a3c0:	b510      	push	{r4, lr}
 801a3c2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a3c6:	888a      	ldrh	r2, [r1, #4]
 801a3c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a3cc:	4422      	add	r2, r4
 801a3ce:	b212      	sxth	r2, r2
 801a3d0:	4293      	cmp	r3, r2
 801a3d2:	da15      	bge.n	801a400 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a3d4:	8882      	ldrh	r2, [r0, #4]
 801a3d6:	4413      	add	r3, r2
 801a3d8:	b21b      	sxth	r3, r3
 801a3da:	429c      	cmp	r4, r3
 801a3dc:	da10      	bge.n	801a400 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a3de:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a3e2:	88c9      	ldrh	r1, [r1, #6]
 801a3e4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a3e8:	4419      	add	r1, r3
 801a3ea:	b209      	sxth	r1, r1
 801a3ec:	428a      	cmp	r2, r1
 801a3ee:	da07      	bge.n	801a400 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a3f0:	88c0      	ldrh	r0, [r0, #6]
 801a3f2:	4410      	add	r0, r2
 801a3f4:	b200      	sxth	r0, r0
 801a3f6:	4283      	cmp	r3, r0
 801a3f8:	bfac      	ite	ge
 801a3fa:	2000      	movge	r0, #0
 801a3fc:	2001      	movlt	r0, #1
 801a3fe:	bd10      	pop	{r4, pc}
 801a400:	2000      	movs	r0, #0
 801a402:	e7fc      	b.n	801a3fe <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a404 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a404:	b570      	push	{r4, r5, r6, lr}
 801a406:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a40a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a40e:	42ac      	cmp	r4, r5
 801a410:	db18      	blt.n	801a444 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a412:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801a416:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a41a:	429a      	cmp	r2, r3
 801a41c:	db12      	blt.n	801a444 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a41e:	8886      	ldrh	r6, [r0, #4]
 801a420:	4435      	add	r5, r6
 801a422:	888e      	ldrh	r6, [r1, #4]
 801a424:	4434      	add	r4, r6
 801a426:	b22d      	sxth	r5, r5
 801a428:	b224      	sxth	r4, r4
 801a42a:	42a5      	cmp	r5, r4
 801a42c:	db0a      	blt.n	801a444 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801a42e:	88c0      	ldrh	r0, [r0, #6]
 801a430:	4418      	add	r0, r3
 801a432:	88cb      	ldrh	r3, [r1, #6]
 801a434:	441a      	add	r2, r3
 801a436:	b200      	sxth	r0, r0
 801a438:	b212      	sxth	r2, r2
 801a43a:	4290      	cmp	r0, r2
 801a43c:	bfb4      	ite	lt
 801a43e:	2000      	movlt	r0, #0
 801a440:	2001      	movge	r0, #1
 801a442:	bd70      	pop	{r4, r5, r6, pc}
 801a444:	2000      	movs	r0, #0
 801a446:	e7fc      	b.n	801a442 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801a448 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a44a:	4604      	mov	r4, r0
 801a44c:	4608      	mov	r0, r1
 801a44e:	460d      	mov	r5, r1
 801a450:	f7fe f893 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a454:	b978      	cbnz	r0, 801a476 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801a456:	4620      	mov	r0, r4
 801a458:	f7fe f88f 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a45c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801a460:	b150      	cbz	r0, 801a478 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801a462:	8026      	strh	r6, [r4, #0]
 801a464:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a468:	8063      	strh	r3, [r4, #2]
 801a46a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a46e:	80a3      	strh	r3, [r4, #4]
 801a470:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a474:	80e3      	strh	r3, [r4, #6]
 801a476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a478:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a47c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a480:	42b1      	cmp	r1, r6
 801a482:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a486:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a48a:	460f      	mov	r7, r1
 801a48c:	88ed      	ldrh	r5, [r5, #6]
 801a48e:	bfa8      	it	ge
 801a490:	4637      	movge	r7, r6
 801a492:	4293      	cmp	r3, r2
 801a494:	4618      	mov	r0, r3
 801a496:	4466      	add	r6, ip
 801a498:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a49c:	bfa8      	it	ge
 801a49e:	4610      	movge	r0, r2
 801a4a0:	442a      	add	r2, r5
 801a4a2:	88e5      	ldrh	r5, [r4, #6]
 801a4a4:	4461      	add	r1, ip
 801a4a6:	b236      	sxth	r6, r6
 801a4a8:	8027      	strh	r7, [r4, #0]
 801a4aa:	442b      	add	r3, r5
 801a4ac:	b209      	sxth	r1, r1
 801a4ae:	b212      	sxth	r2, r2
 801a4b0:	8060      	strh	r0, [r4, #2]
 801a4b2:	b21b      	sxth	r3, r3
 801a4b4:	428e      	cmp	r6, r1
 801a4b6:	bfac      	ite	ge
 801a4b8:	ebc7 0106 	rsbge	r1, r7, r6
 801a4bc:	ebc7 0101 	rsblt	r1, r7, r1
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	bfac      	ite	ge
 801a4c4:	ebc0 0202 	rsbge	r2, r0, r2
 801a4c8:	ebc0 0203 	rsblt	r2, r0, r3
 801a4cc:	80a1      	strh	r1, [r4, #4]
 801a4ce:	80e2      	strh	r2, [r4, #6]
 801a4d0:	e7d1      	b.n	801a476 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a4d4 <_ZN8touchgfx11Application11getInstanceEv>:
 801a4d4:	4b01      	ldr	r3, [pc, #4]	; (801a4dc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a4d6:	6818      	ldr	r0, [r3, #0]
 801a4d8:	4770      	bx	lr
 801a4da:	bf00      	nop
 801a4dc:	20009524 	.word	0x20009524

0801a4e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a4e6:	30a8      	adds	r0, #168	; 0xa8
 801a4e8:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a4ec:	f802 3b01 	strb.w	r3, [r2], #1
 801a4f0:	4282      	cmp	r2, r0
 801a4f2:	d1fb      	bne.n	801a4ec <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a4f4:	4770      	bx	lr

0801a4f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	801a      	strh	r2, [r3, #0]
 801a500:	3308      	adds	r3, #8
 801a502:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a506:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a50a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a50e:	428b      	cmp	r3, r1
 801a510:	d1f5      	bne.n	801a4fe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a512:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a516:	4770      	bx	lr

0801a518 <_ZN8touchgfx11ApplicationC1Ev>:
 801a518:	b570      	push	{r4, r5, r6, lr}
 801a51a:	4b1a      	ldr	r3, [pc, #104]	; (801a584 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a51c:	2500      	movs	r5, #0
 801a51e:	4604      	mov	r4, r0
 801a520:	30a8      	adds	r0, #168	; 0xa8
 801a522:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a526:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a52a:	f7ff ffe4 	bl	801a4f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a52e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a532:	f7ff ffe0 	bl	801a4f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a536:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a53a:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a53e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a542:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a546:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a54a:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801a54e:	490e      	ldr	r1, [pc, #56]	; (801a588 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a550:	480e      	ldr	r0, [pc, #56]	; (801a58c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a552:	f00a fd85 	bl	8025060 <CRC_Lock>
 801a556:	4e0e      	ldr	r6, [pc, #56]	; (801a590 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a558:	4b0e      	ldr	r3, [pc, #56]	; (801a594 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a55a:	b158      	cbz	r0, 801a574 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801a55c:	801d      	strh	r5, [r3, #0]
 801a55e:	2300      	movs	r3, #0
 801a560:	4a0d      	ldr	r2, [pc, #52]	; (801a598 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a562:	4620      	mov	r0, r4
 801a564:	6013      	str	r3, [r2, #0]
 801a566:	4a0d      	ldr	r2, [pc, #52]	; (801a59c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801a568:	6033      	str	r3, [r6, #0]
 801a56a:	6013      	str	r3, [r2, #0]
 801a56c:	f7ff ffb8 	bl	801a4e0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a570:	4620      	mov	r0, r4
 801a572:	bd70      	pop	{r4, r5, r6, pc}
 801a574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a578:	2002      	movs	r0, #2
 801a57a:	801a      	strh	r2, [r3, #0]
 801a57c:	6030      	str	r0, [r6, #0]
 801a57e:	f001 fa77 	bl	801ba70 <_ZN8touchgfx6Screen4drawEv>
 801a582:	e7ec      	b.n	801a55e <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801a584:	08028118 	.word	0x08028118
 801a588:	b5e8b5cd 	.word	0xb5e8b5cd
 801a58c:	f407a5c2 	.word	0xf407a5c2
 801a590:	20009514 	.word	0x20009514
 801a594:	20000060 	.word	0x20000060
 801a598:	20009524 	.word	0x20009524
 801a59c:	20009518 	.word	0x20009518

0801a5a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a5a0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a5a4:	428b      	cmp	r3, r1
 801a5a6:	b510      	push	{r4, lr}
 801a5a8:	d90e      	bls.n	801a5c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a5aa:	3b01      	subs	r3, #1
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	428b      	cmp	r3, r1
 801a5b0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a5b4:	d908      	bls.n	801a5c8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a5b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a5ba:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a5be:	681a      	ldr	r2, [r3, #0]
 801a5c0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a5c4:	685a      	ldr	r2, [r3, #4]
 801a5c6:	6062      	str	r2, [r4, #4]
 801a5c8:	bd10      	pop	{r4, pc}
	...

0801a5cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a5ce:	466b      	mov	r3, sp
 801a5d0:	4604      	mov	r4, r0
 801a5d2:	e883 0006 	stmia.w	r3, {r1, r2}
 801a5d6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a5da:	2a07      	cmp	r2, #7
 801a5dc:	d906      	bls.n	801a5ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a5de:	4b09      	ldr	r3, [pc, #36]	; (801a604 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a5e0:	f240 118f 	movw	r1, #399	; 0x18f
 801a5e4:	4a08      	ldr	r2, [pc, #32]	; (801a608 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a5e6:	4809      	ldr	r0, [pc, #36]	; (801a60c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a5e8:	f00a fe70 	bl	80252cc <__assert_func>
 801a5ec:	1c51      	adds	r1, r2, #1
 801a5ee:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a5f2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a5f6:	cb03      	ldmia	r3!, {r0, r1}
 801a5f8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a5fc:	6069      	str	r1, [r5, #4]
 801a5fe:	b003      	add	sp, #12
 801a600:	bd30      	pop	{r4, r5, pc}
 801a602:	bf00      	nop
 801a604:	080280b8 	.word	0x080280b8
 801a608:	08028198 	.word	0x08028198
 801a60c:	080280e7 	.word	0x080280e7

0801a610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a614:	b08d      	sub	sp, #52	; 0x34
 801a616:	4683      	mov	fp, r0
 801a618:	ac08      	add	r4, sp, #32
 801a61a:	4620      	mov	r0, r4
 801a61c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a620:	f7fd ffab 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a624:	2800      	cmp	r0, #0
 801a626:	d16a      	bne.n	801a6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a628:	9402      	str	r4, [sp, #8]
 801a62a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a62e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a632:	2400      	movs	r4, #0
 801a634:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a638:	9301      	str	r3, [sp, #4]
 801a63a:	36a0      	adds	r6, #160	; 0xa0
 801a63c:	42a5      	cmp	r5, r4
 801a63e:	d00d      	beq.n	801a65c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801a640:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a644:	9802      	ldr	r0, [sp, #8]
 801a646:	f7ff fedd 	bl	801a404 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a64a:	b128      	cbz	r0, 801a658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801a64c:	1e69      	subs	r1, r5, #1
 801a64e:	9801      	ldr	r0, [sp, #4]
 801a650:	1b09      	subs	r1, r1, r4
 801a652:	b289      	uxth	r1, r1
 801a654:	f7ff ffa4 	bl	801a5a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a658:	3401      	adds	r4, #1
 801a65a:	e7ef      	b.n	801a63c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a65c:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a660:	1e7b      	subs	r3, r7, #1
 801a662:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a666:	9703      	str	r7, [sp, #12]
 801a668:	9300      	str	r3, [sp, #0]
 801a66a:	2400      	movs	r4, #0
 801a66c:	4655      	mov	r5, sl
 801a66e:	9704      	str	r7, [sp, #16]
 801a670:	4626      	mov	r6, r4
 801a672:	9b04      	ldr	r3, [sp, #16]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d078      	beq.n	801a76a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801a678:	9902      	ldr	r1, [sp, #8]
 801a67a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a67e:	f7ff fe9f 	bl	801a3c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a682:	b360      	cbz	r0, 801a6de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a684:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a688:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a68c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801a690:	45e6      	cmp	lr, ip
 801a692:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a696:	db35      	blt.n	801a704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a698:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a69c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a6a0:	4472      	add	r2, lr
 801a6a2:	4463      	add	r3, ip
 801a6a4:	b212      	sxth	r2, r2
 801a6a6:	b21b      	sxth	r3, r3
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	dc2b      	bgt.n	801a704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a6ac:	fa1f f288 	uxth.w	r2, r8
 801a6b0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a6b4:	45c1      	cmp	r9, r8
 801a6b6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a6ba:	4413      	add	r3, r2
 801a6bc:	fa1f fc89 	uxth.w	ip, r9
 801a6c0:	b29b      	uxth	r3, r3
 801a6c2:	fa0f fe83 	sxth.w	lr, r3
 801a6c6:	db0f      	blt.n	801a6e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801a6c8:	eba3 030c 	sub.w	r3, r3, ip
 801a6cc:	1ac9      	subs	r1, r1, r3
 801a6ce:	b209      	sxth	r1, r1
 801a6d0:	2900      	cmp	r1, #0
 801a6d2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a6d6:	dd12      	ble.n	801a6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a6d8:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801a6dc:	4604      	mov	r4, r0
 801a6de:	9b04      	ldr	r3, [sp, #16]
 801a6e0:	3d08      	subs	r5, #8
 801a6e2:	3b01      	subs	r3, #1
 801a6e4:	9304      	str	r3, [sp, #16]
 801a6e6:	e7c4      	b.n	801a672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801a6e8:	4461      	add	r1, ip
 801a6ea:	b209      	sxth	r1, r1
 801a6ec:	4571      	cmp	r1, lr
 801a6ee:	dc3a      	bgt.n	801a766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a6f0:	eba2 020c 	sub.w	r2, r2, ip
 801a6f4:	b212      	sxth	r2, r2
 801a6f6:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a6fa:	2a00      	cmp	r2, #0
 801a6fc:	dcee      	bgt.n	801a6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a6fe:	b00d      	add	sp, #52	; 0x34
 801a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a704:	45c1      	cmp	r9, r8
 801a706:	db2e      	blt.n	801a766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a708:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a70c:	4499      	add	r9, r3
 801a70e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a712:	4498      	add	r8, r3
 801a714:	fa0f f989 	sxth.w	r9, r9
 801a718:	fa0f f888 	sxth.w	r8, r8
 801a71c:	45c1      	cmp	r9, r8
 801a71e:	dc22      	bgt.n	801a766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a720:	fa1f f28c 	uxth.w	r2, ip
 801a724:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a728:	45e6      	cmp	lr, ip
 801a72a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a72e:	4413      	add	r3, r2
 801a730:	fa1f f88e 	uxth.w	r8, lr
 801a734:	b29b      	uxth	r3, r3
 801a736:	fa0f f983 	sxth.w	r9, r3
 801a73a:	db0a      	blt.n	801a752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801a73c:	eba3 0308 	sub.w	r3, r3, r8
 801a740:	1ac9      	subs	r1, r1, r3
 801a742:	b209      	sxth	r1, r1
 801a744:	2900      	cmp	r1, #0
 801a746:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a74a:	ddd8      	ble.n	801a6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a74c:	f8ad 9020 	strh.w	r9, [sp, #32]
 801a750:	e7c4      	b.n	801a6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a752:	4441      	add	r1, r8
 801a754:	b209      	sxth	r1, r1
 801a756:	4549      	cmp	r1, r9
 801a758:	dc05      	bgt.n	801a766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a75a:	eba2 0208 	sub.w	r2, r2, r8
 801a75e:	b212      	sxth	r2, r2
 801a760:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801a764:	e7c9      	b.n	801a6fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a766:	4606      	mov	r6, r0
 801a768:	e7b9      	b.n	801a6de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a76a:	2c00      	cmp	r4, #0
 801a76c:	f47f af7d 	bne.w	801a66a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a770:	2e00      	cmp	r6, #0
 801a772:	f000 81dc 	beq.w	801ab2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a776:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801a77a:	4655      	mov	r5, sl
 801a77c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801a780:	b2b9      	uxth	r1, r7
 801a782:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a786:	b2b3      	uxth	r3, r6
 801a788:	9104      	str	r1, [sp, #16]
 801a78a:	9804      	ldr	r0, [sp, #16]
 801a78c:	441a      	add	r2, r3
 801a78e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a792:	b292      	uxth	r2, r2
 801a794:	4401      	add	r1, r0
 801a796:	fa0f f882 	sxth.w	r8, r2
 801a79a:	b289      	uxth	r1, r1
 801a79c:	9105      	str	r1, [sp, #20]
 801a79e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801a7a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a7a6:	9b03      	ldr	r3, [sp, #12]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d054      	beq.n	801a856 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a7ac:	9902      	ldr	r1, [sp, #8]
 801a7ae:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a7b2:	f7ff fe05 	bl	801a3c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a7b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a7ba:	b1d8      	cbz	r0, 801a7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a7bc:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a7c0:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a7c4:	4576      	cmp	r6, lr
 801a7c6:	dc26      	bgt.n	801a816 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a7c8:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a7cc:	44f4      	add	ip, lr
 801a7ce:	fa0f fc8c 	sxth.w	ip, ip
 801a7d2:	45e0      	cmp	r8, ip
 801a7d4:	db1f      	blt.n	801a816 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a7d6:	428f      	cmp	r7, r1
 801a7d8:	fa1f fc81 	uxth.w	ip, r1
 801a7dc:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a7e0:	dc0f      	bgt.n	801a802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801a7e2:	9805      	ldr	r0, [sp, #20]
 801a7e4:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a7e8:	eba0 0c0c 	sub.w	ip, r0, ip
 801a7ec:	eba1 010c 	sub.w	r1, r1, ip
 801a7f0:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a7f4:	4620      	mov	r0, r4
 801a7f6:	9903      	ldr	r1, [sp, #12]
 801a7f8:	3d08      	subs	r5, #8
 801a7fa:	4604      	mov	r4, r0
 801a7fc:	3901      	subs	r1, #1
 801a7fe:	9103      	str	r1, [sp, #12]
 801a800:	e7cf      	b.n	801a7a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801a802:	4461      	add	r1, ip
 801a804:	b209      	sxth	r1, r1
 801a806:	4549      	cmp	r1, r9
 801a808:	dcf5      	bgt.n	801a7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a80a:	9904      	ldr	r1, [sp, #16]
 801a80c:	eba1 0c0c 	sub.w	ip, r1, ip
 801a810:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a814:	e7ee      	b.n	801a7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a816:	428f      	cmp	r7, r1
 801a818:	dced      	bgt.n	801a7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a81a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a81e:	4461      	add	r1, ip
 801a820:	b209      	sxth	r1, r1
 801a822:	4589      	cmp	r9, r1
 801a824:	dbe7      	blt.n	801a7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a826:	4576      	cmp	r6, lr
 801a828:	fa1f fc8e 	uxth.w	ip, lr
 801a82c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a830:	dc08      	bgt.n	801a844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801a832:	eba2 0c0c 	sub.w	ip, r2, ip
 801a836:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a83a:	eba1 010c 	sub.w	r1, r1, ip
 801a83e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a842:	e7d7      	b.n	801a7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a844:	4461      	add	r1, ip
 801a846:	b209      	sxth	r1, r1
 801a848:	4588      	cmp	r8, r1
 801a84a:	dbd4      	blt.n	801a7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a84c:	eba3 0c0c 	sub.w	ip, r3, ip
 801a850:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a854:	e7ce      	b.n	801a7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a856:	2c00      	cmp	r4, #0
 801a858:	f000 8169 	beq.w	801ab2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a85c:	9b00      	ldr	r3, [sp, #0]
 801a85e:	3301      	adds	r3, #1
 801a860:	f000 8165 	beq.w	801ab2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a864:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a868:	9802      	ldr	r0, [sp, #8]
 801a86a:	4621      	mov	r1, r4
 801a86c:	f7ff fdca 	bl	801a404 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a870:	b120      	cbz	r0, 801a87c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801a872:	f8bd 1000 	ldrh.w	r1, [sp]
 801a876:	9801      	ldr	r0, [sp, #4]
 801a878:	f7ff fe92 	bl	801a5a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a87c:	9902      	ldr	r1, [sp, #8]
 801a87e:	4620      	mov	r0, r4
 801a880:	f7ff fd9e 	bl	801a3c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a884:	2800      	cmp	r0, #0
 801a886:	f000 809b 	beq.w	801a9c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801a88a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801a88e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801a892:	fa1f f288 	uxth.w	r2, r8
 801a896:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801a89a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801a89e:	19d5      	adds	r5, r2, r7
 801a8a0:	b2a1      	uxth	r1, r4
 801a8a2:	45a0      	cmp	r8, r4
 801a8a4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a8a8:	fa1f f985 	uxth.w	r9, r5
 801a8ac:	440b      	add	r3, r1
 801a8ae:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801a8b2:	fa0f f589 	sxth.w	r5, r9
 801a8b6:	b29b      	uxth	r3, r3
 801a8b8:	9503      	str	r5, [sp, #12]
 801a8ba:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a8be:	9507      	str	r5, [sp, #28]
 801a8c0:	f340 809d 	ble.w	801a9fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a8c4:	1a52      	subs	r2, r2, r1
 801a8c6:	4584      	cmp	ip, r0
 801a8c8:	fa0f fe83 	sxth.w	lr, r3
 801a8cc:	b292      	uxth	r2, r2
 801a8ce:	b215      	sxth	r5, r2
 801a8d0:	dd2f      	ble.n	801a932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801a8d2:	9e00      	ldr	r6, [sp, #0]
 801a8d4:	fa1f fc8c 	uxth.w	ip, ip
 801a8d8:	b280      	uxth	r0, r0
 801a8da:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a8de:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801a8e2:	9e03      	ldr	r6, [sp, #12]
 801a8e4:	ebac 0300 	sub.w	r3, ip, r0
 801a8e8:	448c      	add	ip, r1
 801a8ea:	eba6 060e 	sub.w	r6, r6, lr
 801a8ee:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801a8f2:	b29b      	uxth	r3, r3
 801a8f4:	4470      	add	r0, lr
 801a8f6:	fa0f fc8c 	sxth.w	ip, ip
 801a8fa:	b21c      	sxth	r4, r3
 801a8fc:	b200      	sxth	r0, r0
 801a8fe:	4366      	muls	r6, r4
 801a900:	ebac 0000 	sub.w	r0, ip, r0
 801a904:	4368      	muls	r0, r5
 801a906:	4286      	cmp	r6, r0
 801a908:	db09      	blt.n	801a91e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801a90a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801a90e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a912:	4417      	add	r7, r2
 801a914:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a918:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a91c:	e685      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a91e:	440b      	add	r3, r1
 801a920:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801a924:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a928:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801a92c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a930:	e67b      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a932:	9e03      	ldr	r6, [sp, #12]
 801a934:	45b6      	cmp	lr, r6
 801a936:	da28      	bge.n	801a98a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801a938:	9b00      	ldr	r3, [sp, #0]
 801a93a:	eba6 060e 	sub.w	r6, r6, lr
 801a93e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801a942:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801a946:	eb04 030c 	add.w	r3, r4, ip
 801a94a:	fa1f f883 	uxth.w	r8, r3
 801a94e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801a952:	4403      	add	r3, r0
 801a954:	fa0f f988 	sxth.w	r9, r8
 801a958:	eba0 000c 	sub.w	r0, r0, ip
 801a95c:	eba3 0308 	sub.w	r3, r3, r8
 801a960:	4368      	muls	r0, r5
 801a962:	b29b      	uxth	r3, r3
 801a964:	fa0f f883 	sxth.w	r8, r3
 801a968:	fb08 f606 	mul.w	r6, r8, r6
 801a96c:	42b0      	cmp	r0, r6
 801a96e:	dc06      	bgt.n	801a97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801a970:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801a974:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801a978:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801a97c:	e7c9      	b.n	801a912 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801a97e:	4423      	add	r3, r4
 801a980:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801a984:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a988:	e64f      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a98a:	eba3 0309 	sub.w	r3, r3, r9
 801a98e:	9807      	ldr	r0, [sp, #28]
 801a990:	b29b      	uxth	r3, r3
 801a992:	2806      	cmp	r0, #6
 801a994:	fa0f fc83 	sxth.w	ip, r3
 801a998:	d818      	bhi.n	801a9cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801a99a:	4652      	mov	r2, sl
 801a99c:	ab0a      	add	r3, sp, #40	; 0x28
 801a99e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801a9a2:	6851      	ldr	r1, [r2, #4]
 801a9a4:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801a9a8:	c303      	stmia	r3!, {r0, r1}
 801a9aa:	9b03      	ldr	r3, [sp, #12]
 801a9ac:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801a9b0:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a9b4:	ab0a      	add	r3, sp, #40	; 0x28
 801a9b6:	9801      	ldr	r0, [sp, #4]
 801a9b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a9bc:	f7ff fe06 	bl	801a5cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a9c0:	9b00      	ldr	r3, [sp, #0]
 801a9c2:	f1aa 0a08 	sub.w	sl, sl, #8
 801a9c6:	3b01      	subs	r3, #1
 801a9c8:	9300      	str	r3, [sp, #0]
 801a9ca:	e747      	b.n	801a85c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801a9cc:	9800      	ldr	r0, [sp, #0]
 801a9ce:	45ac      	cmp	ip, r5
 801a9d0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a9d4:	db0c      	blt.n	801a9f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801a9d6:	4417      	add	r7, r2
 801a9d8:	4458      	add	r0, fp
 801a9da:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a9de:	b2bf      	uxth	r7, r7
 801a9e0:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801a9e4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a9e8:	440f      	add	r7, r1
 801a9ea:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801a9ee:	e61c      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a9f0:	4458      	add	r0, fp
 801a9f2:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801a9f6:	443b      	add	r3, r7
 801a9f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a9fc:	e615      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a9fe:	fa1f f18c 	uxth.w	r1, ip
 801aa02:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801aa06:	b282      	uxth	r2, r0
 801aa08:	4584      	cmp	ip, r0
 801aa0a:	eb01 0e05 	add.w	lr, r1, r5
 801aa0e:	9204      	str	r2, [sp, #16]
 801aa10:	fa1f fe8e 	uxth.w	lr, lr
 801aa14:	9e04      	ldr	r6, [sp, #16]
 801aa16:	fa0f f28e 	sxth.w	r2, lr
 801aa1a:	9205      	str	r2, [sp, #20]
 801aa1c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801aa20:	4432      	add	r2, r6
 801aa22:	b292      	uxth	r2, r2
 801aa24:	9206      	str	r2, [sp, #24]
 801aa26:	da26      	bge.n	801aa76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801aa28:	eba3 0309 	sub.w	r3, r3, r9
 801aa2c:	eba2 020e 	sub.w	r2, r2, lr
 801aa30:	eba0 000c 	sub.w	r0, r0, ip
 801aa34:	eba4 0408 	sub.w	r4, r4, r8
 801aa38:	b29b      	uxth	r3, r3
 801aa3a:	b292      	uxth	r2, r2
 801aa3c:	fa0f fa83 	sxth.w	sl, r3
 801aa40:	b211      	sxth	r1, r2
 801aa42:	fb0a f000 	mul.w	r0, sl, r0
 801aa46:	434c      	muls	r4, r1
 801aa48:	42a0      	cmp	r0, r4
 801aa4a:	9800      	ldr	r0, [sp, #0]
 801aa4c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801aa50:	dc06      	bgt.n	801aa60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801aa52:	4458      	add	r0, fp
 801aa54:	9a05      	ldr	r2, [sp, #20]
 801aa56:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801aa5a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801aa5e:	e7ca      	b.n	801a9f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801aa60:	eb0b 0300 	add.w	r3, fp, r0
 801aa64:	9903      	ldr	r1, [sp, #12]
 801aa66:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801aa6a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801aa6e:	442a      	add	r2, r5
 801aa70:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801aa74:	e5d9      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aa76:	9e04      	ldr	r6, [sp, #16]
 801aa78:	9a03      	ldr	r2, [sp, #12]
 801aa7a:	1b89      	subs	r1, r1, r6
 801aa7c:	b21e      	sxth	r6, r3
 801aa7e:	b289      	uxth	r1, r1
 801aa80:	4296      	cmp	r6, r2
 801aa82:	fa0f fc81 	sxth.w	ip, r1
 801aa86:	dd25      	ble.n	801aad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801aa88:	eba3 0309 	sub.w	r3, r3, r9
 801aa8c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801aa90:	9e05      	ldr	r6, [sp, #20]
 801aa92:	eba4 0408 	sub.w	r4, r4, r8
 801aa96:	b29b      	uxth	r3, r3
 801aa98:	eba6 0902 	sub.w	r9, r6, r2
 801aa9c:	fb0c f404 	mul.w	r4, ip, r4
 801aaa0:	b218      	sxth	r0, r3
 801aaa2:	9a00      	ldr	r2, [sp, #0]
 801aaa4:	fb00 f909 	mul.w	r9, r0, r9
 801aaa8:	00d2      	lsls	r2, r2, #3
 801aaaa:	454c      	cmp	r4, r9
 801aaac:	db03      	blt.n	801aab6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801aaae:	445a      	add	r2, fp
 801aab0:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801aab4:	e79f      	b.n	801a9f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801aab6:	eb0b 0302 	add.w	r3, fp, r2
 801aaba:	9a03      	ldr	r2, [sp, #12]
 801aabc:	4429      	add	r1, r5
 801aabe:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801aac2:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801aac6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801aaca:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801aace:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aad2:	e5aa      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801aad4:	9b06      	ldr	r3, [sp, #24]
 801aad6:	9c07      	ldr	r4, [sp, #28]
 801aad8:	eba3 020e 	sub.w	r2, r3, lr
 801aadc:	2c06      	cmp	r4, #6
 801aade:	b292      	uxth	r2, r2
 801aae0:	b213      	sxth	r3, r2
 801aae2:	d80d      	bhi.n	801ab00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801aae4:	4651      	mov	r1, sl
 801aae6:	aa0a      	add	r2, sp, #40	; 0x28
 801aae8:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801aaec:	6849      	ldr	r1, [r1, #4]
 801aaee:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801aaf2:	9b05      	ldr	r3, [sp, #20]
 801aaf4:	c203      	stmia	r2!, {r0, r1}
 801aaf6:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801aafa:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801aafe:	e759      	b.n	801a9b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801ab00:	9c00      	ldr	r4, [sp, #0]
 801ab02:	4563      	cmp	r3, ip
 801ab04:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801ab08:	db0d      	blt.n	801ab26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801ab0a:	4429      	add	r1, r5
 801ab0c:	9a04      	ldr	r2, [sp, #16]
 801ab0e:	445c      	add	r4, fp
 801ab10:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ab14:	b289      	uxth	r1, r1
 801ab16:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801ab1a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ab1e:	4411      	add	r1, r2
 801ab20:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801ab24:	e581      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ab26:	445c      	add	r4, fp
 801ab28:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801ab2c:	e79f      	b.n	801aa6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801ab2e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801ab32:	2f07      	cmp	r7, #7
 801ab34:	d806      	bhi.n	801ab44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801ab36:	ab08      	add	r3, sp, #32
 801ab38:	9801      	ldr	r0, [sp, #4]
 801ab3a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ab3e:	f7ff fd45 	bl	801a5cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ab42:	e5dc      	b.n	801a6fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ab44:	f107 39ff 	add.w	r9, r7, #4294967295
 801ab48:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ab4c:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801ab50:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801ab54:	f04f 35ff 	mov.w	r5, #4294967295
 801ab58:	2400      	movs	r4, #0
 801ab5a:	9304      	str	r3, [sp, #16]
 801ab5c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801ab60:	f109 32ff 	add.w	r2, r9, #4294967295
 801ab64:	9300      	str	r3, [sp, #0]
 801ab66:	4690      	mov	r8, r2
 801ab68:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801ab6c:	9303      	str	r3, [sp, #12]
 801ab6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ab72:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ab76:	6818      	ldr	r0, [r3, #0]
 801ab78:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801ab7c:	9206      	str	r2, [sp, #24]
 801ab7e:	bf16      	itet	ne
 801ab80:	9904      	ldrne	r1, [sp, #16]
 801ab82:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801ab86:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801ab8a:	9305      	str	r3, [sp, #20]
 801ab8c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801ab90:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801ab94:	fb16 f601 	smulbb	r6, r6, r1
 801ab98:	6859      	ldr	r1, [r3, #4]
 801ab9a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ab9e:	4671      	mov	r1, lr
 801aba0:	a80a      	add	r0, sp, #40	; 0x28
 801aba2:	f7ff fc51 	bl	801a448 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aba6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801abaa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801abae:	9b03      	ldr	r3, [sp, #12]
 801abb0:	9a00      	ldr	r2, [sp, #0]
 801abb2:	fb11 f100 	smulbb	r1, r1, r0
 801abb6:	2008      	movs	r0, #8
 801abb8:	fb02 6603 	mla	r6, r2, r3, r6
 801abbc:	1b8e      	subs	r6, r1, r6
 801abbe:	fb91 f1f0 	sdiv	r1, r1, r0
 801abc2:	42b1      	cmp	r1, r6
 801abc4:	dc21      	bgt.n	801ac0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801abc6:	4556      	cmp	r6, sl
 801abc8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801abcc:	da03      	bge.n	801abd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801abce:	b1e6      	cbz	r6, 801ac0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801abd0:	46b2      	mov	sl, r6
 801abd2:	4645      	mov	r5, r8
 801abd4:	464c      	mov	r4, r9
 801abd6:	f108 38ff 	add.w	r8, r8, #4294967295
 801abda:	f118 0f02 	cmn.w	r8, #2
 801abde:	d1c8      	bne.n	801ab72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801abe0:	f1b2 3fff 	cmp.w	r2, #4294967295
 801abe4:	f1a7 0708 	sub.w	r7, r7, #8
 801abe8:	4691      	mov	r9, r2
 801abea:	d1b7      	bne.n	801ab5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801abec:	9b01      	ldr	r3, [sp, #4]
 801abee:	b2a6      	uxth	r6, r4
 801abf0:	00e4      	lsls	r4, r4, #3
 801abf2:	1918      	adds	r0, r3, r4
 801abf4:	1c6b      	adds	r3, r5, #1
 801abf6:	d10b      	bne.n	801ac10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801abf8:	4601      	mov	r1, r0
 801abfa:	9802      	ldr	r0, [sp, #8]
 801abfc:	f7ff fc24 	bl	801a448 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ac00:	4631      	mov	r1, r6
 801ac02:	9801      	ldr	r0, [sp, #4]
 801ac04:	f7ff fccc 	bl	801a5a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ac08:	e50f      	b.n	801a62a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ac0a:	4645      	mov	r5, r8
 801ac0c:	464c      	mov	r4, r9
 801ac0e:	e7ed      	b.n	801abec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801ac10:	9b01      	ldr	r3, [sp, #4]
 801ac12:	00ed      	lsls	r5, r5, #3
 801ac14:	445c      	add	r4, fp
 801ac16:	1959      	adds	r1, r3, r5
 801ac18:	445d      	add	r5, fp
 801ac1a:	f7ff fc15 	bl	801a448 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ac1e:	9b02      	ldr	r3, [sp, #8]
 801ac20:	cb03      	ldmia	r3!, {r0, r1}
 801ac22:	9b02      	ldr	r3, [sp, #8]
 801ac24:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801ac28:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801ac2c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801ac30:	6861      	ldr	r1, [r4, #4]
 801ac32:	c303      	stmia	r3!, {r0, r1}
 801ac34:	e7e4      	b.n	801ac00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801ac38 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ac38:	4b1d      	ldr	r3, [pc, #116]	; (801acb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801ac3a:	b530      	push	{r4, r5, lr}
 801ac3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac40:	b085      	sub	sp, #20
 801ac42:	4b1c      	ldr	r3, [pc, #112]	; (801acb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801ac44:	460c      	mov	r4, r1
 801ac46:	2100      	movs	r1, #0
 801ac48:	4605      	mov	r5, r0
 801ac4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ac4e:	6820      	ldr	r0, [r4, #0]
 801ac50:	9100      	str	r1, [sp, #0]
 801ac52:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ac56:	ab02      	add	r3, sp, #8
 801ac58:	6861      	ldr	r1, [r4, #4]
 801ac5a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ac5e:	c303      	stmia	r3!, {r0, r1}
 801ac60:	4669      	mov	r1, sp
 801ac62:	a802      	add	r0, sp, #8
 801ac64:	f7fd fc46 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801ac68:	ab02      	add	r3, sp, #8
 801ac6a:	cb03      	ldmia	r3!, {r0, r1}
 801ac6c:	4b12      	ldr	r3, [pc, #72]	; (801acb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801ac6e:	6020      	str	r0, [r4, #0]
 801ac70:	6818      	ldr	r0, [r3, #0]
 801ac72:	6061      	str	r1, [r4, #4]
 801ac74:	b138      	cbz	r0, 801ac86 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801ac76:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801ac7a:	b133      	cbz	r3, 801ac8a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801ac7c:	6821      	ldr	r1, [r4, #0]
 801ac7e:	4628      	mov	r0, r5
 801ac80:	6862      	ldr	r2, [r4, #4]
 801ac82:	f7ff fcc5 	bl	801a610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ac86:	b005      	add	sp, #20
 801ac88:	bd30      	pop	{r4, r5, pc}
 801ac8a:	6803      	ldr	r3, [r0, #0]
 801ac8c:	4621      	mov	r1, r4
 801ac8e:	689b      	ldr	r3, [r3, #8]
 801ac90:	4798      	blx	r3
 801ac92:	4b0a      	ldr	r3, [pc, #40]	; (801acbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801ac94:	6818      	ldr	r0, [r3, #0]
 801ac96:	b118      	cbz	r0, 801aca0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801ac98:	6803      	ldr	r3, [r0, #0]
 801ac9a:	4621      	mov	r1, r4
 801ac9c:	689b      	ldr	r3, [r3, #8]
 801ac9e:	4798      	blx	r3
 801aca0:	4b07      	ldr	r3, [pc, #28]	; (801acc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801aca2:	4621      	mov	r1, r4
 801aca4:	6818      	ldr	r0, [r3, #0]
 801aca6:	6803      	ldr	r3, [r0, #0]
 801aca8:	695b      	ldr	r3, [r3, #20]
 801acaa:	4798      	blx	r3
 801acac:	e7eb      	b.n	801ac86 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801acae:	bf00      	nop
 801acb0:	200094ca 	.word	0x200094ca
 801acb4:	200094cc 	.word	0x200094cc
 801acb8:	20009514 	.word	0x20009514
 801acbc:	20009510 	.word	0x20009510
 801acc0:	200094d8 	.word	0x200094d8

0801acc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc8:	4604      	mov	r4, r0
 801acca:	b09b      	sub	sp, #108	; 0x6c
 801accc:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801acd0:	b129      	cbz	r1, 801acde <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801acd2:	2300      	movs	r3, #0
 801acd4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801acd8:	b01b      	add	sp, #108	; 0x6c
 801acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acde:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801ace2:	4630      	mov	r0, r6
 801ace4:	f7fd fc49 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ace8:	4605      	mov	r5, r0
 801acea:	b940      	cbnz	r0, 801acfe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801acec:	4620      	mov	r0, r4
 801acee:	e896 0006 	ldmia.w	r6, {r1, r2}
 801acf2:	f7ff fc8d 	bl	801a610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801acf6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801acfa:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801acfe:	4ba6      	ldr	r3, [pc, #664]	; (801af98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	b33b      	cbz	r3, 801ad54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801ad04:	4da5      	ldr	r5, [pc, #660]	; (801af9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801ad06:	4628      	mov	r0, r5
 801ad08:	f7fd fc37 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ad0c:	4606      	mov	r6, r0
 801ad0e:	bb08      	cbnz	r0, 801ad54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801ad10:	4628      	mov	r0, r5
 801ad12:	f7ff f9fb 	bl	801a10c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ad16:	6829      	ldr	r1, [r5, #0]
 801ad18:	686a      	ldr	r2, [r5, #4]
 801ad1a:	4620      	mov	r0, r4
 801ad1c:	f7ff fc78 	bl	801a610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ad20:	802e      	strh	r6, [r5, #0]
 801ad22:	806e      	strh	r6, [r5, #2]
 801ad24:	80ae      	strh	r6, [r5, #4]
 801ad26:	80ee      	strh	r6, [r5, #6]
 801ad28:	4f9d      	ldr	r7, [pc, #628]	; (801afa0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801ad2a:	a809      	add	r0, sp, #36	; 0x24
 801ad2c:	f7ff fbe3 	bl	801a4f6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ad30:	883d      	ldrh	r5, [r7, #0]
 801ad32:	462e      	mov	r6, r5
 801ad34:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ad38:	42b3      	cmp	r3, r6
 801ad3a:	d910      	bls.n	801ad5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801ad3c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ad40:	3601      	adds	r6, #1
 801ad42:	a809      	add	r0, sp, #36	; 0x24
 801ad44:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ad48:	b2b6      	uxth	r6, r6
 801ad4a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ad4e:	f7ff fc3d 	bl	801a5cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ad52:	e7ef      	b.n	801ad34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ad54:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d1e5      	bne.n	801ad28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801ad5c:	e7bc      	b.n	801acd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ad5e:	462e      	mov	r6, r5
 801ad60:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ad64:	42b3      	cmp	r3, r6
 801ad66:	d90b      	bls.n	801ad80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801ad68:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ad6c:	3601      	adds	r6, #1
 801ad6e:	4620      	mov	r0, r4
 801ad70:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ad74:	b2b6      	uxth	r6, r6
 801ad76:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ad7a:	f7ff fc49 	bl	801a610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ad7e:	e7ef      	b.n	801ad60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801ad80:	4a88      	ldr	r2, [pc, #544]	; (801afa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801ad82:	6813      	ldr	r3, [r2, #0]
 801ad84:	4690      	mov	r8, r2
 801ad86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801ad8a:	2b01      	cmp	r3, #1
 801ad8c:	f040 8093 	bne.w	801aeb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801ad90:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ad94:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ad98:	f04f 0900 	mov.w	r9, #0
 801ad9c:	33aa      	adds	r3, #170	; 0xaa
 801ad9e:	42a8      	cmp	r0, r5
 801ada0:	f103 0308 	add.w	r3, r3, #8
 801ada4:	dd0a      	ble.n	801adbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801ada6:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801adaa:	3501      	adds	r5, #1
 801adac:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801adb0:	440a      	add	r2, r1
 801adb2:	b212      	sxth	r2, r2
 801adb4:	4591      	cmp	r9, r2
 801adb6:	bfb8      	it	lt
 801adb8:	4691      	movlt	r9, r2
 801adba:	e7f0      	b.n	801ad9e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801adbc:	4b7a      	ldr	r3, [pc, #488]	; (801afa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801adbe:	4e7b      	ldr	r6, [pc, #492]	; (801afac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801adc0:	881d      	ldrh	r5, [r3, #0]
 801adc2:	2300      	movs	r3, #0
 801adc4:	2d0f      	cmp	r5, #15
 801adc6:	bf8c      	ite	hi
 801adc8:	08ed      	lsrhi	r5, r5, #3
 801adca:	2501      	movls	r5, #1
 801adcc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801add0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801add4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801add8:	f8d8 0000 	ldr.w	r0, [r8]
 801addc:	440b      	add	r3, r1
 801adde:	6802      	ldr	r2, [r0, #0]
 801ade0:	b21b      	sxth	r3, r3
 801ade2:	4599      	cmp	r9, r3
 801ade4:	dd4a      	ble.n	801ae7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801ade6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801adea:	4798      	blx	r3
 801adec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801adf0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801adf4:	4413      	add	r3, r2
 801adf6:	b21b      	sxth	r3, r3
 801adf8:	195a      	adds	r2, r3, r5
 801adfa:	4290      	cmp	r0, r2
 801adfc:	da07      	bge.n	801ae0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801adfe:	4581      	cmp	r9, r0
 801ae00:	dd05      	ble.n	801ae0e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801ae02:	4298      	cmp	r0, r3
 801ae04:	da33      	bge.n	801ae6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	dd31      	ble.n	801ae6e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801ae0a:	4648      	mov	r0, r9
 801ae0c:	e004      	b.n	801ae18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801ae0e:	4298      	cmp	r0, r3
 801ae10:	dbfb      	blt.n	801ae0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801ae12:	4548      	cmp	r0, r9
 801ae14:	bfa8      	it	ge
 801ae16:	4648      	movge	r0, r9
 801ae18:	f9b6 2000 	ldrsh.w	r2, [r6]
 801ae1c:	2100      	movs	r1, #0
 801ae1e:	1ac0      	subs	r0, r0, r3
 801ae20:	f8b7 a000 	ldrh.w	sl, [r7]
 801ae24:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ae28:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ae2c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ae30:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ae34:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ae38:	4553      	cmp	r3, sl
 801ae3a:	d9c9      	bls.n	801add0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ae3c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801ae40:	ab07      	add	r3, sp, #28
 801ae42:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ae46:	6851      	ldr	r1, [r2, #4]
 801ae48:	c303      	stmia	r3!, {r0, r1}
 801ae4a:	a807      	add	r0, sp, #28
 801ae4c:	a905      	add	r1, sp, #20
 801ae4e:	f7fd fb51 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801ae52:	a807      	add	r0, sp, #28
 801ae54:	f7fd fb91 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ae58:	b920      	cbnz	r0, 801ae64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801ae5a:	6823      	ldr	r3, [r4, #0]
 801ae5c:	a907      	add	r1, sp, #28
 801ae5e:	4620      	mov	r0, r4
 801ae60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ae62:	4798      	blx	r3
 801ae64:	f10a 0a01 	add.w	sl, sl, #1
 801ae68:	fa1f fa8a 	uxth.w	sl, sl
 801ae6c:	e7e2      	b.n	801ae34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801ae6e:	f8d8 0000 	ldr.w	r0, [r8]
 801ae72:	2101      	movs	r1, #1
 801ae74:	6803      	ldr	r3, [r0, #0]
 801ae76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ae78:	4798      	blx	r3
 801ae7a:	e7a9      	b.n	801add0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ae7c:	69d3      	ldr	r3, [r2, #28]
 801ae7e:	4798      	blx	r3
 801ae80:	4b4b      	ldr	r3, [pc, #300]	; (801afb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	f43f af27 	beq.w	801acd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	883d      	ldrh	r5, [r7, #0]
 801ae8e:	34ea      	adds	r4, #234	; 0xea
 801ae90:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801ae94:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ae98:	42ab      	cmp	r3, r5
 801ae9a:	f67f af1d 	bls.w	801acd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ae9e:	ab1a      	add	r3, sp, #104	; 0x68
 801aea0:	4620      	mov	r0, r4
 801aea2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aea6:	3501      	adds	r5, #1
 801aea8:	3b44      	subs	r3, #68	; 0x44
 801aeaa:	b2ad      	uxth	r5, r5
 801aeac:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aeb0:	f7ff fb8c 	bl	801a5cc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801aeb4:	e7ee      	b.n	801ae94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 801aeb6:	2b02      	cmp	r3, #2
 801aeb8:	f040 813d 	bne.w	801b136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801aebc:	4b3d      	ldr	r3, [pc, #244]	; (801afb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801aebe:	781b      	ldrb	r3, [r3, #0]
 801aec0:	2b01      	cmp	r3, #1
 801aec2:	d02c      	beq.n	801af1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 801aec4:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801aec8:	883a      	ldrh	r2, [r7, #0]
 801aeca:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801aece:	3201      	adds	r2, #1
 801aed0:	b292      	uxth	r2, r2
 801aed2:	2900      	cmp	r1, #0
 801aed4:	d0d4      	beq.n	801ae80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801aed6:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801aeda:	4610      	mov	r0, r2
 801aedc:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801aee0:	f04f 0a00 	mov.w	sl, #0
 801aee4:	441d      	add	r5, r3
 801aee6:	b22d      	sxth	r5, r5
 801aee8:	b283      	uxth	r3, r0
 801aeea:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801aeee:	4299      	cmp	r1, r3
 801aef0:	f240 80c4 	bls.w	801b07c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801aef4:	4426      	add	r6, r4
 801aef6:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801aefa:	4684      	mov	ip, r0
 801aefc:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801af00:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801af04:	4573      	cmp	r3, lr
 801af06:	f340 80a6 	ble.w	801b056 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801af0a:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801af0e:	4475      	add	r5, lr
 801af10:	b22d      	sxth	r5, r5
 801af12:	429d      	cmp	r5, r3
 801af14:	bfa8      	it	ge
 801af16:	461d      	movge	r5, r3
 801af18:	3001      	adds	r0, #1
 801af1a:	46e2      	mov	sl, ip
 801af1c:	e7e4      	b.n	801aee8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 801af1e:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801af22:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801af26:	f1bb 0f00 	cmp.w	fp, #0
 801af2a:	d0a9      	beq.n	801ae80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801af2c:	883b      	ldrh	r3, [r7, #0]
 801af2e:	2600      	movs	r6, #0
 801af30:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801af34:	3301      	adds	r3, #1
 801af36:	b29b      	uxth	r3, r3
 801af38:	b299      	uxth	r1, r3
 801af3a:	00f5      	lsls	r5, r6, #3
 801af3c:	458b      	cmp	fp, r1
 801af3e:	d93b      	bls.n	801afb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801af40:	4425      	add	r5, r4
 801af42:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801af46:	469c      	mov	ip, r3
 801af48:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801af4c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801af50:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801af54:	4408      	add	r0, r1
 801af56:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801af5a:	4471      	add	r1, lr
 801af5c:	b200      	sxth	r0, r0
 801af5e:	b209      	sxth	r1, r1
 801af60:	4288      	cmp	r0, r1
 801af62:	da06      	bge.n	801af72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 801af64:	4586      	cmp	lr, r0
 801af66:	4672      	mov	r2, lr
 801af68:	bfb8      	it	lt
 801af6a:	4602      	movlt	r2, r0
 801af6c:	3301      	adds	r3, #1
 801af6e:	4666      	mov	r6, ip
 801af70:	e7e2      	b.n	801af38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801af72:	d10b      	bne.n	801af8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801af74:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801af78:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801af7c:	458c      	cmp	ip, r1
 801af7e:	bfb4      	ite	lt
 801af80:	469c      	movlt	ip, r3
 801af82:	46b4      	movge	ip, r6
 801af84:	4572      	cmp	r2, lr
 801af86:	bfb8      	it	lt
 801af88:	4672      	movlt	r2, lr
 801af8a:	e7ef      	b.n	801af6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801af8c:	428a      	cmp	r2, r1
 801af8e:	46b4      	mov	ip, r6
 801af90:	bfb8      	it	lt
 801af92:	460a      	movlt	r2, r1
 801af94:	e7ea      	b.n	801af6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801af96:	bf00      	nop
 801af98:	20009510 	.word	0x20009510
 801af9c:	2000951c 	.word	0x2000951c
 801afa0:	20000060 	.word	0x20000060
 801afa4:	200094d8 	.word	0x200094d8
 801afa8:	200094cc 	.word	0x200094cc
 801afac:	200094ca 	.word	0x200094ca
 801afb0:	200094d4 	.word	0x200094d4
 801afb4:	200094ce 	.word	0x200094ce
 801afb8:	1961      	adds	r1, r4, r5
 801afba:	ab07      	add	r3, sp, #28
 801afbc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801afc0:	6849      	ldr	r1, [r1, #4]
 801afc2:	c303      	stmia	r3!, {r0, r1}
 801afc4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801afc8:	a807      	add	r0, sp, #28
 801afca:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801afce:	2b13      	cmp	r3, #19
 801afd0:	440b      	add	r3, r1
 801afd2:	bfd8      	it	le
 801afd4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801afd8:	1a9b      	subs	r3, r3, r2
 801afda:	f8ad 201c 	strh.w	r2, [sp, #28]
 801afde:	f8ad 3020 	strh.w	r3, [sp, #32]
 801afe2:	f7ff f8ed 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801afe6:	a807      	add	r0, sp, #28
 801afe8:	f7fd fac7 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801afec:	2800      	cmp	r0, #0
 801afee:	d198      	bne.n	801af22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801aff0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801aff4:	4425      	add	r5, r4
 801aff6:	f8d8 0000 	ldr.w	r0, [r8]
 801affa:	f1bc 0f14 	cmp.w	ip, #20
 801affe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b002:	f8d0 e000 	ldr.w	lr, [r0]
 801b006:	bfa8      	it	ge
 801b008:	f04f 0c14 	movge.w	ip, #20
 801b00c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b010:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b014:	fa1f fc8c 	uxth.w	ip, ip
 801b018:	f8cd c000 	str.w	ip, [sp]
 801b01c:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 801b020:	47d0      	blx	sl
 801b022:	4682      	mov	sl, r0
 801b024:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b028:	a807      	add	r0, sp, #28
 801b02a:	f7ff f86f 	bl	801a10c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b02e:	6823      	ldr	r3, [r4, #0]
 801b030:	4620      	mov	r0, r4
 801b032:	a907      	add	r1, sp, #28
 801b034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b036:	4798      	blx	r3
 801b038:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b03c:	eba0 000a 	sub.w	r0, r0, sl
 801b040:	b200      	sxth	r0, r0
 801b042:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b046:	2800      	cmp	r0, #0
 801b048:	f47f af6b 	bne.w	801af22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b04c:	b2b1      	uxth	r1, r6
 801b04e:	4648      	mov	r0, r9
 801b050:	f7ff faa6 	bl	801a5a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b054:	e765      	b.n	801af22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801b056:	d10c      	bne.n	801b072 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801b058:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b05c:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b060:	45b4      	cmp	ip, r6
 801b062:	bfb4      	ite	lt
 801b064:	4684      	movlt	ip, r0
 801b066:	46d4      	movge	ip, sl
 801b068:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b06c:	4433      	add	r3, r6
 801b06e:	b21b      	sxth	r3, r3
 801b070:	e74f      	b.n	801af12 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801b072:	4575      	cmp	r5, lr
 801b074:	46d4      	mov	ip, sl
 801b076:	bfa8      	it	ge
 801b078:	4675      	movge	r5, lr
 801b07a:	e74d      	b.n	801af18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 801b07c:	eb0b 0006 	add.w	r0, fp, r6
 801b080:	4426      	add	r6, r4
 801b082:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b086:	f1b9 0f13 	cmp.w	r9, #19
 801b08a:	bfdc      	itt	le
 801b08c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b090:	444d      	addle	r5, r9
 801b092:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b096:	bfd8      	it	le
 801b098:	b22d      	sxthle	r5, r5
 801b09a:	f7fd fa6e 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b09e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b0a2:	2800      	cmp	r0, #0
 801b0a4:	f47f af15 	bne.w	801aed2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 801b0a8:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b0ac:	fa1f f989 	uxth.w	r9, r9
 801b0b0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b0b4:	eba5 050c 	sub.w	r5, r5, ip
 801b0b8:	fa1f f28c 	uxth.w	r2, ip
 801b0bc:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b0c0:	eb02 0009 	add.w	r0, r2, r9
 801b0c4:	2d14      	cmp	r5, #20
 801b0c6:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b0ca:	bfa8      	it	ge
 801b0cc:	2514      	movge	r5, #20
 801b0ce:	b200      	sxth	r0, r0
 801b0d0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b0d4:	b289      	uxth	r1, r1
 801b0d6:	fa1f fe85 	uxth.w	lr, r5
 801b0da:	eba0 000c 	sub.w	r0, r0, ip
 801b0de:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b0e2:	4586      	cmp	lr, r0
 801b0e4:	f8d8 0000 	ldr.w	r0, [r8]
 801b0e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b0ec:	b29b      	uxth	r3, r3
 801b0ee:	bfb8      	it	lt
 801b0f0:	46f1      	movlt	r9, lr
 801b0f2:	6805      	ldr	r5, [r0, #0]
 801b0f4:	f8cd 9000 	str.w	r9, [sp]
 801b0f8:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 801b0fa:	47a8      	blx	r5
 801b0fc:	6823      	ldr	r3, [r4, #0]
 801b0fe:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b102:	a907      	add	r1, sp, #28
 801b104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b106:	4620      	mov	r0, r4
 801b108:	4798      	blx	r3
 801b10a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b10e:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b112:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b116:	1a5b      	subs	r3, r3, r1
 801b118:	440a      	add	r2, r1
 801b11a:	b21b      	sxth	r3, r3
 801b11c:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b120:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801b124:	2b00      	cmp	r3, #0
 801b126:	f47f aecf 	bne.w	801aec8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b12a:	fa1f f18a 	uxth.w	r1, sl
 801b12e:	4658      	mov	r0, fp
 801b130:	f7ff fa36 	bl	801a5a0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b134:	e6c8      	b.n	801aec8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801b136:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b13a:	42ab      	cmp	r3, r5
 801b13c:	f67f aea0 	bls.w	801ae80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801b140:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b144:	ab07      	add	r3, sp, #28
 801b146:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b14a:	6851      	ldr	r1, [r2, #4]
 801b14c:	c303      	stmia	r3!, {r0, r1}
 801b14e:	a807      	add	r0, sp, #28
 801b150:	f7fd fa13 	bl	801857a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b154:	b920      	cbnz	r0, 801b160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 801b156:	6823      	ldr	r3, [r4, #0]
 801b158:	a907      	add	r1, sp, #28
 801b15a:	4620      	mov	r0, r4
 801b15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b15e:	4798      	blx	r3
 801b160:	3501      	adds	r5, #1
 801b162:	b2ad      	uxth	r5, r5
 801b164:	e7e7      	b.n	801b136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801b166:	bf00      	nop

0801b168 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b168:	4b03      	ldr	r3, [pc, #12]	; (801b178 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b16a:	2200      	movs	r2, #0
 801b16c:	801a      	strh	r2, [r3, #0]
 801b16e:	805a      	strh	r2, [r3, #2]
 801b170:	809a      	strh	r2, [r3, #4]
 801b172:	80da      	strh	r2, [r3, #6]
 801b174:	4770      	bx	lr
 801b176:	bf00      	nop
 801b178:	2000951c 	.word	0x2000951c

0801b17c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b180:	b099      	sub	sp, #100	; 0x64
 801b182:	4607      	mov	r7, r0
 801b184:	4614      	mov	r4, r2
 801b186:	461d      	mov	r5, r3
 801b188:	a802      	add	r0, sp, #8
 801b18a:	468a      	mov	sl, r1
 801b18c:	f000 fdbb 	bl	801bd06 <_ZN8touchgfx12TextProviderC1Ev>
 801b190:	683b      	ldr	r3, [r7, #0]
 801b192:	4638      	mov	r0, r7
 801b194:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801b198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b19a:	4798      	blx	r3
 801b19c:	462a      	mov	r2, r5
 801b19e:	2500      	movs	r5, #0
 801b1a0:	4621      	mov	r1, r4
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	a802      	add	r0, sp, #8
 801b1a6:	462c      	mov	r4, r5
 801b1a8:	46a9      	mov	r9, r5
 801b1aa:	46a8      	mov	r8, r5
 801b1ac:	f000 fdf0 	bl	801bd90 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	9301      	str	r3, [sp, #4]
 801b1b4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b1b8:	429c      	cmp	r4, r3
 801b1ba:	d002      	beq.n	801b1c2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801b1bc:	455c      	cmp	r4, fp
 801b1be:	bf18      	it	ne
 801b1c0:	4625      	movne	r5, r4
 801b1c2:	ab01      	add	r3, sp, #4
 801b1c4:	463a      	mov	r2, r7
 801b1c6:	4651      	mov	r1, sl
 801b1c8:	a802      	add	r0, sp, #8
 801b1ca:	f001 f8db 	bl	801c384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b1ce:	4604      	mov	r4, r0
 801b1d0:	b108      	cbz	r0, 801b1d6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801b1d2:	280a      	cmp	r0, #10
 801b1d4:	d10a      	bne.n	801b1ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801b1d6:	45c1      	cmp	r9, r8
 801b1d8:	bf38      	it	cc
 801b1da:	46c1      	movcc	r9, r8
 801b1dc:	f04f 0800 	mov.w	r8, #0
 801b1e0:	2c00      	cmp	r4, #0
 801b1e2:	d1e5      	bne.n	801b1b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b1e4:	4648      	mov	r0, r9
 801b1e6:	b019      	add	sp, #100	; 0x64
 801b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1ec:	9a01      	ldr	r2, [sp, #4]
 801b1ee:	2a00      	cmp	r2, #0
 801b1f0:	d0de      	beq.n	801b1b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801b1f2:	7b56      	ldrb	r6, [r2, #13]
 801b1f4:	4629      	mov	r1, r5
 801b1f6:	683b      	ldr	r3, [r7, #0]
 801b1f8:	0076      	lsls	r6, r6, #1
 801b1fa:	8894      	ldrh	r4, [r2, #4]
 801b1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1fe:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801b202:	7a96      	ldrb	r6, [r2, #10]
 801b204:	4306      	orrs	r6, r0
 801b206:	4638      	mov	r0, r7
 801b208:	4798      	blx	r3
 801b20a:	4430      	add	r0, r6
 801b20c:	4480      	add	r8, r0
 801b20e:	fa1f f888 	uxth.w	r8, r8
 801b212:	e7e5      	b.n	801b1e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801b214 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b214:	b508      	push	{r3, lr}
 801b216:	6803      	ldr	r3, [r0, #0]
 801b218:	68db      	ldr	r3, [r3, #12]
 801b21a:	4798      	blx	r3
 801b21c:	b128      	cbz	r0, 801b22a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b21e:	7b43      	ldrb	r3, [r0, #13]
 801b220:	7a80      	ldrb	r0, [r0, #10]
 801b222:	005b      	lsls	r3, r3, #1
 801b224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b228:	4318      	orrs	r0, r3
 801b22a:	bd08      	pop	{r3, pc}

0801b22c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b22c:	b40e      	push	{r1, r2, r3}
 801b22e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b230:	b098      	sub	sp, #96	; 0x60
 801b232:	4605      	mov	r5, r0
 801b234:	ab1d      	add	r3, sp, #116	; 0x74
 801b236:	a802      	add	r0, sp, #8
 801b238:	ae18      	add	r6, sp, #96	; 0x60
 801b23a:	f853 4b04 	ldr.w	r4, [r3], #4
 801b23e:	9300      	str	r3, [sp, #0]
 801b240:	f000 fd61 	bl	801bd06 <_ZN8touchgfx12TextProviderC1Ev>
 801b244:	682b      	ldr	r3, [r5, #0]
 801b246:	4628      	mov	r0, r5
 801b248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b24a:	4798      	blx	r3
 801b24c:	4621      	mov	r1, r4
 801b24e:	2400      	movs	r4, #0
 801b250:	4603      	mov	r3, r0
 801b252:	9a00      	ldr	r2, [sp, #0]
 801b254:	a802      	add	r0, sp, #8
 801b256:	f000 fd9b 	bl	801bd90 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b25a:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b25e:	462a      	mov	r2, r5
 801b260:	4633      	mov	r3, r6
 801b262:	4621      	mov	r1, r4
 801b264:	a802      	add	r0, sp, #8
 801b266:	f001 f88d 	bl	801c384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b26a:	b300      	cbz	r0, 801b2ae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b26c:	280a      	cmp	r0, #10
 801b26e:	d01a      	beq.n	801b2a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b270:	9f01      	ldr	r7, [sp, #4]
 801b272:	b1c7      	cbz	r7, 801b2a6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801b274:	7b78      	ldrb	r0, [r7, #13]
 801b276:	7a3b      	ldrb	r3, [r7, #8]
 801b278:	00c1      	lsls	r1, r0, #3
 801b27a:	88aa      	ldrh	r2, [r5, #4]
 801b27c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b280:	4319      	orrs	r1, r3
 801b282:	0643      	lsls	r3, r0, #25
 801b284:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801b288:	bf48      	it	mi
 801b28a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801b28e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b292:	bf48      	it	mi
 801b294:	b219      	sxthmi	r1, r3
 801b296:	79fb      	ldrb	r3, [r7, #7]
 801b298:	4303      	orrs	r3, r0
 801b29a:	4413      	add	r3, r2
 801b29c:	1a5b      	subs	r3, r3, r1
 801b29e:	b29b      	uxth	r3, r3
 801b2a0:	42a3      	cmp	r3, r4
 801b2a2:	bfc8      	it	gt
 801b2a4:	b21c      	sxthgt	r4, r3
 801b2a6:	4633      	mov	r3, r6
 801b2a8:	462a      	mov	r2, r5
 801b2aa:	2100      	movs	r1, #0
 801b2ac:	e7da      	b.n	801b264 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801b2ae:	b2a0      	uxth	r0, r4
 801b2b0:	b018      	add	sp, #96	; 0x60
 801b2b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b2b6:	b003      	add	sp, #12
 801b2b8:	4770      	bx	lr

0801b2ba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b2ba:	b40e      	push	{r1, r2, r3}
 801b2bc:	b530      	push	{r4, r5, lr}
 801b2be:	b098      	sub	sp, #96	; 0x60
 801b2c0:	4604      	mov	r4, r0
 801b2c2:	ab1b      	add	r3, sp, #108	; 0x6c
 801b2c4:	a802      	add	r0, sp, #8
 801b2c6:	f853 5b04 	ldr.w	r5, [r3], #4
 801b2ca:	9301      	str	r3, [sp, #4]
 801b2cc:	f000 fd1b 	bl	801bd06 <_ZN8touchgfx12TextProviderC1Ev>
 801b2d0:	6823      	ldr	r3, [r4, #0]
 801b2d2:	4620      	mov	r0, r4
 801b2d4:	2401      	movs	r4, #1
 801b2d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2d8:	4798      	blx	r3
 801b2da:	9a01      	ldr	r2, [sp, #4]
 801b2dc:	4603      	mov	r3, r0
 801b2de:	4629      	mov	r1, r5
 801b2e0:	a802      	add	r0, sp, #8
 801b2e2:	f000 fd55 	bl	801bd90 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b2e6:	a802      	add	r0, sp, #8
 801b2e8:	f001 f8ea 	bl	801c4c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b2ec:	b2a3      	uxth	r3, r4
 801b2ee:	b138      	cbz	r0, 801b300 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801b2f0:	280a      	cmp	r0, #10
 801b2f2:	a802      	add	r0, sp, #8
 801b2f4:	bf04      	itt	eq
 801b2f6:	3301      	addeq	r3, #1
 801b2f8:	b21c      	sxtheq	r4, r3
 801b2fa:	f001 f8e1 	bl	801c4c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b2fe:	e7f5      	b.n	801b2ec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b300:	4618      	mov	r0, r3
 801b302:	b018      	add	sp, #96	; 0x60
 801b304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b308:	b003      	add	sp, #12
 801b30a:	4770      	bx	lr

0801b30c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b30c:	b40e      	push	{r1, r2, r3}
 801b30e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b310:	b098      	sub	sp, #96	; 0x60
 801b312:	4604      	mov	r4, r0
 801b314:	26ff      	movs	r6, #255	; 0xff
 801b316:	ab1d      	add	r3, sp, #116	; 0x74
 801b318:	a802      	add	r0, sp, #8
 801b31a:	f853 5b04 	ldr.w	r5, [r3], #4
 801b31e:	9300      	str	r3, [sp, #0]
 801b320:	f000 fcf1 	bl	801bd06 <_ZN8touchgfx12TextProviderC1Ev>
 801b324:	6823      	ldr	r3, [r4, #0]
 801b326:	4620      	mov	r0, r4
 801b328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b32a:	4798      	blx	r3
 801b32c:	4629      	mov	r1, r5
 801b32e:	4603      	mov	r3, r0
 801b330:	9a00      	ldr	r2, [sp, #0]
 801b332:	a802      	add	r0, sp, #8
 801b334:	ad18      	add	r5, sp, #96	; 0x60
 801b336:	f000 fd2b 	bl	801bd90 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b33a:	2100      	movs	r1, #0
 801b33c:	4622      	mov	r2, r4
 801b33e:	a802      	add	r0, sp, #8
 801b340:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b344:	462b      	mov	r3, r5
 801b346:	f001 f81d 	bl	801c384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b34a:	b1d8      	cbz	r0, 801b384 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b34c:	280a      	cmp	r0, #10
 801b34e:	d012      	beq.n	801b376 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b350:	9801      	ldr	r0, [sp, #4]
 801b352:	b180      	cbz	r0, 801b376 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801b354:	7b47      	ldrb	r7, [r0, #13]
 801b356:	7922      	ldrb	r2, [r4, #4]
 801b358:	00fb      	lsls	r3, r7, #3
 801b35a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b35e:	7a03      	ldrb	r3, [r0, #8]
 801b360:	430b      	orrs	r3, r1
 801b362:	0679      	lsls	r1, r7, #25
 801b364:	bf44      	itt	mi
 801b366:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801b36a:	b21b      	sxthmi	r3, r3
 801b36c:	1ad3      	subs	r3, r2, r3
 801b36e:	b2db      	uxtb	r3, r3
 801b370:	429e      	cmp	r6, r3
 801b372:	bf28      	it	cs
 801b374:	461e      	movcs	r6, r3
 801b376:	462b      	mov	r3, r5
 801b378:	4622      	mov	r2, r4
 801b37a:	2100      	movs	r1, #0
 801b37c:	a802      	add	r0, sp, #8
 801b37e:	f001 f801 	bl	801c384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b382:	e7e2      	b.n	801b34a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b384:	4630      	mov	r0, r6
 801b386:	b018      	add	sp, #96	; 0x60
 801b388:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b38c:	b003      	add	sp, #12
 801b38e:	4770      	bx	lr

0801b390 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b390:	b513      	push	{r0, r1, r4, lr}
 801b392:	1d01      	adds	r1, r0, #4
 801b394:	4603      	mov	r3, r0
 801b396:	466a      	mov	r2, sp
 801b398:	c903      	ldmia	r1, {r0, r1}
 801b39a:	e882 0003 	stmia.w	r2, {r0, r1}
 801b39e:	2100      	movs	r1, #0
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	9100      	str	r1, [sp, #0]
 801b3a4:	6819      	ldr	r1, [r3, #0]
 801b3a6:	690c      	ldr	r4, [r1, #16]
 801b3a8:	4611      	mov	r1, r2
 801b3aa:	47a0      	blx	r4
 801b3ac:	b002      	add	sp, #8
 801b3ae:	bd10      	pop	{r4, pc}

0801b3b0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b3b0:	b538      	push	{r3, r4, r5, lr}
 801b3b2:	680b      	ldr	r3, [r1, #0]
 801b3b4:	460c      	mov	r4, r1
 801b3b6:	4605      	mov	r5, r0
 801b3b8:	68db      	ldr	r3, [r3, #12]
 801b3ba:	4798      	blx	r3
 801b3bc:	6823      	ldr	r3, [r4, #0]
 801b3be:	4620      	mov	r0, r4
 801b3c0:	4629      	mov	r1, r5
 801b3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3c4:	4798      	blx	r3
 801b3c6:	4628      	mov	r0, r5
 801b3c8:	bd38      	pop	{r3, r4, r5, pc}

0801b3ca <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b3ca:	b410      	push	{r4}
 801b3cc:	880a      	ldrh	r2, [r1, #0]
 801b3ce:	8884      	ldrh	r4, [r0, #4]
 801b3d0:	4422      	add	r2, r4
 801b3d2:	800a      	strh	r2, [r1, #0]
 801b3d4:	884a      	ldrh	r2, [r1, #2]
 801b3d6:	88c4      	ldrh	r4, [r0, #6]
 801b3d8:	4422      	add	r2, r4
 801b3da:	804a      	strh	r2, [r1, #2]
 801b3dc:	6940      	ldr	r0, [r0, #20]
 801b3de:	b120      	cbz	r0, 801b3ea <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b3e0:	6803      	ldr	r3, [r0, #0]
 801b3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3e8:	4718      	bx	r3
 801b3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3ee:	4770      	bx	lr

0801b3f0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3f2:	460b      	mov	r3, r1
 801b3f4:	b085      	sub	sp, #20
 801b3f6:	4604      	mov	r4, r0
 801b3f8:	b901      	cbnz	r1, 801b3fc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b3fa:	b322      	cbz	r2, 801b446 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801b3fc:	1d27      	adds	r7, r4, #4
 801b3fe:	466e      	mov	r6, sp
 801b400:	88e5      	ldrh	r5, [r4, #6]
 801b402:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b406:	442a      	add	r2, r5
 801b408:	e886 0003 	stmia.w	r6, {r0, r1}
 801b40c:	88a1      	ldrh	r1, [r4, #4]
 801b40e:	4620      	mov	r0, r4
 801b410:	b215      	sxth	r5, r2
 801b412:	4419      	add	r1, r3
 801b414:	6823      	ldr	r3, [r4, #0]
 801b416:	b209      	sxth	r1, r1
 801b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b41a:	4798      	blx	r3
 801b41c:	6823      	ldr	r3, [r4, #0]
 801b41e:	4629      	mov	r1, r5
 801b420:	4620      	mov	r0, r4
 801b422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b424:	ad02      	add	r5, sp, #8
 801b426:	4798      	blx	r3
 801b428:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b42c:	e885 0003 	stmia.w	r5, {r0, r1}
 801b430:	6960      	ldr	r0, [r4, #20]
 801b432:	b150      	cbz	r0, 801b44a <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801b434:	6803      	ldr	r3, [r0, #0]
 801b436:	4631      	mov	r1, r6
 801b438:	691b      	ldr	r3, [r3, #16]
 801b43a:	4798      	blx	r3
 801b43c:	6960      	ldr	r0, [r4, #20]
 801b43e:	6803      	ldr	r3, [r0, #0]
 801b440:	691b      	ldr	r3, [r3, #16]
 801b442:	4629      	mov	r1, r5
 801b444:	4798      	blx	r3
 801b446:	b005      	add	sp, #20
 801b448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b44a:	f7ff f843 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 801b44e:	6803      	ldr	r3, [r0, #0]
 801b450:	4631      	mov	r1, r6
 801b452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b454:	4798      	blx	r3
 801b456:	f7ff f83d 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 801b45a:	6803      	ldr	r3, [r0, #0]
 801b45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b45e:	e7f0      	b.n	801b442 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801b460 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b462:	8882      	ldrh	r2, [r0, #4]
 801b464:	4605      	mov	r5, r0
 801b466:	880b      	ldrh	r3, [r1, #0]
 801b468:	460c      	mov	r4, r1
 801b46a:	4413      	add	r3, r2
 801b46c:	800b      	strh	r3, [r1, #0]
 801b46e:	884b      	ldrh	r3, [r1, #2]
 801b470:	88c2      	ldrh	r2, [r0, #6]
 801b472:	4413      	add	r3, r2
 801b474:	4602      	mov	r2, r0
 801b476:	804b      	strh	r3, [r1, #2]
 801b478:	466b      	mov	r3, sp
 801b47a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b47e:	6851      	ldr	r1, [r2, #4]
 801b480:	c303      	stmia	r3!, {r0, r1}
 801b482:	4621      	mov	r1, r4
 801b484:	4668      	mov	r0, sp
 801b486:	f7fd f835 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801b48a:	466b      	mov	r3, sp
 801b48c:	cb03      	ldmia	r3!, {r0, r1}
 801b48e:	6020      	str	r0, [r4, #0]
 801b490:	6061      	str	r1, [r4, #4]
 801b492:	6968      	ldr	r0, [r5, #20]
 801b494:	b128      	cbz	r0, 801b4a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b496:	6803      	ldr	r3, [r0, #0]
 801b498:	691b      	ldr	r3, [r3, #16]
 801b49a:	4621      	mov	r1, r4
 801b49c:	4798      	blx	r3
 801b49e:	b003      	add	sp, #12
 801b4a0:	bd30      	pop	{r4, r5, pc}
 801b4a2:	f7ff f817 	bl	801a4d4 <_ZN8touchgfx11Application11getInstanceEv>
 801b4a6:	6803      	ldr	r3, [r0, #0]
 801b4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4aa:	e7f6      	b.n	801b49a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b4ac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b4ac:	b570      	push	{r4, r5, r6, lr}
 801b4ae:	8882      	ldrh	r2, [r0, #4]
 801b4b0:	460c      	mov	r4, r1
 801b4b2:	880b      	ldrh	r3, [r1, #0]
 801b4b4:	4605      	mov	r5, r0
 801b4b6:	4413      	add	r3, r2
 801b4b8:	800b      	strh	r3, [r1, #0]
 801b4ba:	884b      	ldrh	r3, [r1, #2]
 801b4bc:	88c2      	ldrh	r2, [r0, #6]
 801b4be:	4413      	add	r3, r2
 801b4c0:	804b      	strh	r3, [r1, #2]
 801b4c2:	1d01      	adds	r1, r0, #4
 801b4c4:	4620      	mov	r0, r4
 801b4c6:	f7fd f815 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801b4ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	dd0b      	ble.n	801b4ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b4d2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	dd07      	ble.n	801b4ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b4da:	6968      	ldr	r0, [r5, #20]
 801b4dc:	b128      	cbz	r0, 801b4ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b4de:	6803      	ldr	r3, [r0, #0]
 801b4e0:	4621      	mov	r1, r4
 801b4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b4e8:	4718      	bx	r3
 801b4ea:	bd70      	pop	{r4, r5, r6, pc}

0801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b4ec:	b510      	push	{r4, lr}
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	4604      	mov	r4, r0
 801b4f2:	4608      	mov	r0, r1
 801b4f4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b4f8:	8023      	strh	r3, [r4, #0]
 801b4fa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b4fe:	8063      	strh	r3, [r4, #2]
 801b500:	6803      	ldr	r3, [r0, #0]
 801b502:	80a1      	strh	r1, [r4, #4]
 801b504:	4621      	mov	r1, r4
 801b506:	80e2      	strh	r2, [r4, #6]
 801b508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b50a:	4798      	blx	r3
 801b50c:	4620      	mov	r0, r4
 801b50e:	bd10      	pop	{r4, pc}

0801b510 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b510:	b530      	push	{r4, r5, lr}
 801b512:	8083      	strh	r3, [r0, #4]
 801b514:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b518:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b51c:	7183      	strb	r3, [r0, #6]
 801b51e:	79c3      	ldrb	r3, [r0, #7]
 801b520:	6101      	str	r1, [r0, #16]
 801b522:	f365 0306 	bfi	r3, r5, #0, #7
 801b526:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b52a:	8282      	strh	r2, [r0, #20]
 801b52c:	f365 13c7 	bfi	r3, r5, #7, #1
 801b530:	71c3      	strb	r3, [r0, #7]
 801b532:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b536:	7203      	strb	r3, [r0, #8]
 801b538:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b53c:	7243      	strb	r3, [r0, #9]
 801b53e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b542:	8143      	strh	r3, [r0, #10]
 801b544:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b548:	8183      	strh	r3, [r0, #12]
 801b54a:	4b01      	ldr	r3, [pc, #4]	; (801b550 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b54c:	6003      	str	r3, [r0, #0]
 801b54e:	bd30      	pop	{r4, r5, pc}
 801b550:	0802826c 	.word	0x0802826c

0801b554 <_ZNK8touchgfx9ConstFont4findEt>:
 801b554:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b556:	6904      	ldr	r4, [r0, #16]
 801b558:	b3bc      	cbz	r4, 801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b55a:	88a3      	ldrh	r3, [r4, #4]
 801b55c:	8a82      	ldrh	r2, [r0, #20]
 801b55e:	1acb      	subs	r3, r1, r3
 801b560:	f102 32ff 	add.w	r2, r2, #4294967295
 801b564:	d431      	bmi.n	801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b566:	4293      	cmp	r3, r2
 801b568:	dd0c      	ble.n	801b584 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b56a:	230e      	movs	r3, #14
 801b56c:	fb03 4302 	mla	r3, r3, r2, r4
 801b570:	889b      	ldrh	r3, [r3, #4]
 801b572:	1a5b      	subs	r3, r3, r1
 801b574:	1ad3      	subs	r3, r2, r3
 801b576:	429a      	cmp	r2, r3
 801b578:	db27      	blt.n	801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	bfbc      	itt	lt
 801b57e:	2302      	movlt	r3, #2
 801b580:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b584:	2500      	movs	r5, #0
 801b586:	260e      	movs	r6, #14
 801b588:	4295      	cmp	r5, r2
 801b58a:	dc1e      	bgt.n	801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b58c:	fb06 4003 	mla	r0, r6, r3, r4
 801b590:	8887      	ldrh	r7, [r0, #4]
 801b592:	42b9      	cmp	r1, r7
 801b594:	d01a      	beq.n	801b5cc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b596:	d20d      	bcs.n	801b5b4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b598:	1e5a      	subs	r2, r3, #1
 801b59a:	4295      	cmp	r5, r2
 801b59c:	dc15      	bgt.n	801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b59e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b5a2:	1a5b      	subs	r3, r3, r1
 801b5a4:	1ad3      	subs	r3, r2, r3
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	db0f      	blt.n	801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b5aa:	429d      	cmp	r5, r3
 801b5ac:	ddec      	ble.n	801b588 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b5ae:	1953      	adds	r3, r2, r5
 801b5b0:	105b      	asrs	r3, r3, #1
 801b5b2:	e7e9      	b.n	801b588 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b5b4:	1c5d      	adds	r5, r3, #1
 801b5b6:	42aa      	cmp	r2, r5
 801b5b8:	db07      	blt.n	801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b5ba:	8a43      	ldrh	r3, [r0, #18]
 801b5bc:	1acb      	subs	r3, r1, r3
 801b5be:	442b      	add	r3, r5
 801b5c0:	429d      	cmp	r5, r3
 801b5c2:	dc02      	bgt.n	801b5ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b5c4:	429a      	cmp	r2, r3
 801b5c6:	dadf      	bge.n	801b588 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b5c8:	e7f1      	b.n	801b5ae <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b5ca:	2000      	movs	r0, #0
 801b5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b5ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5d0:	4604      	mov	r4, r0
 801b5d2:	4617      	mov	r7, r2
 801b5d4:	461e      	mov	r6, r3
 801b5d6:	b911      	cbnz	r1, 801b5de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b5d8:	2500      	movs	r5, #0
 801b5da:	4628      	mov	r0, r5
 801b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b5de:	290a      	cmp	r1, #10
 801b5e0:	d0fa      	beq.n	801b5d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b5e2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b5e6:	4291      	cmp	r1, r2
 801b5e8:	d0f6      	beq.n	801b5d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b5ea:	f242 020b 	movw	r2, #8203	; 0x200b
 801b5ee:	4291      	cmp	r1, r2
 801b5f0:	d0f2      	beq.n	801b5d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b5f2:	f7ff ffaf 	bl	801b554 <_ZNK8touchgfx9ConstFont4findEt>
 801b5f6:	4605      	mov	r5, r0
 801b5f8:	b950      	cbnz	r0, 801b610 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b5fa:	6823      	ldr	r3, [r4, #0]
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	691b      	ldr	r3, [r3, #16]
 801b600:	4798      	blx	r3
 801b602:	4601      	mov	r1, r0
 801b604:	4620      	mov	r0, r4
 801b606:	f7ff ffa5 	bl	801b554 <_ZNK8touchgfx9ConstFont4findEt>
 801b60a:	4605      	mov	r5, r0
 801b60c:	2800      	cmp	r0, #0
 801b60e:	d0e3      	beq.n	801b5d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b610:	6823      	ldr	r3, [r4, #0]
 801b612:	4629      	mov	r1, r5
 801b614:	4620      	mov	r0, r4
 801b616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b618:	4798      	blx	r3
 801b61a:	6038      	str	r0, [r7, #0]
 801b61c:	6823      	ldr	r3, [r4, #0]
 801b61e:	4620      	mov	r0, r4
 801b620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b622:	4798      	blx	r3
 801b624:	7030      	strb	r0, [r6, #0]
 801b626:	e7d8      	b.n	801b5da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b628 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b628:	2000      	movs	r0, #0
 801b62a:	4770      	bx	lr

0801b62c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b62c:	2001      	movs	r0, #1
 801b62e:	4770      	bx	lr

0801b630 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b630:	2002      	movs	r0, #2
 801b632:	4770      	bx	lr

0801b634 <_ZN8touchgfx12GestureEventD1Ev>:
 801b634:	4770      	bx	lr

0801b636 <_ZN8touchgfx9DragEventD1Ev>:
 801b636:	4770      	bx	lr

0801b638 <_ZN8touchgfx10ClickEventD1Ev>:
 801b638:	4770      	bx	lr

0801b63a <_ZN8touchgfx10ClickEventD0Ev>:
 801b63a:	b510      	push	{r4, lr}
 801b63c:	4604      	mov	r4, r0
 801b63e:	210c      	movs	r1, #12
 801b640:	f009 fe15 	bl	802526e <_ZdlPvj>
 801b644:	4620      	mov	r0, r4
 801b646:	bd10      	pop	{r4, pc}

0801b648 <_ZN8touchgfx9DragEventD0Ev>:
 801b648:	b510      	push	{r4, lr}
 801b64a:	4604      	mov	r4, r0
 801b64c:	2110      	movs	r1, #16
 801b64e:	f009 fe0e 	bl	802526e <_ZdlPvj>
 801b652:	4620      	mov	r0, r4
 801b654:	bd10      	pop	{r4, pc}

0801b656 <_ZN8touchgfx12GestureEventD0Ev>:
 801b656:	b510      	push	{r4, lr}
 801b658:	4604      	mov	r4, r0
 801b65a:	210c      	movs	r1, #12
 801b65c:	f009 fe07 	bl	802526e <_ZdlPvj>
 801b660:	4620      	mov	r0, r4
 801b662:	bd10      	pop	{r4, pc}

0801b664 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b664:	b530      	push	{r4, r5, lr}
 801b666:	460d      	mov	r5, r1
 801b668:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b66a:	b087      	sub	sp, #28
 801b66c:	4604      	mov	r4, r0
 801b66e:	b301      	cbz	r1, 801b6b2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b670:	a801      	add	r0, sp, #4
 801b672:	f7ff ff3b 	bl	801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b676:	892a      	ldrh	r2, [r5, #8]
 801b678:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b67c:	7928      	ldrb	r0, [r5, #4]
 801b67e:	1ad2      	subs	r2, r2, r3
 801b680:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b682:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b686:	441a      	add	r2, r3
 801b688:	896b      	ldrh	r3, [r5, #10]
 801b68a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b68e:	f88d 0010 	strb.w	r0, [sp, #16]
 801b692:	1b5b      	subs	r3, r3, r5
 801b694:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b696:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b698:	442b      	add	r3, r5
 801b69a:	4d07      	ldr	r5, [pc, #28]	; (801b6b8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b69c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b6a0:	a903      	add	r1, sp, #12
 801b6a2:	9503      	str	r5, [sp, #12]
 801b6a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b6a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6ac:	6803      	ldr	r3, [r0, #0]
 801b6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6b0:	4798      	blx	r3
 801b6b2:	b007      	add	sp, #28
 801b6b4:	bd30      	pop	{r4, r5, pc}
 801b6b6:	bf00      	nop
 801b6b8:	080282e8 	.word	0x080282e8

0801b6bc <_ZNK8touchgfx4Rect9intersectEss>:
 801b6bc:	b510      	push	{r4, lr}
 801b6be:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b6c2:	428b      	cmp	r3, r1
 801b6c4:	dc10      	bgt.n	801b6e8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b6c6:	8884      	ldrh	r4, [r0, #4]
 801b6c8:	4423      	add	r3, r4
 801b6ca:	b21b      	sxth	r3, r3
 801b6cc:	4299      	cmp	r1, r3
 801b6ce:	da0b      	bge.n	801b6e8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b6d0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b6d4:	4293      	cmp	r3, r2
 801b6d6:	dc07      	bgt.n	801b6e8 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b6d8:	88c0      	ldrh	r0, [r0, #6]
 801b6da:	4418      	add	r0, r3
 801b6dc:	b200      	sxth	r0, r0
 801b6de:	4282      	cmp	r2, r0
 801b6e0:	bfac      	ite	ge
 801b6e2:	2000      	movge	r0, #0
 801b6e4:	2001      	movlt	r0, #1
 801b6e6:	bd10      	pop	{r4, pc}
 801b6e8:	2000      	movs	r0, #0
 801b6ea:	e7fc      	b.n	801b6e6 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801b6ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ee:	460c      	mov	r4, r1
 801b6f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b6f2:	b089      	sub	sp, #36	; 0x24
 801b6f4:	4605      	mov	r5, r0
 801b6f6:	2900      	cmp	r1, #0
 801b6f8:	d054      	beq.n	801b7a4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801b6fa:	4668      	mov	r0, sp
 801b6fc:	f7ff fef6 	bl	801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b700:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b702:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b704:	4668      	mov	r0, sp
 801b706:	8922      	ldrh	r2, [r4, #8]
 801b708:	88e1      	ldrh	r1, [r4, #6]
 801b70a:	443a      	add	r2, r7
 801b70c:	4431      	add	r1, r6
 801b70e:	b212      	sxth	r2, r2
 801b710:	b209      	sxth	r1, r1
 801b712:	f7ff ffd3 	bl	801b6bc <_ZNK8touchgfx4Rect9intersectEss>
 801b716:	b1d0      	cbz	r0, 801b74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b718:	89a2      	ldrh	r2, [r4, #12]
 801b71a:	4668      	mov	r0, sp
 801b71c:	8961      	ldrh	r1, [r4, #10]
 801b71e:	443a      	add	r2, r7
 801b720:	4431      	add	r1, r6
 801b722:	b212      	sxth	r2, r2
 801b724:	b209      	sxth	r1, r1
 801b726:	f7ff ffc9 	bl	801b6bc <_ZNK8touchgfx4Rect9intersectEss>
 801b72a:	4603      	mov	r3, r0
 801b72c:	b978      	cbnz	r0, 801b74e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b72e:	4a1e      	ldr	r2, [pc, #120]	; (801b7a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b730:	a904      	add	r1, sp, #16
 801b732:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b734:	9204      	str	r2, [sp, #16]
 801b736:	2202      	movs	r2, #2
 801b738:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b73c:	f88d 2014 	strb.w	r2, [sp, #20]
 801b740:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b744:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b748:	6803      	ldr	r3, [r0, #0]
 801b74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b74c:	4798      	blx	r3
 801b74e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b750:	a802      	add	r0, sp, #8
 801b752:	f7ff fecb 	bl	801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b756:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b75a:	88e0      	ldrh	r0, [r4, #6]
 801b75c:	8961      	ldrh	r1, [r4, #10]
 801b75e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b762:	1a80      	subs	r0, r0, r2
 801b764:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801b768:	1a89      	subs	r1, r1, r2
 801b76a:	8923      	ldrh	r3, [r4, #8]
 801b76c:	4460      	add	r0, ip
 801b76e:	89a2      	ldrh	r2, [r4, #12]
 801b770:	4461      	add	r1, ip
 801b772:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b774:	eba3 030e 	sub.w	r3, r3, lr
 801b778:	eba2 020e 	sub.w	r2, r2, lr
 801b77c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b780:	7927      	ldrb	r7, [r4, #4]
 801b782:	4433      	add	r3, r6
 801b784:	4432      	add	r2, r6
 801b786:	4c09      	ldr	r4, [pc, #36]	; (801b7ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b788:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b78a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b78e:	a904      	add	r1, sp, #16
 801b790:	9404      	str	r4, [sp, #16]
 801b792:	f88d 7014 	strb.w	r7, [sp, #20]
 801b796:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b79a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b79e:	6803      	ldr	r3, [r0, #0]
 801b7a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b7a2:	4798      	blx	r3
 801b7a4:	b009      	add	sp, #36	; 0x24
 801b7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7a8:	080282c0 	.word	0x080282c0
 801b7ac:	080282d4 	.word	0x080282d4

0801b7b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b4:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801b7b8:	b0a1      	sub	sp, #132	; 0x84
 801b7ba:	4604      	mov	r4, r0
 801b7bc:	460d      	mov	r5, r1
 801b7be:	790b      	ldrb	r3, [r1, #4]
 801b7c0:	f1b9 0f00 	cmp.w	r9, #0
 801b7c4:	d00f      	beq.n	801b7e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	f040 80a2 	bne.w	801b910 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b7cc:	b021      	add	sp, #132	; 0x84
 801b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7d2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b7d6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b7da:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b7de:	1d20      	adds	r0, r4, #4
 801b7e0:	f7fc fdd6 	bl	8018390 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b7e4:	e094      	b.n	801b910 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d1f0      	bne.n	801b7cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b7ea:	4b5f      	ldr	r3, [pc, #380]	; (801b968 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801b7f2:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801b7f6:	f1ba 0f03 	cmp.w	sl, #3
 801b7fa:	ddea      	ble.n	801b7d2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801b7fc:	f1ba 0f0c 	cmp.w	sl, #12
 801b800:	f04f 0303 	mov.w	r3, #3
 801b804:	f04f 0600 	mov.w	r6, #0
 801b808:	4958      	ldr	r1, [pc, #352]	; (801b96c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801b80a:	bfd8      	it	le
 801b80c:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801b810:	960a      	str	r6, [sp, #40]	; 0x28
 801b812:	bfd8      	it	le
 801b814:	fb92 f3f3 	sdivle	r3, r2, r3
 801b818:	9301      	str	r3, [sp, #4]
 801b81a:	4b55      	ldr	r3, [pc, #340]	; (801b970 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801b81c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b820:	4b54      	ldr	r3, [pc, #336]	; (801b974 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801b822:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b826:	2248      	movs	r2, #72	; 0x48
 801b828:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b82c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b830:	ab0e      	add	r3, sp, #56	; 0x38
 801b832:	4618      	mov	r0, r3
 801b834:	f009 fdc8 	bl	80253c8 <memcpy>
 801b838:	f04f 32ff 	mov.w	r2, #4294967295
 801b83c:	f8cd a008 	str.w	sl, [sp, #8]
 801b840:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801b844:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b848:	46b3      	mov	fp, r6
 801b84a:	fb93 f3f2 	sdiv	r3, r3, r2
 801b84e:	b29b      	uxth	r3, r3
 801b850:	9303      	str	r3, [sp, #12]
 801b852:	2300      	movs	r3, #0
 801b854:	9a03      	ldr	r2, [sp, #12]
 801b856:	88ef      	ldrh	r7, [r5, #6]
 801b858:	a80a      	add	r0, sp, #40	; 0x28
 801b85a:	9309      	str	r3, [sp, #36]	; 0x24
 801b85c:	9b07      	ldr	r3, [sp, #28]
 801b85e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801b862:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801b866:	fb13 f302 	smulbb	r3, r3, r2
 801b86a:	b29b      	uxth	r3, r3
 801b86c:	9304      	str	r3, [sp, #16]
 801b86e:	9b07      	ldr	r3, [sp, #28]
 801b870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b874:	685b      	ldr	r3, [r3, #4]
 801b876:	fb13 f302 	smulbb	r3, r3, r2
 801b87a:	b29b      	uxth	r3, r3
 801b87c:	9305      	str	r3, [sp, #20]
 801b87e:	9b04      	ldr	r3, [sp, #16]
 801b880:	441f      	add	r7, r3
 801b882:	9b05      	ldr	r3, [sp, #20]
 801b884:	4498      	add	r8, r3
 801b886:	b23f      	sxth	r7, r7
 801b888:	fa0f f888 	sxth.w	r8, r8
 801b88c:	4639      	mov	r1, r7
 801b88e:	4642      	mov	r2, r8
 801b890:	f7ff ff14 	bl	801b6bc <_ZNK8touchgfx4Rect9intersectEss>
 801b894:	b380      	cbz	r0, 801b8f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b896:	4639      	mov	r1, r7
 801b898:	ab09      	add	r3, sp, #36	; 0x24
 801b89a:	4642      	mov	r2, r8
 801b89c:	1d20      	adds	r0, r4, #4
 801b89e:	f7fc fd77 	bl	8018390 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b8a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b8a4:	b341      	cbz	r1, 801b8f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b8a6:	4549      	cmp	r1, r9
 801b8a8:	d026      	beq.n	801b8f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b8aa:	a80c      	add	r0, sp, #48	; 0x30
 801b8ac:	f7ff fe1e 	bl	801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b8b0:	2002      	movs	r0, #2
 801b8b2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b8b6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b8ba:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b8be:	fb92 f2f0 	sdiv	r2, r2, r0
 801b8c2:	440a      	add	r2, r1
 801b8c4:	1a99      	subs	r1, r3, r2
 801b8c6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b8ca:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b8ce:	fb93 f3f0 	sdiv	r3, r3, r0
 801b8d2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b8d6:	4403      	add	r3, r0
 801b8d8:	1ad3      	subs	r3, r2, r3
 801b8da:	9a06      	ldr	r2, [sp, #24]
 801b8dc:	435b      	muls	r3, r3
 801b8de:	fb01 3301 	mla	r3, r1, r1, r3
 801b8e2:	4293      	cmp	r3, r2
 801b8e4:	d208      	bcs.n	801b8f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b8e6:	9a04      	ldr	r2, [sp, #16]
 801b8e8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b8ec:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b8ee:	9a05      	ldr	r2, [sp, #20]
 801b8f0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801b8f4:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b8f6:	9306      	str	r3, [sp, #24]
 801b8f8:	f10b 0b02 	add.w	fp, fp, #2
 801b8fc:	f1bb 0f08 	cmp.w	fp, #8
 801b900:	dda7      	ble.n	801b852 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801b902:	9b02      	ldr	r3, [sp, #8]
 801b904:	3601      	adds	r6, #1
 801b906:	4453      	add	r3, sl
 801b908:	9302      	str	r3, [sp, #8]
 801b90a:	9b01      	ldr	r3, [sp, #4]
 801b90c:	42b3      	cmp	r3, r6
 801b90e:	d199      	bne.n	801b844 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801b910:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b912:	2900      	cmp	r1, #0
 801b914:	f43f af5a 	beq.w	801b7cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b918:	a80c      	add	r0, sp, #48	; 0x30
 801b91a:	2600      	movs	r6, #0
 801b91c:	f7ff fde6 	bl	801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b920:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b924:	88ea      	ldrh	r2, [r5, #6]
 801b926:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801b92a:	1ad2      	subs	r2, r2, r3
 801b92c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b92e:	7929      	ldrb	r1, [r5, #4]
 801b930:	441a      	add	r2, r3
 801b932:	892b      	ldrh	r3, [r5, #8]
 801b934:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801b938:	a90e      	add	r1, sp, #56	; 0x38
 801b93a:	1a1b      	subs	r3, r3, r0
 801b93c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801b93e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b942:	4403      	add	r3, r0
 801b944:	480c      	ldr	r0, [pc, #48]	; (801b978 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801b946:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801b94a:	900e      	str	r0, [sp, #56]	; 0x38
 801b94c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b94e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801b952:	6803      	ldr	r3, [r0, #0]
 801b954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b956:	4798      	blx	r3
 801b958:	792b      	ldrb	r3, [r5, #4]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	f43f af36 	beq.w	801b7cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b960:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b964:	e732      	b.n	801b7cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b966:	bf00      	nop
 801b968:	200094d8 	.word	0x200094d8
 801b96c:	08026de8 	.word	0x08026de8
 801b970:	200094ca 	.word	0x200094ca
 801b974:	200094cc 	.word	0x200094cc
 801b978:	080282c0 	.word	0x080282c0

0801b97c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b97e:	4604      	mov	r4, r0
 801b980:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b984:	3201      	adds	r2, #1
 801b986:	d112      	bne.n	801b9ae <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b988:	2500      	movs	r5, #0
 801b98a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b98e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b992:	6803      	ldr	r3, [r0, #0]
 801b994:	9500      	str	r5, [sp, #0]
 801b996:	466d      	mov	r5, sp
 801b998:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b99c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b9a0:	4629      	mov	r1, r5
 801b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9a4:	4798      	blx	r3
 801b9a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b9aa:	e884 0003 	stmia.w	r4, {r0, r1}
 801b9ae:	4620      	mov	r0, r4
 801b9b0:	b003      	add	sp, #12
 801b9b2:	bd30      	pop	{r4, r5, pc}

0801b9b4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b9b4:	b513      	push	{r0, r1, r4, lr}
 801b9b6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b9ba:	4604      	mov	r4, r0
 801b9bc:	3301      	adds	r3, #1
 801b9be:	d109      	bne.n	801b9d4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b9c0:	4601      	mov	r1, r0
 801b9c2:	4668      	mov	r0, sp
 801b9c4:	f7ff fd92 	bl	801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9c8:	f8bd 3000 	ldrh.w	r3, [sp]
 801b9cc:	8423      	strh	r3, [r4, #32]
 801b9ce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b9d2:	8463      	strh	r3, [r4, #34]	; 0x22
 801b9d4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b9d8:	b002      	add	sp, #8
 801b9da:	bd10      	pop	{r4, pc}

0801b9dc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b9dc:	b513      	push	{r0, r1, r4, lr}
 801b9de:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b9e2:	4604      	mov	r4, r0
 801b9e4:	3301      	adds	r3, #1
 801b9e6:	d109      	bne.n	801b9fc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b9e8:	4601      	mov	r1, r0
 801b9ea:	4668      	mov	r0, sp
 801b9ec:	f7ff fd7e 	bl	801b4ec <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9f0:	f8bd 3000 	ldrh.w	r3, [sp]
 801b9f4:	8423      	strh	r3, [r4, #32]
 801b9f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b9fa:	8463      	strh	r3, [r4, #34]	; 0x22
 801b9fc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ba00:	b002      	add	sp, #8
 801ba02:	bd10      	pop	{r4, pc}

0801ba04 <_ZN8touchgfx6ScreenC1Ev>:
 801ba04:	b570      	push	{r4, r5, r6, lr}
 801ba06:	4b16      	ldr	r3, [pc, #88]	; (801ba60 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801ba08:	4605      	mov	r5, r0
 801ba0a:	4a16      	ldr	r2, [pc, #88]	; (801ba64 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801ba0c:	2101      	movs	r1, #1
 801ba0e:	f845 3b04 	str.w	r3, [r5], #4
 801ba12:	2300      	movs	r3, #0
 801ba14:	6042      	str	r2, [r0, #4]
 801ba16:	4604      	mov	r4, r0
 801ba18:	8103      	strh	r3, [r0, #8]
 801ba1a:	8143      	strh	r3, [r0, #10]
 801ba1c:	8183      	strh	r3, [r0, #12]
 801ba1e:	81c3      	strh	r3, [r0, #14]
 801ba20:	8203      	strh	r3, [r0, #16]
 801ba22:	8243      	strh	r3, [r0, #18]
 801ba24:	8283      	strh	r3, [r0, #20]
 801ba26:	82c3      	strh	r3, [r0, #22]
 801ba28:	6203      	str	r3, [r0, #32]
 801ba2a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801ba2e:	6343      	str	r3, [r0, #52]	; 0x34
 801ba30:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801ba34:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801ba38:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801ba3c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801ba40:	4b09      	ldr	r3, [pc, #36]	; (801ba68 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ba42:	4628      	mov	r0, r5
 801ba44:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ba48:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801ba4a:	4a08      	ldr	r2, [pc, #32]	; (801ba6c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801ba4c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ba50:	4798      	blx	r3
 801ba52:	6863      	ldr	r3, [r4, #4]
 801ba54:	4628      	mov	r0, r5
 801ba56:	4631      	mov	r1, r6
 801ba58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba5a:	4798      	blx	r3
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	bd70      	pop	{r4, r5, r6, pc}
 801ba60:	080282fc 	.word	0x080282fc
 801ba64:	080277c4 	.word	0x080277c4
 801ba68:	200094cc 	.word	0x200094cc
 801ba6c:	200094ca 	.word	0x200094ca

0801ba70 <_ZN8touchgfx6Screen4drawEv>:
 801ba70:	4b09      	ldr	r3, [pc, #36]	; (801ba98 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801ba72:	b507      	push	{r0, r1, r2, lr}
 801ba74:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ba78:	2100      	movs	r1, #0
 801ba7a:	4b08      	ldr	r3, [pc, #32]	; (801ba9c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801ba7c:	9100      	str	r1, [sp, #0]
 801ba7e:	4669      	mov	r1, sp
 801ba80:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba84:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ba88:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ba8c:	6803      	ldr	r3, [r0, #0]
 801ba8e:	689b      	ldr	r3, [r3, #8]
 801ba90:	4798      	blx	r3
 801ba92:	b003      	add	sp, #12
 801ba94:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba98:	200094ca 	.word	0x200094ca
 801ba9c:	200094cc 	.word	0x200094cc

0801baa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baa4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801baa8:	b089      	sub	sp, #36	; 0x24
 801baaa:	4680      	mov	r8, r0
 801baac:	460c      	mov	r4, r1
 801baae:	2b00      	cmp	r3, #0
 801bab0:	4615      	mov	r5, r2
 801bab2:	dd0e      	ble.n	801bad2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bab4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	dd0a      	ble.n	801bad2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801babc:	4628      	mov	r0, r5
 801babe:	f7ff ff5d 	bl	801b97c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bac2:	4621      	mov	r1, r4
 801bac4:	f7fe fc7c 	bl	801a3c0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bac8:	69eb      	ldr	r3, [r5, #28]
 801baca:	b928      	cbnz	r0, 801bad8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801bacc:	461d      	mov	r5, r3
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d1f4      	bne.n	801babc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801bad2:	b009      	add	sp, #36	; 0x24
 801bad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad8:	ae04      	add	r6, sp, #16
 801bada:	2b00      	cmp	r3, #0
 801badc:	f000 80b5 	beq.w	801bc4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bae0:	682b      	ldr	r3, [r5, #0]
 801bae2:	4629      	mov	r1, r5
 801bae4:	a802      	add	r0, sp, #8
 801bae6:	68db      	ldr	r3, [r3, #12]
 801bae8:	4798      	blx	r3
 801baea:	4628      	mov	r0, r5
 801baec:	f7ff ff62 	bl	801b9b4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801baf0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801baf4:	4407      	add	r7, r0
 801baf6:	4628      	mov	r0, r5
 801baf8:	f7ff ff70 	bl	801b9dc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bafc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bb00:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801bb04:	b23f      	sxth	r7, r7
 801bb06:	4418      	add	r0, r3
 801bb08:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bb0c:	4621      	mov	r1, r4
 801bb0e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bb12:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bb16:	4630      	mov	r0, r6
 801bb18:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bb1c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801bb20:	f7fc fce8 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801bb24:	4628      	mov	r0, r5
 801bb26:	f7ff ff29 	bl	801b97c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bb2a:	ab06      	add	r3, sp, #24
 801bb2c:	4602      	mov	r2, r0
 801bb2e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801bb32:	e883 0003 	stmia.w	r3, {r0, r1}
 801bb36:	4611      	mov	r1, r2
 801bb38:	4618      	mov	r0, r3
 801bb3a:	f7fc fcdb 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801bb3e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801bb42:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bb46:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801bb4a:	4299      	cmp	r1, r3
 801bb4c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801bb50:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801bb54:	d10b      	bne.n	801bb6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bb56:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bb5a:	4552      	cmp	r2, sl
 801bb5c:	d107      	bne.n	801bb6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bb5e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bb62:	455a      	cmp	r2, fp
 801bb64:	d103      	bne.n	801bb6e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801bb66:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bb6a:	454a      	cmp	r2, r9
 801bb6c:	d06d      	beq.n	801bc4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bb6e:	f1bb 0f00 	cmp.w	fp, #0
 801bb72:	dd65      	ble.n	801bc40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801bb74:	f1b9 0f00 	cmp.w	r9, #0
 801bb78:	dd62      	ble.n	801bc40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801bb7a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bb7e:	fa1f f08a 	uxth.w	r0, sl
 801bb82:	4552      	cmp	r2, sl
 801bb84:	9000      	str	r0, [sp, #0]
 801bb86:	da12      	bge.n	801bbae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801bb88:	9301      	str	r3, [sp, #4]
 801bb8a:	9b00      	ldr	r3, [sp, #0]
 801bb8c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bb90:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bb94:	1a9a      	subs	r2, r3, r2
 801bb96:	f8ad 1010 	strh.w	r1, [sp, #16]
 801bb9a:	4631      	mov	r1, r6
 801bb9c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bba0:	4640      	mov	r0, r8
 801bba2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801bba6:	69ea      	ldr	r2, [r5, #28]
 801bba8:	f7ff ff7a 	bl	801baa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bbac:	9b01      	ldr	r3, [sp, #4]
 801bbae:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bbb2:	b29f      	uxth	r7, r3
 801bbb4:	429a      	cmp	r2, r3
 801bbb6:	da0d      	bge.n	801bbd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801bbb8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bbbc:	1aba      	subs	r2, r7, r2
 801bbbe:	f8ad a012 	strh.w	sl, [sp, #18]
 801bbc2:	4631      	mov	r1, r6
 801bbc4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bbc8:	4640      	mov	r0, r8
 801bbca:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bbce:	69ea      	ldr	r2, [r5, #28]
 801bbd0:	f7ff ff66 	bl	801baa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bbd4:	8822      	ldrh	r2, [r4, #0]
 801bbd6:	445f      	add	r7, fp
 801bbd8:	88a3      	ldrh	r3, [r4, #4]
 801bbda:	b2bf      	uxth	r7, r7
 801bbdc:	4413      	add	r3, r2
 801bbde:	b23a      	sxth	r2, r7
 801bbe0:	b29b      	uxth	r3, r3
 801bbe2:	b219      	sxth	r1, r3
 801bbe4:	4291      	cmp	r1, r2
 801bbe6:	dd0d      	ble.n	801bc04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801bbe8:	1bdb      	subs	r3, r3, r7
 801bbea:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bbee:	f8ad a012 	strh.w	sl, [sp, #18]
 801bbf2:	4631      	mov	r1, r6
 801bbf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bbf8:	4640      	mov	r0, r8
 801bbfa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bbfe:	69ea      	ldr	r2, [r5, #28]
 801bc00:	f7ff ff4e 	bl	801baa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bc04:	88e2      	ldrh	r2, [r4, #6]
 801bc06:	8863      	ldrh	r3, [r4, #2]
 801bc08:	4413      	add	r3, r2
 801bc0a:	9a00      	ldr	r2, [sp, #0]
 801bc0c:	444a      	add	r2, r9
 801bc0e:	b29b      	uxth	r3, r3
 801bc10:	fa1f f982 	uxth.w	r9, r2
 801bc14:	b219      	sxth	r1, r3
 801bc16:	fa0f f289 	sxth.w	r2, r9
 801bc1a:	428a      	cmp	r2, r1
 801bc1c:	da15      	bge.n	801bc4a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bc1e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bc22:	eba3 0309 	sub.w	r3, r3, r9
 801bc26:	f9b4 0000 	ldrsh.w	r0, [r4]
 801bc2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801bc2e:	4631      	mov	r1, r6
 801bc30:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bc34:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bc38:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bc3c:	69ea      	ldr	r2, [r5, #28]
 801bc3e:	e001      	b.n	801bc44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801bc40:	69ea      	ldr	r2, [r5, #28]
 801bc42:	4621      	mov	r1, r4
 801bc44:	4640      	mov	r0, r8
 801bc46:	f7ff ff2b 	bl	801baa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bc4a:	4628      	mov	r0, r5
 801bc4c:	f7ff fe96 	bl	801b97c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bc50:	6861      	ldr	r1, [r4, #4]
 801bc52:	4602      	mov	r2, r0
 801bc54:	4633      	mov	r3, r6
 801bc56:	6820      	ldr	r0, [r4, #0]
 801bc58:	c303      	stmia	r3!, {r0, r1}
 801bc5a:	4611      	mov	r1, r2
 801bc5c:	4630      	mov	r0, r6
 801bc5e:	f7fc fc49 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801bc62:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	f77f af33 	ble.w	801bad2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bc6c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	f77f af2e 	ble.w	801bad2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801bc76:	4628      	mov	r0, r5
 801bc78:	f7ff fe9c 	bl	801b9b4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bc7c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801bc80:	1a18      	subs	r0, r3, r0
 801bc82:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bc86:	4628      	mov	r0, r5
 801bc88:	f7ff fea8 	bl	801b9dc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bc8c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bc90:	4631      	mov	r1, r6
 801bc92:	1a18      	subs	r0, r3, r0
 801bc94:	f8ad 0012 	strh.w	r0, [sp, #18]
 801bc98:	4628      	mov	r0, r5
 801bc9a:	682b      	ldr	r3, [r5, #0]
 801bc9c:	689b      	ldr	r3, [r3, #8]
 801bc9e:	4798      	blx	r3
 801bca0:	e717      	b.n	801bad2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801bca2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801bca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bca4:	2300      	movs	r3, #0
 801bca6:	aa02      	add	r2, sp, #8
 801bca8:	4604      	mov	r4, r0
 801bcaa:	3004      	adds	r0, #4
 801bcac:	f842 3d04 	str.w	r3, [r2, #-4]!
 801bcb0:	460d      	mov	r5, r1
 801bcb2:	f7fc fcf7 	bl	80186a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bcb6:	9a01      	ldr	r2, [sp, #4]
 801bcb8:	b11a      	cbz	r2, 801bcc2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801bcba:	4629      	mov	r1, r5
 801bcbc:	4620      	mov	r0, r4
 801bcbe:	f7ff feef 	bl	801baa0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bcc2:	b003      	add	sp, #12
 801bcc4:	bd30      	pop	{r4, r5, pc}

0801bcc6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bcc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bcc8:	4602      	mov	r2, r0
 801bcca:	4604      	mov	r4, r0
 801bccc:	460d      	mov	r5, r1
 801bcce:	466b      	mov	r3, sp
 801bcd0:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bcd4:	6851      	ldr	r1, [r2, #4]
 801bcd6:	c303      	stmia	r3!, {r0, r1}
 801bcd8:	4629      	mov	r1, r5
 801bcda:	4668      	mov	r0, sp
 801bcdc:	f7fc fc0a 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801bce0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bce4:	4669      	mov	r1, sp
 801bce6:	b123      	cbz	r3, 801bcf2 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801bce8:	4620      	mov	r0, r4
 801bcea:	f7ff ffda 	bl	801bca2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801bcee:	b003      	add	sp, #12
 801bcf0:	bd30      	pop	{r4, r5, pc}
 801bcf2:	1d20      	adds	r0, r4, #4
 801bcf4:	f7fc fc9d 	bl	8018632 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801bcf8:	e7f9      	b.n	801bcee <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801bcfa <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801bcfa:	460b      	mov	r3, r1
 801bcfc:	680a      	ldr	r2, [r1, #0]
 801bcfe:	1d01      	adds	r1, r0, #4
 801bd00:	6992      	ldr	r2, [r2, #24]
 801bd02:	4618      	mov	r0, r3
 801bd04:	4710      	bx	r2

0801bd06 <_ZN8touchgfx12TextProviderC1Ev>:
 801bd06:	2300      	movs	r3, #0
 801bd08:	2201      	movs	r2, #1
 801bd0a:	b510      	push	{r4, lr}
 801bd0c:	4604      	mov	r4, r0
 801bd0e:	60c3      	str	r3, [r0, #12]
 801bd10:	7403      	strb	r3, [r0, #16]
 801bd12:	82c3      	strh	r3, [r0, #22]
 801bd14:	8303      	strh	r3, [r0, #24]
 801bd16:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801bd18:	8603      	strh	r3, [r0, #48]	; 0x30
 801bd1a:	86c3      	strh	r3, [r0, #54]	; 0x36
 801bd1c:	8703      	strh	r3, [r0, #56]	; 0x38
 801bd1e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bd20:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801bd24:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801bd28:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801bd2c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801bd30:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801bd34:	e9c0 3300 	strd	r3, r3, [r0]
 801bd38:	f7f9 fe6c 	bl	8015a14 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801bd3c:	4620      	mov	r0, r4
 801bd3e:	bd10      	pop	{r4, pc}

0801bd40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bd40:	b530      	push	{r4, r5, lr}
 801bd42:	2500      	movs	r5, #0
 801bd44:	2401      	movs	r4, #1
 801bd46:	6843      	ldr	r3, [r0, #4]
 801bd48:	b913      	cbnz	r3, 801bd50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801bd4a:	6803      	ldr	r3, [r0, #0]
 801bd4c:	b1f3      	cbz	r3, 801bd8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801bd4e:	6043      	str	r3, [r0, #4]
 801bd50:	7c03      	ldrb	r3, [r0, #16]
 801bd52:	b143      	cbz	r3, 801bd66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801bd54:	68c3      	ldr	r3, [r0, #12]
 801bd56:	b12b      	cbz	r3, 801bd64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bd58:	881a      	ldrh	r2, [r3, #0]
 801bd5a:	b11a      	cbz	r2, 801bd64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801bd5c:	1c9a      	adds	r2, r3, #2
 801bd5e:	60c2      	str	r2, [r0, #12]
 801bd60:	8818      	ldrh	r0, [r3, #0]
 801bd62:	bd30      	pop	{r4, r5, pc}
 801bd64:	7405      	strb	r5, [r0, #16]
 801bd66:	6843      	ldr	r3, [r0, #4]
 801bd68:	8819      	ldrh	r1, [r3, #0]
 801bd6a:	b179      	cbz	r1, 801bd8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801bd6c:	1c9a      	adds	r2, r3, #2
 801bd6e:	2902      	cmp	r1, #2
 801bd70:	6042      	str	r2, [r0, #4]
 801bd72:	d1f5      	bne.n	801bd60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801bd74:	6883      	ldr	r3, [r0, #8]
 801bd76:	1d1a      	adds	r2, r3, #4
 801bd78:	6082      	str	r2, [r0, #8]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	60c3      	str	r3, [r0, #12]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d0e1      	beq.n	801bd46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bd82:	881b      	ldrh	r3, [r3, #0]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d0de      	beq.n	801bd46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bd88:	7404      	strb	r4, [r0, #16]
 801bd8a:	e7dc      	b.n	801bd46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801bd8c:	2000      	movs	r0, #0
 801bd8e:	e7e8      	b.n	801bd62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801bd90 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801bd90:	63c3      	str	r3, [r0, #60]	; 0x3c
 801bd92:	2300      	movs	r3, #0
 801bd94:	6082      	str	r2, [r0, #8]
 801bd96:	6001      	str	r1, [r0, #0]
 801bd98:	6043      	str	r3, [r0, #4]
 801bd9a:	60c3      	str	r3, [r0, #12]
 801bd9c:	7403      	strb	r3, [r0, #16]
 801bd9e:	8603      	strh	r3, [r0, #48]	; 0x30
 801bda0:	8303      	strh	r3, [r0, #24]
 801bda2:	8703      	strh	r3, [r0, #56]	; 0x38
 801bda4:	b410      	push	{r4}
 801bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdaa:	f7f9 be33 	b.w	8015a14 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801bdae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bdae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdb0:	4605      	mov	r5, r0
 801bdb2:	4608      	mov	r0, r1
 801bdb4:	b1f1      	cbz	r1, 801bdf4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801bdb6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801bdba:	460b      	mov	r3, r1
 801bdbc:	f101 0708 	add.w	r7, r1, #8
 801bdc0:	4622      	mov	r2, r4
 801bdc2:	6818      	ldr	r0, [r3, #0]
 801bdc4:	3308      	adds	r3, #8
 801bdc6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bdca:	4626      	mov	r6, r4
 801bdcc:	42bb      	cmp	r3, r7
 801bdce:	c603      	stmia	r6!, {r0, r1}
 801bdd0:	4634      	mov	r4, r6
 801bdd2:	d1f6      	bne.n	801bdc2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bdd4:	6818      	ldr	r0, [r3, #0]
 801bdd6:	6030      	str	r0, [r6, #0]
 801bdd8:	4610      	mov	r0, r2
 801bdda:	889b      	ldrh	r3, [r3, #4]
 801bddc:	80b3      	strh	r3, [r6, #4]
 801bdde:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801bde2:	015b      	lsls	r3, r3, #5
 801bde4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bde8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801bdec:	430b      	orrs	r3, r1
 801bdee:	425b      	negs	r3, r3
 801bdf0:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801bdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bdf6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bdf6:	b538      	push	{r3, r4, r5, lr}
 801bdf8:	460c      	mov	r4, r1
 801bdfa:	6811      	ldr	r1, [r2, #0]
 801bdfc:	4610      	mov	r0, r2
 801bdfe:	68cd      	ldr	r5, [r1, #12]
 801be00:	4619      	mov	r1, r3
 801be02:	47a8      	blx	r5
 801be04:	2800      	cmp	r0, #0
 801be06:	bf08      	it	eq
 801be08:	4620      	moveq	r0, r4
 801be0a:	bd38      	pop	{r3, r4, r5, pc}

0801be0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be0e:	4604      	mov	r4, r0
 801be10:	4615      	mov	r5, r2
 801be12:	4608      	mov	r0, r1
 801be14:	b93a      	cbnz	r2, 801be26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801be16:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801be1a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801be1e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801be22:	4628      	mov	r0, r5
 801be24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be26:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801be2a:	8893      	ldrh	r3, [r2, #4]
 801be2c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801be30:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801be34:	79ee      	ldrb	r6, [r5, #7]
 801be36:	4316      	orrs	r6, r2
 801be38:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801be3c:	189a      	adds	r2, r3, r2
 801be3e:	b2b7      	uxth	r7, r6
 801be40:	b291      	uxth	r1, r2
 801be42:	291d      	cmp	r1, #29
 801be44:	f200 8084 	bhi.w	801bf50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801be48:	2201      	movs	r2, #1
 801be4a:	10f6      	asrs	r6, r6, #3
 801be4c:	408a      	lsls	r2, r1
 801be4e:	4978      	ldr	r1, [pc, #480]	; (801c030 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801be50:	420a      	tst	r2, r1
 801be52:	d12e      	bne.n	801beb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801be54:	f412 7f60 	tst.w	r2, #896	; 0x380
 801be58:	d07a      	beq.n	801bf50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801be5a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801be5e:	462b      	mov	r3, r5
 801be60:	f105 0e08 	add.w	lr, r5, #8
 801be64:	4615      	mov	r5, r2
 801be66:	6818      	ldr	r0, [r3, #0]
 801be68:	3308      	adds	r3, #8
 801be6a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801be6e:	4694      	mov	ip, r2
 801be70:	4573      	cmp	r3, lr
 801be72:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801be76:	4662      	mov	r2, ip
 801be78:	d1f5      	bne.n	801be66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801be7a:	6818      	ldr	r0, [r3, #0]
 801be7c:	f8cc 0000 	str.w	r0, [ip]
 801be80:	889b      	ldrh	r3, [r3, #4]
 801be82:	f8ac 3004 	strh.w	r3, [ip, #4]
 801be86:	b2b3      	uxth	r3, r6
 801be88:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801be8c:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801be90:	1aca      	subs	r2, r1, r3
 801be92:	1bcf      	subs	r7, r1, r7
 801be94:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801be98:	b292      	uxth	r2, r2
 801be9a:	1afb      	subs	r3, r7, r3
 801be9c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801bea0:	10d2      	asrs	r2, r2, #3
 801bea2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801bea6:	4302      	orrs	r2, r0
 801bea8:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801beac:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801beb0:	e7b7      	b.n	801be22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801beb2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801beb4:	b92b      	cbnz	r3, 801bec2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801beb6:	4b5f      	ldr	r3, [pc, #380]	; (801c034 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801beb8:	21c0      	movs	r1, #192	; 0xc0
 801beba:	4a5f      	ldr	r2, [pc, #380]	; (801c038 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801bebc:	485f      	ldr	r0, [pc, #380]	; (801c03c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801bebe:	f009 fa05 	bl	80252cc <__assert_func>
 801bec2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801bec4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bec8:	8b59      	ldrh	r1, [r3, #26]
 801beca:	f640 6333 	movw	r3, #3635	; 0xe33
 801bece:	4299      	cmp	r1, r3
 801bed0:	d110      	bne.n	801bef4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801bed2:	6803      	ldr	r3, [r0, #0]
 801bed4:	68db      	ldr	r3, [r3, #12]
 801bed6:	4798      	blx	r3
 801bed8:	7b41      	ldrb	r1, [r0, #13]
 801beda:	00cb      	lsls	r3, r1, #3
 801bedc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bee0:	7a03      	ldrb	r3, [r0, #8]
 801bee2:	0648      	lsls	r0, r1, #25
 801bee4:	ea43 0302 	orr.w	r3, r3, r2
 801bee8:	bf44      	itt	mi
 801beea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801beee:	b21b      	sxthmi	r3, r3
 801bef0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bef4:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801bef8:	462a      	mov	r2, r5
 801befa:	f105 0c08 	add.w	ip, r5, #8
 801befe:	443b      	add	r3, r7
 801bf00:	4433      	add	r3, r6
 801bf02:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801bf06:	b29b      	uxth	r3, r3
 801bf08:	4635      	mov	r5, r6
 801bf0a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bf0e:	6810      	ldr	r0, [r2, #0]
 801bf10:	3208      	adds	r2, #8
 801bf12:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801bf16:	4637      	mov	r7, r6
 801bf18:	4562      	cmp	r2, ip
 801bf1a:	c703      	stmia	r7!, {r0, r1}
 801bf1c:	463e      	mov	r6, r7
 801bf1e:	d1f6      	bne.n	801bf0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801bf20:	6810      	ldr	r0, [r2, #0]
 801bf22:	6038      	str	r0, [r7, #0]
 801bf24:	8892      	ldrh	r2, [r2, #4]
 801bf26:	80ba      	strh	r2, [r7, #4]
 801bf28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bf2c:	10db      	asrs	r3, r3, #3
 801bf2e:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bf32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bf36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bf3a:	4313      	orrs	r3, r2
 801bf3c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801bf40:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bf44:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801bf48:	1a9b      	subs	r3, r3, r2
 801bf4a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801bf4e:	e768      	b.n	801be22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bf50:	f023 0204 	bic.w	r2, r3, #4
 801bf54:	f640 611b 	movw	r1, #3611	; 0xe1b
 801bf58:	428a      	cmp	r2, r1
 801bf5a:	d003      	beq.n	801bf64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801bf5c:	f640 621d 	movw	r2, #3613	; 0xe1d
 801bf60:	4293      	cmp	r3, r2
 801bf62:	d120      	bne.n	801bfa6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801bf64:	3b01      	subs	r3, #1
 801bf66:	4602      	mov	r2, r0
 801bf68:	4629      	mov	r1, r5
 801bf6a:	4620      	mov	r0, r4
 801bf6c:	b29b      	uxth	r3, r3
 801bf6e:	f7ff ff42 	bl	801bdf6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bf72:	7b41      	ldrb	r1, [r0, #13]
 801bf74:	00cb      	lsls	r3, r1, #3
 801bf76:	0649      	lsls	r1, r1, #25
 801bf78:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bf7c:	7a03      	ldrb	r3, [r0, #8]
 801bf7e:	ea43 0302 	orr.w	r3, r3, r2
 801bf82:	bf44      	itt	mi
 801bf84:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bf88:	b21b      	sxthmi	r3, r3
 801bf8a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bf8e:	7b6b      	ldrb	r3, [r5, #13]
 801bf90:	7aaa      	ldrb	r2, [r5, #10]
 801bf92:	005b      	lsls	r3, r3, #1
 801bf94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bf98:	4313      	orrs	r3, r2
 801bf9a:	115a      	asrs	r2, r3, #5
 801bf9c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bfa0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bfa4:	e035      	b.n	801c012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801bfa6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801bfaa:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801bfae:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801bfb2:	7a2a      	ldrb	r2, [r5, #8]
 801bfb4:	ea42 0201 	orr.w	r2, r2, r1
 801bfb8:	f640 6109 	movw	r1, #3593	; 0xe09
 801bfbc:	bf1c      	itt	ne
 801bfbe:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801bfc2:	b212      	sxthne	r2, r2
 801bfc4:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801bfc8:	f023 0210 	bic.w	r2, r3, #16
 801bfcc:	428a      	cmp	r2, r1
 801bfce:	d003      	beq.n	801bfd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801bfd0:	f640 6213 	movw	r2, #3603	; 0xe13
 801bfd4:	4293      	cmp	r3, r2
 801bfd6:	d129      	bne.n	801c02c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801bfd8:	7b6e      	ldrb	r6, [r5, #13]
 801bfda:	4629      	mov	r1, r5
 801bfdc:	0076      	lsls	r6, r6, #1
 801bfde:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bfe2:	7aae      	ldrb	r6, [r5, #10]
 801bfe4:	4316      	orrs	r6, r2
 801bfe6:	f640 6213 	movw	r2, #3603	; 0xe13
 801bfea:	4293      	cmp	r3, r2
 801bfec:	4602      	mov	r2, r0
 801bfee:	4620      	mov	r0, r4
 801bff0:	bf16      	itet	ne
 801bff2:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bff6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bffa:	b29b      	uxthne	r3, r3
 801bffc:	f7ff fefb 	bl	801bdf6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c000:	7b43      	ldrb	r3, [r0, #13]
 801c002:	7a82      	ldrb	r2, [r0, #10]
 801c004:	005b      	lsls	r3, r3, #1
 801c006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c00a:	4313      	orrs	r3, r2
 801c00c:	1af6      	subs	r6, r6, r3
 801c00e:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801c012:	7b69      	ldrb	r1, [r5, #13]
 801c014:	00cb      	lsls	r3, r1, #3
 801c016:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c01a:	7a2b      	ldrb	r3, [r5, #8]
 801c01c:	4313      	orrs	r3, r2
 801c01e:	064a      	lsls	r2, r1, #25
 801c020:	bf44      	itt	mi
 801c022:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c026:	b21b      	sxthmi	r3, r3
 801c028:	1bdb      	subs	r3, r3, r7
 801c02a:	e73f      	b.n	801beac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c02c:	2300      	movs	r3, #0
 801c02e:	e7b7      	b.n	801bfa0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801c030:	3fc00079 	.word	0x3fc00079
 801c034:	08028328 	.word	0x08028328
 801c038:	0802859a 	.word	0x0802859a
 801c03c:	08028331 	.word	0x08028331

0801c040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c044:	4604      	mov	r4, r0
 801c046:	b942      	cbnz	r2, 801c05a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c04c:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c050:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c054:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c058:	e046      	b.n	801c0e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c05a:	7b51      	ldrb	r1, [r2, #13]
 801c05c:	8893      	ldrh	r3, [r2, #4]
 801c05e:	010f      	lsls	r7, r1, #4
 801c060:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c064:	79d7      	ldrb	r7, [r2, #7]
 801c066:	4307      	orrs	r7, r0
 801c068:	2f04      	cmp	r7, #4
 801c06a:	b2bd      	uxth	r5, r7
 801c06c:	bfcc      	ite	gt
 801c06e:	08bf      	lsrgt	r7, r7, #2
 801c070:	2701      	movle	r7, #1
 801c072:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c076:	f200 80ab 	bhi.w	801c1d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c07a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c07e:	4283      	cmp	r3, r0
 801c080:	d216      	bcs.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c082:	f240 605b 	movw	r0, #1627	; 0x65b
 801c086:	4283      	cmp	r3, r0
 801c088:	d859      	bhi.n	801c13e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c08a:	f240 6057 	movw	r0, #1623	; 0x657
 801c08e:	4283      	cmp	r3, r0
 801c090:	d20e      	bcs.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c092:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c096:	d24a      	bcs.n	801c12e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c098:	f240 604e 	movw	r0, #1614	; 0x64e
 801c09c:	4283      	cmp	r3, r0
 801c09e:	d207      	bcs.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c0a0:	f240 601a 	movw	r0, #1562	; 0x61a
 801c0a4:	4283      	cmp	r3, r0
 801c0a6:	d02a      	beq.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c0a8:	d821      	bhi.n	801c0ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c0aa:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c0ae:	d35b      	bcc.n	801c168 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c0b0:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801c0b4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c0b8:	f040 80d0 	bne.w	801c25c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c0bc:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801c0c0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c0c4:	f040 80ca 	bne.w	801c25c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c0c8:	00cb      	lsls	r3, r1, #3
 801c0ca:	0649      	lsls	r1, r1, #25
 801c0cc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c0d0:	7a13      	ldrb	r3, [r2, #8]
 801c0d2:	ea43 0300 	orr.w	r3, r3, r0
 801c0d6:	bf44      	itt	mi
 801c0d8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c0dc:	b21b      	sxthmi	r3, r3
 801c0de:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c0e2:	1b5d      	subs	r5, r3, r5
 801c0e4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c0e8:	4610      	mov	r0, r2
 801c0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0ee:	f240 604b 	movw	r0, #1611	; 0x64b
 801c0f2:	4283      	cmp	r3, r0
 801c0f4:	d338      	bcc.n	801c168 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c0f6:	f240 604c 	movw	r0, #1612	; 0x64c
 801c0fa:	4283      	cmp	r3, r0
 801c0fc:	d9d8      	bls.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c0fe:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801c102:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801c106:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c10a:	f040 80f2 	bne.w	801c2f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c10e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c112:	f040 80ee 	bne.w	801c2f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c116:	00cb      	lsls	r3, r1, #3
 801c118:	064e      	lsls	r6, r1, #25
 801c11a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c11e:	7a13      	ldrb	r3, [r2, #8]
 801c120:	ea43 0300 	orr.w	r3, r3, r0
 801c124:	bf44      	itt	mi
 801c126:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c12a:	b21b      	sxthmi	r3, r3
 801c12c:	e7d9      	b.n	801c0e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c12e:	f240 6054 	movw	r0, #1620	; 0x654
 801c132:	4283      	cmp	r3, r0
 801c134:	d8e3      	bhi.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c136:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c13a:	d9e0      	bls.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c13c:	e7b8      	b.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c13e:	f240 6074 	movw	r0, #1652	; 0x674
 801c142:	4283      	cmp	r3, r0
 801c144:	d0b4      	beq.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c146:	d82d      	bhi.n	801c1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c148:	f240 605e 	movw	r0, #1630	; 0x65e
 801c14c:	4283      	cmp	r3, r0
 801c14e:	d804      	bhi.n	801c15a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c150:	f240 605d 	movw	r0, #1629	; 0x65d
 801c154:	4283      	cmp	r3, r0
 801c156:	d3d2      	bcc.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c158:	e7aa      	b.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c15a:	f240 605f 	movw	r0, #1631	; 0x65f
 801c15e:	4283      	cmp	r3, r0
 801c160:	d0cd      	beq.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c162:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c166:	d0a3      	beq.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c168:	00cb      	lsls	r3, r1, #3
 801c16a:	0649      	lsls	r1, r1, #25
 801c16c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c170:	7a13      	ldrb	r3, [r2, #8]
 801c172:	ea43 0300 	orr.w	r3, r3, r0
 801c176:	bf44      	itt	mi
 801c178:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c17c:	b21b      	sxthmi	r3, r3
 801c17e:	1b5d      	subs	r5, r3, r5
 801c180:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c184:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c188:	7b53      	ldrb	r3, [r2, #13]
 801c18a:	015b      	lsls	r3, r3, #5
 801c18c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c190:	7993      	ldrb	r3, [r2, #6]
 801c192:	430b      	orrs	r3, r1
 801c194:	2105      	movs	r1, #5
 801c196:	005b      	lsls	r3, r3, #1
 801c198:	fb93 f3f1 	sdiv	r3, r3, r1
 801c19c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c1a0:	440b      	add	r3, r1
 801c1a2:	e757      	b.n	801c054 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c1a4:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c1a8:	4283      	cmp	r3, r0
 801c1aa:	d809      	bhi.n	801c1c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801c1ac:	f240 60df 	movw	r0, #1759	; 0x6df
 801c1b0:	4283      	cmp	r3, r0
 801c1b2:	f4bf af7d 	bcs.w	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c1b6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c1ba:	2b05      	cmp	r3, #5
 801c1bc:	d8d4      	bhi.n	801c168 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c1be:	e777      	b.n	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c1c0:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801c1c4:	4283      	cmp	r3, r0
 801c1c6:	d09a      	beq.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c1c8:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801c1cc:	4283      	cmp	r3, r0
 801c1ce:	e7ca      	b.n	801c166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801c1d0:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801c1d4:	d22b      	bcs.n	801c22e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801c1d6:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801c1da:	4283      	cmp	r3, r0
 801c1dc:	d28f      	bcs.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c1de:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c1e2:	4283      	cmp	r3, r0
 801c1e4:	d816      	bhi.n	801c214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801c1e6:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801c1ea:	4283      	cmp	r3, r0
 801c1ec:	f4bf af60 	bcs.w	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c1f0:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801c1f4:	4283      	cmp	r3, r0
 801c1f6:	d80a      	bhi.n	801c20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801c1f8:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801c1fc:	4283      	cmp	r3, r0
 801c1fe:	f4bf af57 	bcs.w	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c202:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801c206:	4283      	cmp	r3, r0
 801c208:	f43f af79 	beq.w	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c20c:	e7ac      	b.n	801c168 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c20e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801c212:	e7f8      	b.n	801c206 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801c214:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801c218:	4283      	cmp	r3, r0
 801c21a:	d802      	bhi.n	801c222 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801c21c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c220:	e798      	b.n	801c154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801c222:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801c226:	4283      	cmp	r3, r0
 801c228:	f47f af42 	bne.w	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c22c:	e767      	b.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c22e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801c232:	4283      	cmp	r3, r0
 801c234:	f43f af63 	beq.w	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c238:	d802      	bhi.n	801c240 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801c23a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801c23e:	e7f2      	b.n	801c226 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801c240:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801c244:	4283      	cmp	r3, r0
 801c246:	d805      	bhi.n	801c254 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801c248:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801c24c:	4283      	cmp	r3, r0
 801c24e:	f4ff af2f 	bcc.w	801c0b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c252:	e754      	b.n	801c0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c254:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801c258:	4283      	cmp	r3, r0
 801c25a:	e7af      	b.n	801c1bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801c25c:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801c260:	4617      	mov	r7, r2
 801c262:	f102 0808 	add.w	r8, r2, #8
 801c266:	4666      	mov	r6, ip
 801c268:	6838      	ldr	r0, [r7, #0]
 801c26a:	3708      	adds	r7, #8
 801c26c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c270:	46e6      	mov	lr, ip
 801c272:	4547      	cmp	r7, r8
 801c274:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c278:	46f4      	mov	ip, lr
 801c27a:	d1f5      	bne.n	801c268 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801c27c:	6838      	ldr	r0, [r7, #0]
 801c27e:	f8ce 0000 	str.w	r0, [lr]
 801c282:	88b9      	ldrh	r1, [r7, #4]
 801c284:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c288:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c28c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c290:	d009      	beq.n	801c2a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c292:	7b51      	ldrb	r1, [r2, #13]
 801c294:	7992      	ldrb	r2, [r2, #6]
 801c296:	0149      	lsls	r1, r1, #5
 801c298:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c29c:	4311      	orrs	r1, r2
 801c29e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c2a2:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c2a6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c2aa:	d00d      	beq.n	801c2c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801c2ac:	442b      	add	r3, r5
 801c2ae:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c2b2:	b29b      	uxth	r3, r3
 801c2b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c2b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c2bc:	10db      	asrs	r3, r3, #3
 801c2be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c2c2:	4313      	orrs	r3, r2
 801c2c4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c2c8:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c2cc:	00cb      	lsls	r3, r1, #3
 801c2ce:	064f      	lsls	r7, r1, #25
 801c2d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c2d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c2d8:	ea43 0302 	orr.w	r3, r3, r2
 801c2dc:	bf44      	itt	mi
 801c2de:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c2e2:	b21b      	sxthmi	r3, r3
 801c2e4:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801c2e8:	1b5d      	subs	r5, r3, r5
 801c2ea:	4632      	mov	r2, r6
 801c2ec:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801c2f0:	e6fa      	b.n	801c0e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c2f2:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801c2f6:	4694      	mov	ip, r2
 801c2f8:	f102 0908 	add.w	r9, r2, #8
 801c2fc:	4676      	mov	r6, lr
 801c2fe:	f8dc 0000 	ldr.w	r0, [ip]
 801c302:	f10c 0c08 	add.w	ip, ip, #8
 801c306:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801c30a:	46f0      	mov	r8, lr
 801c30c:	45cc      	cmp	ip, r9
 801c30e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c312:	46c6      	mov	lr, r8
 801c314:	d1f3      	bne.n	801c2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801c316:	f8dc 0000 	ldr.w	r0, [ip]
 801c31a:	f8c8 0000 	str.w	r0, [r8]
 801c31e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801c322:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c326:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801c32a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c32e:	d009      	beq.n	801c344 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801c330:	7b51      	ldrb	r1, [r2, #13]
 801c332:	7992      	ldrb	r2, [r2, #6]
 801c334:	0149      	lsls	r1, r1, #5
 801c336:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c33a:	4311      	orrs	r1, r2
 801c33c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c340:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801c344:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c348:	d00d      	beq.n	801c366 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801c34a:	1bdb      	subs	r3, r3, r7
 801c34c:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801c350:	b29b      	uxth	r3, r3
 801c352:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c356:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801c35a:	10db      	asrs	r3, r3, #3
 801c35c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c360:	4313      	orrs	r3, r2
 801c362:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801c366:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c36a:	00cb      	lsls	r3, r1, #3
 801c36c:	0648      	lsls	r0, r1, #25
 801c36e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c372:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c376:	ea43 0302 	orr.w	r3, r3, r2
 801c37a:	bf44      	itt	mi
 801c37c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c380:	b21b      	sxthmi	r3, r3
 801c382:	e7b1      	b.n	801c2e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801c384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c388:	461e      	mov	r6, r3
 801c38a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c38c:	4604      	mov	r4, r0
 801c38e:	4617      	mov	r7, r2
 801c390:	b92b      	cbnz	r3, 801c39e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801c392:	4b25      	ldr	r3, [pc, #148]	; (801c428 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801c394:	21c0      	movs	r1, #192	; 0xc0
 801c396:	4a25      	ldr	r2, [pc, #148]	; (801c42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801c398:	4825      	ldr	r0, [pc, #148]	; (801c430 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801c39a:	f008 ff97 	bl	80252cc <__assert_func>
 801c39e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c3a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c3a4:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c3a8:	f7f9 fa8e 	bl	80158c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c3ac:	4605      	mov	r5, r0
 801c3ae:	b918      	cbnz	r0, 801c3b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801c3b0:	6030      	str	r0, [r6, #0]
 801c3b2:	4628      	mov	r0, r5
 801c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3b8:	683b      	ldr	r3, [r7, #0]
 801c3ba:	4601      	mov	r1, r0
 801c3bc:	4638      	mov	r0, r7
 801c3be:	68db      	ldr	r3, [r3, #12]
 801c3c0:	4798      	blx	r3
 801c3c2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c3c6:	4602      	mov	r2, r0
 801c3c8:	6030      	str	r0, [r6, #0]
 801c3ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c3ce:	d213      	bcs.n	801c3f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801c3d0:	4643      	mov	r3, r8
 801c3d2:	4639      	mov	r1, r7
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	f7ff fe33 	bl	801c040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c3da:	6030      	str	r0, [r6, #0]
 801c3dc:	6833      	ldr	r3, [r6, #0]
 801c3de:	b143      	cbz	r3, 801c3f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c3e0:	7b5a      	ldrb	r2, [r3, #13]
 801c3e2:	7a9b      	ldrb	r3, [r3, #10]
 801c3e4:	0052      	lsls	r2, r2, #1
 801c3e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c3ea:	4313      	orrs	r3, r2
 801c3ec:	bf0c      	ite	eq
 801c3ee:	2301      	moveq	r3, #1
 801c3f0:	2300      	movne	r3, #0
 801c3f2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c3f6:	e7dc      	b.n	801c3b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801c3f8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c3fc:	b29b      	uxth	r3, r3
 801c3fe:	2b7f      	cmp	r3, #127	; 0x7f
 801c400:	d804      	bhi.n	801c40c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801c402:	4639      	mov	r1, r7
 801c404:	4620      	mov	r0, r4
 801c406:	f7ff fd01 	bl	801be0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c40a:	e7e6      	b.n	801c3da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c40c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c410:	2b00      	cmp	r3, #0
 801c412:	d0e3      	beq.n	801c3dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c414:	f640 1302 	movw	r3, #2306	; 0x902
 801c418:	429d      	cmp	r5, r3
 801c41a:	d1df      	bne.n	801c3dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c41c:	4601      	mov	r1, r0
 801c41e:	4620      	mov	r0, r4
 801c420:	f7ff fcc5 	bl	801bdae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c424:	e7d9      	b.n	801c3da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c426:	bf00      	nop
 801c428:	08028328 	.word	0x08028328
 801c42c:	0802859a 	.word	0x0802859a
 801c430:	08028331 	.word	0x08028331

0801c434 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c434:	b510      	push	{r4, lr}
 801c436:	4604      	mov	r4, r0
 801c438:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801c43a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c43c:	b9d9      	cbnz	r1, 801c476 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801c43e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c440:	2b0a      	cmp	r3, #10
 801c442:	d036      	beq.n	801c4b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c444:	4620      	mov	r0, r4
 801c446:	f7ff fc7b 	bl	801bd40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c44a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c44c:	2b09      	cmp	r3, #9
 801c44e:	d906      	bls.n	801c45e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801c450:	4b18      	ldr	r3, [pc, #96]	; (801c4b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801c452:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c456:	4a18      	ldr	r2, [pc, #96]	; (801c4b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801c458:	4818      	ldr	r0, [pc, #96]	; (801c4bc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801c45a:	f008 ff37 	bl	80252cc <__assert_func>
 801c45e:	1c5a      	adds	r2, r3, #1
 801c460:	8622      	strh	r2, [r4, #48]	; 0x30
 801c462:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c464:	4413      	add	r3, r2
 801c466:	b29b      	uxth	r3, r3
 801c468:	2b09      	cmp	r3, #9
 801c46a:	bf88      	it	hi
 801c46c:	3b0a      	subhi	r3, #10
 801c46e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c472:	8358      	strh	r0, [r3, #26]
 801c474:	e7e3      	b.n	801c43e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801c476:	2b0a      	cmp	r3, #10
 801c478:	d01b      	beq.n	801c4b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c47a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c47c:	3901      	subs	r1, #1
 801c47e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c482:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801c484:	8721      	strh	r1, [r4, #56]	; 0x38
 801c486:	1c51      	adds	r1, r2, #1
 801c488:	b289      	uxth	r1, r1
 801c48a:	2901      	cmp	r1, #1
 801c48c:	bf8a      	itet	hi
 801c48e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c492:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801c494:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801c496:	2b09      	cmp	r3, #9
 801c498:	d8da      	bhi.n	801c450 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801c49a:	1c5a      	adds	r2, r3, #1
 801c49c:	8622      	strh	r2, [r4, #48]	; 0x30
 801c49e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c4a0:	4413      	add	r3, r2
 801c4a2:	b29b      	uxth	r3, r3
 801c4a4:	2b09      	cmp	r3, #9
 801c4a6:	bf88      	it	hi
 801c4a8:	3b0a      	subhi	r3, #10
 801c4aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c4ae:	8358      	strh	r0, [r3, #26]
 801c4b0:	e7c2      	b.n	801c438 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c4b2:	bd10      	pop	{r4, pc}
 801c4b4:	0802835d 	.word	0x0802835d
 801c4b8:	080286f0 	.word	0x080286f0
 801c4bc:	08028331 	.word	0x08028331

0801c4c0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c4c0:	b538      	push	{r3, r4, r5, lr}
 801c4c2:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c4c4:	4604      	mov	r4, r0
 801c4c6:	b92a      	cbnz	r2, 801c4d4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c4c8:	4b13      	ldr	r3, [pc, #76]	; (801c518 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c4ca:	21d5      	movs	r1, #213	; 0xd5
 801c4cc:	4a13      	ldr	r2, [pc, #76]	; (801c51c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c4ce:	4814      	ldr	r0, [pc, #80]	; (801c520 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801c4d0:	f008 fefc 	bl	80252cc <__assert_func>
 801c4d4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c4d6:	3a01      	subs	r2, #1
 801c4d8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c4dc:	8b4d      	ldrh	r5, [r1, #26]
 801c4de:	8602      	strh	r2, [r0, #48]	; 0x30
 801c4e0:	1c5a      	adds	r2, r3, #1
 801c4e2:	b292      	uxth	r2, r2
 801c4e4:	2a09      	cmp	r2, #9
 801c4e6:	bf8a      	itet	hi
 801c4e8:	3b09      	subhi	r3, #9
 801c4ea:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801c4ec:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801c4ee:	f7ff ffa1 	bl	801c434 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c4f2:	8b23      	ldrh	r3, [r4, #24]
 801c4f4:	2b01      	cmp	r3, #1
 801c4f6:	bf9c      	itt	ls
 801c4f8:	3301      	addls	r3, #1
 801c4fa:	8323      	strhls	r3, [r4, #24]
 801c4fc:	8ae3      	ldrh	r3, [r4, #22]
 801c4fe:	b90b      	cbnz	r3, 801c504 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801c500:	2302      	movs	r3, #2
 801c502:	82e3      	strh	r3, [r4, #22]
 801c504:	8ae3      	ldrh	r3, [r4, #22]
 801c506:	4628      	mov	r0, r5
 801c508:	3b01      	subs	r3, #1
 801c50a:	b29b      	uxth	r3, r3
 801c50c:	82e3      	strh	r3, [r4, #22]
 801c50e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c512:	8265      	strh	r5, [r4, #18]
 801c514:	bd38      	pop	{r3, r4, r5, pc}
 801c516:	bf00      	nop
 801c518:	08028328 	.word	0x08028328
 801c51c:	08028645 	.word	0x08028645
 801c520:	08028331 	.word	0x08028331

0801c524 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c524:	428a      	cmp	r2, r1
 801c526:	b538      	push	{r3, r4, r5, lr}
 801c528:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801c52a:	d90c      	bls.n	801c546 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801c52c:	b92c      	cbnz	r4, 801c53a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801c52e:	4b1c      	ldr	r3, [pc, #112]	; (801c5a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801c530:	21e1      	movs	r1, #225	; 0xe1
 801c532:	4a1c      	ldr	r2, [pc, #112]	; (801c5a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801c534:	481c      	ldr	r0, [pc, #112]	; (801c5a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801c536:	f008 fec9 	bl	80252cc <__assert_func>
 801c53a:	3c01      	subs	r4, #1
 801c53c:	4b1b      	ldr	r3, [pc, #108]	; (801c5ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801c53e:	4a1c      	ldr	r2, [pc, #112]	; (801c5b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801c540:	21c5      	movs	r1, #197	; 0xc5
 801c542:	8604      	strh	r4, [r0, #48]	; 0x30
 801c544:	e7f6      	b.n	801c534 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c546:	428c      	cmp	r4, r1
 801c548:	d203      	bcs.n	801c552 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801c54a:	4b1a      	ldr	r3, [pc, #104]	; (801c5b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801c54c:	21cb      	movs	r1, #203	; 0xcb
 801c54e:	4a1a      	ldr	r2, [pc, #104]	; (801c5b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801c550:	e7f0      	b.n	801c534 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c552:	1a64      	subs	r4, r4, r1
 801c554:	250a      	movs	r5, #10
 801c556:	8604      	strh	r4, [r0, #48]	; 0x30
 801c558:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801c55a:	4421      	add	r1, r4
 801c55c:	b289      	uxth	r1, r1
 801c55e:	2909      	cmp	r1, #9
 801c560:	bf88      	it	hi
 801c562:	390a      	subhi	r1, #10
 801c564:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c566:	b1ba      	cbz	r2, 801c598 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801c568:	3a01      	subs	r2, #1
 801c56a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801c56c:	b292      	uxth	r2, r2
 801c56e:	2909      	cmp	r1, #9
 801c570:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c574:	d903      	bls.n	801c57e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801c576:	4b11      	ldr	r3, [pc, #68]	; (801c5bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801c578:	21e6      	movs	r1, #230	; 0xe6
 801c57a:	4a11      	ldr	r2, [pc, #68]	; (801c5c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801c57c:	e7da      	b.n	801c534 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c57e:	3101      	adds	r1, #1
 801c580:	8601      	strh	r1, [r0, #48]	; 0x30
 801c582:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c584:	b901      	cbnz	r1, 801c588 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801c586:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c588:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c58a:	3901      	subs	r1, #1
 801c58c:	b289      	uxth	r1, r1
 801c58e:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c590:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c594:	834c      	strh	r4, [r1, #26]
 801c596:	e7e6      	b.n	801c566 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801c598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c59c:	f7ff bf4a 	b.w	801c434 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c5a0:	08028328 	.word	0x08028328
 801c5a4:	0802841e 	.word	0x0802841e
 801c5a8:	08028331 	.word	0x08028331
 801c5ac:	08028369 	.word	0x08028369
 801c5b0:	080284c8 	.word	0x080284c8
 801c5b4:	08028377 	.word	0x08028377
 801c5b8:	0802879f 	.word	0x0802879f
 801c5bc:	08028383 	.word	0x08028383
 801c5c0:	08028396 	.word	0x08028396

0801c5c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c5c4:	3a01      	subs	r2, #1
 801c5c6:	b570      	push	{r4, r5, r6, lr}
 801c5c8:	b292      	uxth	r2, r2
 801c5ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c5ce:	42b2      	cmp	r2, r6
 801c5d0:	d019      	beq.n	801c606 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801c5d2:	8b04      	ldrh	r4, [r0, #24]
 801c5d4:	f831 5b02 	ldrh.w	r5, [r1], #2
 801c5d8:	4294      	cmp	r4, r2
 801c5da:	d805      	bhi.n	801c5e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801c5dc:	4b19      	ldr	r3, [pc, #100]	; (801c644 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c5de:	4a1a      	ldr	r2, [pc, #104]	; (801c648 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801c5e0:	21c5      	movs	r1, #197	; 0xc5
 801c5e2:	481a      	ldr	r0, [pc, #104]	; (801c64c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801c5e4:	f008 fe72 	bl	80252cc <__assert_func>
 801c5e8:	8ac4      	ldrh	r4, [r0, #22]
 801c5ea:	4414      	add	r4, r2
 801c5ec:	3a01      	subs	r2, #1
 801c5ee:	b2a4      	uxth	r4, r4
 801c5f0:	b292      	uxth	r2, r2
 801c5f2:	2c01      	cmp	r4, #1
 801c5f4:	bf88      	it	hi
 801c5f6:	3c02      	subhi	r4, #2
 801c5f8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c5fc:	8a64      	ldrh	r4, [r4, #18]
 801c5fe:	42ac      	cmp	r4, r5
 801c600:	d0e5      	beq.n	801c5ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801c602:	2000      	movs	r0, #0
 801c604:	bd70      	pop	{r4, r5, r6, pc}
 801c606:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c60a:	2400      	movs	r4, #0
 801c60c:	4413      	add	r3, r2
 801c60e:	b2a2      	uxth	r2, r4
 801c610:	429a      	cmp	r2, r3
 801c612:	da14      	bge.n	801c63e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801c614:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801c616:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c61a:	4296      	cmp	r6, r2
 801c61c:	d802      	bhi.n	801c624 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801c61e:	4b09      	ldr	r3, [pc, #36]	; (801c644 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c620:	4a0b      	ldr	r2, [pc, #44]	; (801c650 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801c622:	e7dd      	b.n	801c5e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801c624:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801c626:	3401      	adds	r4, #1
 801c628:	4432      	add	r2, r6
 801c62a:	b292      	uxth	r2, r2
 801c62c:	2a09      	cmp	r2, #9
 801c62e:	bf88      	it	hi
 801c630:	3a0a      	subhi	r2, #10
 801c632:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c636:	8b52      	ldrh	r2, [r2, #26]
 801c638:	42aa      	cmp	r2, r5
 801c63a:	d0e8      	beq.n	801c60e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801c63c:	e7e1      	b.n	801c602 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801c63e:	2001      	movs	r0, #1
 801c640:	e7e0      	b.n	801c604 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801c642:	bf00      	nop
 801c644:	08028369 	.word	0x08028369
 801c648:	08028823 	.word	0x08028823
 801c64c:	08028331 	.word	0x08028331
 801c650:	080284c8 	.word	0x080284c8

0801c654 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c658:	4605      	mov	r5, r0
 801c65a:	4616      	mov	r6, r2
 801c65c:	1c8c      	adds	r4, r1, #2
 801c65e:	8809      	ldrh	r1, [r1, #0]
 801c660:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c664:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c668:	42b3      	cmp	r3, r6
 801c66a:	d124      	bne.n	801c6b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c66c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c670:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c674:	f001 070f 	and.w	r7, r1, #15
 801c678:	4652      	mov	r2, sl
 801c67a:	f8cd 8000 	str.w	r8, [sp]
 801c67e:	464b      	mov	r3, r9
 801c680:	4621      	mov	r1, r4
 801c682:	4628      	mov	r0, r5
 801c684:	f7ff ff9e 	bl	801c5c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c688:	4683      	mov	fp, r0
 801c68a:	b168      	cbz	r0, 801c6a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c68c:	eb0a 0109 	add.w	r1, sl, r9
 801c690:	463a      	mov	r2, r7
 801c692:	4628      	mov	r0, r5
 801c694:	4441      	add	r1, r8
 801c696:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c69a:	4649      	mov	r1, r9
 801c69c:	f7ff ff42 	bl	801c524 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c6a0:	4658      	mov	r0, fp
 801c6a2:	b003      	add	sp, #12
 801c6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6a8:	eb07 010a 	add.w	r1, r7, sl
 801c6ac:	4449      	add	r1, r9
 801c6ae:	4441      	add	r1, r8
 801c6b0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c6b4:	e7d2      	b.n	801c65c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c6b6:	f04f 0b00 	mov.w	fp, #0
 801c6ba:	e7f1      	b.n	801c6a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c6bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c6bc:	b570      	push	{r4, r5, r6, lr}
 801c6be:	8810      	ldrh	r0, [r2, #0]
 801c6c0:	4298      	cmp	r0, r3
 801c6c2:	d817      	bhi.n	801c6f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c6c4:	1e48      	subs	r0, r1, #1
 801c6c6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c6ca:	4298      	cmp	r0, r3
 801c6cc:	d312      	bcc.n	801c6f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c6ce:	2400      	movs	r4, #0
 801c6d0:	428c      	cmp	r4, r1
 801c6d2:	d20f      	bcs.n	801c6f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c6d4:	1860      	adds	r0, r4, r1
 801c6d6:	1040      	asrs	r0, r0, #1
 801c6d8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c6dc:	0085      	lsls	r5, r0, #2
 801c6de:	42b3      	cmp	r3, r6
 801c6e0:	d902      	bls.n	801c6e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c6e2:	3001      	adds	r0, #1
 801c6e4:	b284      	uxth	r4, r0
 801c6e6:	e7f3      	b.n	801c6d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c6e8:	d201      	bcs.n	801c6ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c6ea:	b281      	uxth	r1, r0
 801c6ec:	e7f0      	b.n	801c6d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c6ee:	442a      	add	r2, r5
 801c6f0:	8850      	ldrh	r0, [r2, #2]
 801c6f2:	bd70      	pop	{r4, r5, r6, pc}
 801c6f4:	2000      	movs	r0, #0
 801c6f6:	e7fc      	b.n	801c6f2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c6f8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6fc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c6fe:	4604      	mov	r4, r0
 801c700:	260b      	movs	r6, #11
 801c702:	886f      	ldrh	r7, [r5, #2]
 801c704:	087f      	lsrs	r7, r7, #1
 801c706:	3e01      	subs	r6, #1
 801c708:	d01b      	beq.n	801c742 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c70a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c70c:	b92b      	cbnz	r3, 801c71a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801c70e:	4b0e      	ldr	r3, [pc, #56]	; (801c748 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801c710:	21c0      	movs	r1, #192	; 0xc0
 801c712:	4a0e      	ldr	r2, [pc, #56]	; (801c74c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801c714:	480e      	ldr	r0, [pc, #56]	; (801c750 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801c716:	f008 fdd9 	bl	80252cc <__assert_func>
 801c71a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c71c:	462a      	mov	r2, r5
 801c71e:	4639      	mov	r1, r7
 801c720:	4620      	mov	r0, r4
 801c722:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c726:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c72a:	4643      	mov	r3, r8
 801c72c:	f7ff ffc6 	bl	801c6bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c730:	b138      	cbz	r0, 801c742 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c732:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c736:	4642      	mov	r2, r8
 801c738:	4620      	mov	r0, r4
 801c73a:	f7ff ff8b 	bl	801c654 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c73e:	2800      	cmp	r0, #0
 801c740:	d1e1      	bne.n	801c706 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c746:	bf00      	nop
 801c748:	08028328 	.word	0x08028328
 801c74c:	0802859a 	.word	0x0802859a
 801c750:	08028331 	.word	0x08028331

0801c754 <_ZN8touchgfx8ceil28_4El>:
 801c754:	f110 030f 	adds.w	r3, r0, #15
 801c758:	d401      	bmi.n	801c75e <_ZN8touchgfx8ceil28_4El+0xa>
 801c75a:	1118      	asrs	r0, r3, #4
 801c75c:	4770      	bx	lr
 801c75e:	2210      	movs	r2, #16
 801c760:	f1c0 0001 	rsb	r0, r0, #1
 801c764:	fb93 f3f2 	sdiv	r3, r3, r2
 801c768:	f010 000f 	ands.w	r0, r0, #15
 801c76c:	bf18      	it	ne
 801c76e:	2001      	movne	r0, #1
 801c770:	1a18      	subs	r0, r3, r0
 801c772:	4770      	bx	lr

0801c774 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801c774:	2900      	cmp	r1, #0
 801c776:	b538      	push	{r3, r4, r5, lr}
 801c778:	dc05      	bgt.n	801c786 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801c77a:	4b0f      	ldr	r3, [pc, #60]	; (801c7b8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801c77c:	21fa      	movs	r1, #250	; 0xfa
 801c77e:	4a0f      	ldr	r2, [pc, #60]	; (801c7bc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801c780:	480f      	ldr	r0, [pc, #60]	; (801c7c0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801c782:	f008 fda3 	bl	80252cc <__assert_func>
 801c786:	2800      	cmp	r0, #0
 801c788:	db06      	blt.n	801c798 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801c78a:	fb90 f4f1 	sdiv	r4, r0, r1
 801c78e:	fb01 0114 	mls	r1, r1, r4, r0
 801c792:	6014      	str	r4, [r2, #0]
 801c794:	6019      	str	r1, [r3, #0]
 801c796:	bd38      	pop	{r3, r4, r5, pc}
 801c798:	4240      	negs	r0, r0
 801c79a:	fb90 f4f1 	sdiv	r4, r0, r1
 801c79e:	4265      	negs	r5, r4
 801c7a0:	fb01 0014 	mls	r0, r1, r4, r0
 801c7a4:	6015      	str	r5, [r2, #0]
 801c7a6:	6018      	str	r0, [r3, #0]
 801c7a8:	2800      	cmp	r0, #0
 801c7aa:	d0f4      	beq.n	801c796 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801c7ac:	6810      	ldr	r0, [r2, #0]
 801c7ae:	3801      	subs	r0, #1
 801c7b0:	6010      	str	r0, [r2, #0]
 801c7b2:	6818      	ldr	r0, [r3, #0]
 801c7b4:	1a09      	subs	r1, r1, r0
 801c7b6:	e7ed      	b.n	801c794 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801c7b8:	080288f4 	.word	0x080288f4
 801c7bc:	08028933 	.word	0x08028933
 801c7c0:	08028904 	.word	0x08028904

0801c7c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c7c4:	b570      	push	{r4, r5, r6, lr}
 801c7c6:	694a      	ldr	r2, [r1, #20]
 801c7c8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c7ca:	684b      	ldr	r3, [r1, #4]
 801c7cc:	1b54      	subs	r4, r2, r5
 801c7ce:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c7d0:	f000 8106 	beq.w	801c9e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c7d4:	1b9b      	subs	r3, r3, r6
 801c7d6:	d003      	beq.n	801c7e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c7d8:	4363      	muls	r3, r4
 801c7da:	2210      	movs	r2, #16
 801c7dc:	fb93 f3f2 	sdiv	r3, r3, r2
 801c7e0:	680c      	ldr	r4, [r1, #0]
 801c7e2:	698a      	ldr	r2, [r1, #24]
 801c7e4:	1b65      	subs	r5, r4, r5
 801c7e6:	f000 80fd 	beq.w	801c9e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c7ea:	1b92      	subs	r2, r2, r6
 801c7ec:	d003      	beq.n	801c7f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c7ee:	436a      	muls	r2, r5
 801c7f0:	2410      	movs	r4, #16
 801c7f2:	fb92 f2f4 	sdiv	r2, r2, r4
 801c7f6:	1a9b      	subs	r3, r3, r2
 801c7f8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801ca20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c7fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c800:	460a      	mov	r2, r1
 801c802:	ee07 3a90 	vmov	s15, r3
 801c806:	f100 040c 	add.w	r4, r0, #12
 801c80a:	4603      	mov	r3, r0
 801c80c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c810:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c814:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c818:	eeb1 6a43 	vneg.f32	s12, s6
 801c81c:	edd2 7a02 	vldr	s15, [r2, #8]
 801c820:	3214      	adds	r2, #20
 801c822:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c826:	ece3 6a01 	vstmia	r3!, {s13}
 801c82a:	429c      	cmp	r4, r3
 801c82c:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c830:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c834:	edc3 7a02 	vstr	s15, [r3, #8]
 801c838:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c83c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c840:	edc3 7a05 	vstr	s15, [r3, #20]
 801c844:	d1ea      	bne.n	801c81c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c846:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c848:	698b      	ldr	r3, [r1, #24]
 801c84a:	edd0 4a02 	vldr	s9, [r0, #8]
 801c84e:	1a9b      	subs	r3, r3, r2
 801c850:	edd0 3a00 	vldr	s7, [r0]
 801c854:	edd0 6a01 	vldr	s13, [r0, #4]
 801c858:	ee07 3a90 	vmov	s15, r3
 801c85c:	684b      	ldr	r3, [r1, #4]
 801c85e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c862:	ed90 5a05 	vldr	s10, [r0, #20]
 801c866:	1a9b      	subs	r3, r3, r2
 801c868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c86c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c870:	ed90 2a03 	vldr	s4, [r0, #12]
 801c874:	ee07 3a10 	vmov	s14, r3
 801c878:	edd0 5a04 	vldr	s11, [r0, #16]
 801c87c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c880:	ed90 1a07 	vldr	s2, [r0, #28]
 801c884:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c888:	edd0 2a06 	vldr	s5, [r0, #24]
 801c88c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c890:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c894:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c898:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c89c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c8a0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c8a4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c8a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c8aa:	694a      	ldr	r2, [r1, #20]
 801c8ac:	1b13      	subs	r3, r2, r4
 801c8ae:	ee07 3a10 	vmov	s14, r3
 801c8b2:	680b      	ldr	r3, [r1, #0]
 801c8b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c8b8:	1b1b      	subs	r3, r3, r4
 801c8ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c8be:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c8c2:	ee07 3a10 	vmov	s14, r3
 801c8c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c8ca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c8ce:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c8d2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c8d6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c8da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c8dc:	698b      	ldr	r3, [r1, #24]
 801c8de:	1a9b      	subs	r3, r3, r2
 801c8e0:	ee06 3a90 	vmov	s13, r3
 801c8e4:	684b      	ldr	r3, [r1, #4]
 801c8e6:	1a9b      	subs	r3, r3, r2
 801c8e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c8ec:	ee07 3a10 	vmov	s14, r3
 801c8f0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c8f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c8f8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c8fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c900:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c904:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c908:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c90c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c90e:	694a      	ldr	r2, [r1, #20]
 801c910:	1b13      	subs	r3, r2, r4
 801c912:	ee07 3a10 	vmov	s14, r3
 801c916:	680b      	ldr	r3, [r1, #0]
 801c918:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c91c:	1b1b      	subs	r3, r3, r4
 801c91e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c922:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c926:	ee07 3a10 	vmov	s14, r3
 801c92a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c92e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c932:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c936:	edd0 5a08 	vldr	s11, [r0, #32]
 801c93a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c93e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c942:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c946:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c94a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c94c:	698b      	ldr	r3, [r1, #24]
 801c94e:	1a9b      	subs	r3, r3, r2
 801c950:	ee07 3a10 	vmov	s14, r3
 801c954:	684b      	ldr	r3, [r1, #4]
 801c956:	1a9b      	subs	r3, r3, r2
 801c958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c95c:	ee01 3a90 	vmov	s3, r3
 801c960:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c964:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c968:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c96c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c970:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c974:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c978:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c97c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c97e:	694a      	ldr	r2, [r1, #20]
 801c980:	1b13      	subs	r3, r2, r4
 801c982:	ee03 3a10 	vmov	s6, r3
 801c986:	680b      	ldr	r3, [r1, #0]
 801c988:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c98c:	1b1b      	subs	r3, r3, r4
 801c98e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c992:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c996:	ee03 3a10 	vmov	s6, r3
 801c99a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c99e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c9a2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c9a6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c9aa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c9ae:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c9b2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c9b6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9be:	dd13      	ble.n	801c9e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c9c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c9c4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c9c8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c9ca:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c9ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9d6:	dd15      	ble.n	801ca04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c9d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c9dc:	6403      	str	r3, [r0, #64]	; 0x40
 801c9de:	bd70      	pop	{r4, r5, r6, pc}
 801c9e0:	4623      	mov	r3, r4
 801c9e2:	e6fd      	b.n	801c7e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c9e4:	462a      	mov	r2, r5
 801c9e6:	e706      	b.n	801c7f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c9e8:	d502      	bpl.n	801c9f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c9ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c9ee:	e7e9      	b.n	801c9c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c9f0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c9f4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c9f8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca00:	dade      	bge.n	801c9c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ca02:	e7f2      	b.n	801c9ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ca04:	d502      	bpl.n	801ca0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ca06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ca0a:	e7e7      	b.n	801c9dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ca0c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ca10:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ca14:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca1c:	dadc      	bge.n	801c9d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ca1e:	e7f2      	b.n	801ca06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801ca20:	3d800000 	.word	0x3d800000

0801ca24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801ca24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca28:	f04f 0814 	mov.w	r8, #20
 801ca2c:	4604      	mov	r4, r0
 801ca2e:	4617      	mov	r7, r2
 801ca30:	460d      	mov	r5, r1
 801ca32:	fb08 f903 	mul.w	r9, r8, r3
 801ca36:	461e      	mov	r6, r3
 801ca38:	eb02 0a09 	add.w	sl, r2, r9
 801ca3c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801ca40:	f7ff fe88 	bl	801c754 <_ZN8touchgfx8ceil28_4El>
 801ca44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca46:	6160      	str	r0, [r4, #20]
 801ca48:	fb08 f803 	mul.w	r8, r8, r3
 801ca4c:	9001      	str	r0, [sp, #4]
 801ca4e:	eb07 0b08 	add.w	fp, r7, r8
 801ca52:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ca56:	f7ff fe7d 	bl	801c754 <_ZN8touchgfx8ceil28_4El>
 801ca5a:	9a01      	ldr	r2, [sp, #4]
 801ca5c:	1a80      	subs	r0, r0, r2
 801ca5e:	61a0      	str	r0, [r4, #24]
 801ca60:	2800      	cmp	r0, #0
 801ca62:	f000 8088 	beq.w	801cb76 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801ca66:	f857 3009 	ldr.w	r3, [r7, r9]
 801ca6a:	f857 c008 	ldr.w	ip, [r7, r8]
 801ca6e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ca72:	ebac 0c03 	sub.w	ip, ip, r3
 801ca76:	f8da 1004 	ldr.w	r1, [sl, #4]
 801ca7a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801ca7e:	1a40      	subs	r0, r0, r1
 801ca80:	fb0b f202 	mul.w	r2, fp, r2
 801ca84:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801ca88:	fb0c 2211 	mls	r2, ip, r1, r2
 801ca8c:	4641      	mov	r1, r8
 801ca8e:	fb00 2003 	mla	r0, r0, r3, r2
 801ca92:	f104 0310 	add.w	r3, r4, #16
 801ca96:	4622      	mov	r2, r4
 801ca98:	3801      	subs	r0, #1
 801ca9a:	4440      	add	r0, r8
 801ca9c:	f7ff fe6a 	bl	801c774 <_ZN8touchgfx11floorDivModEllRlS0_>
 801caa0:	f104 0308 	add.w	r3, r4, #8
 801caa4:	1d22      	adds	r2, r4, #4
 801caa6:	4641      	mov	r1, r8
 801caa8:	4658      	mov	r0, fp
 801caaa:	f7ff fe63 	bl	801c774 <_ZN8touchgfx11floorDivModEllRlS0_>
 801caae:	f8c4 800c 	str.w	r8, [r4, #12]
 801cab2:	6962      	ldr	r2, [r4, #20]
 801cab4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801cab8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801cb80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801cabc:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801cac0:	6822      	ldr	r2, [r4, #0]
 801cac2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801cac6:	ee07 3a10 	vmov	s14, r3
 801caca:	f857 3009 	ldr.w	r3, [r7, r9]
 801cace:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801cad2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cad6:	ee07 3a90 	vmov	s15, r3
 801cada:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801cade:	ee27 7a26 	vmul.f32	s14, s14, s13
 801cae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801caea:	edd3 6a00 	vldr	s13, [r3]
 801caee:	eee6 6a07 	vfma.f32	s13, s12, s14
 801caf2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801caf6:	eee6 6a27 	vfma.f32	s13, s12, s15
 801cafa:	edc4 6a07 	vstr	s13, [r4, #28]
 801cafe:	edd4 6a01 	vldr	s13, [r4, #4]
 801cb02:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801cb06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cb0a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801cb0e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801cb12:	ed84 6a08 	vstr	s12, [r4, #32]
 801cb16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801cb18:	6262      	str	r2, [r4, #36]	; 0x24
 801cb1a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801cb1e:	ed93 6a03 	vldr	s12, [r3, #12]
 801cb22:	eea5 6a87 	vfma.f32	s12, s11, s14
 801cb26:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801cb2a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801cb2e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801cb32:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801cb36:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801cb3a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801cb3e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801cb42:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801cb44:	6322      	str	r2, [r4, #48]	; 0x30
 801cb46:	ed93 6a06 	vldr	s12, [r3, #24]
 801cb4a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801cb4e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801cb52:	eeb0 7a46 	vmov.f32	s14, s12
 801cb56:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801cb5a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801cb5e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801cb62:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801cb66:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801cb6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cb6e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801cb72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801cb74:	63e3      	str	r3, [r4, #60]	; 0x3c
 801cb76:	4620      	mov	r0, r4
 801cb78:	b003      	add	sp, #12
 801cb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb7e:	bf00      	nop
 801cb80:	3d800000 	.word	0x3d800000

0801cb84 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cb84:	4b01      	ldr	r3, [pc, #4]	; (801cb8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cb86:	6018      	str	r0, [r3, #0]
 801cb88:	4770      	bx	lr
 801cb8a:	bf00      	nop
 801cb8c:	20009538 	.word	0x20009538

0801cb90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801cb90:	4b06      	ldr	r3, [pc, #24]	; (801cbac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801cb92:	881a      	ldrh	r2, [r3, #0]
 801cb94:	4282      	cmp	r2, r0
 801cb96:	d807      	bhi.n	801cba8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801cb98:	4b05      	ldr	r3, [pc, #20]	; (801cbb0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801cb9a:	881b      	ldrh	r3, [r3, #0]
 801cb9c:	4413      	add	r3, r2
 801cb9e:	4298      	cmp	r0, r3
 801cba0:	bfac      	ite	ge
 801cba2:	2000      	movge	r0, #0
 801cba4:	2001      	movlt	r0, #1
 801cba6:	4770      	bx	lr
 801cba8:	2000      	movs	r0, #0
 801cbaa:	4770      	bx	lr
 801cbac:	20009558 	.word	0x20009558
 801cbb0:	2000955c 	.word	0x2000955c

0801cbb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cbb4:	b508      	push	{r3, lr}
 801cbb6:	4601      	mov	r1, r0
 801cbb8:	f7ff ffea 	bl	801cb90 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cbbc:	b118      	cbz	r0, 801cbc6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801cbbe:	4b02      	ldr	r3, [pc, #8]	; (801cbc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801cbc0:	681b      	ldr	r3, [r3, #0]
 801cbc2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801cbc6:	bd08      	pop	{r3, pc}
 801cbc8:	2000953c 	.word	0x2000953c

0801cbcc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbd0:	4d28      	ldr	r5, [pc, #160]	; (801cc74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801cbd2:	682b      	ldr	r3, [r5, #0]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d04a      	beq.n	801cc6e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801cbd8:	4a27      	ldr	r2, [pc, #156]	; (801cc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801cbda:	4e28      	ldr	r6, [pc, #160]	; (801cc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801cbdc:	8810      	ldrh	r0, [r2, #0]
 801cbde:	f8b6 8000 	ldrh.w	r8, [r6]
 801cbe2:	4c27      	ldr	r4, [pc, #156]	; (801cc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801cbe4:	4440      	add	r0, r8
 801cbe6:	4f27      	ldr	r7, [pc, #156]	; (801cc84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801cbe8:	1c41      	adds	r1, r0, #1
 801cbea:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801cbee:	f021 0101 	bic.w	r1, r1, #1
 801cbf2:	eb03 020e 	add.w	r2, r3, lr
 801cbf6:	0409      	lsls	r1, r1, #16
 801cbf8:	6022      	str	r2, [r4, #0]
 801cbfa:	0c09      	lsrs	r1, r1, #16
 801cbfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801cc00:	eb0e 010c 	add.w	r1, lr, ip
 801cc04:	185a      	adds	r2, r3, r1
 801cc06:	603a      	str	r2, [r7, #0]
 801cc08:	220e      	movs	r2, #14
 801cc0a:	fb02 f208 	mul.w	r2, r2, r8
 801cc0e:	3203      	adds	r2, #3
 801cc10:	f022 0203 	bic.w	r2, r2, #3
 801cc14:	4411      	add	r1, r2
 801cc16:	440b      	add	r3, r1
 801cc18:	491b      	ldr	r1, [pc, #108]	; (801cc88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801cc1a:	600b      	str	r3, [r1, #0]
 801cc1c:	2300      	movs	r3, #0
 801cc1e:	491b      	ldr	r1, [pc, #108]	; (801cc8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801cc20:	800b      	strh	r3, [r1, #0]
 801cc22:	491b      	ldr	r1, [pc, #108]	; (801cc90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801cc24:	6809      	ldr	r1, [r1, #0]
 801cc26:	eba1 010e 	sub.w	r1, r1, lr
 801cc2a:	eba1 010c 	sub.w	r1, r1, ip
 801cc2e:	469c      	mov	ip, r3
 801cc30:	1a8a      	subs	r2, r1, r2
 801cc32:	4918      	ldr	r1, [pc, #96]	; (801cc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801cc34:	600a      	str	r2, [r1, #0]
 801cc36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801cc3a:	4a17      	ldr	r2, [pc, #92]	; (801cc98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801cc3c:	8013      	strh	r3, [r2, #0]
 801cc3e:	4283      	cmp	r3, r0
 801cc40:	d10d      	bne.n	801cc5e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801cc42:	8835      	ldrh	r5, [r6, #0]
 801cc44:	2300      	movs	r3, #0
 801cc46:	6838      	ldr	r0, [r7, #0]
 801cc48:	240e      	movs	r4, #14
 801cc4a:	429d      	cmp	r5, r3
 801cc4c:	d90f      	bls.n	801cc6e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801cc4e:	fb04 0203 	mla	r2, r4, r3, r0
 801cc52:	3301      	adds	r3, #1
 801cc54:	7b11      	ldrb	r1, [r2, #12]
 801cc56:	f36f 1145 	bfc	r1, #5, #1
 801cc5a:	7311      	strb	r1, [r2, #12]
 801cc5c:	e7f5      	b.n	801cc4a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801cc5e:	682a      	ldr	r2, [r5, #0]
 801cc60:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801cc64:	6822      	ldr	r2, [r4, #0]
 801cc66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801cc6a:	3301      	adds	r3, #1
 801cc6c:	e7e7      	b.n	801cc3e <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801cc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc72:	bf00      	nop
 801cc74:	2000953c 	.word	0x2000953c
 801cc78:	20009558 	.word	0x20009558
 801cc7c:	2000955c 	.word	0x2000955c
 801cc80:	20009550 	.word	0x20009550
 801cc84:	20009540 	.word	0x20009540
 801cc88:	20009548 	.word	0x20009548
 801cc8c:	2000955a 	.word	0x2000955a
 801cc90:	20009544 	.word	0x20009544
 801cc94:	20009554 	.word	0x20009554
 801cc98:	2000954c 	.word	0x2000954c

0801cc9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cc9c:	4b10      	ldr	r3, [pc, #64]	; (801cce0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801cc9e:	b510      	push	{r4, lr}
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	b9db      	cbnz	r3, 801ccdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cca4:	b1d1      	cbz	r1, 801ccdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cca6:	4b0f      	ldr	r3, [pc, #60]	; (801cce4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801cca8:	240e      	movs	r4, #14
 801ccaa:	801a      	strh	r2, [r3, #0]
 801ccac:	b292      	uxth	r2, r2
 801ccae:	4b0e      	ldr	r3, [pc, #56]	; (801cce8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801ccb0:	881b      	ldrh	r3, [r3, #0]
 801ccb2:	4413      	add	r3, r2
 801ccb4:	4362      	muls	r2, r4
 801ccb6:	2406      	movs	r4, #6
 801ccb8:	fb04 2203 	mla	r2, r4, r3, r2
 801ccbc:	428a      	cmp	r2, r1
 801ccbe:	d305      	bcc.n	801cccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801ccc0:	4b0a      	ldr	r3, [pc, #40]	; (801ccec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801ccc2:	2137      	movs	r1, #55	; 0x37
 801ccc4:	4a0a      	ldr	r2, [pc, #40]	; (801ccf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ccc6:	480b      	ldr	r0, [pc, #44]	; (801ccf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801ccc8:	f008 fb00 	bl	80252cc <__assert_func>
 801cccc:	4b0a      	ldr	r3, [pc, #40]	; (801ccf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801ccce:	6019      	str	r1, [r3, #0]
 801ccd0:	4b0a      	ldr	r3, [pc, #40]	; (801ccfc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801ccd2:	6018      	str	r0, [r3, #0]
 801ccd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccd8:	f7ff bf78 	b.w	801cbcc <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ccdc:	bd10      	pop	{r4, pc}
 801ccde:	bf00      	nop
 801cce0:	20009548 	.word	0x20009548
 801cce4:	2000955c 	.word	0x2000955c
 801cce8:	20009558 	.word	0x20009558
 801ccec:	080289d1 	.word	0x080289d1
 801ccf0:	08028a66 	.word	0x08028a66
 801ccf4:	080289ac 	.word	0x080289ac
 801ccf8:	20009544 	.word	0x20009544
 801ccfc:	2000953c 	.word	0x2000953c

0801cd00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801cd00:	b470      	push	{r4, r5, r6}
 801cd02:	4c07      	ldr	r4, [pc, #28]	; (801cd20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801cd04:	4605      	mov	r5, r0
 801cd06:	4610      	mov	r0, r2
 801cd08:	9a03      	ldr	r2, [sp, #12]
 801cd0a:	6826      	ldr	r6, [r4, #0]
 801cd0c:	b936      	cbnz	r6, 801cd1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801cd0e:	6025      	str	r5, [r4, #0]
 801cd10:	4c04      	ldr	r4, [pc, #16]	; (801cd24 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cd12:	8021      	strh	r1, [r4, #0]
 801cd14:	4619      	mov	r1, r3
 801cd16:	bc70      	pop	{r4, r5, r6}
 801cd18:	f7ff bfc0 	b.w	801cc9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cd1c:	bc70      	pop	{r4, r5, r6}
 801cd1e:	4770      	bx	lr
 801cd20:	20009560 	.word	0x20009560
 801cd24:	20009558 	.word	0x20009558

0801cd28 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cd28:	b508      	push	{r3, lr}
 801cd2a:	4b14      	ldr	r3, [pc, #80]	; (801cd7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cd2c:	6819      	ldr	r1, [r3, #0]
 801cd2e:	b931      	cbnz	r1, 801cd3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801cd30:	4b13      	ldr	r3, [pc, #76]	; (801cd80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cd32:	f240 3187 	movw	r1, #903	; 0x387
 801cd36:	4a13      	ldr	r2, [pc, #76]	; (801cd84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cd38:	4813      	ldr	r0, [pc, #76]	; (801cd88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cd3a:	f008 fac7 	bl	80252cc <__assert_func>
 801cd3e:	4a13      	ldr	r2, [pc, #76]	; (801cd8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cd40:	8803      	ldrh	r3, [r0, #0]
 801cd42:	8812      	ldrh	r2, [r2, #0]
 801cd44:	4293      	cmp	r3, r2
 801cd46:	d204      	bcs.n	801cd52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801cd48:	2214      	movs	r2, #20
 801cd4a:	fb02 1303 	mla	r3, r2, r3, r1
 801cd4e:	8918      	ldrh	r0, [r3, #8]
 801cd50:	bd08      	pop	{r3, pc}
 801cd52:	490f      	ldr	r1, [pc, #60]	; (801cd90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801cd54:	8809      	ldrh	r1, [r1, #0]
 801cd56:	4411      	add	r1, r2
 801cd58:	428b      	cmp	r3, r1
 801cd5a:	da06      	bge.n	801cd6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801cd5c:	1a9b      	subs	r3, r3, r2
 801cd5e:	4a0d      	ldr	r2, [pc, #52]	; (801cd94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801cd60:	210e      	movs	r1, #14
 801cd62:	6812      	ldr	r2, [r2, #0]
 801cd64:	fb01 2303 	mla	r3, r1, r3, r2
 801cd68:	e7f1      	b.n	801cd4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801cd6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cd6e:	4293      	cmp	r3, r2
 801cd70:	bf0a      	itet	eq
 801cd72:	4b09      	ldreq	r3, [pc, #36]	; (801cd98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801cd74:	2000      	movne	r0, #0
 801cd76:	8818      	ldrheq	r0, [r3, #0]
 801cd78:	e7ea      	b.n	801cd50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801cd7a:	bf00      	nop
 801cd7c:	20009560 	.word	0x20009560
 801cd80:	08028a2a 	.word	0x08028a2a
 801cd84:	08028add 	.word	0x08028add
 801cd88:	080289ac 	.word	0x080289ac
 801cd8c:	20009558 	.word	0x20009558
 801cd90:	2000955c 	.word	0x2000955c
 801cd94:	20009540 	.word	0x20009540
 801cd98:	200094ca 	.word	0x200094ca

0801cd9c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cd9c:	b508      	push	{r3, lr}
 801cd9e:	4b14      	ldr	r3, [pc, #80]	; (801cdf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cda0:	6819      	ldr	r1, [r3, #0]
 801cda2:	b931      	cbnz	r1, 801cdb2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801cda4:	4b13      	ldr	r3, [pc, #76]	; (801cdf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cda6:	f240 319b 	movw	r1, #923	; 0x39b
 801cdaa:	4a13      	ldr	r2, [pc, #76]	; (801cdf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cdac:	4813      	ldr	r0, [pc, #76]	; (801cdfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801cdae:	f008 fa8d 	bl	80252cc <__assert_func>
 801cdb2:	4a13      	ldr	r2, [pc, #76]	; (801ce00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cdb4:	8803      	ldrh	r3, [r0, #0]
 801cdb6:	8812      	ldrh	r2, [r2, #0]
 801cdb8:	4293      	cmp	r3, r2
 801cdba:	d204      	bcs.n	801cdc6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801cdbc:	2214      	movs	r2, #20
 801cdbe:	fb02 1303 	mla	r3, r2, r3, r1
 801cdc2:	8958      	ldrh	r0, [r3, #10]
 801cdc4:	bd08      	pop	{r3, pc}
 801cdc6:	490f      	ldr	r1, [pc, #60]	; (801ce04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801cdc8:	8809      	ldrh	r1, [r1, #0]
 801cdca:	4411      	add	r1, r2
 801cdcc:	428b      	cmp	r3, r1
 801cdce:	da06      	bge.n	801cdde <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801cdd0:	1a9b      	subs	r3, r3, r2
 801cdd2:	4a0d      	ldr	r2, [pc, #52]	; (801ce08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801cdd4:	210e      	movs	r1, #14
 801cdd6:	6812      	ldr	r2, [r2, #0]
 801cdd8:	fb01 2303 	mla	r3, r1, r3, r2
 801cddc:	e7f1      	b.n	801cdc2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801cdde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cde2:	4293      	cmp	r3, r2
 801cde4:	bf0a      	itet	eq
 801cde6:	4b09      	ldreq	r3, [pc, #36]	; (801ce0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801cde8:	2000      	movne	r0, #0
 801cdea:	8818      	ldrheq	r0, [r3, #0]
 801cdec:	e7ea      	b.n	801cdc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801cdee:	bf00      	nop
 801cdf0:	20009560 	.word	0x20009560
 801cdf4:	08028a2a 	.word	0x08028a2a
 801cdf8:	08028b09 	.word	0x08028b09
 801cdfc:	080289ac 	.word	0x080289ac
 801ce00:	20009558 	.word	0x20009558
 801ce04:	2000955c 	.word	0x2000955c
 801ce08:	20009540 	.word	0x20009540
 801ce0c:	200094cc 	.word	0x200094cc

0801ce10 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ce10:	b508      	push	{r3, lr}
 801ce12:	4b12      	ldr	r3, [pc, #72]	; (801ce5c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ce14:	6819      	ldr	r1, [r3, #0]
 801ce16:	b931      	cbnz	r1, 801ce26 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ce18:	4b11      	ldr	r3, [pc, #68]	; (801ce60 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ce1a:	f240 31d3 	movw	r1, #979	; 0x3d3
 801ce1e:	4a11      	ldr	r2, [pc, #68]	; (801ce64 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ce20:	4811      	ldr	r0, [pc, #68]	; (801ce68 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ce22:	f008 fa53 	bl	80252cc <__assert_func>
 801ce26:	8803      	ldrh	r3, [r0, #0]
 801ce28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	d012      	beq.n	801ce56 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ce30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ce34:	4293      	cmp	r3, r2
 801ce36:	d103      	bne.n	801ce40 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ce38:	4b0c      	ldr	r3, [pc, #48]	; (801ce6c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ce3e:	bd08      	pop	{r3, pc}
 801ce40:	4a0b      	ldr	r2, [pc, #44]	; (801ce70 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ce42:	6812      	ldr	r2, [r2, #0]
 801ce44:	b11a      	cbz	r2, 801ce4e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ce46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ce4a:	2800      	cmp	r0, #0
 801ce4c:	d1f7      	bne.n	801ce3e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ce4e:	2214      	movs	r2, #20
 801ce50:	4353      	muls	r3, r2
 801ce52:	58c8      	ldr	r0, [r1, r3]
 801ce54:	e7f3      	b.n	801ce3e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ce56:	2000      	movs	r0, #0
 801ce58:	e7f1      	b.n	801ce3e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ce5a:	bf00      	nop
 801ce5c:	20009560 	.word	0x20009560
 801ce60:	08028a2a 	.word	0x08028a2a
 801ce64:	08028aac 	.word	0x08028aac
 801ce68:	080289ac 	.word	0x080289ac
 801ce6c:	200094d8 	.word	0x200094d8
 801ce70:	2000953c 	.word	0x2000953c

0801ce74 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ce74:	8802      	ldrh	r2, [r0, #0]
 801ce76:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ce7a:	429a      	cmp	r2, r3
 801ce7c:	d845      	bhi.n	801cf0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ce7e:	4b24      	ldr	r3, [pc, #144]	; (801cf10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ce80:	8818      	ldrh	r0, [r3, #0]
 801ce82:	4282      	cmp	r2, r0
 801ce84:	d221      	bcs.n	801ceca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ce86:	4b23      	ldr	r3, [pc, #140]	; (801cf14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ce88:	6819      	ldr	r1, [r3, #0]
 801ce8a:	2314      	movs	r3, #20
 801ce8c:	fb03 1302 	mla	r3, r3, r2, r1
 801ce90:	6858      	ldr	r0, [r3, #4]
 801ce92:	2800      	cmp	r0, #0
 801ce94:	d03a      	beq.n	801cf0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ce96:	4920      	ldr	r1, [pc, #128]	; (801cf18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ce98:	6809      	ldr	r1, [r1, #0]
 801ce9a:	2900      	cmp	r1, #0
 801ce9c:	d036      	beq.n	801cf0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ce9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cea2:	2900      	cmp	r1, #0
 801cea4:	d032      	beq.n	801cf0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cea6:	891a      	ldrh	r2, [r3, #8]
 801cea8:	8958      	ldrh	r0, [r3, #10]
 801ceaa:	4350      	muls	r0, r2
 801ceac:	7c5a      	ldrb	r2, [r3, #17]
 801ceae:	7cdb      	ldrb	r3, [r3, #19]
 801ceb0:	0952      	lsrs	r2, r2, #5
 801ceb2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ceb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ceba:	2b0b      	cmp	r3, #11
 801cebc:	bf18      	it	ne
 801cebe:	0040      	lslne	r0, r0, #1
 801cec0:	3003      	adds	r0, #3
 801cec2:	f020 0003 	bic.w	r0, r0, #3
 801cec6:	4408      	add	r0, r1
 801cec8:	4770      	bx	lr
 801ceca:	4b14      	ldr	r3, [pc, #80]	; (801cf1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801cecc:	881b      	ldrh	r3, [r3, #0]
 801cece:	4403      	add	r3, r0
 801ced0:	429a      	cmp	r2, r3
 801ced2:	da1a      	bge.n	801cf0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ced4:	4b12      	ldr	r3, [pc, #72]	; (801cf20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801ced6:	1a10      	subs	r0, r2, r0
 801ced8:	210e      	movs	r1, #14
 801ceda:	681b      	ldr	r3, [r3, #0]
 801cedc:	fb01 3000 	mla	r0, r1, r0, r3
 801cee0:	7b03      	ldrb	r3, [r0, #12]
 801cee2:	f003 031f 	and.w	r3, r3, #31
 801cee6:	2b0b      	cmp	r3, #11
 801cee8:	d10b      	bne.n	801cf02 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ceea:	8903      	ldrh	r3, [r0, #8]
 801ceec:	8940      	ldrh	r0, [r0, #10]
 801ceee:	4358      	muls	r0, r3
 801cef0:	4b09      	ldr	r3, [pc, #36]	; (801cf18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cef2:	3003      	adds	r0, #3
 801cef4:	6819      	ldr	r1, [r3, #0]
 801cef6:	f020 0303 	bic.w	r3, r0, #3
 801cefa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cefe:	4418      	add	r0, r3
 801cf00:	4770      	bx	lr
 801cf02:	2b0d      	cmp	r3, #13
 801cf04:	d101      	bne.n	801cf0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cf06:	300d      	adds	r0, #13
 801cf08:	4770      	bx	lr
 801cf0a:	2000      	movs	r0, #0
 801cf0c:	4770      	bx	lr
 801cf0e:	bf00      	nop
 801cf10:	20009558 	.word	0x20009558
 801cf14:	20009560 	.word	0x20009560
 801cf18:	2000953c 	.word	0x2000953c
 801cf1c:	2000955c 	.word	0x2000955c
 801cf20:	20009540 	.word	0x20009540

0801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cf24:	4b19      	ldr	r3, [pc, #100]	; (801cf8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cf26:	6819      	ldr	r1, [r3, #0]
 801cf28:	8803      	ldrh	r3, [r0, #0]
 801cf2a:	b1e9      	cbz	r1, 801cf68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cf2c:	4a18      	ldr	r2, [pc, #96]	; (801cf90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cf2e:	8812      	ldrh	r2, [r2, #0]
 801cf30:	429a      	cmp	r2, r3
 801cf32:	d90a      	bls.n	801cf4a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cf34:	2214      	movs	r2, #20
 801cf36:	fb02 1303 	mla	r3, r2, r3, r1
 801cf3a:	7c58      	ldrb	r0, [r3, #17]
 801cf3c:	0942      	lsrs	r2, r0, #5
 801cf3e:	7cd8      	ldrb	r0, [r3, #19]
 801cf40:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cf44:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cf48:	4770      	bx	lr
 801cf4a:	4912      	ldr	r1, [pc, #72]	; (801cf94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801cf4c:	8809      	ldrh	r1, [r1, #0]
 801cf4e:	4411      	add	r1, r2
 801cf50:	428b      	cmp	r3, r1
 801cf52:	da09      	bge.n	801cf68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cf54:	1a9b      	subs	r3, r3, r2
 801cf56:	4a10      	ldr	r2, [pc, #64]	; (801cf98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801cf58:	210e      	movs	r1, #14
 801cf5a:	6812      	ldr	r2, [r2, #0]
 801cf5c:	fb01 2303 	mla	r3, r1, r3, r2
 801cf60:	7b18      	ldrb	r0, [r3, #12]
 801cf62:	f000 001f 	and.w	r0, r0, #31
 801cf66:	4770      	bx	lr
 801cf68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cf6c:	4293      	cmp	r3, r2
 801cf6e:	d10a      	bne.n	801cf86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801cf70:	4b0a      	ldr	r3, [pc, #40]	; (801cf9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cf78:	b10a      	cbz	r2, 801cf7e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801cf7a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801cf7c:	b900      	cbnz	r0, 801cf80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801cf7e:	6898      	ldr	r0, [r3, #8]
 801cf80:	6803      	ldr	r3, [r0, #0]
 801cf82:	6a1b      	ldr	r3, [r3, #32]
 801cf84:	4718      	bx	r3
 801cf86:	2000      	movs	r0, #0
 801cf88:	4770      	bx	lr
 801cf8a:	bf00      	nop
 801cf8c:	20009560 	.word	0x20009560
 801cf90:	20009558 	.word	0x20009558
 801cf94:	2000955c 	.word	0x2000955c
 801cf98:	20009540 	.word	0x20009540
 801cf9c:	200094d8 	.word	0x200094d8

0801cfa0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801cfa0:	2018      	movs	r0, #24
 801cfa2:	4770      	bx	lr

0801cfa4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801cfa4:	2001      	movs	r0, #1
 801cfa6:	4770      	bx	lr

0801cfa8 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801cfa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801cfac:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801cfb0:	4770      	bx	lr

0801cfb2 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801cfb2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801cfb6:	4770      	bx	lr

0801cfb8 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801cfb8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801cfbc:	4770      	bx	lr

0801cfbe <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801cfbe:	b2c8      	uxtb	r0, r1
 801cfc0:	4770      	bx	lr

0801cfc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc6:	b085      	sub	sp, #20
 801cfc8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cfca:	9203      	str	r2, [sp, #12]
 801cfcc:	6870      	ldr	r0, [r6, #4]
 801cfce:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cfd2:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801cfd6:	9101      	str	r1, [sp, #4]
 801cfd8:	fa1f f885 	uxth.w	r8, r5
 801cfdc:	43ed      	mvns	r5, r5
 801cfde:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cfe2:	b2ed      	uxtb	r5, r5
 801cfe4:	fb00 2404 	mla	r4, r0, r4, r2
 801cfe8:	6832      	ldr	r2, [r6, #0]
 801cfea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cfee:	4414      	add	r4, r2
 801cff0:	f8dc 2000 	ldr.w	r2, [ip]
 801cff4:	9202      	str	r2, [sp, #8]
 801cff6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801cffa:	f102 0e04 	add.w	lr, r2, #4
 801cffe:	9a01      	ldr	r2, [sp, #4]
 801d000:	2a00      	cmp	r2, #0
 801d002:	dc03      	bgt.n	801d00c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d004:	9a03      	ldr	r2, [sp, #12]
 801d006:	2a00      	cmp	r2, #0
 801d008:	f340 8116 	ble.w	801d238 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d00c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d00e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801d012:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d016:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d018:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801d01c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d020:	2b00      	cmp	r3, #0
 801d022:	dd0e      	ble.n	801d042 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d024:	1406      	asrs	r6, r0, #16
 801d026:	d405      	bmi.n	801d034 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d028:	4556      	cmp	r6, sl
 801d02a:	da03      	bge.n	801d034 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d02c:	1416      	asrs	r6, r2, #16
 801d02e:	d401      	bmi.n	801d034 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d030:	454e      	cmp	r6, r9
 801d032:	db07      	blt.n	801d044 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801d034:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d036:	3b01      	subs	r3, #1
 801d038:	3403      	adds	r4, #3
 801d03a:	4430      	add	r0, r6
 801d03c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d03e:	4432      	add	r2, r6
 801d040:	e7ee      	b.n	801d020 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d042:	d063      	beq.n	801d10c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d044:	1e5e      	subs	r6, r3, #1
 801d046:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801d048:	fb07 0706 	mla	r7, r7, r6, r0
 801d04c:	143f      	asrs	r7, r7, #16
 801d04e:	d454      	bmi.n	801d0fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d050:	4557      	cmp	r7, sl
 801d052:	da52      	bge.n	801d0fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d054:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d056:	fb07 2606 	mla	r6, r7, r6, r2
 801d05a:	1436      	asrs	r6, r6, #16
 801d05c:	d44d      	bmi.n	801d0fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d05e:	454e      	cmp	r6, r9
 801d060:	da4b      	bge.n	801d0fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d062:	1ce6      	adds	r6, r4, #3
 801d064:	4699      	mov	r9, r3
 801d066:	f1b9 0f00 	cmp.w	r9, #0
 801d06a:	f106 0603 	add.w	r6, r6, #3
 801d06e:	dd48      	ble.n	801d102 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801d070:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801d074:	1417      	asrs	r7, r2, #16
 801d076:	9902      	ldr	r1, [sp, #8]
 801d078:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d07c:	f109 39ff 	add.w	r9, r9, #4294967295
 801d080:	fb0b 1707 	mla	r7, fp, r7, r1
 801d084:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d088:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d08a:	f817 700a 	ldrb.w	r7, [r7, sl]
 801d08e:	fb1b fb05 	smulbb	fp, fp, r5
 801d092:	4408      	add	r0, r1
 801d094:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d096:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d09a:	440a      	add	r2, r1
 801d09c:	eb0e 0a07 	add.w	sl, lr, r7
 801d0a0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801d0a4:	fb07 b708 	mla	r7, r7, r8, fp
 801d0a8:	b2bf      	uxth	r7, r7
 801d0aa:	f107 0b01 	add.w	fp, r7, #1
 801d0ae:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d0b2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d0b6:	fb1b fb05 	smulbb	fp, fp, r5
 801d0ba:	123f      	asrs	r7, r7, #8
 801d0bc:	f806 7c06 	strb.w	r7, [r6, #-6]
 801d0c0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801d0c4:	fb07 b708 	mla	r7, r7, r8, fp
 801d0c8:	b2bf      	uxth	r7, r7
 801d0ca:	f107 0b01 	add.w	fp, r7, #1
 801d0ce:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801d0d2:	123f      	asrs	r7, r7, #8
 801d0d4:	f806 7c05 	strb.w	r7, [r6, #-5]
 801d0d8:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801d0dc:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d0e0:	fb1a fa05 	smulbb	sl, sl, r5
 801d0e4:	fb07 a708 	mla	r7, r7, r8, sl
 801d0e8:	b2bf      	uxth	r7, r7
 801d0ea:	f107 0a01 	add.w	sl, r7, #1
 801d0ee:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d0f2:	123f      	asrs	r7, r7, #8
 801d0f4:	f806 7c04 	strb.w	r7, [r6, #-4]
 801d0f8:	e7b5      	b.n	801d066 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801d0fa:	2700      	movs	r7, #0
 801d0fc:	1bde      	subs	r6, r3, r7
 801d0fe:	2e00      	cmp	r6, #0
 801d100:	dc42      	bgt.n	801d188 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801d102:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d10a:	441c      	add	r4, r3
 801d10c:	9b01      	ldr	r3, [sp, #4]
 801d10e:	2b00      	cmp	r3, #0
 801d110:	f340 8092 	ble.w	801d238 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801d114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d11a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d11e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d122:	eef0 6a62 	vmov.f32	s13, s5
 801d126:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d12a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d12e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d132:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801d136:	eef0 6a43 	vmov.f32	s13, s6
 801d13a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d13e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801d142:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d146:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d14a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d14e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d152:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d156:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d15a:	ee12 2a90 	vmov	r2, s5
 801d15e:	eef0 2a47 	vmov.f32	s5, s14
 801d162:	fb92 f3f3 	sdiv	r3, r2, r3
 801d166:	ee13 2a10 	vmov	r2, s6
 801d16a:	9311      	str	r3, [sp, #68]	; 0x44
 801d16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d16e:	eeb0 3a67 	vmov.f32	s6, s15
 801d172:	fb92 f3f3 	sdiv	r3, r2, r3
 801d176:	9312      	str	r3, [sp, #72]	; 0x48
 801d178:	9b01      	ldr	r3, [sp, #4]
 801d17a:	9a03      	ldr	r2, [sp, #12]
 801d17c:	3b01      	subs	r3, #1
 801d17e:	9301      	str	r3, [sp, #4]
 801d180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d182:	bf08      	it	eq
 801d184:	4613      	moveq	r3, r2
 801d186:	e73a      	b.n	801cffe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d188:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d18c:	d44e      	bmi.n	801d22c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d18e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d192:	4556      	cmp	r6, sl
 801d194:	dd4a      	ble.n	801d22c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d196:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d19a:	d447      	bmi.n	801d22c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d19c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801d1a0:	4559      	cmp	r1, fp
 801d1a2:	dd43      	ble.n	801d22c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d1a4:	fa0f f986 	sxth.w	r9, r6
 801d1a8:	9902      	ldr	r1, [sp, #8]
 801d1aa:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d1ae:	fb0b 1909 	mla	r9, fp, r9, r1
 801d1b2:	f814 b006 	ldrb.w	fp, [r4, r6]
 801d1b6:	f819 900a 	ldrb.w	r9, [r9, sl]
 801d1ba:	fb1b fb05 	smulbb	fp, fp, r5
 801d1be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d1c2:	eb0e 0a09 	add.w	sl, lr, r9
 801d1c6:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801d1ca:	fb09 b908 	mla	r9, r9, r8, fp
 801d1ce:	fa1f f989 	uxth.w	r9, r9
 801d1d2:	f109 0b01 	add.w	fp, r9, #1
 801d1d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d1da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1de:	f804 9006 	strb.w	r9, [r4, r6]
 801d1e2:	4426      	add	r6, r4
 801d1e4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d1e8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d1ec:	fb1b fb05 	smulbb	fp, fp, r5
 801d1f0:	fb09 b908 	mla	r9, r9, r8, fp
 801d1f4:	fa1f f989 	uxth.w	r9, r9
 801d1f8:	f109 0b01 	add.w	fp, r9, #1
 801d1fc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d200:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d204:	f886 9001 	strb.w	r9, [r6, #1]
 801d208:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d20c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d210:	fb1a fa05 	smulbb	sl, sl, r5
 801d214:	fb09 a908 	mla	r9, r9, r8, sl
 801d218:	fa1f f989 	uxth.w	r9, r9
 801d21c:	f109 0a01 	add.w	sl, r9, #1
 801d220:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801d224:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d228:	f886 9002 	strb.w	r9, [r6, #2]
 801d22c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d22e:	3701      	adds	r7, #1
 801d230:	4408      	add	r0, r1
 801d232:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d234:	440a      	add	r2, r1
 801d236:	e761      	b.n	801d0fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d238:	b005      	add	sp, #20
 801d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d23e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d23e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d242:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d244:	4693      	mov	fp, r2
 801d246:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d24c:	6868      	ldr	r0, [r5, #4]
 801d24e:	6877      	ldr	r7, [r6, #4]
 801d250:	9100      	str	r1, [sp, #0]
 801d252:	3704      	adds	r7, #4
 801d254:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d258:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801d25c:	fb00 2404 	mla	r4, r0, r4, r2
 801d260:	682a      	ldr	r2, [r5, #0]
 801d262:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d266:	4414      	add	r4, r2
 801d268:	6832      	ldr	r2, [r6, #0]
 801d26a:	9201      	str	r2, [sp, #4]
 801d26c:	9a00      	ldr	r2, [sp, #0]
 801d26e:	2a00      	cmp	r2, #0
 801d270:	dc03      	bgt.n	801d27a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d272:	f1bb 0f00 	cmp.w	fp, #0
 801d276:	f340 80bc 	ble.w	801d3f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d27a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d27c:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801d280:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d286:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801d28a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d28e:	2b00      	cmp	r3, #0
 801d290:	dd0c      	ble.n	801d2ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d292:	1405      	asrs	r5, r0, #16
 801d294:	d405      	bmi.n	801d2a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d296:	4555      	cmp	r5, sl
 801d298:	da03      	bge.n	801d2a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d29a:	1415      	asrs	r5, r2, #16
 801d29c:	d401      	bmi.n	801d2a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d29e:	454d      	cmp	r5, r9
 801d2a0:	db05      	blt.n	801d2ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d2a2:	4440      	add	r0, r8
 801d2a4:	4472      	add	r2, lr
 801d2a6:	3b01      	subs	r3, #1
 801d2a8:	3403      	adds	r4, #3
 801d2aa:	e7f0      	b.n	801d28e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d2ac:	d03f      	beq.n	801d32e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801d2ae:	1e5d      	subs	r5, r3, #1
 801d2b0:	fb08 0c05 	mla	ip, r8, r5, r0
 801d2b4:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801d2b8:	d42e      	bmi.n	801d318 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d2ba:	45d4      	cmp	ip, sl
 801d2bc:	da2c      	bge.n	801d318 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d2be:	fb0e 2505 	mla	r5, lr, r5, r2
 801d2c2:	142d      	asrs	r5, r5, #16
 801d2c4:	d428      	bmi.n	801d318 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d2c6:	454d      	cmp	r5, r9
 801d2c8:	da26      	bge.n	801d318 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801d2ca:	1ce5      	adds	r5, r4, #3
 801d2cc:	469c      	mov	ip, r3
 801d2ce:	f1bc 0f00 	cmp.w	ip, #0
 801d2d2:	f105 0503 	add.w	r5, r5, #3
 801d2d6:	dd25      	ble.n	801d324 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801d2d8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801d2dc:	ea4f 4922 	mov.w	r9, r2, asr #16
 801d2e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2e4:	4472      	add	r2, lr
 801d2e6:	468a      	mov	sl, r1
 801d2e8:	9901      	ldr	r1, [sp, #4]
 801d2ea:	fb0a 1909 	mla	r9, sl, r9, r1
 801d2ee:	1401      	asrs	r1, r0, #16
 801d2f0:	4440      	add	r0, r8
 801d2f2:	f819 9001 	ldrb.w	r9, [r9, r1]
 801d2f6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d2fa:	eb07 0a09 	add.w	sl, r7, r9
 801d2fe:	f817 9009 	ldrb.w	r9, [r7, r9]
 801d302:	f805 9c06 	strb.w	r9, [r5, #-6]
 801d306:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801d30a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801d30e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801d312:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d316:	e7da      	b.n	801d2ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d318:	2500      	movs	r5, #0
 801d31a:	eba3 0c05 	sub.w	ip, r3, r5
 801d31e:	f1bc 0f00 	cmp.w	ip, #0
 801d322:	dc3b      	bgt.n	801d39c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d324:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d328:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d32c:	441c      	add	r4, r3
 801d32e:	9b00      	ldr	r3, [sp, #0]
 801d330:	2b00      	cmp	r3, #0
 801d332:	dd5e      	ble.n	801d3f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d334:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d33a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d33e:	eeb0 6a62 	vmov.f32	s12, s5
 801d342:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d346:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d34a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d34e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d352:	eeb0 6a43 	vmov.f32	s12, s6
 801d356:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d35a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d35e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d362:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d366:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d36a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d36e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d372:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d376:	ee12 2a90 	vmov	r2, s5
 801d37a:	eef0 2a47 	vmov.f32	s5, s14
 801d37e:	fb92 f8f3 	sdiv	r8, r2, r3
 801d382:	ee13 2a10 	vmov	r2, s6
 801d386:	eeb0 3a67 	vmov.f32	s6, s15
 801d38a:	fb92 fef3 	sdiv	lr, r2, r3
 801d38e:	9b00      	ldr	r3, [sp, #0]
 801d390:	3b01      	subs	r3, #1
 801d392:	9300      	str	r3, [sp, #0]
 801d394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d396:	bf08      	it	eq
 801d398:	465b      	moveq	r3, fp
 801d39a:	e767      	b.n	801d26c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d39c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d3a0:	d423      	bmi.n	801d3ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d3a2:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801d3a6:	45cc      	cmp	ip, r9
 801d3a8:	dd1f      	ble.n	801d3ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d3aa:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d3ae:	d41c      	bmi.n	801d3ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d3b0:	68f1      	ldr	r1, [r6, #12]
 801d3b2:	4551      	cmp	r1, sl
 801d3b4:	dd19      	ble.n	801d3ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d3b6:	fa0f fc8c 	sxth.w	ip, ip
 801d3ba:	9901      	ldr	r1, [sp, #4]
 801d3bc:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801d3c0:	f81c c009 	ldrb.w	ip, [ip, r9]
 801d3c4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d3c8:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801d3cc:	eb07 090c 	add.w	r9, r7, ip
 801d3d0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801d3d4:	f804 a00c 	strb.w	sl, [r4, ip]
 801d3d8:	44a4      	add	ip, r4
 801d3da:	f899 a001 	ldrb.w	sl, [r9, #1]
 801d3de:	f88c a001 	strb.w	sl, [ip, #1]
 801d3e2:	f899 9002 	ldrb.w	r9, [r9, #2]
 801d3e6:	f88c 9002 	strb.w	r9, [ip, #2]
 801d3ea:	4440      	add	r0, r8
 801d3ec:	4472      	add	r2, lr
 801d3ee:	3501      	adds	r5, #1
 801d3f0:	e793      	b.n	801d31a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801d3f2:	b003      	add	sp, #12
 801d3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3fc:	b085      	sub	sp, #20
 801d3fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d402:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d404:	9202      	str	r2, [sp, #8]
 801d406:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801d40a:	6860      	ldr	r0, [r4, #4]
 801d40c:	9203      	str	r2, [sp, #12]
 801d40e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d412:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d416:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d41a:	fb00 2505 	mla	r5, r0, r5, r2
 801d41e:	6822      	ldr	r2, [r4, #0]
 801d420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d424:	4415      	add	r5, r2
 801d426:	f8dc 2000 	ldr.w	r2, [ip]
 801d42a:	9200      	str	r2, [sp, #0]
 801d42c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d430:	3204      	adds	r2, #4
 801d432:	9201      	str	r2, [sp, #4]
 801d434:	2900      	cmp	r1, #0
 801d436:	dc03      	bgt.n	801d440 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d438:	9a02      	ldr	r2, [sp, #8]
 801d43a:	2a00      	cmp	r2, #0
 801d43c:	f340 8127 	ble.w	801d68e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d442:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d446:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d44a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d44c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d450:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d454:	2b00      	cmp	r3, #0
 801d456:	dd0d      	ble.n	801d474 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d458:	1422      	asrs	r2, r4, #16
 801d45a:	d405      	bmi.n	801d468 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d45c:	4542      	cmp	r2, r8
 801d45e:	da03      	bge.n	801d468 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d460:	1402      	asrs	r2, r0, #16
 801d462:	d401      	bmi.n	801d468 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d464:	42ba      	cmp	r2, r7
 801d466:	db06      	blt.n	801d476 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d46a:	4474      	add	r4, lr
 801d46c:	3b01      	subs	r3, #1
 801d46e:	3503      	adds	r5, #3
 801d470:	4410      	add	r0, r2
 801d472:	e7ef      	b.n	801d454 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d474:	d075      	beq.n	801d562 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d476:	1e5a      	subs	r2, r3, #1
 801d478:	fb0e 4602 	mla	r6, lr, r2, r4
 801d47c:	1436      	asrs	r6, r6, #16
 801d47e:	d465      	bmi.n	801d54c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d480:	4546      	cmp	r6, r8
 801d482:	da63      	bge.n	801d54c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d484:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d486:	fb06 0202 	mla	r2, r6, r2, r0
 801d48a:	1412      	asrs	r2, r2, #16
 801d48c:	d45e      	bmi.n	801d54c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d48e:	42ba      	cmp	r2, r7
 801d490:	da5c      	bge.n	801d54c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d492:	1cef      	adds	r7, r5, #3
 801d494:	4699      	mov	r9, r3
 801d496:	f1b9 0f00 	cmp.w	r9, #0
 801d49a:	dd5d      	ble.n	801d558 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d49c:	1402      	asrs	r2, r0, #16
 801d49e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d4a2:	1426      	asrs	r6, r4, #16
 801d4a4:	4692      	mov	sl, r2
 801d4a6:	9a00      	ldr	r2, [sp, #0]
 801d4a8:	fb08 220a 	mla	r2, r8, sl, r2
 801d4ac:	5d92      	ldrb	r2, [r2, r6]
 801d4ae:	9e01      	ldr	r6, [sp, #4]
 801d4b0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801d4b4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801d4b8:	d041      	beq.n	801d53e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d4ba:	9a03      	ldr	r2, [sp, #12]
 801d4bc:	fa5f fb86 	uxtb.w	fp, r6
 801d4c0:	fb02 f808 	mul.w	r8, r2, r8
 801d4c4:	f108 0201 	add.w	r2, r8, #1
 801d4c8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801d4cc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801d4d0:	1212      	asrs	r2, r2, #8
 801d4d2:	fa1f fa82 	uxth.w	sl, r2
 801d4d6:	43d2      	mvns	r2, r2
 801d4d8:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4dc:	b2d2      	uxtb	r2, r2
 801d4de:	fb08 b802 	mla	r8, r8, r2, fp
 801d4e2:	fa1f f888 	uxth.w	r8, r8
 801d4e6:	f108 0b01 	add.w	fp, r8, #1
 801d4ea:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d4ee:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d4f2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d4f6:	fb1b fb0a 	smulbb	fp, fp, sl
 801d4fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d4fe:	fb16 fa0a 	smulbb	sl, r6, sl
 801d502:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d506:	f807 8c03 	strb.w	r8, [r7, #-3]
 801d50a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801d50e:	fb06 aa02 	mla	sl, r6, r2, sl
 801d512:	fb08 b802 	mla	r8, r8, r2, fp
 801d516:	fa1f fa8a 	uxth.w	sl, sl
 801d51a:	fa1f f888 	uxth.w	r8, r8
 801d51e:	f10a 0601 	add.w	r6, sl, #1
 801d522:	f108 0b01 	add.w	fp, r8, #1
 801d526:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d52a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d52e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d532:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d536:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d53a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801d53e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d540:	4474      	add	r4, lr
 801d542:	3703      	adds	r7, #3
 801d544:	f109 39ff 	add.w	r9, r9, #4294967295
 801d548:	4410      	add	r0, r2
 801d54a:	e7a4      	b.n	801d496 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d54c:	f04f 0800 	mov.w	r8, #0
 801d550:	eba3 0208 	sub.w	r2, r3, r8
 801d554:	2a00      	cmp	r2, #0
 801d556:	dc3b      	bgt.n	801d5d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801d558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d55c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d560:	441d      	add	r5, r3
 801d562:	2900      	cmp	r1, #0
 801d564:	f340 8093 	ble.w	801d68e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d568:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d56c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d56e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d572:	3901      	subs	r1, #1
 801d574:	eeb0 6a62 	vmov.f32	s12, s5
 801d578:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d57c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d580:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d584:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d588:	eeb0 6a43 	vmov.f32	s12, s6
 801d58c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d590:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d594:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d598:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d59c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d5a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d5a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d5a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d5ac:	ee12 2a90 	vmov	r2, s5
 801d5b0:	eef0 2a47 	vmov.f32	s5, s14
 801d5b4:	fb92 fef3 	sdiv	lr, r2, r3
 801d5b8:	ee13 2a10 	vmov	r2, s6
 801d5bc:	eeb0 3a67 	vmov.f32	s6, s15
 801d5c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5c4:	9a02      	ldr	r2, [sp, #8]
 801d5c6:	9312      	str	r3, [sp, #72]	; 0x48
 801d5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d5ca:	bf08      	it	eq
 801d5cc:	4613      	moveq	r3, r2
 801d5ce:	e731      	b.n	801d434 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d5d0:	1427      	asrs	r7, r4, #16
 801d5d2:	d456      	bmi.n	801d682 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d5d4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d5d8:	42be      	cmp	r6, r7
 801d5da:	dd52      	ble.n	801d682 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d5dc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d5e0:	d44f      	bmi.n	801d682 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d5e2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d5e6:	454a      	cmp	r2, r9
 801d5e8:	dd4b      	ble.n	801d682 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d5ea:	9a00      	ldr	r2, [sp, #0]
 801d5ec:	b236      	sxth	r6, r6
 801d5ee:	fb09 2606 	mla	r6, r9, r6, r2
 801d5f2:	5df2      	ldrb	r2, [r6, r7]
 801d5f4:	9e01      	ldr	r6, [sp, #4]
 801d5f6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801d5fa:	0e3a      	lsrs	r2, r7, #24
 801d5fc:	d041      	beq.n	801d682 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d5fe:	9e03      	ldr	r6, [sp, #12]
 801d600:	fa5f fb87 	uxtb.w	fp, r7
 801d604:	4372      	muls	r2, r6
 801d606:	1c56      	adds	r6, r2, #1
 801d608:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d60c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d610:	1212      	asrs	r2, r2, #8
 801d612:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d616:	fa1f fa82 	uxth.w	sl, r2
 801d61a:	43d2      	mvns	r2, r2
 801d61c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d620:	b2d2      	uxtb	r2, r2
 801d622:	fb09 b902 	mla	r9, r9, r2, fp
 801d626:	fa1f f989 	uxth.w	r9, r9
 801d62a:	f109 0b01 	add.w	fp, r9, #1
 801d62e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d632:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d636:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d63a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d63e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d642:	fb17 fa0a 	smulbb	sl, r7, sl
 801d646:	f805 9006 	strb.w	r9, [r5, r6]
 801d64a:	442e      	add	r6, r5
 801d64c:	78b7      	ldrb	r7, [r6, #2]
 801d64e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d652:	fb07 aa02 	mla	sl, r7, r2, sl
 801d656:	fb09 b902 	mla	r9, r9, r2, fp
 801d65a:	fa1f fa8a 	uxth.w	sl, sl
 801d65e:	fa1f f989 	uxth.w	r9, r9
 801d662:	f10a 0701 	add.w	r7, sl, #1
 801d666:	f109 0b01 	add.w	fp, r9, #1
 801d66a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d66e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d672:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d676:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d67a:	f886 a002 	strb.w	sl, [r6, #2]
 801d67e:	f886 9001 	strb.w	r9, [r6, #1]
 801d682:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d684:	4474      	add	r4, lr
 801d686:	f108 0801 	add.w	r8, r8, #1
 801d68a:	4410      	add	r0, r2
 801d68c:	e760      	b.n	801d550 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801d68e:	b005      	add	sp, #20
 801d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d694 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d698:	b085      	sub	sp, #20
 801d69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d69e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d6a0:	9203      	str	r2, [sp, #12]
 801d6a2:	6868      	ldr	r0, [r5, #4]
 801d6a4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d6a8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801d6ac:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d6b0:	fb00 2404 	mla	r4, r0, r4, r2
 801d6b4:	682a      	ldr	r2, [r5, #0]
 801d6b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d6ba:	4414      	add	r4, r2
 801d6bc:	f8dc 2000 	ldr.w	r2, [ip]
 801d6c0:	9201      	str	r2, [sp, #4]
 801d6c2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d6c6:	3204      	adds	r2, #4
 801d6c8:	9202      	str	r2, [sp, #8]
 801d6ca:	2900      	cmp	r1, #0
 801d6cc:	dc03      	bgt.n	801d6d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d6ce:	9a03      	ldr	r2, [sp, #12]
 801d6d0:	2a00      	cmp	r2, #0
 801d6d2:	f340 8137 	ble.w	801d944 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d6d8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d6dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d6e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d6e2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d6e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	dd0d      	ble.n	801d70a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d6ee:	1405      	asrs	r5, r0, #16
 801d6f0:	d405      	bmi.n	801d6fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d6f2:	4545      	cmp	r5, r8
 801d6f4:	da03      	bge.n	801d6fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d6f6:	1415      	asrs	r5, r2, #16
 801d6f8:	d401      	bmi.n	801d6fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d6fa:	42bd      	cmp	r5, r7
 801d6fc:	db06      	blt.n	801d70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d6fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d700:	4470      	add	r0, lr
 801d702:	3b01      	subs	r3, #1
 801d704:	3403      	adds	r4, #3
 801d706:	442a      	add	r2, r5
 801d708:	e7ef      	b.n	801d6ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d70a:	d070      	beq.n	801d7ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d70c:	1e5d      	subs	r5, r3, #1
 801d70e:	fb0e 0605 	mla	r6, lr, r5, r0
 801d712:	1436      	asrs	r6, r6, #16
 801d714:	d462      	bmi.n	801d7dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d716:	4546      	cmp	r6, r8
 801d718:	da60      	bge.n	801d7dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d71a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d71c:	fb06 2505 	mla	r5, r6, r5, r2
 801d720:	142d      	asrs	r5, r5, #16
 801d722:	d45b      	bmi.n	801d7dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d724:	42bd      	cmp	r5, r7
 801d726:	da59      	bge.n	801d7dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801d728:	1ce5      	adds	r5, r4, #3
 801d72a:	469a      	mov	sl, r3
 801d72c:	f1ba 0f00 	cmp.w	sl, #0
 801d730:	dd58      	ble.n	801d7e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801d732:	1416      	asrs	r6, r2, #16
 801d734:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d738:	1407      	asrs	r7, r0, #16
 801d73a:	46b1      	mov	r9, r6
 801d73c:	9e01      	ldr	r6, [sp, #4]
 801d73e:	fb08 6609 	mla	r6, r8, r9, r6
 801d742:	5df6      	ldrb	r6, [r6, r7]
 801d744:	9f02      	ldr	r7, [sp, #8]
 801d746:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801d74a:	0e37      	lsrs	r7, r6, #24
 801d74c:	2fff      	cmp	r7, #255	; 0xff
 801d74e:	f000 80f0 	beq.w	801d932 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d752:	fa5f f887 	uxtb.w	r8, r7
 801d756:	b3d7      	cbz	r7, 801d7ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d758:	fa1f f788 	uxth.w	r7, r8
 801d75c:	ea6f 0808 	mvn.w	r8, r8
 801d760:	fa5f fb86 	uxtb.w	fp, r6
 801d764:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801d768:	fa5f f888 	uxtb.w	r8, r8
 801d76c:	fb1b fb07 	smulbb	fp, fp, r7
 801d770:	fb09 b908 	mla	r9, r9, r8, fp
 801d774:	fa1f f989 	uxth.w	r9, r9
 801d778:	f109 0b01 	add.w	fp, r9, #1
 801d77c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d780:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801d784:	fb1b fb08 	smulbb	fp, fp, r8
 801d788:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d78c:	f805 9c03 	strb.w	r9, [r5, #-3]
 801d790:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801d794:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d798:	fb09 b907 	mla	r9, r9, r7, fp
 801d79c:	fa1f f989 	uxth.w	r9, r9
 801d7a0:	f109 0b01 	add.w	fp, r9, #1
 801d7a4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d7a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7ac:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d7b0:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801d7b4:	fb19 f808 	smulbb	r8, r9, r8
 801d7b8:	fb06 8607 	mla	r6, r6, r7, r8
 801d7bc:	b2b6      	uxth	r6, r6
 801d7be:	f106 0801 	add.w	r8, r6, #1
 801d7c2:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801d7c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d7ca:	f805 8c01 	strb.w	r8, [r5, #-1]
 801d7ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d7d0:	4470      	add	r0, lr
 801d7d2:	3503      	adds	r5, #3
 801d7d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d7d8:	4432      	add	r2, r6
 801d7da:	e7a7      	b.n	801d72c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d7dc:	2600      	movs	r6, #0
 801d7de:	1b9d      	subs	r5, r3, r6
 801d7e0:	2d00      	cmp	r5, #0
 801d7e2:	dc3b      	bgt.n	801d85c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d7e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d7e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7ec:	441c      	add	r4, r3
 801d7ee:	2900      	cmp	r1, #0
 801d7f0:	f340 80a8 	ble.w	801d944 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d7f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7fe:	3901      	subs	r1, #1
 801d800:	eeb0 6a62 	vmov.f32	s12, s5
 801d804:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d808:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d80c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d810:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d814:	eeb0 6a43 	vmov.f32	s12, s6
 801d818:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d81c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d820:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d824:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d828:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d82c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d830:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d834:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d838:	ee12 2a90 	vmov	r2, s5
 801d83c:	eef0 2a47 	vmov.f32	s5, s14
 801d840:	fb92 fef3 	sdiv	lr, r2, r3
 801d844:	ee13 2a10 	vmov	r2, s6
 801d848:	eeb0 3a67 	vmov.f32	s6, s15
 801d84c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d850:	9a03      	ldr	r2, [sp, #12]
 801d852:	9312      	str	r3, [sp, #72]	; 0x48
 801d854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d856:	bf08      	it	eq
 801d858:	4613      	moveq	r3, r2
 801d85a:	e736      	b.n	801d6ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d85c:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d860:	d457      	bmi.n	801d912 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d862:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801d866:	4547      	cmp	r7, r8
 801d868:	dd53      	ble.n	801d912 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d86a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d86e:	d450      	bmi.n	801d912 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d870:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801d874:	454d      	cmp	r5, r9
 801d876:	dd4c      	ble.n	801d912 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d878:	9d01      	ldr	r5, [sp, #4]
 801d87a:	b23f      	sxth	r7, r7
 801d87c:	fb09 5707 	mla	r7, r9, r7, r5
 801d880:	f817 5008 	ldrb.w	r5, [r7, r8]
 801d884:	9f02      	ldr	r7, [sp, #8]
 801d886:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801d88a:	0e2f      	lsrs	r7, r5, #24
 801d88c:	2fff      	cmp	r7, #255	; 0xff
 801d88e:	d045      	beq.n	801d91c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d890:	fa5f f987 	uxtb.w	r9, r7
 801d894:	b3ef      	cbz	r7, 801d912 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d896:	fa1f f889 	uxth.w	r8, r9
 801d89a:	ea6f 0909 	mvn.w	r9, r9
 801d89e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d8a2:	fa5f fb85 	uxtb.w	fp, r5
 801d8a6:	f814 a007 	ldrb.w	sl, [r4, r7]
 801d8aa:	fa5f f989 	uxtb.w	r9, r9
 801d8ae:	fb1b fb08 	smulbb	fp, fp, r8
 801d8b2:	fb0a ba09 	mla	sl, sl, r9, fp
 801d8b6:	fa1f fa8a 	uxth.w	sl, sl
 801d8ba:	f10a 0b01 	add.w	fp, sl, #1
 801d8be:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d8c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d8c6:	f804 a007 	strb.w	sl, [r4, r7]
 801d8ca:	4427      	add	r7, r4
 801d8cc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d8d0:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801d8d4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d8d8:	fb1b fb09 	smulbb	fp, fp, r9
 801d8dc:	fb0a ba08 	mla	sl, sl, r8, fp
 801d8e0:	fa1f fa8a 	uxth.w	sl, sl
 801d8e4:	f10a 0b01 	add.w	fp, sl, #1
 801d8e8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801d8ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d8f0:	f887 a001 	strb.w	sl, [r7, #1]
 801d8f4:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d8f8:	fb1a f909 	smulbb	r9, sl, r9
 801d8fc:	fb05 9508 	mla	r5, r5, r8, r9
 801d900:	b2ad      	uxth	r5, r5
 801d902:	f105 0901 	add.w	r9, r5, #1
 801d906:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801d90a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d90e:	f887 9002 	strb.w	r9, [r7, #2]
 801d912:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d914:	4470      	add	r0, lr
 801d916:	3601      	adds	r6, #1
 801d918:	442a      	add	r2, r5
 801d91a:	e760      	b.n	801d7de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d91c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801d920:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801d924:	55e5      	strb	r5, [r4, r7]
 801d926:	4427      	add	r7, r4
 801d928:	0c2d      	lsrs	r5, r5, #16
 801d92a:	f887 8001 	strb.w	r8, [r7, #1]
 801d92e:	70bd      	strb	r5, [r7, #2]
 801d930:	e7ef      	b.n	801d912 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801d932:	0a37      	lsrs	r7, r6, #8
 801d934:	f805 6c03 	strb.w	r6, [r5, #-3]
 801d938:	0c36      	lsrs	r6, r6, #16
 801d93a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d93e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801d942:	e744      	b.n	801d7ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d944:	b005      	add	sp, #20
 801d946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d94a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d94a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d94e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d950:	9201      	str	r2, [sp, #4]
 801d952:	6870      	ldr	r0, [r6, #4]
 801d954:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801d958:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d95c:	fa1f fe85 	uxth.w	lr, r5
 801d960:	43ed      	mvns	r5, r5
 801d962:	f8dc 8000 	ldr.w	r8, [ip]
 801d966:	b2ed      	uxtb	r5, r5
 801d968:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801d96c:	fb00 2404 	mla	r4, r0, r4, r2
 801d970:	6832      	ldr	r2, [r6, #0]
 801d972:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d976:	4414      	add	r4, r2
 801d978:	2900      	cmp	r1, #0
 801d97a:	dc03      	bgt.n	801d984 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d97c:	9a01      	ldr	r2, [sp, #4]
 801d97e:	2a00      	cmp	r2, #0
 801d980:	f340 810d 	ble.w	801db9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d986:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801d98a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d98e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d990:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801d994:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d998:	2b00      	cmp	r3, #0
 801d99a:	dd0e      	ble.n	801d9ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d99c:	1406      	asrs	r6, r0, #16
 801d99e:	d405      	bmi.n	801d9ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d9a0:	4556      	cmp	r6, sl
 801d9a2:	da03      	bge.n	801d9ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d9a4:	1416      	asrs	r6, r2, #16
 801d9a6:	d401      	bmi.n	801d9ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d9a8:	454e      	cmp	r6, r9
 801d9aa:	db07      	blt.n	801d9bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d9ac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d9ae:	3b01      	subs	r3, #1
 801d9b0:	3403      	adds	r4, #3
 801d9b2:	4430      	add	r0, r6
 801d9b4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d9b6:	4432      	add	r2, r6
 801d9b8:	e7ee      	b.n	801d998 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d9ba:	d060      	beq.n	801da7e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801d9bc:	1e5e      	subs	r6, r3, #1
 801d9be:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d9c0:	fb07 0706 	mla	r7, r7, r6, r0
 801d9c4:	143f      	asrs	r7, r7, #16
 801d9c6:	d451      	bmi.n	801da6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d9c8:	4557      	cmp	r7, sl
 801d9ca:	da4f      	bge.n	801da6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d9cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d9ce:	fb07 2606 	mla	r6, r7, r6, r2
 801d9d2:	1436      	asrs	r6, r6, #16
 801d9d4:	d44a      	bmi.n	801da6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d9d6:	454e      	cmp	r6, r9
 801d9d8:	da48      	bge.n	801da6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801d9da:	1ce6      	adds	r6, r4, #3
 801d9dc:	4699      	mov	r9, r3
 801d9de:	f1b9 0f00 	cmp.w	r9, #0
 801d9e2:	f106 0603 	add.w	r6, r6, #3
 801d9e6:	dd45      	ble.n	801da74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801d9e8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801d9ec:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d9f0:	1417      	asrs	r7, r2, #16
 801d9f2:	f109 39ff 	add.w	r9, r9, #4294967295
 801d9f6:	fb0b a707 	mla	r7, fp, r7, sl
 801d9fa:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d9fe:	fb1b fb05 	smulbb	fp, fp, r5
 801da02:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801da06:	eb08 0a07 	add.w	sl, r8, r7
 801da0a:	f818 7007 	ldrb.w	r7, [r8, r7]
 801da0e:	fb07 b70e 	mla	r7, r7, lr, fp
 801da12:	b2bf      	uxth	r7, r7
 801da14:	f107 0b01 	add.w	fp, r7, #1
 801da18:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801da1c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801da20:	fb1b fb05 	smulbb	fp, fp, r5
 801da24:	123f      	asrs	r7, r7, #8
 801da26:	f806 7c06 	strb.w	r7, [r6, #-6]
 801da2a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801da2e:	fb07 b70e 	mla	r7, r7, lr, fp
 801da32:	b2bf      	uxth	r7, r7
 801da34:	f107 0b01 	add.w	fp, r7, #1
 801da38:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801da3c:	123f      	asrs	r7, r7, #8
 801da3e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801da42:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801da46:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801da4a:	fb1a fa05 	smulbb	sl, sl, r5
 801da4e:	fb07 a70e 	mla	r7, r7, lr, sl
 801da52:	b2bf      	uxth	r7, r7
 801da54:	f107 0a01 	add.w	sl, r7, #1
 801da58:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801da5c:	123f      	asrs	r7, r7, #8
 801da5e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801da62:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801da64:	4438      	add	r0, r7
 801da66:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801da68:	443a      	add	r2, r7
 801da6a:	e7b8      	b.n	801d9de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801da6c:	2700      	movs	r7, #0
 801da6e:	1bde      	subs	r6, r3, r7
 801da70:	2e00      	cmp	r6, #0
 801da72:	dc3f      	bgt.n	801daf4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801da74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da7c:	441c      	add	r4, r3
 801da7e:	2900      	cmp	r1, #0
 801da80:	f340 808d 	ble.w	801db9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801da84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801da88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da8e:	3901      	subs	r1, #1
 801da90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da94:	eef0 6a62 	vmov.f32	s13, s5
 801da98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801daa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801daa4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801daa8:	eef0 6a43 	vmov.f32	s13, s6
 801daac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dab0:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801dab4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dab8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dabc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dac0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dac4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dac8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dacc:	ee12 2a90 	vmov	r2, s5
 801dad0:	eef0 2a47 	vmov.f32	s5, s14
 801dad4:	fb92 f3f3 	sdiv	r3, r2, r3
 801dad8:	ee13 2a10 	vmov	r2, s6
 801dadc:	930f      	str	r3, [sp, #60]	; 0x3c
 801dade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dae0:	eeb0 3a67 	vmov.f32	s6, s15
 801dae4:	fb92 f3f3 	sdiv	r3, r2, r3
 801dae8:	9a01      	ldr	r2, [sp, #4]
 801daea:	9310      	str	r3, [sp, #64]	; 0x40
 801daec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801daee:	bf08      	it	eq
 801daf0:	4613      	moveq	r3, r2
 801daf2:	e741      	b.n	801d978 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801daf4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801daf8:	d44b      	bmi.n	801db92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801dafa:	f8dc b008 	ldr.w	fp, [ip, #8]
 801dafe:	45cb      	cmp	fp, r9
 801db00:	dd47      	ble.n	801db92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801db02:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801db06:	d444      	bmi.n	801db92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801db08:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801db0c:	4556      	cmp	r6, sl
 801db0e:	dd40      	ble.n	801db92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801db10:	fa0f f68b 	sxth.w	r6, fp
 801db14:	fb0a 9906 	mla	r9, sl, r6, r9
 801db18:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801db1c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801db20:	f814 b006 	ldrb.w	fp, [r4, r6]
 801db24:	fb1b fb05 	smulbb	fp, fp, r5
 801db28:	eb08 0a09 	add.w	sl, r8, r9
 801db2c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801db30:	fb09 b90e 	mla	r9, r9, lr, fp
 801db34:	fa1f f989 	uxth.w	r9, r9
 801db38:	f109 0b01 	add.w	fp, r9, #1
 801db3c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801db40:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db44:	f804 9006 	strb.w	r9, [r4, r6]
 801db48:	4426      	add	r6, r4
 801db4a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801db4e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801db52:	fb1b fb05 	smulbb	fp, fp, r5
 801db56:	fb09 b90e 	mla	r9, r9, lr, fp
 801db5a:	fa1f f989 	uxth.w	r9, r9
 801db5e:	f109 0b01 	add.w	fp, r9, #1
 801db62:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801db66:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db6a:	f886 9001 	strb.w	r9, [r6, #1]
 801db6e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801db72:	f896 a002 	ldrb.w	sl, [r6, #2]
 801db76:	fb1a fa05 	smulbb	sl, sl, r5
 801db7a:	fb09 a90e 	mla	r9, r9, lr, sl
 801db7e:	fa1f f989 	uxth.w	r9, r9
 801db82:	f109 0a01 	add.w	sl, r9, #1
 801db86:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801db8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db8e:	f886 9002 	strb.w	r9, [r6, #2]
 801db92:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801db94:	3701      	adds	r7, #1
 801db96:	4430      	add	r0, r6
 801db98:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801db9a:	4432      	add	r2, r6
 801db9c:	e767      	b.n	801da6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801db9e:	b003      	add	sp, #12
 801dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dba4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dba8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dbaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dbae:	9201      	str	r2, [sp, #4]
 801dbb0:	6868      	ldr	r0, [r5, #4]
 801dbb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801dbb4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801dbb8:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801dbbc:	fb00 2404 	mla	r4, r0, r4, r2
 801dbc0:	682a      	ldr	r2, [r5, #0]
 801dbc2:	f8d7 8000 	ldr.w	r8, [r7]
 801dbc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dbca:	4414      	add	r4, r2
 801dbcc:	2900      	cmp	r1, #0
 801dbce:	dc03      	bgt.n	801dbd8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801dbd0:	9a01      	ldr	r2, [sp, #4]
 801dbd2:	2a00      	cmp	r2, #0
 801dbd4:	f340 80af 	ble.w	801dd36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801dbd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dbda:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801dbde:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dbe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dbe4:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801dbe8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	dd0c      	ble.n	801dc0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801dbf0:	1405      	asrs	r5, r0, #16
 801dbf2:	d405      	bmi.n	801dc00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dbf4:	4555      	cmp	r5, sl
 801dbf6:	da03      	bge.n	801dc00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dbf8:	1415      	asrs	r5, r2, #16
 801dbfa:	d401      	bmi.n	801dc00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801dbfc:	454d      	cmp	r5, r9
 801dbfe:	db05      	blt.n	801dc0c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dc00:	4470      	add	r0, lr
 801dc02:	4462      	add	r2, ip
 801dc04:	3b01      	subs	r3, #1
 801dc06:	3403      	adds	r4, #3
 801dc08:	e7f0      	b.n	801dbec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801dc0a:	d038      	beq.n	801dc7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801dc0c:	1e5d      	subs	r5, r3, #1
 801dc0e:	fb0e 0605 	mla	r6, lr, r5, r0
 801dc12:	1436      	asrs	r6, r6, #16
 801dc14:	d42a      	bmi.n	801dc6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801dc16:	4556      	cmp	r6, sl
 801dc18:	da28      	bge.n	801dc6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801dc1a:	fb0c 2505 	mla	r5, ip, r5, r2
 801dc1e:	142d      	asrs	r5, r5, #16
 801dc20:	d424      	bmi.n	801dc6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801dc22:	454d      	cmp	r5, r9
 801dc24:	da22      	bge.n	801dc6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801dc26:	1ce6      	adds	r6, r4, #3
 801dc28:	4699      	mov	r9, r3
 801dc2a:	f1b9 0f00 	cmp.w	r9, #0
 801dc2e:	f106 0603 	add.w	r6, r6, #3
 801dc32:	dd1f      	ble.n	801dc74 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801dc34:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801dc38:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801dc3c:	1415      	asrs	r5, r2, #16
 801dc3e:	4470      	add	r0, lr
 801dc40:	4462      	add	r2, ip
 801dc42:	f109 39ff 	add.w	r9, r9, #4294967295
 801dc46:	fb0b a505 	mla	r5, fp, r5, sl
 801dc4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc4e:	eb08 0a05 	add.w	sl, r8, r5
 801dc52:	f818 5005 	ldrb.w	r5, [r8, r5]
 801dc56:	f806 5c06 	strb.w	r5, [r6, #-6]
 801dc5a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801dc5e:	f806 5c05 	strb.w	r5, [r6, #-5]
 801dc62:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801dc66:	f806 5c04 	strb.w	r5, [r6, #-4]
 801dc6a:	e7de      	b.n	801dc2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801dc6c:	2600      	movs	r6, #0
 801dc6e:	1b9d      	subs	r5, r3, r6
 801dc70:	2d00      	cmp	r5, #0
 801dc72:	dc38      	bgt.n	801dce6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801dc74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc7c:	441c      	add	r4, r3
 801dc7e:	2900      	cmp	r1, #0
 801dc80:	dd59      	ble.n	801dd36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801dc82:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc8c:	3901      	subs	r1, #1
 801dc8e:	eeb0 6a62 	vmov.f32	s12, s5
 801dc92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc9e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801dca2:	eeb0 6a43 	vmov.f32	s12, s6
 801dca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dcaa:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801dcae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dcb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dcb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dcba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dcbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dcc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dcc6:	ee12 2a90 	vmov	r2, s5
 801dcca:	eef0 2a47 	vmov.f32	s5, s14
 801dcce:	fb92 fef3 	sdiv	lr, r2, r3
 801dcd2:	ee13 2a10 	vmov	r2, s6
 801dcd6:	eeb0 3a67 	vmov.f32	s6, s15
 801dcda:	fb92 fcf3 	sdiv	ip, r2, r3
 801dcde:	9a01      	ldr	r2, [sp, #4]
 801dce0:	bf08      	it	eq
 801dce2:	4613      	moveq	r3, r2
 801dce4:	e772      	b.n	801dbcc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801dce6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801dcea:	d420      	bmi.n	801dd2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801dcec:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801dcf0:	45cb      	cmp	fp, r9
 801dcf2:	dd1c      	ble.n	801dd2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801dcf4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801dcf8:	d419      	bmi.n	801dd2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801dcfa:	68fd      	ldr	r5, [r7, #12]
 801dcfc:	4555      	cmp	r5, sl
 801dcfe:	dd16      	ble.n	801dd2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801dd00:	fa0f f58b 	sxth.w	r5, fp
 801dd04:	fb0a 9505 	mla	r5, sl, r5, r9
 801dd08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd0c:	f818 9005 	ldrb.w	r9, [r8, r5]
 801dd10:	eb08 0b05 	add.w	fp, r8, r5
 801dd14:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801dd18:	f804 9005 	strb.w	r9, [r4, r5]
 801dd1c:	4425      	add	r5, r4
 801dd1e:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801dd22:	f885 9001 	strb.w	r9, [r5, #1]
 801dd26:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801dd2a:	f885 9002 	strb.w	r9, [r5, #2]
 801dd2e:	4470      	add	r0, lr
 801dd30:	4462      	add	r2, ip
 801dd32:	3601      	adds	r6, #1
 801dd34:	e79b      	b.n	801dc6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801dd36:	b003      	add	sp, #12
 801dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dd3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd40:	b085      	sub	sp, #20
 801dd42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dd48:	9202      	str	r2, [sp, #8]
 801dd4a:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801dd4e:	6860      	ldr	r0, [r4, #4]
 801dd50:	9203      	str	r2, [sp, #12]
 801dd52:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801dd56:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801dd5a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801dd5e:	fb00 2505 	mla	r5, r0, r5, r2
 801dd62:	6822      	ldr	r2, [r4, #0]
 801dd64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd68:	4415      	add	r5, r2
 801dd6a:	f8dc 2000 	ldr.w	r2, [ip]
 801dd6e:	9201      	str	r2, [sp, #4]
 801dd70:	2900      	cmp	r1, #0
 801dd72:	dc03      	bgt.n	801dd7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801dd74:	9a02      	ldr	r2, [sp, #8]
 801dd76:	2a00      	cmp	r2, #0
 801dd78:	f340 8122 	ble.w	801dfc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801dd7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dd7e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801dd82:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801dd86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dd88:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801dd8c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	dd0d      	ble.n	801ddb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801dd94:	1422      	asrs	r2, r4, #16
 801dd96:	d405      	bmi.n	801dda4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dd98:	4542      	cmp	r2, r8
 801dd9a:	da03      	bge.n	801dda4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dd9c:	1402      	asrs	r2, r0, #16
 801dd9e:	d401      	bmi.n	801dda4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801dda0:	42ba      	cmp	r2, r7
 801dda2:	db06      	blt.n	801ddb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dda4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dda6:	4474      	add	r4, lr
 801dda8:	3b01      	subs	r3, #1
 801ddaa:	3503      	adds	r5, #3
 801ddac:	4410      	add	r0, r2
 801ddae:	e7ef      	b.n	801dd90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ddb0:	d072      	beq.n	801de98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801ddb2:	1e5a      	subs	r2, r3, #1
 801ddb4:	fb0e 4602 	mla	r6, lr, r2, r4
 801ddb8:	1436      	asrs	r6, r6, #16
 801ddba:	d462      	bmi.n	801de82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ddbc:	4546      	cmp	r6, r8
 801ddbe:	da60      	bge.n	801de82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ddc0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ddc2:	fb06 0202 	mla	r2, r6, r2, r0
 801ddc6:	1412      	asrs	r2, r2, #16
 801ddc8:	d45b      	bmi.n	801de82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ddca:	42ba      	cmp	r2, r7
 801ddcc:	da59      	bge.n	801de82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ddce:	1cef      	adds	r7, r5, #3
 801ddd0:	4699      	mov	r9, r3
 801ddd2:	f1b9 0f00 	cmp.w	r9, #0
 801ddd6:	dd5a      	ble.n	801de8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ddd8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801dddc:	1426      	asrs	r6, r4, #16
 801ddde:	1402      	asrs	r2, r0, #16
 801dde0:	fb08 6202 	mla	r2, r8, r2, r6
 801dde4:	9e01      	ldr	r6, [sp, #4]
 801dde6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ddea:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ddee:	d041      	beq.n	801de74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801ddf0:	9a03      	ldr	r2, [sp, #12]
 801ddf2:	fa5f fb86 	uxtb.w	fp, r6
 801ddf6:	fb02 f808 	mul.w	r8, r2, r8
 801ddfa:	f108 0201 	add.w	r2, r8, #1
 801ddfe:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801de02:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801de06:	1212      	asrs	r2, r2, #8
 801de08:	fa1f fa82 	uxth.w	sl, r2
 801de0c:	43d2      	mvns	r2, r2
 801de0e:	fb1b fb0a 	smulbb	fp, fp, sl
 801de12:	b2d2      	uxtb	r2, r2
 801de14:	fb08 b802 	mla	r8, r8, r2, fp
 801de18:	fa1f f888 	uxth.w	r8, r8
 801de1c:	f108 0b01 	add.w	fp, r8, #1
 801de20:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801de24:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801de28:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801de2c:	fb1b fb0a 	smulbb	fp, fp, sl
 801de30:	ea4f 2828 	mov.w	r8, r8, asr #8
 801de34:	fb16 fa0a 	smulbb	sl, r6, sl
 801de38:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801de3c:	f807 8c03 	strb.w	r8, [r7, #-3]
 801de40:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801de44:	fb06 aa02 	mla	sl, r6, r2, sl
 801de48:	fb08 b802 	mla	r8, r8, r2, fp
 801de4c:	fa1f fa8a 	uxth.w	sl, sl
 801de50:	fa1f f888 	uxth.w	r8, r8
 801de54:	f10a 0601 	add.w	r6, sl, #1
 801de58:	f108 0b01 	add.w	fp, r8, #1
 801de5c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801de60:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801de64:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801de68:	ea4f 2828 	mov.w	r8, r8, asr #8
 801de6c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801de70:	f807 8c02 	strb.w	r8, [r7, #-2]
 801de74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801de76:	4474      	add	r4, lr
 801de78:	3703      	adds	r7, #3
 801de7a:	f109 39ff 	add.w	r9, r9, #4294967295
 801de7e:	4410      	add	r0, r2
 801de80:	e7a7      	b.n	801ddd2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801de82:	f04f 0800 	mov.w	r8, #0
 801de86:	eba3 0208 	sub.w	r2, r3, r8
 801de8a:	2a00      	cmp	r2, #0
 801de8c:	dc3b      	bgt.n	801df06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801de8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de96:	441d      	add	r5, r3
 801de98:	2900      	cmp	r1, #0
 801de9a:	f340 8091 	ble.w	801dfc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801de9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dea4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dea8:	3901      	subs	r1, #1
 801deaa:	eeb0 6a62 	vmov.f32	s12, s5
 801deae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801deb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801deb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801deba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801debe:	eeb0 6a43 	vmov.f32	s12, s6
 801dec2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dec6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801deca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dece:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ded2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ded6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801deda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dede:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dee2:	ee12 2a90 	vmov	r2, s5
 801dee6:	eef0 2a47 	vmov.f32	s5, s14
 801deea:	fb92 fef3 	sdiv	lr, r2, r3
 801deee:	ee13 2a10 	vmov	r2, s6
 801def2:	eeb0 3a67 	vmov.f32	s6, s15
 801def6:	fb92 f3f3 	sdiv	r3, r2, r3
 801defa:	9a02      	ldr	r2, [sp, #8]
 801defc:	9312      	str	r3, [sp, #72]	; 0x48
 801defe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df00:	bf08      	it	eq
 801df02:	4613      	moveq	r3, r2
 801df04:	e734      	b.n	801dd70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801df06:	1427      	asrs	r7, r4, #16
 801df08:	d454      	bmi.n	801dfb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801df0a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801df0e:	42be      	cmp	r6, r7
 801df10:	dd50      	ble.n	801dfb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801df12:	ea5f 4920 	movs.w	r9, r0, asr #16
 801df16:	d44d      	bmi.n	801dfb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801df18:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801df1c:	454a      	cmp	r2, r9
 801df1e:	dd49      	ble.n	801dfb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801df20:	b236      	sxth	r6, r6
 801df22:	9a01      	ldr	r2, [sp, #4]
 801df24:	fb09 7606 	mla	r6, r9, r6, r7
 801df28:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801df2c:	0e3a      	lsrs	r2, r7, #24
 801df2e:	d041      	beq.n	801dfb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801df30:	9e03      	ldr	r6, [sp, #12]
 801df32:	fa5f fb87 	uxtb.w	fp, r7
 801df36:	4372      	muls	r2, r6
 801df38:	1c56      	adds	r6, r2, #1
 801df3a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801df3e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801df42:	1212      	asrs	r2, r2, #8
 801df44:	f815 9006 	ldrb.w	r9, [r5, r6]
 801df48:	fa1f fa82 	uxth.w	sl, r2
 801df4c:	43d2      	mvns	r2, r2
 801df4e:	fb1b fb0a 	smulbb	fp, fp, sl
 801df52:	b2d2      	uxtb	r2, r2
 801df54:	fb09 b902 	mla	r9, r9, r2, fp
 801df58:	fa1f f989 	uxth.w	r9, r9
 801df5c:	f109 0b01 	add.w	fp, r9, #1
 801df60:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801df64:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801df68:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801df6c:	fb1b fb0a 	smulbb	fp, fp, sl
 801df70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df74:	fb17 fa0a 	smulbb	sl, r7, sl
 801df78:	f805 9006 	strb.w	r9, [r5, r6]
 801df7c:	442e      	add	r6, r5
 801df7e:	78b7      	ldrb	r7, [r6, #2]
 801df80:	f896 9001 	ldrb.w	r9, [r6, #1]
 801df84:	fb07 aa02 	mla	sl, r7, r2, sl
 801df88:	fb09 b902 	mla	r9, r9, r2, fp
 801df8c:	fa1f fa8a 	uxth.w	sl, sl
 801df90:	fa1f f989 	uxth.w	r9, r9
 801df94:	f10a 0701 	add.w	r7, sl, #1
 801df98:	f109 0b01 	add.w	fp, r9, #1
 801df9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dfa0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dfa4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dfa8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dfac:	f886 a002 	strb.w	sl, [r6, #2]
 801dfb0:	f886 9001 	strb.w	r9, [r6, #1]
 801dfb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dfb6:	4474      	add	r4, lr
 801dfb8:	f108 0801 	add.w	r8, r8, #1
 801dfbc:	4410      	add	r0, r2
 801dfbe:	e762      	b.n	801de86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801dfc0:	b005      	add	sp, #20
 801dfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dfc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dfc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dfcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dfd0:	9201      	str	r2, [sp, #4]
 801dfd2:	6860      	ldr	r0, [r4, #4]
 801dfd4:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801dfd8:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801dfdc:	fb00 2505 	mla	r5, r0, r5, r2
 801dfe0:	6822      	ldr	r2, [r4, #0]
 801dfe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dfe6:	4415      	add	r5, r2
 801dfe8:	f8dc 2000 	ldr.w	r2, [ip]
 801dfec:	9200      	str	r2, [sp, #0]
 801dfee:	2900      	cmp	r1, #0
 801dff0:	dc03      	bgt.n	801dffa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801dff2:	9a01      	ldr	r2, [sp, #4]
 801dff4:	2a00      	cmp	r2, #0
 801dff6:	f340 812b 	ble.w	801e250 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801dffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dffc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e000:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e004:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e006:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e00a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e00e:	2b00      	cmp	r3, #0
 801e010:	dd0e      	ble.n	801e030 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e012:	1422      	asrs	r2, r4, #16
 801e014:	d405      	bmi.n	801e022 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e016:	4572      	cmp	r2, lr
 801e018:	da03      	bge.n	801e022 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e01a:	1402      	asrs	r2, r0, #16
 801e01c:	d401      	bmi.n	801e022 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e01e:	42ba      	cmp	r2, r7
 801e020:	db07      	blt.n	801e032 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e024:	3b01      	subs	r3, #1
 801e026:	3503      	adds	r5, #3
 801e028:	4414      	add	r4, r2
 801e02a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e02c:	4410      	add	r0, r2
 801e02e:	e7ee      	b.n	801e00e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e030:	d06f      	beq.n	801e112 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e032:	1e5a      	subs	r2, r3, #1
 801e034:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e036:	fb06 4602 	mla	r6, r6, r2, r4
 801e03a:	1436      	asrs	r6, r6, #16
 801e03c:	d45e      	bmi.n	801e0fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e03e:	4576      	cmp	r6, lr
 801e040:	da5c      	bge.n	801e0fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e042:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e044:	fb06 0202 	mla	r2, r6, r2, r0
 801e048:	1412      	asrs	r2, r2, #16
 801e04a:	d457      	bmi.n	801e0fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e04c:	42ba      	cmp	r2, r7
 801e04e:	da55      	bge.n	801e0fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801e050:	1cee      	adds	r6, r5, #3
 801e052:	469a      	mov	sl, r3
 801e054:	f1ba 0f00 	cmp.w	sl, #0
 801e058:	dd56      	ble.n	801e108 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e05a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e05e:	1427      	asrs	r7, r4, #16
 801e060:	1402      	asrs	r2, r0, #16
 801e062:	fb0e 7202 	mla	r2, lr, r2, r7
 801e066:	9f00      	ldr	r7, [sp, #0]
 801e068:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801e06c:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801e070:	d03c      	beq.n	801e0ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e072:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e076:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e07a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e07e:	fa5f f28e 	uxtb.w	r2, lr
 801e082:	b2ff      	uxtb	r7, r7
 801e084:	f000 80dd 	beq.w	801e242 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e088:	fa1f f882 	uxth.w	r8, r2
 801e08c:	43d2      	mvns	r2, r2
 801e08e:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801e092:	fb17 f708 	smulbb	r7, r7, r8
 801e096:	b2d2      	uxtb	r2, r2
 801e098:	fb19 f908 	smulbb	r9, r9, r8
 801e09c:	fb0e 7702 	mla	r7, lr, r2, r7
 801e0a0:	fb1b f808 	smulbb	r8, fp, r8
 801e0a4:	b2bf      	uxth	r7, r7
 801e0a6:	f107 0e01 	add.w	lr, r7, #1
 801e0aa:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e0ae:	123f      	asrs	r7, r7, #8
 801e0b0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e0b4:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801e0b8:	fb07 9902 	mla	r9, r7, r2, r9
 801e0bc:	fa1f f989 	uxth.w	r9, r9
 801e0c0:	f109 0701 	add.w	r7, r9, #1
 801e0c4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e0c8:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e0cc:	fb07 8802 	mla	r8, r7, r2, r8
 801e0d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e0d4:	fa1f f888 	uxth.w	r8, r8
 801e0d8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e0dc:	f108 0201 	add.w	r2, r8, #1
 801e0e0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e0e4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e0e8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801e0ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0ee:	3603      	adds	r6, #3
 801e0f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e0f4:	4414      	add	r4, r2
 801e0f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e0f8:	4410      	add	r0, r2
 801e0fa:	e7ab      	b.n	801e054 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e0fc:	f04f 0e00 	mov.w	lr, #0
 801e100:	eba3 020e 	sub.w	r2, r3, lr
 801e104:	2a00      	cmp	r2, #0
 801e106:	dc3d      	bgt.n	801e184 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801e108:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e10c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e110:	441d      	add	r5, r3
 801e112:	2900      	cmp	r1, #0
 801e114:	f340 809c 	ble.w	801e250 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e118:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e11c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e11e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e122:	3901      	subs	r1, #1
 801e124:	eeb0 6a62 	vmov.f32	s12, s5
 801e128:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e12c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e130:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e134:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e138:	eeb0 6a43 	vmov.f32	s12, s6
 801e13c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e140:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e144:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e148:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e14c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e150:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e154:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e158:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e15c:	ee12 2a90 	vmov	r2, s5
 801e160:	eef0 2a47 	vmov.f32	s5, s14
 801e164:	fb92 f3f3 	sdiv	r3, r2, r3
 801e168:	ee13 2a10 	vmov	r2, s6
 801e16c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e170:	eeb0 3a67 	vmov.f32	s6, s15
 801e174:	fb92 f3f3 	sdiv	r3, r2, r3
 801e178:	9a01      	ldr	r2, [sp, #4]
 801e17a:	9310      	str	r3, [sp, #64]	; 0x40
 801e17c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e17e:	bf08      	it	eq
 801e180:	4613      	moveq	r3, r2
 801e182:	e734      	b.n	801dfee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801e184:	1427      	asrs	r7, r4, #16
 801e186:	d44d      	bmi.n	801e224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e188:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e18c:	42be      	cmp	r6, r7
 801e18e:	dd49      	ble.n	801e224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e190:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e194:	d446      	bmi.n	801e224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e196:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e19a:	4542      	cmp	r2, r8
 801e19c:	dd42      	ble.n	801e224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e19e:	b236      	sxth	r6, r6
 801e1a0:	9a00      	ldr	r2, [sp, #0]
 801e1a2:	fb08 7606 	mla	r6, r8, r6, r7
 801e1a6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801e1aa:	0e3a      	lsrs	r2, r7, #24
 801e1ac:	d03a      	beq.n	801e224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e1ae:	2aff      	cmp	r2, #255	; 0xff
 801e1b0:	b2d6      	uxtb	r6, r2
 801e1b2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e1b6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e1ba:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801e1be:	b2ff      	uxtb	r7, r7
 801e1c0:	d037      	beq.n	801e232 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801e1c2:	fa1f f986 	uxth.w	r9, r6
 801e1c6:	4472      	add	r2, lr
 801e1c8:	43f6      	mvns	r6, r6
 801e1ca:	f815 8002 	ldrb.w	r8, [r5, r2]
 801e1ce:	fb17 f709 	smulbb	r7, r7, r9
 801e1d2:	fb1a fa09 	smulbb	sl, sl, r9
 801e1d6:	b2f6      	uxtb	r6, r6
 801e1d8:	fb1b f909 	smulbb	r9, fp, r9
 801e1dc:	fb08 7706 	mla	r7, r8, r6, r7
 801e1e0:	b2bf      	uxth	r7, r7
 801e1e2:	f107 0801 	add.w	r8, r7, #1
 801e1e6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801e1ea:	123f      	asrs	r7, r7, #8
 801e1ec:	54af      	strb	r7, [r5, r2]
 801e1ee:	442a      	add	r2, r5
 801e1f0:	7857      	ldrb	r7, [r2, #1]
 801e1f2:	fb07 aa06 	mla	sl, r7, r6, sl
 801e1f6:	fa1f fa8a 	uxth.w	sl, sl
 801e1fa:	f10a 0701 	add.w	r7, sl, #1
 801e1fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e202:	7897      	ldrb	r7, [r2, #2]
 801e204:	fb07 9906 	mla	r9, r7, r6, r9
 801e208:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e20c:	fa1f f989 	uxth.w	r9, r9
 801e210:	f882 a001 	strb.w	sl, [r2, #1]
 801e214:	f109 0601 	add.w	r6, r9, #1
 801e218:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e21c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e220:	f882 9002 	strb.w	r9, [r2, #2]
 801e224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e226:	f10e 0e01 	add.w	lr, lr, #1
 801e22a:	4414      	add	r4, r2
 801e22c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e22e:	4410      	add	r0, r2
 801e230:	e766      	b.n	801e100 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801e232:	4472      	add	r2, lr
 801e234:	54af      	strb	r7, [r5, r2]
 801e236:	442a      	add	r2, r5
 801e238:	f882 a001 	strb.w	sl, [r2, #1]
 801e23c:	f882 b002 	strb.w	fp, [r2, #2]
 801e240:	e7f0      	b.n	801e224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801e242:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e246:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e24a:	f806 bc01 	strb.w	fp, [r6, #-1]
 801e24e:	e74d      	b.n	801e0ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e250:	b003      	add	sp, #12
 801e252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e258 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e25c:	b087      	sub	sp, #28
 801e25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e262:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e264:	9204      	str	r2, [sp, #16]
 801e266:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e26a:	6860      	ldr	r0, [r4, #4]
 801e26c:	9205      	str	r2, [sp, #20]
 801e26e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e272:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801e276:	9101      	str	r1, [sp, #4]
 801e278:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e27c:	fb00 2505 	mla	r5, r0, r5, r2
 801e280:	6822      	ldr	r2, [r4, #0]
 801e282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e286:	4415      	add	r5, r2
 801e288:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e28c:	3201      	adds	r2, #1
 801e28e:	f022 0201 	bic.w	r2, r2, #1
 801e292:	9202      	str	r2, [sp, #8]
 801e294:	f8dc 2000 	ldr.w	r2, [ip]
 801e298:	9203      	str	r2, [sp, #12]
 801e29a:	9a01      	ldr	r2, [sp, #4]
 801e29c:	2a00      	cmp	r2, #0
 801e29e:	dc03      	bgt.n	801e2a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e2a0:	9a04      	ldr	r2, [sp, #16]
 801e2a2:	2a00      	cmp	r2, #0
 801e2a4:	f340 8135 	ble.w	801e512 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e2a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e2aa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801e2ae:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e2b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2b4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e2b8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	dd0d      	ble.n	801e2dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e2c0:	1422      	asrs	r2, r4, #16
 801e2c2:	d405      	bmi.n	801e2d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e2c4:	4542      	cmp	r2, r8
 801e2c6:	da03      	bge.n	801e2d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e2c8:	1402      	asrs	r2, r0, #16
 801e2ca:	d401      	bmi.n	801e2d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e2cc:	42ba      	cmp	r2, r7
 801e2ce:	db06      	blt.n	801e2de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e2d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e2d2:	4474      	add	r4, lr
 801e2d4:	3b01      	subs	r3, #1
 801e2d6:	3503      	adds	r5, #3
 801e2d8:	4410      	add	r0, r2
 801e2da:	e7ef      	b.n	801e2bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e2dc:	d077      	beq.n	801e3ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801e2de:	1e5a      	subs	r2, r3, #1
 801e2e0:	fb0e 4602 	mla	r6, lr, r2, r4
 801e2e4:	1436      	asrs	r6, r6, #16
 801e2e6:	d469      	bmi.n	801e3bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e2e8:	4546      	cmp	r6, r8
 801e2ea:	da67      	bge.n	801e3bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e2ec:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e2ee:	fb06 0202 	mla	r2, r6, r2, r0
 801e2f2:	1412      	asrs	r2, r2, #16
 801e2f4:	d462      	bmi.n	801e3bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e2f6:	42ba      	cmp	r2, r7
 801e2f8:	da60      	bge.n	801e3bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e2fa:	1cee      	adds	r6, r5, #3
 801e2fc:	4699      	mov	r9, r3
 801e2fe:	f1b9 0f00 	cmp.w	r9, #0
 801e302:	dd5f      	ble.n	801e3c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e304:	1422      	asrs	r2, r4, #16
 801e306:	9902      	ldr	r1, [sp, #8]
 801e308:	1407      	asrs	r7, r0, #16
 801e30a:	fb01 2707 	mla	r7, r1, r7, r2
 801e30e:	9903      	ldr	r1, [sp, #12]
 801e310:	087a      	lsrs	r2, r7, #1
 801e312:	5c8a      	ldrb	r2, [r1, r2]
 801e314:	07f9      	lsls	r1, r7, #31
 801e316:	bf54      	ite	pl
 801e318:	f002 020f 	andpl.w	r2, r2, #15
 801e31c:	1112      	asrmi	r2, r2, #4
 801e31e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e322:	b2d2      	uxtb	r2, r2
 801e324:	2a00      	cmp	r2, #0
 801e326:	d042      	beq.n	801e3ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e328:	497b      	ldr	r1, [pc, #492]	; (801e518 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801e32a:	680f      	ldr	r7, [r1, #0]
 801e32c:	9905      	ldr	r1, [sp, #20]
 801e32e:	fa5f fb87 	uxtb.w	fp, r7
 801e332:	434a      	muls	r2, r1
 801e334:	f102 0801 	add.w	r8, r2, #1
 801e338:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801e33c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801e340:	1212      	asrs	r2, r2, #8
 801e342:	fa1f fa82 	uxth.w	sl, r2
 801e346:	43d2      	mvns	r2, r2
 801e348:	fb1b fb0a 	smulbb	fp, fp, sl
 801e34c:	b2d2      	uxtb	r2, r2
 801e34e:	fb08 b802 	mla	r8, r8, r2, fp
 801e352:	fa1f f888 	uxth.w	r8, r8
 801e356:	f108 0b01 	add.w	fp, r8, #1
 801e35a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e35e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e362:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e366:	fb1b fb0a 	smulbb	fp, fp, sl
 801e36a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e36e:	fb17 fa0a 	smulbb	sl, r7, sl
 801e372:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e376:	f806 8c03 	strb.w	r8, [r6, #-3]
 801e37a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801e37e:	fb07 aa02 	mla	sl, r7, r2, sl
 801e382:	fb08 b802 	mla	r8, r8, r2, fp
 801e386:	fa1f fa8a 	uxth.w	sl, sl
 801e38a:	fa1f f888 	uxth.w	r8, r8
 801e38e:	f10a 0701 	add.w	r7, sl, #1
 801e392:	f108 0b01 	add.w	fp, r8, #1
 801e396:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e39a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e39e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e3a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e3a6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801e3aa:	f806 8c02 	strb.w	r8, [r6, #-2]
 801e3ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e3b0:	4474      	add	r4, lr
 801e3b2:	3603      	adds	r6, #3
 801e3b4:	f109 39ff 	add.w	r9, r9, #4294967295
 801e3b8:	4410      	add	r0, r2
 801e3ba:	e7a0      	b.n	801e2fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e3bc:	2700      	movs	r7, #0
 801e3be:	1bda      	subs	r2, r3, r7
 801e3c0:	2a00      	cmp	r2, #0
 801e3c2:	dc3e      	bgt.n	801e442 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e3c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3cc:	441d      	add	r5, r3
 801e3ce:	9b01      	ldr	r3, [sp, #4]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	f340 809e 	ble.w	801e512 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801e3d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e3da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e3e0:	eeb0 6a62 	vmov.f32	s12, s5
 801e3e4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e3e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e3ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3f0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e3f4:	eeb0 6a43 	vmov.f32	s12, s6
 801e3f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3fc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e400:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e404:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e408:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e40c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e410:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e414:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e418:	ee12 2a90 	vmov	r2, s5
 801e41c:	eef0 2a47 	vmov.f32	s5, s14
 801e420:	fb92 fef3 	sdiv	lr, r2, r3
 801e424:	ee13 2a10 	vmov	r2, s6
 801e428:	eeb0 3a67 	vmov.f32	s6, s15
 801e42c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e430:	9314      	str	r3, [sp, #80]	; 0x50
 801e432:	9b01      	ldr	r3, [sp, #4]
 801e434:	9a04      	ldr	r2, [sp, #16]
 801e436:	3b01      	subs	r3, #1
 801e438:	9301      	str	r3, [sp, #4]
 801e43a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e43c:	bf08      	it	eq
 801e43e:	4613      	moveq	r3, r2
 801e440:	e72b      	b.n	801e29a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e442:	1426      	asrs	r6, r4, #16
 801e444:	d460      	bmi.n	801e508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e446:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e44a:	42b2      	cmp	r2, r6
 801e44c:	dd5c      	ble.n	801e508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e44e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801e452:	d459      	bmi.n	801e508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e454:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e458:	4542      	cmp	r2, r8
 801e45a:	dd55      	ble.n	801e508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e45c:	9a02      	ldr	r2, [sp, #8]
 801e45e:	9903      	ldr	r1, [sp, #12]
 801e460:	fb08 6602 	mla	r6, r8, r2, r6
 801e464:	0872      	lsrs	r2, r6, #1
 801e466:	07f6      	lsls	r6, r6, #31
 801e468:	5c8a      	ldrb	r2, [r1, r2]
 801e46a:	bf54      	ite	pl
 801e46c:	f002 020f 	andpl.w	r2, r2, #15
 801e470:	1112      	asrmi	r2, r2, #4
 801e472:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e476:	b2d2      	uxtb	r2, r2
 801e478:	2a00      	cmp	r2, #0
 801e47a:	d045      	beq.n	801e508 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e47c:	4926      	ldr	r1, [pc, #152]	; (801e518 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801e47e:	f8d1 8000 	ldr.w	r8, [r1]
 801e482:	9905      	ldr	r1, [sp, #20]
 801e484:	fa5f fb88 	uxtb.w	fp, r8
 801e488:	434a      	muls	r2, r1
 801e48a:	1c56      	adds	r6, r2, #1
 801e48c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e490:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801e494:	1212      	asrs	r2, r2, #8
 801e496:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e49a:	fa1f fa82 	uxth.w	sl, r2
 801e49e:	43d2      	mvns	r2, r2
 801e4a0:	fb1b fb0a 	smulbb	fp, fp, sl
 801e4a4:	b2d2      	uxtb	r2, r2
 801e4a6:	fb09 b902 	mla	r9, r9, r2, fp
 801e4aa:	fa1f f989 	uxth.w	r9, r9
 801e4ae:	f109 0b01 	add.w	fp, r9, #1
 801e4b2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e4b6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801e4ba:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801e4be:	fb1b fb0a 	smulbb	fp, fp, sl
 801e4c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e4c6:	fb18 fa0a 	smulbb	sl, r8, sl
 801e4ca:	f805 9006 	strb.w	r9, [r5, r6]
 801e4ce:	442e      	add	r6, r5
 801e4d0:	f896 8002 	ldrb.w	r8, [r6, #2]
 801e4d4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e4d8:	fb08 aa02 	mla	sl, r8, r2, sl
 801e4dc:	fb09 b902 	mla	r9, r9, r2, fp
 801e4e0:	fa1f fa8a 	uxth.w	sl, sl
 801e4e4:	fa1f f989 	uxth.w	r9, r9
 801e4e8:	f10a 0801 	add.w	r8, sl, #1
 801e4ec:	f109 0b01 	add.w	fp, r9, #1
 801e4f0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801e4f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e4f8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e4fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e500:	f886 a002 	strb.w	sl, [r6, #2]
 801e504:	f886 9001 	strb.w	r9, [r6, #1]
 801e508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e50a:	4474      	add	r4, lr
 801e50c:	3701      	adds	r7, #1
 801e50e:	4410      	add	r0, r2
 801e510:	e755      	b.n	801e3be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801e512:	b007      	add	sp, #28
 801e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e518:	200094e0 	.word	0x200094e0

0801e51c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e520:	b085      	sub	sp, #20
 801e522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e526:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e528:	9203      	str	r2, [sp, #12]
 801e52a:	6860      	ldr	r0, [r4, #4]
 801e52c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801e530:	9100      	str	r1, [sp, #0]
 801e532:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801e536:	fb00 2606 	mla	r6, r0, r6, r2
 801e53a:	6822      	ldr	r2, [r4, #0]
 801e53c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e540:	4416      	add	r6, r2
 801e542:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e546:	3201      	adds	r2, #1
 801e548:	f022 0201 	bic.w	r2, r2, #1
 801e54c:	9201      	str	r2, [sp, #4]
 801e54e:	f8dc 2000 	ldr.w	r2, [ip]
 801e552:	9202      	str	r2, [sp, #8]
 801e554:	9a00      	ldr	r2, [sp, #0]
 801e556:	2a00      	cmp	r2, #0
 801e558:	dc03      	bgt.n	801e562 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e55a:	9a03      	ldr	r2, [sp, #12]
 801e55c:	2a00      	cmp	r2, #0
 801e55e:	f340 8140 	ble.w	801e7e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801e562:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e564:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e568:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801e56c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e56e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e572:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e576:	2b00      	cmp	r3, #0
 801e578:	dd0e      	ble.n	801e598 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e57a:	142a      	asrs	r2, r5, #16
 801e57c:	d405      	bmi.n	801e58a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e57e:	4572      	cmp	r2, lr
 801e580:	da03      	bge.n	801e58a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e582:	1422      	asrs	r2, r4, #16
 801e584:	d401      	bmi.n	801e58a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e586:	42ba      	cmp	r2, r7
 801e588:	db07      	blt.n	801e59a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e58a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e58c:	3b01      	subs	r3, #1
 801e58e:	3603      	adds	r6, #3
 801e590:	4415      	add	r5, r2
 801e592:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e594:	4414      	add	r4, r2
 801e596:	e7ee      	b.n	801e576 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e598:	d072      	beq.n	801e680 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e59a:	1e5a      	subs	r2, r3, #1
 801e59c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e59e:	fb00 5002 	mla	r0, r0, r2, r5
 801e5a2:	1400      	asrs	r0, r0, #16
 801e5a4:	d463      	bmi.n	801e66e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e5a6:	4570      	cmp	r0, lr
 801e5a8:	da61      	bge.n	801e66e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e5aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e5ac:	fb00 4202 	mla	r2, r0, r2, r4
 801e5b0:	1412      	asrs	r2, r2, #16
 801e5b2:	d45c      	bmi.n	801e66e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e5b4:	42ba      	cmp	r2, r7
 801e5b6:	da5a      	bge.n	801e66e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e5b8:	1cf0      	adds	r0, r6, #3
 801e5ba:	469a      	mov	sl, r3
 801e5bc:	f1ba 0f00 	cmp.w	sl, #0
 801e5c0:	dd59      	ble.n	801e676 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801e5c2:	142a      	asrs	r2, r5, #16
 801e5c4:	9901      	ldr	r1, [sp, #4]
 801e5c6:	1427      	asrs	r7, r4, #16
 801e5c8:	fb01 2707 	mla	r7, r1, r7, r2
 801e5cc:	9902      	ldr	r1, [sp, #8]
 801e5ce:	087a      	lsrs	r2, r7, #1
 801e5d0:	5c8a      	ldrb	r2, [r1, r2]
 801e5d2:	07f9      	lsls	r1, r7, #31
 801e5d4:	bf54      	ite	pl
 801e5d6:	f002 020f 	andpl.w	r2, r2, #15
 801e5da:	1112      	asrmi	r2, r2, #4
 801e5dc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e5e0:	b2d2      	uxtb	r2, r2
 801e5e2:	2a00      	cmp	r2, #0
 801e5e4:	d03b      	beq.n	801e65e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e5e6:	4980      	ldr	r1, [pc, #512]	; (801e7e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801e5e8:	2aff      	cmp	r2, #255	; 0xff
 801e5ea:	680f      	ldr	r7, [r1, #0]
 801e5ec:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e5f0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e5f4:	b2ff      	uxtb	r7, r7
 801e5f6:	f000 80ed 	beq.w	801e7d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801e5fa:	fa1f f882 	uxth.w	r8, r2
 801e5fe:	43d2      	mvns	r2, r2
 801e600:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801e604:	fb17 f708 	smulbb	r7, r7, r8
 801e608:	b2d2      	uxtb	r2, r2
 801e60a:	fb19 f908 	smulbb	r9, r9, r8
 801e60e:	fb0e 7702 	mla	r7, lr, r2, r7
 801e612:	fb1b f808 	smulbb	r8, fp, r8
 801e616:	b2bf      	uxth	r7, r7
 801e618:	f107 0e01 	add.w	lr, r7, #1
 801e61c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801e620:	123f      	asrs	r7, r7, #8
 801e622:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e626:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801e62a:	fb07 9902 	mla	r9, r7, r2, r9
 801e62e:	fa1f f989 	uxth.w	r9, r9
 801e632:	f109 0701 	add.w	r7, r9, #1
 801e636:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e63a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801e63e:	fb07 8802 	mla	r8, r7, r2, r8
 801e642:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e646:	fa1f f888 	uxth.w	r8, r8
 801e64a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e64e:	f108 0201 	add.w	r2, r8, #1
 801e652:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e656:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e65a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801e65e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e660:	3003      	adds	r0, #3
 801e662:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e666:	4415      	add	r5, r2
 801e668:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e66a:	4414      	add	r4, r2
 801e66c:	e7a6      	b.n	801e5bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e66e:	2700      	movs	r7, #0
 801e670:	1bda      	subs	r2, r3, r7
 801e672:	2a00      	cmp	r2, #0
 801e674:	dc40      	bgt.n	801e6f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e676:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e67a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e67e:	441e      	add	r6, r3
 801e680:	9b00      	ldr	r3, [sp, #0]
 801e682:	2b00      	cmp	r3, #0
 801e684:	f340 80ad 	ble.w	801e7e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801e688:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e68e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e692:	eeb0 6a62 	vmov.f32	s12, s5
 801e696:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e69a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e69e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6a2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e6a6:	eeb0 6a43 	vmov.f32	s12, s6
 801e6aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e6ae:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e6b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6ca:	ee12 2a90 	vmov	r2, s5
 801e6ce:	eef0 2a47 	vmov.f32	s5, s14
 801e6d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6d6:	ee13 2a10 	vmov	r2, s6
 801e6da:	9311      	str	r3, [sp, #68]	; 0x44
 801e6dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6de:	eeb0 3a67 	vmov.f32	s6, s15
 801e6e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6e6:	9312      	str	r3, [sp, #72]	; 0x48
 801e6e8:	9b00      	ldr	r3, [sp, #0]
 801e6ea:	9a03      	ldr	r2, [sp, #12]
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	9300      	str	r3, [sp, #0]
 801e6f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6f2:	bf08      	it	eq
 801e6f4:	4613      	moveq	r3, r2
 801e6f6:	e72d      	b.n	801e554 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e6f8:	1428      	asrs	r0, r5, #16
 801e6fa:	d45c      	bmi.n	801e7b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e6fc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801e700:	4282      	cmp	r2, r0
 801e702:	dd58      	ble.n	801e7b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e704:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801e708:	d455      	bmi.n	801e7b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e70a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801e70e:	4572      	cmp	r2, lr
 801e710:	dd51      	ble.n	801e7b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e712:	9a01      	ldr	r2, [sp, #4]
 801e714:	9902      	ldr	r1, [sp, #8]
 801e716:	fb0e 0002 	mla	r0, lr, r2, r0
 801e71a:	0842      	lsrs	r2, r0, #1
 801e71c:	07c0      	lsls	r0, r0, #31
 801e71e:	5c8a      	ldrb	r2, [r1, r2]
 801e720:	bf54      	ite	pl
 801e722:	f002 020f 	andpl.w	r2, r2, #15
 801e726:	1112      	asrmi	r2, r2, #4
 801e728:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e72c:	b2d2      	uxtb	r2, r2
 801e72e:	2a00      	cmp	r2, #0
 801e730:	d041      	beq.n	801e7b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e732:	492d      	ldr	r1, [pc, #180]	; (801e7e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801e734:	2aff      	cmp	r2, #255	; 0xff
 801e736:	6808      	ldr	r0, [r1, #0]
 801e738:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801e73c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e740:	fa5f fe80 	uxtb.w	lr, r0
 801e744:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801e748:	d03b      	beq.n	801e7c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e74a:	fa1f f982 	uxth.w	r9, r2
 801e74e:	4438      	add	r0, r7
 801e750:	43d2      	mvns	r2, r2
 801e752:	f816 8000 	ldrb.w	r8, [r6, r0]
 801e756:	fb1e fe09 	smulbb	lr, lr, r9
 801e75a:	fb1a fa09 	smulbb	sl, sl, r9
 801e75e:	b2d2      	uxtb	r2, r2
 801e760:	fb1b f909 	smulbb	r9, fp, r9
 801e764:	fb08 ee02 	mla	lr, r8, r2, lr
 801e768:	fa1f fe8e 	uxth.w	lr, lr
 801e76c:	f10e 0801 	add.w	r8, lr, #1
 801e770:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801e774:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e778:	f806 e000 	strb.w	lr, [r6, r0]
 801e77c:	4430      	add	r0, r6
 801e77e:	f890 e001 	ldrb.w	lr, [r0, #1]
 801e782:	fb0e aa02 	mla	sl, lr, r2, sl
 801e786:	fa1f fa8a 	uxth.w	sl, sl
 801e78a:	f10a 0e01 	add.w	lr, sl, #1
 801e78e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801e792:	f890 e002 	ldrb.w	lr, [r0, #2]
 801e796:	fb0e 9902 	mla	r9, lr, r2, r9
 801e79a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e79e:	fa1f f989 	uxth.w	r9, r9
 801e7a2:	f880 a001 	strb.w	sl, [r0, #1]
 801e7a6:	f109 0201 	add.w	r2, r9, #1
 801e7aa:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e7ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7b2:	f880 9002 	strb.w	r9, [r0, #2]
 801e7b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e7b8:	3701      	adds	r7, #1
 801e7ba:	4415      	add	r5, r2
 801e7bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e7be:	4414      	add	r4, r2
 801e7c0:	e756      	b.n	801e670 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e7c2:	4438      	add	r0, r7
 801e7c4:	f806 e000 	strb.w	lr, [r6, r0]
 801e7c8:	4430      	add	r0, r6
 801e7ca:	f880 a001 	strb.w	sl, [r0, #1]
 801e7ce:	f880 b002 	strb.w	fp, [r0, #2]
 801e7d2:	e7f0      	b.n	801e7b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e7d4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e7d8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801e7dc:	f800 bc01 	strb.w	fp, [r0, #-1]
 801e7e0:	e73d      	b.n	801e65e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801e7e2:	b005      	add	sp, #20
 801e7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7e8:	200094e0 	.word	0x200094e0

0801e7ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801e7ec:	4770      	bx	lr

0801e7ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801e7ee:	4770      	bx	lr

0801e7f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801e7f0:	4770      	bx	lr

0801e7f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801e7f2:	4770      	bx	lr

0801e7f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e7f4:	4770      	bx	lr

0801e7f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e7f6:	4770      	bx	lr

0801e7f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e7f8:	4770      	bx	lr

0801e7fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e7fa:	4770      	bx	lr

0801e7fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e7fc:	4770      	bx	lr

0801e7fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e7fe:	4770      	bx	lr

0801e800 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e800:	4770      	bx	lr

0801e802 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e802:	4770      	bx	lr

0801e804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801e804:	4770      	bx	lr

0801e806 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801e806:	4770      	bx	lr

0801e808 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801e808:	4770      	bx	lr

0801e80a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801e80a:	4770      	bx	lr

0801e80c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801e80c:	4770      	bx	lr

0801e80e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801e80e:	4770      	bx	lr

0801e810 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801e810:	4770      	bx	lr

0801e812 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801e812:	4770      	bx	lr

0801e814 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e814:	2bff      	cmp	r3, #255	; 0xff
 801e816:	b508      	push	{r3, lr}
 801e818:	d04f      	beq.n	801e8ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e81a:	2a2c      	cmp	r2, #44	; 0x2c
 801e81c:	d032      	beq.n	801e884 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801e81e:	d80f      	bhi.n	801e840 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801e820:	2a08      	cmp	r2, #8
 801e822:	d046      	beq.n	801e8b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e824:	d805      	bhi.n	801e832 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801e826:	2a04      	cmp	r2, #4
 801e828:	d041      	beq.n	801e8ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e82a:	2a05      	cmp	r2, #5
 801e82c:	d03d      	beq.n	801e8aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e82e:	2000      	movs	r0, #0
 801e830:	e027      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e832:	2a0a      	cmp	r2, #10
 801e834:	d03d      	beq.n	801e8b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e836:	d301      	bcc.n	801e83c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e838:	2a0b      	cmp	r2, #11
 801e83a:	d1f8      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e83c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e83e:	e020      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e840:	2a30      	cmp	r2, #48	; 0x30
 801e842:	d038      	beq.n	801e8b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e844:	d808      	bhi.n	801e858 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801e846:	2a2e      	cmp	r2, #46	; 0x2e
 801e848:	684b      	ldr	r3, [r1, #4]
 801e84a:	d029      	beq.n	801e8a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e84c:	d90b      	bls.n	801e866 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801e84e:	781b      	ldrb	r3, [r3, #0]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d1ec      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e854:	6a00      	ldr	r0, [r0, #32]
 801e856:	e014      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e858:	2a32      	cmp	r2, #50	; 0x32
 801e85a:	d02c      	beq.n	801e8b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e85c:	d301      	bcc.n	801e862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801e85e:	2a33      	cmp	r2, #51	; 0x33
 801e860:	d1e5      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e862:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e864:	e00d      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e866:	781b      	ldrb	r3, [r3, #0]
 801e868:	2b01      	cmp	r3, #1
 801e86a:	d009      	beq.n	801e880 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801e86c:	d3f2      	bcc.n	801e854 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801e86e:	2b02      	cmp	r3, #2
 801e870:	d1dd      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e872:	4b39      	ldr	r3, [pc, #228]	; (801e958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e874:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 801e878:	4a38      	ldr	r2, [pc, #224]	; (801e95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e87a:	4839      	ldr	r0, [pc, #228]	; (801e960 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801e87c:	f006 fd26 	bl	80252cc <__assert_func>
 801e880:	6900      	ldr	r0, [r0, #16]
 801e882:	bd08      	pop	{r3, pc}
 801e884:	684b      	ldr	r3, [r1, #4]
 801e886:	781b      	ldrb	r3, [r3, #0]
 801e888:	2b01      	cmp	r3, #1
 801e88a:	d007      	beq.n	801e89c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e88c:	d30b      	bcc.n	801e8a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e88e:	2b02      	cmp	r3, #2
 801e890:	d1cd      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e892:	4b31      	ldr	r3, [pc, #196]	; (801e958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e898:	4a30      	ldr	r2, [pc, #192]	; (801e95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e89a:	e7ee      	b.n	801e87a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e89c:	6880      	ldr	r0, [r0, #8]
 801e89e:	e7f0      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8a0:	781b      	ldrb	r3, [r3, #0]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d1c3      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e8a6:	6980      	ldr	r0, [r0, #24]
 801e8a8:	e7eb      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e8ac:	e7e9      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e8b0:	e7e7      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e8b4:	e7e5      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e8b8:	e7e3      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8ba:	2a2c      	cmp	r2, #44	; 0x2c
 801e8bc:	d030      	beq.n	801e920 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801e8be:	d80f      	bhi.n	801e8e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801e8c0:	2a08      	cmp	r2, #8
 801e8c2:	d044      	beq.n	801e94e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e8c4:	d805      	bhi.n	801e8d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801e8c6:	2a04      	cmp	r2, #4
 801e8c8:	d03f      	beq.n	801e94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e8ca:	2a05      	cmp	r2, #5
 801e8cc:	d1af      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e8ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e8d0:	e7d7      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8d2:	2a0a      	cmp	r2, #10
 801e8d4:	d03b      	beq.n	801e94e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e8d6:	d301      	bcc.n	801e8dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e8d8:	2a0b      	cmp	r2, #11
 801e8da:	d1a8      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e8dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e8de:	e7d0      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8e0:	2a30      	cmp	r2, #48	; 0x30
 801e8e2:	d036      	beq.n	801e952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e8e4:	d808      	bhi.n	801e8f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801e8e6:	2a2e      	cmp	r2, #46	; 0x2e
 801e8e8:	684b      	ldr	r3, [r1, #4]
 801e8ea:	d028      	beq.n	801e93e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801e8ec:	d90b      	bls.n	801e906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801e8ee:	781b      	ldrb	r3, [r3, #0]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d19c      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e8f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e8f6:	e7c4      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e8f8:	2a32      	cmp	r2, #50	; 0x32
 801e8fa:	d02a      	beq.n	801e952 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e8fc:	d301      	bcc.n	801e902 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801e8fe:	2a33      	cmp	r2, #51	; 0x33
 801e900:	d195      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e902:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e904:	e7bd      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e906:	781b      	ldrb	r3, [r3, #0]
 801e908:	2b01      	cmp	r3, #1
 801e90a:	d007      	beq.n	801e91c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801e90c:	d3f2      	bcc.n	801e8f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801e90e:	2b02      	cmp	r3, #2
 801e910:	d18d      	bne.n	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e912:	4b11      	ldr	r3, [pc, #68]	; (801e958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e914:	f240 4131 	movw	r1, #1073	; 0x431
 801e918:	4a10      	ldr	r2, [pc, #64]	; (801e95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e91a:	e7ae      	b.n	801e87a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e91c:	6940      	ldr	r0, [r0, #20]
 801e91e:	e7b0      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e920:	684b      	ldr	r3, [r1, #4]
 801e922:	781b      	ldrb	r3, [r3, #0]
 801e924:	2b01      	cmp	r3, #1
 801e926:	d008      	beq.n	801e93a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801e928:	d30d      	bcc.n	801e946 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e92a:	2b02      	cmp	r3, #2
 801e92c:	f47f af7f 	bne.w	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e930:	4b09      	ldr	r3, [pc, #36]	; (801e958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801e932:	f240 413d 	movw	r1, #1085	; 0x43d
 801e936:	4a09      	ldr	r2, [pc, #36]	; (801e95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801e938:	e79f      	b.n	801e87a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801e93a:	68c0      	ldr	r0, [r0, #12]
 801e93c:	e7a1      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e93e:	781b      	ldrb	r3, [r3, #0]
 801e940:	2b00      	cmp	r3, #0
 801e942:	f47f af74 	bne.w	801e82e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e946:	69c0      	ldr	r0, [r0, #28]
 801e948:	e79b      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e94a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e94c:	e799      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e94e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e950:	e797      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e952:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e954:	e795      	b.n	801e882 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e956:	bf00      	nop
 801e958:	08028ced 	.word	0x08028ced
 801e95c:	0802949f 	.word	0x0802949f
 801e960:	08028d39 	.word	0x08028d39

0801e964 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801e964:	b508      	push	{r3, lr}
 801e966:	4b06      	ldr	r3, [pc, #24]	; (801e980 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801e968:	8818      	ldrh	r0, [r3, #0]
 801e96a:	b928      	cbnz	r0, 801e978 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801e96c:	4b05      	ldr	r3, [pc, #20]	; (801e984 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801e96e:	2154      	movs	r1, #84	; 0x54
 801e970:	4a05      	ldr	r2, [pc, #20]	; (801e988 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801e972:	4806      	ldr	r0, [pc, #24]	; (801e98c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801e974:	f006 fcaa 	bl	80252cc <__assert_func>
 801e978:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e97c:	b280      	uxth	r0, r0
 801e97e:	bd08      	pop	{r3, pc}
 801e980:	200094d0 	.word	0x200094d0
 801e984:	08028f86 	.word	0x08028f86
 801e988:	08029464 	.word	0x08029464
 801e98c:	08028fc8 	.word	0x08028fc8

0801e990 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e994:	4616      	mov	r6, r2
 801e996:	b087      	sub	sp, #28
 801e998:	461f      	mov	r7, r3
 801e99a:	b34b      	cbz	r3, 801e9f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801e99c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	dd25      	ble.n	801e9f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801e9a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	dd21      	ble.n	801e9f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801e9ac:	6808      	ldr	r0, [r1, #0]
 801e9ae:	ab04      	add	r3, sp, #16
 801e9b0:	6849      	ldr	r1, [r1, #4]
 801e9b2:	4c5a      	ldr	r4, [pc, #360]	; (801eb1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801e9b4:	c303      	stmia	r3!, {r0, r1}
 801e9b6:	a804      	add	r0, sp, #16
 801e9b8:	f7fb fc02 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e9bc:	6820      	ldr	r0, [r4, #0]
 801e9be:	6803      	ldr	r3, [r0, #0]
 801e9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e9c2:	4798      	blx	r3
 801e9c4:	2fff      	cmp	r7, #255	; 0xff
 801e9c6:	4623      	mov	r3, r4
 801e9c8:	d015      	beq.n	801e9f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801e9ca:	f010 0f08 	tst.w	r0, #8
 801e9ce:	d015      	beq.n	801e9fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801e9d0:	6818      	ldr	r0, [r3, #0]
 801e9d2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e9d6:	6801      	ldr	r1, [r0, #0]
 801e9d8:	9401      	str	r4, [sp, #4]
 801e9da:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e9de:	9702      	str	r7, [sp, #8]
 801e9e0:	9400      	str	r4, [sp, #0]
 801e9e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e9e6:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801e9e8:	4631      	mov	r1, r6
 801e9ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e9ee:	47a0      	blx	r4
 801e9f0:	b007      	add	sp, #28
 801e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9f6:	f010 0f02 	tst.w	r0, #2
 801e9fa:	e7e8      	b.n	801e9ce <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3e>
 801e9fc:	6818      	ldr	r0, [r3, #0]
 801e9fe:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801ea02:	6803      	ldr	r3, [r0, #0]
 801ea04:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801ea08:	6a1b      	ldr	r3, [r3, #32]
 801ea0a:	4798      	blx	r3
 801ea0c:	4944      	ldr	r1, [pc, #272]	; (801eb20 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>)
 801ea0e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ea12:	2fff      	cmp	r7, #255	; 0xff
 801ea14:	f8b1 c000 	ldrh.w	ip, [r1]
 801ea18:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801ea1c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ea20:	4688      	mov	r8, r1
 801ea22:	fb0c 2303 	mla	r3, ip, r3, r2
 801ea26:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801ea2a:	b2f2      	uxtb	r2, r6
 801ea2c:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801ea30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea34:	4418      	add	r0, r3
 801ea36:	d112      	bne.n	801ea5e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xce>
 801ea38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ea3c:	2100      	movs	r1, #0
 801ea3e:	42a9      	cmp	r1, r5
 801ea40:	da66      	bge.n	801eb10 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801ea42:	4603      	mov	r3, r0
 801ea44:	2700      	movs	r7, #0
 801ea46:	42a7      	cmp	r7, r4
 801ea48:	f103 0303 	add.w	r3, r3, #3
 801ea4c:	da57      	bge.n	801eafe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801ea4e:	f803 2c03 	strb.w	r2, [r3, #-3]
 801ea52:	3701      	adds	r7, #1
 801ea54:	f803 ec02 	strb.w	lr, [r3, #-2]
 801ea58:	f803 cc01 	strb.w	ip, [r3, #-1]
 801ea5c:	e7f3      	b.n	801ea46 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801ea5e:	b2bb      	uxth	r3, r7
 801ea60:	f04f 0800 	mov.w	r8, #0
 801ea64:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ea68:	fb0c fc03 	mul.w	ip, ip, r3
 801ea6c:	fb0e fe03 	mul.w	lr, lr, r3
 801ea70:	435a      	muls	r2, r3
 801ea72:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801ea76:	460f      	mov	r7, r1
 801ea78:	b29b      	uxth	r3, r3
 801ea7a:	45a8      	cmp	r8, r5
 801ea7c:	da48      	bge.n	801eb10 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>
 801ea7e:	4601      	mov	r1, r0
 801ea80:	f04f 0a00 	mov.w	sl, #0
 801ea84:	45a2      	cmp	sl, r4
 801ea86:	f101 0103 	add.w	r1, r1, #3
 801ea8a:	da2f      	bge.n	801eaec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>
 801ea8c:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801ea90:	f10a 0a01 	add.w	sl, sl, #1
 801ea94:	fb19 f903 	smulbb	r9, r9, r3
 801ea98:	4491      	add	r9, r2
 801ea9a:	fa1f f989 	uxth.w	r9, r9
 801ea9e:	f109 0b01 	add.w	fp, r9, #1
 801eaa2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eaa6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eaaa:	f801 9c03 	strb.w	r9, [r1, #-3]
 801eaae:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801eab2:	fb19 f903 	smulbb	r9, r9, r3
 801eab6:	44f1      	add	r9, lr
 801eab8:	fa1f f989 	uxth.w	r9, r9
 801eabc:	f109 0b01 	add.w	fp, r9, #1
 801eac0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eac4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eac8:	f801 9c02 	strb.w	r9, [r1, #-2]
 801eacc:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801ead0:	fb19 f903 	smulbb	r9, r9, r3
 801ead4:	44e1      	add	r9, ip
 801ead6:	fa1f f989 	uxth.w	r9, r9
 801eada:	f109 0b01 	add.w	fp, r9, #1
 801eade:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eae2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eae6:	f801 9c01 	strb.w	r9, [r1, #-1]
 801eaea:	e7cb      	b.n	801ea84 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf4>
 801eaec:	8839      	ldrh	r1, [r7, #0]
 801eaee:	f108 0801 	add.w	r8, r8, #1
 801eaf2:	1b09      	subs	r1, r1, r4
 801eaf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801eaf8:	4431      	add	r1, r6
 801eafa:	4408      	add	r0, r1
 801eafc:	e7bd      	b.n	801ea7a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xea>
 801eafe:	f8b8 3000 	ldrh.w	r3, [r8]
 801eb02:	3101      	adds	r1, #1
 801eb04:	1b1b      	subs	r3, r3, r4
 801eb06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb0a:	4433      	add	r3, r6
 801eb0c:	4418      	add	r0, r3
 801eb0e:	e796      	b.n	801ea3e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xae>
 801eb10:	4b02      	ldr	r3, [pc, #8]	; (801eb1c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801eb12:	6818      	ldr	r0, [r3, #0]
 801eb14:	6803      	ldr	r3, [r0, #0]
 801eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb18:	4798      	blx	r3
 801eb1a:	e769      	b.n	801e9f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801eb1c:	200094d8 	.word	0x200094d8
 801eb20:	200094d0 	.word	0x200094d0

0801eb24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb28:	b08d      	sub	sp, #52	; 0x34
 801eb2a:	460c      	mov	r4, r1
 801eb2c:	4617      	mov	r7, r2
 801eb2e:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801eb32:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801eb36:	2e00      	cmp	r6, #0
 801eb38:	d04a      	beq.n	801ebd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801eb3a:	6810      	ldr	r0, [r2, #0]
 801eb3c:	ad08      	add	r5, sp, #32
 801eb3e:	6851      	ldr	r1, [r2, #4]
 801eb40:	c503      	stmia	r5!, {r0, r1}
 801eb42:	6818      	ldr	r0, [r3, #0]
 801eb44:	ad0a      	add	r5, sp, #40	; 0x28
 801eb46:	6859      	ldr	r1, [r3, #4]
 801eb48:	c503      	stmia	r5!, {r0, r1}
 801eb4a:	a808      	add	r0, sp, #32
 801eb4c:	f7fb fb38 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb50:	4639      	mov	r1, r7
 801eb52:	a80a      	add	r0, sp, #40	; 0x28
 801eb54:	4f59      	ldr	r7, [pc, #356]	; (801ecbc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801eb56:	f7fb fb1b 	bl	801a190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eb5a:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801eb5e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801eb62:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801eb66:	6838      	ldr	r0, [r7, #0]
 801eb68:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eb6c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801eb70:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801eb74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801eb78:	440c      	add	r4, r1
 801eb7a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801eb7e:	440a      	add	r2, r1
 801eb80:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801eb84:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801eb88:	4413      	add	r3, r2
 801eb8a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801eb8e:	6803      	ldr	r3, [r0, #0]
 801eb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eb92:	4798      	blx	r3
 801eb94:	2eff      	cmp	r6, #255	; 0xff
 801eb96:	f000 8089 	beq.w	801ecac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801eb9a:	0743      	lsls	r3, r0, #29
 801eb9c:	d405      	bmi.n	801ebaa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801eb9e:	f1b9 0f00 	cmp.w	r9, #0
 801eba2:	d018      	beq.n	801ebd6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801eba4:	f010 0f10 	tst.w	r0, #16
 801eba8:	d015      	beq.n	801ebd6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801ebaa:	6838      	ldr	r0, [r7, #0]
 801ebac:	b2ad      	uxth	r5, r5
 801ebae:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801ebb2:	6801      	ldr	r1, [r0, #0]
 801ebb4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801ebb8:	9500      	str	r5, [sp, #0]
 801ebba:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801ebbe:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801ebc2:	9602      	str	r6, [sp, #8]
 801ebc4:	fa1f f688 	uxth.w	r6, r8
 801ebc8:	9601      	str	r6, [sp, #4]
 801ebca:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801ebcc:	4621      	mov	r1, r4
 801ebce:	47a8      	blx	r5
 801ebd0:	b00d      	add	sp, #52	; 0x34
 801ebd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebd6:	6838      	ldr	r0, [r7, #0]
 801ebd8:	6803      	ldr	r3, [r0, #0]
 801ebda:	6a1b      	ldr	r3, [r3, #32]
 801ebdc:	4798      	blx	r3
 801ebde:	4a38      	ldr	r2, [pc, #224]	; (801ecc0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801ebe0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801ebe4:	2eff      	cmp	r6, #255	; 0xff
 801ebe6:	8813      	ldrh	r3, [r2, #0]
 801ebe8:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801ebec:	fb0c 1303 	mla	r3, ip, r3, r1
 801ebf0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801ebf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ebf8:	4418      	add	r0, r3
 801ebfa:	d032      	beq.n	801ec62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801ebfc:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801ec00:	f04f 0c00 	mov.w	ip, #0
 801ec04:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801ec08:	9306      	str	r3, [sp, #24]
 801ec0a:	45c4      	cmp	ip, r8
 801ec0c:	da49      	bge.n	801eca2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801ec0e:	4686      	mov	lr, r0
 801ec10:	46a1      	mov	r9, r4
 801ec12:	eba9 0304 	sub.w	r3, r9, r4
 801ec16:	428b      	cmp	r3, r1
 801ec18:	da13      	bge.n	801ec42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801ec1a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ec1e:	f89e b000 	ldrb.w	fp, [lr]
 801ec22:	9307      	str	r3, [sp, #28]
 801ec24:	9b06      	ldr	r3, [sp, #24]
 801ec26:	fb1b fb03 	smulbb	fp, fp, r3
 801ec2a:	9b07      	ldr	r3, [sp, #28]
 801ec2c:	fb03 b306 	mla	r3, r3, r6, fp
 801ec30:	b29b      	uxth	r3, r3
 801ec32:	f103 0b01 	add.w	fp, r3, #1
 801ec36:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801ec3a:	121b      	asrs	r3, r3, #8
 801ec3c:	f80e 3b01 	strb.w	r3, [lr], #1
 801ec40:	e7e7      	b.n	801ec12 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801ec42:	8813      	ldrh	r3, [r2, #0]
 801ec44:	f10c 0c01 	add.w	ip, ip, #1
 801ec48:	1b5b      	subs	r3, r3, r5
 801ec4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec4e:	4453      	add	r3, sl
 801ec50:	4418      	add	r0, r3
 801ec52:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ec56:	1b5b      	subs	r3, r3, r5
 801ec58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec5c:	4453      	add	r3, sl
 801ec5e:	441c      	add	r4, r3
 801ec60:	e7d3      	b.n	801ec0a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801ec62:	2600      	movs	r6, #0
 801ec64:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801ec68:	4546      	cmp	r6, r8
 801ec6a:	da1a      	bge.n	801eca2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801ec6c:	f100 3eff 	add.w	lr, r0, #4294967295
 801ec70:	4623      	mov	r3, r4
 801ec72:	eba3 0904 	sub.w	r9, r3, r4
 801ec76:	4589      	cmp	r9, r1
 801ec78:	da04      	bge.n	801ec84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801ec7a:	f813 9b01 	ldrb.w	r9, [r3], #1
 801ec7e:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801ec82:	e7f6      	b.n	801ec72 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801ec84:	8813      	ldrh	r3, [r2, #0]
 801ec86:	3601      	adds	r6, #1
 801ec88:	1b5b      	subs	r3, r3, r5
 801ec8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec8e:	4463      	add	r3, ip
 801ec90:	4418      	add	r0, r3
 801ec92:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801ec96:	1b5b      	subs	r3, r3, r5
 801ec98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec9c:	4463      	add	r3, ip
 801ec9e:	441c      	add	r4, r3
 801eca0:	e7e2      	b.n	801ec68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801eca2:	6838      	ldr	r0, [r7, #0]
 801eca4:	6803      	ldr	r3, [r0, #0]
 801eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eca8:	4798      	blx	r3
 801ecaa:	e791      	b.n	801ebd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ecac:	f1b9 0f00 	cmp.w	r9, #0
 801ecb0:	f47f af78 	bne.w	801eba4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801ecb4:	f010 0f01 	tst.w	r0, #1
 801ecb8:	e776      	b.n	801eba8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801ecba:	bf00      	nop
 801ecbc:	200094d8 	.word	0x200094d8
 801ecc0:	200094d0 	.word	0x200094d0

0801ecc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ecc4:	b510      	push	{r4, lr}
 801ecc6:	4604      	mov	r4, r0
 801ecc8:	2104      	movs	r1, #4
 801ecca:	f006 fad0 	bl	802526e <_ZdlPvj>
 801ecce:	4620      	mov	r0, r4
 801ecd0:	bd10      	pop	{r4, pc}

0801ecd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ecd2:	b510      	push	{r4, lr}
 801ecd4:	4604      	mov	r4, r0
 801ecd6:	2104      	movs	r1, #4
 801ecd8:	f006 fac9 	bl	802526e <_ZdlPvj>
 801ecdc:	4620      	mov	r0, r4
 801ecde:	bd10      	pop	{r4, pc}

0801ece0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ece0:	b510      	push	{r4, lr}
 801ece2:	4604      	mov	r4, r0
 801ece4:	2104      	movs	r1, #4
 801ece6:	f006 fac2 	bl	802526e <_ZdlPvj>
 801ecea:	4620      	mov	r0, r4
 801ecec:	bd10      	pop	{r4, pc}

0801ecee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ecee:	b510      	push	{r4, lr}
 801ecf0:	4604      	mov	r4, r0
 801ecf2:	2104      	movs	r1, #4
 801ecf4:	f006 fabb 	bl	802526e <_ZdlPvj>
 801ecf8:	4620      	mov	r0, r4
 801ecfa:	bd10      	pop	{r4, pc}

0801ecfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ecfc:	b510      	push	{r4, lr}
 801ecfe:	4604      	mov	r4, r0
 801ed00:	2104      	movs	r1, #4
 801ed02:	f006 fab4 	bl	802526e <_ZdlPvj>
 801ed06:	4620      	mov	r0, r4
 801ed08:	bd10      	pop	{r4, pc}

0801ed0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ed0a:	b510      	push	{r4, lr}
 801ed0c:	4604      	mov	r4, r0
 801ed0e:	2104      	movs	r1, #4
 801ed10:	f006 faad 	bl	802526e <_ZdlPvj>
 801ed14:	4620      	mov	r0, r4
 801ed16:	bd10      	pop	{r4, pc}

0801ed18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ed18:	b510      	push	{r4, lr}
 801ed1a:	4604      	mov	r4, r0
 801ed1c:	2104      	movs	r1, #4
 801ed1e:	f006 faa6 	bl	802526e <_ZdlPvj>
 801ed22:	4620      	mov	r0, r4
 801ed24:	bd10      	pop	{r4, pc}

0801ed26 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ed26:	b510      	push	{r4, lr}
 801ed28:	4604      	mov	r4, r0
 801ed2a:	2104      	movs	r1, #4
 801ed2c:	f006 fa9f 	bl	802526e <_ZdlPvj>
 801ed30:	4620      	mov	r0, r4
 801ed32:	bd10      	pop	{r4, pc}

0801ed34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ed34:	b510      	push	{r4, lr}
 801ed36:	4604      	mov	r4, r0
 801ed38:	2104      	movs	r1, #4
 801ed3a:	f006 fa98 	bl	802526e <_ZdlPvj>
 801ed3e:	4620      	mov	r0, r4
 801ed40:	bd10      	pop	{r4, pc}

0801ed42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ed42:	b510      	push	{r4, lr}
 801ed44:	4604      	mov	r4, r0
 801ed46:	2104      	movs	r1, #4
 801ed48:	f006 fa91 	bl	802526e <_ZdlPvj>
 801ed4c:	4620      	mov	r0, r4
 801ed4e:	bd10      	pop	{r4, pc}

0801ed50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ed50:	b510      	push	{r4, lr}
 801ed52:	4604      	mov	r4, r0
 801ed54:	2104      	movs	r1, #4
 801ed56:	f006 fa8a 	bl	802526e <_ZdlPvj>
 801ed5a:	4620      	mov	r0, r4
 801ed5c:	bd10      	pop	{r4, pc}

0801ed5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ed5e:	b510      	push	{r4, lr}
 801ed60:	4604      	mov	r4, r0
 801ed62:	2104      	movs	r1, #4
 801ed64:	f006 fa83 	bl	802526e <_ZdlPvj>
 801ed68:	4620      	mov	r0, r4
 801ed6a:	bd10      	pop	{r4, pc}

0801ed6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ed6c:	b510      	push	{r4, lr}
 801ed6e:	4604      	mov	r4, r0
 801ed70:	2104      	movs	r1, #4
 801ed72:	f006 fa7c 	bl	802526e <_ZdlPvj>
 801ed76:	4620      	mov	r0, r4
 801ed78:	bd10      	pop	{r4, pc}

0801ed7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ed7a:	b510      	push	{r4, lr}
 801ed7c:	4604      	mov	r4, r0
 801ed7e:	2104      	movs	r1, #4
 801ed80:	f006 fa75 	bl	802526e <_ZdlPvj>
 801ed84:	4620      	mov	r0, r4
 801ed86:	bd10      	pop	{r4, pc}

0801ed88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ed88:	b510      	push	{r4, lr}
 801ed8a:	4604      	mov	r4, r0
 801ed8c:	2104      	movs	r1, #4
 801ed8e:	f006 fa6e 	bl	802526e <_ZdlPvj>
 801ed92:	4620      	mov	r0, r4
 801ed94:	bd10      	pop	{r4, pc}

0801ed96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ed96:	b510      	push	{r4, lr}
 801ed98:	4604      	mov	r4, r0
 801ed9a:	2104      	movs	r1, #4
 801ed9c:	f006 fa67 	bl	802526e <_ZdlPvj>
 801eda0:	4620      	mov	r0, r4
 801eda2:	bd10      	pop	{r4, pc}

0801eda4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801eda4:	b510      	push	{r4, lr}
 801eda6:	4604      	mov	r4, r0
 801eda8:	2104      	movs	r1, #4
 801edaa:	f006 fa60 	bl	802526e <_ZdlPvj>
 801edae:	4620      	mov	r0, r4
 801edb0:	bd10      	pop	{r4, pc}

0801edb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801edb2:	b510      	push	{r4, lr}
 801edb4:	4604      	mov	r4, r0
 801edb6:	2104      	movs	r1, #4
 801edb8:	f006 fa59 	bl	802526e <_ZdlPvj>
 801edbc:	4620      	mov	r0, r4
 801edbe:	bd10      	pop	{r4, pc}

0801edc0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801edc0:	b510      	push	{r4, lr}
 801edc2:	4604      	mov	r4, r0
 801edc4:	2104      	movs	r1, #4
 801edc6:	f006 fa52 	bl	802526e <_ZdlPvj>
 801edca:	4620      	mov	r0, r4
 801edcc:	bd10      	pop	{r4, pc}

0801edce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801edce:	b510      	push	{r4, lr}
 801edd0:	4604      	mov	r4, r0
 801edd2:	2104      	movs	r1, #4
 801edd4:	f006 fa4b 	bl	802526e <_ZdlPvj>
 801edd8:	4620      	mov	r0, r4
 801edda:	bd10      	pop	{r4, pc}

0801eddc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ede0:	4d9e      	ldr	r5, [pc, #632]	; (801f05c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801ede2:	4690      	mov	r8, r2
 801ede4:	b08f      	sub	sp, #60	; 0x3c
 801ede6:	4604      	mov	r4, r0
 801ede8:	682a      	ldr	r2, [r5, #0]
 801edea:	4689      	mov	r9, r1
 801edec:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801edf0:	2a02      	cmp	r2, #2
 801edf2:	d106      	bne.n	801ee02 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801edf4:	4b9a      	ldr	r3, [pc, #616]	; (801f060 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801edf6:	f240 11e7 	movw	r1, #487	; 0x1e7
 801edfa:	4a9a      	ldr	r2, [pc, #616]	; (801f064 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801edfc:	489a      	ldr	r0, [pc, #616]	; (801f068 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801edfe:	f006 fa65 	bl	80252cc <__assert_func>
 801ee02:	ae0e      	add	r6, sp, #56	; 0x38
 801ee04:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801ee08:	4630      	mov	r0, r6
 801ee0a:	f7fe f88b 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ee0e:	6823      	ldr	r3, [r4, #0]
 801ee10:	4607      	mov	r7, r0
 801ee12:	4620      	mov	r0, r4
 801ee14:	6a1b      	ldr	r3, [r3, #32]
 801ee16:	4798      	blx	r3
 801ee18:	4287      	cmp	r7, r0
 801ee1a:	d004      	beq.n	801ee26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801ee1c:	4b93      	ldr	r3, [pc, #588]	; (801f06c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801ee1e:	f240 11e9 	movw	r1, #489	; 0x1e9
 801ee22:	4a90      	ldr	r2, [pc, #576]	; (801f064 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ee24:	e7ea      	b.n	801edfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ee26:	4630      	mov	r0, r6
 801ee28:	f7fd fff2 	bl	801ce10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ee2c:	4607      	mov	r7, r0
 801ee2e:	b920      	cbnz	r0, 801ee3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801ee30:	4b8f      	ldr	r3, [pc, #572]	; (801f070 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801ee32:	f240 11eb 	movw	r1, #491	; 0x1eb
 801ee36:	4a8b      	ldr	r2, [pc, #556]	; (801f064 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ee38:	e7e0      	b.n	801edfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ee3a:	f8d8 0000 	ldr.w	r0, [r8]
 801ee3e:	ab06      	add	r3, sp, #24
 801ee40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ee44:	f9b8 a000 	ldrsh.w	sl, [r8]
 801ee48:	c303      	stmia	r3!, {r0, r1}
 801ee4a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ee4e:	ab08      	add	r3, sp, #32
 801ee50:	f8d9 0000 	ldr.w	r0, [r9]
 801ee54:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801ee58:	c303      	stmia	r3!, {r0, r1}
 801ee5a:	4630      	mov	r0, r6
 801ee5c:	f7fd ff64 	bl	801cd28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ee60:	4680      	mov	r8, r0
 801ee62:	4630      	mov	r0, r6
 801ee64:	4e83      	ldr	r6, [pc, #524]	; (801f074 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801ee66:	f7fd ff99 	bl	801cd9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ee6a:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801ee6e:	f10d 0920 	add.w	r9, sp, #32
 801ee72:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801ee76:	a806      	add	r0, sp, #24
 801ee78:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ee7c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801ee80:	f7fb f99e 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee84:	4648      	mov	r0, r9
 801ee86:	f7fb f99b 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee8a:	a80a      	add	r0, sp, #40	; 0x28
 801ee8c:	f7fb f998 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ee90:	4b79      	ldr	r3, [pc, #484]	; (801f078 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801ee92:	2100      	movs	r1, #0
 801ee94:	f9b6 2000 	ldrsh.w	r2, [r6]
 801ee98:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee9c:	4648      	mov	r0, r9
 801ee9e:	910c      	str	r1, [sp, #48]	; 0x30
 801eea0:	a90c      	add	r1, sp, #48	; 0x30
 801eea2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801eea6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801eeaa:	f7f9 fb23 	bl	80184f4 <_ZN8touchgfx4RectaNERKS0_>
 801eeae:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801eeb2:	9602      	str	r6, [sp, #8]
 801eeb4:	f1bc 0f00 	cmp.w	ip, #0
 801eeb8:	f340 80a4 	ble.w	801f004 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801eebc:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801eec0:	2e00      	cmp	r6, #0
 801eec2:	f340 809f 	ble.w	801f004 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801eec6:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801eeca:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801eece:	4288      	cmp	r0, r1
 801eed0:	db36      	blt.n	801ef40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801eed2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801eed6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801eeda:	429a      	cmp	r2, r3
 801eedc:	db30      	blt.n	801ef40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801eede:	4460      	add	r0, ip
 801eee0:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801eee4:	4461      	add	r1, ip
 801eee6:	b200      	sxth	r0, r0
 801eee8:	b209      	sxth	r1, r1
 801eeea:	4288      	cmp	r0, r1
 801eeec:	dc28      	bgt.n	801ef40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801eeee:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801eef2:	4432      	add	r2, r6
 801eef4:	440b      	add	r3, r1
 801eef6:	b212      	sxth	r2, r2
 801eef8:	b21b      	sxth	r3, r3
 801eefa:	429a      	cmp	r2, r3
 801eefc:	dc20      	bgt.n	801ef40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801eefe:	6823      	ldr	r3, [r4, #0]
 801ef00:	4620      	mov	r0, r4
 801ef02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef04:	4798      	blx	r3
 801ef06:	4682      	mov	sl, r0
 801ef08:	6828      	ldr	r0, [r5, #0]
 801ef0a:	6803      	ldr	r3, [r0, #0]
 801ef0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef0e:	4798      	blx	r3
 801ef10:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801ef14:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ef18:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ef1c:	9303      	str	r3, [sp, #12]
 801ef1e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ef22:	1a9b      	subs	r3, r3, r2
 801ef24:	b29b      	uxth	r3, r3
 801ef26:	b21c      	sxth	r4, r3
 801ef28:	2c00      	cmp	r4, #0
 801ef2a:	dc0e      	bgt.n	801ef4a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801ef2c:	b134      	cbz	r4, 801ef3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801ef2e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ef32:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ef36:	4413      	add	r3, r2
 801ef38:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ef3c:	463c      	mov	r4, r7
 801ef3e:	e00b      	b.n	801ef58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801ef40:	4b4e      	ldr	r3, [pc, #312]	; (801f07c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801ef42:	f240 11f9 	movw	r1, #505	; 0x1f9
 801ef46:	4a47      	ldr	r2, [pc, #284]	; (801f064 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801ef48:	e758      	b.n	801edfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801ef4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef4e:	ebab 0303 	sub.w	r3, fp, r3
 801ef52:	443c      	add	r4, r7
 801ef54:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801ef58:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801ef5c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801ef60:	1a9b      	subs	r3, r3, r2
 801ef62:	b29b      	uxth	r3, r3
 801ef64:	b219      	sxth	r1, r3
 801ef66:	2900      	cmp	r1, #0
 801ef68:	dd50      	ble.n	801f00c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801ef6a:	9a03      	ldr	r2, [sp, #12]
 801ef6c:	fb02 4401 	mla	r4, r2, r1, r4
 801ef70:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801ef74:	1ad3      	subs	r3, r2, r3
 801ef76:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ef7a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ef7e:	f1bc 0f00 	cmp.w	ip, #0
 801ef82:	dd3f      	ble.n	801f004 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ef84:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801ef88:	2e00      	cmp	r6, #0
 801ef8a:	dd3b      	ble.n	801f004 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801ef8c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ef90:	2203      	movs	r2, #3
 801ef92:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ef96:	fb0a f801 	mul.w	r8, sl, r1
 801ef9a:	fb13 8802 	smlabb	r8, r3, r2, r8
 801ef9e:	9a02      	ldr	r2, [sp, #8]
 801efa0:	4480      	add	r8, r0
 801efa2:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801efa6:	8812      	ldrh	r2, [r2, #0]
 801efa8:	4584      	cmp	ip, r0
 801efaa:	eba2 0303 	sub.w	r3, r2, r3
 801efae:	bfa8      	it	ge
 801efb0:	4684      	movge	ip, r0
 801efb2:	459c      	cmp	ip, r3
 801efb4:	bfa8      	it	ge
 801efb6:	469c      	movge	ip, r3
 801efb8:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801efbc:	429e      	cmp	r6, r3
 801efbe:	bfa8      	it	ge
 801efc0:	461e      	movge	r6, r3
 801efc2:	4b2d      	ldr	r3, [pc, #180]	; (801f078 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801efc4:	881b      	ldrh	r3, [r3, #0]
 801efc6:	1a59      	subs	r1, r3, r1
 801efc8:	4633      	mov	r3, r6
 801efca:	428e      	cmp	r6, r1
 801efcc:	bfa8      	it	ge
 801efce:	460b      	movge	r3, r1
 801efd0:	4562      	cmp	r2, ip
 801efd2:	9302      	str	r3, [sp, #8]
 801efd4:	d12d      	bne.n	801f032 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801efd6:	455a      	cmp	r2, fp
 801efd8:	d12b      	bne.n	801f032 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801efda:	6828      	ldr	r0, [r5, #0]
 801efdc:	6803      	ldr	r3, [r0, #0]
 801efde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efe0:	4798      	blx	r3
 801efe2:	07c3      	lsls	r3, r0, #31
 801efe4:	d51b      	bpl.n	801f01e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801efe6:	6828      	ldr	r0, [r5, #0]
 801efe8:	9b02      	ldr	r3, [sp, #8]
 801efea:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801efee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801eff2:	6803      	ldr	r3, [r0, #0]
 801eff4:	f8cd b000 	str.w	fp, [sp]
 801eff8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801effa:	4623      	mov	r3, r4
 801effc:	e899 0006 	ldmia.w	r9, {r1, r2}
 801f000:	47a8      	blx	r5
 801f002:	4607      	mov	r7, r0
 801f004:	4638      	mov	r0, r7
 801f006:	b00f      	add	sp, #60	; 0x3c
 801f008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f00c:	bf1f      	itttt	ne
 801f00e:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801f012:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801f016:	189b      	addne	r3, r3, r2
 801f018:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801f01c:	e7ad      	b.n	801ef7a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801f01e:	6828      	ldr	r0, [r5, #0]
 801f020:	4642      	mov	r2, r8
 801f022:	4621      	mov	r1, r4
 801f024:	6803      	ldr	r3, [r0, #0]
 801f026:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801f028:	9b02      	ldr	r3, [sp, #8]
 801f02a:	fb03 f30a 	mul.w	r3, r3, sl
 801f02e:	47a8      	blx	r5
 801f030:	e7e8      	b.n	801f004 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f032:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801f036:	f04f 0900 	mov.w	r9, #0
 801f03a:	9b02      	ldr	r3, [sp, #8]
 801f03c:	454b      	cmp	r3, r9
 801f03e:	dde1      	ble.n	801f004 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f040:	6828      	ldr	r0, [r5, #0]
 801f042:	4642      	mov	r2, r8
 801f044:	4621      	mov	r1, r4
 801f046:	44d0      	add	r8, sl
 801f048:	6803      	ldr	r3, [r0, #0]
 801f04a:	f109 0901 	add.w	r9, r9, #1
 801f04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f050:	461e      	mov	r6, r3
 801f052:	465b      	mov	r3, fp
 801f054:	47b0      	blx	r6
 801f056:	9b03      	ldr	r3, [sp, #12]
 801f058:	441c      	add	r4, r3
 801f05a:	e7ee      	b.n	801f03a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801f05c:	200094d8 	.word	0x200094d8
 801f060:	08028d6b 	.word	0x08028d6b
 801f064:	08029549 	.word	0x08029549
 801f068:	08028d39 	.word	0x08028d39
 801f06c:	08028e1d 	.word	0x08028e1d
 801f070:	08028e72 	.word	0x08028e72
 801f074:	200094d0 	.word	0x200094d0
 801f078:	200094d2 	.word	0x200094d2
 801f07c:	08028eb0 	.word	0x08028eb0

0801f080 <_ZN8touchgfx8LCD24bppC1Ev>:
 801f080:	4a0b      	ldr	r2, [pc, #44]	; (801f0b0 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801f082:	6002      	str	r2, [r0, #0]
 801f084:	2200      	movs	r2, #0
 801f086:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801f08a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801f08e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801f092:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801f096:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801f09a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801f09e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801f0a2:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801f0a6:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801f0aa:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801f0ae:	4770      	bx	lr
 801f0b0:	08029194 	.word	0x08029194

0801f0b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801f0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0b8:	b093      	sub	sp, #76	; 0x4c
 801f0ba:	880c      	ldrh	r4, [r1, #0]
 801f0bc:	4605      	mov	r5, r0
 801f0be:	460f      	mov	r7, r1
 801f0c0:	4691      	mov	r9, r2
 801f0c2:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801f0c6:	b12c      	cbz	r4, 801f0d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801f0c8:	4b71      	ldr	r3, [pc, #452]	; (801f290 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f0ca:	2167      	movs	r1, #103	; 0x67
 801f0cc:	4a71      	ldr	r2, [pc, #452]	; (801f294 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801f0ce:	4872      	ldr	r0, [pc, #456]	; (801f298 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801f0d0:	f006 f8fc 	bl	80252cc <__assert_func>
 801f0d4:	6810      	ldr	r0, [r2, #0]
 801f0d6:	ae0e      	add	r6, sp, #56	; 0x38
 801f0d8:	6851      	ldr	r1, [r2, #4]
 801f0da:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801f2a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801f0de:	c603      	stmia	r6!, {r0, r1}
 801f0e0:	6818      	ldr	r0, [r3, #0]
 801f0e2:	ae10      	add	r6, sp, #64	; 0x40
 801f0e4:	6859      	ldr	r1, [r3, #4]
 801f0e6:	c603      	stmia	r6!, {r0, r1}
 801f0e8:	a80e      	add	r0, sp, #56	; 0x38
 801f0ea:	f7fb f869 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f0ee:	4649      	mov	r1, r9
 801f0f0:	a810      	add	r0, sp, #64	; 0x40
 801f0f2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801f29c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801f0f6:	f7fb f84b 	bl	801a190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f0fa:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f0fe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801f102:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801f106:	f8d9 0000 	ldr.w	r0, [r9]
 801f10a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f10e:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801f112:	440d      	add	r5, r1
 801f114:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801f118:	440a      	add	r2, r1
 801f11a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801f11e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f122:	4413      	add	r3, r2
 801f124:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801f128:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801f12c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f12e:	6803      	ldr	r3, [r0, #0]
 801f130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f134:	4798      	blx	r3
 801f136:	2801      	cmp	r0, #1
 801f138:	d11e      	bne.n	801f178 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801f13a:	220b      	movs	r2, #11
 801f13c:	9008      	str	r0, [sp, #32]
 801f13e:	b2b6      	uxth	r6, r6
 801f140:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801f144:	9207      	str	r2, [sp, #28]
 801f146:	4629      	mov	r1, r5
 801f148:	f8ba 2000 	ldrh.w	r2, [sl]
 801f14c:	f8cd 8010 	str.w	r8, [sp, #16]
 801f150:	9601      	str	r6, [sp, #4]
 801f152:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801f156:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801f15a:	9203      	str	r2, [sp, #12]
 801f15c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f160:	9202      	str	r2, [sp, #8]
 801f162:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801f166:	9200      	str	r2, [sp, #0]
 801f168:	463a      	mov	r2, r7
 801f16a:	f8d9 0000 	ldr.w	r0, [r9]
 801f16e:	f7f9 fe0d 	bl	8018d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f172:	b013      	add	sp, #76	; 0x4c
 801f174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f178:	f8d9 0000 	ldr.w	r0, [r9]
 801f17c:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801f180:	6803      	ldr	r3, [r0, #0]
 801f182:	6a1b      	ldr	r3, [r3, #32]
 801f184:	4798      	blx	r3
 801f186:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801f18a:	f8ba 3000 	ldrh.w	r3, [sl]
 801f18e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f192:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f196:	fb01 2303 	mla	r3, r1, r3, r2
 801f19a:	4621      	mov	r1, r4
 801f19c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f1a0:	4418      	add	r0, r3
 801f1a2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801f1a6:	930c      	str	r3, [sp, #48]	; 0x30
 801f1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1aa:	4299      	cmp	r1, r3
 801f1ac:	da6a      	bge.n	801f284 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801f1ae:	1cc2      	adds	r2, r0, #3
 801f1b0:	46aa      	mov	sl, r5
 801f1b2:	ebaa 0305 	sub.w	r3, sl, r5
 801f1b6:	429e      	cmp	r6, r3
 801f1b8:	dd55      	ble.n	801f266 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801f1ba:	2404      	movs	r4, #4
 801f1bc:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801f1c0:	fb14 4303 	smlabb	r3, r4, r3, r4
 801f1c4:	eb07 0e03 	add.w	lr, r7, r3
 801f1c8:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801f1cc:	b184      	cbz	r4, 801f1f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801f1ce:	2cff      	cmp	r4, #255	; 0xff
 801f1d0:	f817 b003 	ldrb.w	fp, [r7, r3]
 801f1d4:	d10e      	bne.n	801f1f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f1d6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f1da:	d10b      	bne.n	801f1f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f1dc:	f802 bc03 	strb.w	fp, [r2, #-3]
 801f1e0:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801f1e4:	f802 3c02 	strb.w	r3, [r2, #-2]
 801f1e8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801f1ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f1f0:	3203      	adds	r2, #3
 801f1f2:	e7de      	b.n	801f1b2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801f1f4:	fb08 f404 	mul.w	r4, r8, r4
 801f1f8:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801f1fc:	1c63      	adds	r3, r4, #1
 801f1fe:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801f202:	121b      	asrs	r3, r3, #8
 801f204:	b29c      	uxth	r4, r3
 801f206:	43db      	mvns	r3, r3
 801f208:	fb1b fb04 	smulbb	fp, fp, r4
 801f20c:	b2db      	uxtb	r3, r3
 801f20e:	fb0c bc03 	mla	ip, ip, r3, fp
 801f212:	fa1f fc8c 	uxth.w	ip, ip
 801f216:	f10c 0b01 	add.w	fp, ip, #1
 801f21a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f21e:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801f222:	fb1b fb03 	smulbb	fp, fp, r3
 801f226:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f22a:	f802 cc03 	strb.w	ip, [r2, #-3]
 801f22e:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f232:	fb0c bc04 	mla	ip, ip, r4, fp
 801f236:	fa1f fc8c 	uxth.w	ip, ip
 801f23a:	f10c 0b01 	add.w	fp, ip, #1
 801f23e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f242:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f246:	f802 cc02 	strb.w	ip, [r2, #-2]
 801f24a:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801f24e:	f89e e002 	ldrb.w	lr, [lr, #2]
 801f252:	fb1c f303 	smulbb	r3, ip, r3
 801f256:	fb0e 3304 	mla	r3, lr, r4, r3
 801f25a:	b29b      	uxth	r3, r3
 801f25c:	1c5c      	adds	r4, r3, #1
 801f25e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f262:	121b      	asrs	r3, r3, #8
 801f264:	e7c2      	b.n	801f1ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801f266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f268:	3101      	adds	r1, #1
 801f26a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f26c:	881b      	ldrh	r3, [r3, #0]
 801f26e:	1b9b      	subs	r3, r3, r6
 801f270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f274:	4413      	add	r3, r2
 801f276:	4418      	add	r0, r3
 801f278:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801f27c:	1b9b      	subs	r3, r3, r6
 801f27e:	444b      	add	r3, r9
 801f280:	441d      	add	r5, r3
 801f282:	e791      	b.n	801f1a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801f284:	4b05      	ldr	r3, [pc, #20]	; (801f29c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801f286:	6818      	ldr	r0, [r3, #0]
 801f288:	6803      	ldr	r3, [r0, #0]
 801f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f28c:	4798      	blx	r3
 801f28e:	e770      	b.n	801f172 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801f290:	08028c9d 	.word	0x08028c9d
 801f294:	0802936b 	.word	0x0802936b
 801f298:	08028d39 	.word	0x08028d39
 801f29c:	200094d8 	.word	0x200094d8
 801f2a0:	200094d0 	.word	0x200094d0

0801f2a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2a8:	4614      	mov	r4, r2
 801f2aa:	880a      	ldrh	r2, [r1, #0]
 801f2ac:	b091      	sub	sp, #68	; 0x44
 801f2ae:	4680      	mov	r8, r0
 801f2b0:	2a01      	cmp	r2, #1
 801f2b2:	460e      	mov	r6, r1
 801f2b4:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f2b8:	d005      	beq.n	801f2c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801f2ba:	4b6d      	ldr	r3, [pc, #436]	; (801f470 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801f2bc:	21b1      	movs	r1, #177	; 0xb1
 801f2be:	4a6d      	ldr	r2, [pc, #436]	; (801f474 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801f2c0:	486d      	ldr	r0, [pc, #436]	; (801f478 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801f2c2:	f006 f803 	bl	80252cc <__assert_func>
 801f2c6:	6820      	ldr	r0, [r4, #0]
 801f2c8:	ad0c      	add	r5, sp, #48	; 0x30
 801f2ca:	6861      	ldr	r1, [r4, #4]
 801f2cc:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801f47c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801f2d0:	c503      	stmia	r5!, {r0, r1}
 801f2d2:	6818      	ldr	r0, [r3, #0]
 801f2d4:	ad0e      	add	r5, sp, #56	; 0x38
 801f2d6:	6859      	ldr	r1, [r3, #4]
 801f2d8:	c503      	stmia	r5!, {r0, r1}
 801f2da:	a80c      	add	r0, sp, #48	; 0x30
 801f2dc:	f7fa ff70 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f2e0:	4621      	mov	r1, r4
 801f2e2:	a80e      	add	r0, sp, #56	; 0x38
 801f2e4:	f7fa ff54 	bl	801a190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f2e8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f2ec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f2f0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f2f4:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801f2f8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f2fc:	eb08 0401 	add.w	r4, r8, r1
 801f300:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f304:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801f480 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801f308:	440a      	add	r2, r1
 801f30a:	f8d8 0000 	ldr.w	r0, [r8]
 801f30e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f312:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f316:	4413      	add	r3, r2
 801f318:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f31c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f320:	930a      	str	r3, [sp, #40]	; 0x28
 801f322:	6803      	ldr	r3, [r0, #0]
 801f324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f328:	4798      	blx	r3
 801f32a:	2801      	cmp	r0, #1
 801f32c:	d11e      	bne.n	801f36c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801f32e:	220b      	movs	r2, #11
 801f330:	9008      	str	r0, [sp, #32]
 801f332:	b2ad      	uxth	r5, r5
 801f334:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f338:	9207      	str	r2, [sp, #28]
 801f33a:	4621      	mov	r1, r4
 801f33c:	f8b9 2000 	ldrh.w	r2, [r9]
 801f340:	9501      	str	r5, [sp, #4]
 801f342:	9206      	str	r2, [sp, #24]
 801f344:	2200      	movs	r2, #0
 801f346:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801f34a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f34e:	9203      	str	r2, [sp, #12]
 801f350:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f354:	9202      	str	r2, [sp, #8]
 801f356:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f35a:	9200      	str	r2, [sp, #0]
 801f35c:	4632      	mov	r2, r6
 801f35e:	f8d8 0000 	ldr.w	r0, [r8]
 801f362:	f7f9 fd13 	bl	8018d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f366:	b011      	add	sp, #68	; 0x44
 801f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f36c:	f8d8 0000 	ldr.w	r0, [r8]
 801f370:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801f374:	6803      	ldr	r3, [r0, #0]
 801f376:	6a1b      	ldr	r3, [r3, #32]
 801f378:	4798      	blx	r3
 801f37a:	f8b9 3000 	ldrh.w	r3, [r9]
 801f37e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f382:	f04f 0e00 	mov.w	lr, #0
 801f386:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f38a:	fa1f f987 	uxth.w	r9, r7
 801f38e:	fb01 2303 	mla	r3, r1, r3, r2
 801f392:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801f396:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f39a:	b289      	uxth	r1, r1
 801f39c:	4418      	add	r0, r3
 801f39e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f3a2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3a6:	459e      	cmp	lr, r3
 801f3a8:	da5c      	bge.n	801f464 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801f3aa:	1cc3      	adds	r3, r0, #3
 801f3ac:	46a2      	mov	sl, r4
 801f3ae:	ebaa 0204 	sub.w	r2, sl, r4
 801f3b2:	4295      	cmp	r5, r2
 801f3b4:	dd46      	ble.n	801f444 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801f3b6:	f04f 0c03 	mov.w	ip, #3
 801f3ba:	f04f 0b04 	mov.w	fp, #4
 801f3be:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801f3c2:	2fff      	cmp	r7, #255	; 0xff
 801f3c4:	fb1c b202 	smlabb	r2, ip, r2, fp
 801f3c8:	eb06 0c02 	add.w	ip, r6, r2
 801f3cc:	f816 b002 	ldrb.w	fp, [r6, r2]
 801f3d0:	d02f      	beq.n	801f432 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801f3d2:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801f3d6:	fb12 f201 	smulbb	r2, r2, r1
 801f3da:	fb0b 2209 	mla	r2, fp, r9, r2
 801f3de:	b292      	uxth	r2, r2
 801f3e0:	f102 0b01 	add.w	fp, r2, #1
 801f3e4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f3e8:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801f3ec:	fb1b fb01 	smulbb	fp, fp, r1
 801f3f0:	1212      	asrs	r2, r2, #8
 801f3f2:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f3f6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f3fa:	fb02 b209 	mla	r2, r2, r9, fp
 801f3fe:	b292      	uxth	r2, r2
 801f400:	f102 0b01 	add.w	fp, r2, #1
 801f404:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f408:	1212      	asrs	r2, r2, #8
 801f40a:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f40e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f412:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801f416:	fb1c fc01 	smulbb	ip, ip, r1
 801f41a:	fb02 c209 	mla	r2, r2, r9, ip
 801f41e:	b292      	uxth	r2, r2
 801f420:	f102 0c01 	add.w	ip, r2, #1
 801f424:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f428:	1212      	asrs	r2, r2, #8
 801f42a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801f42e:	3303      	adds	r3, #3
 801f430:	e7bd      	b.n	801f3ae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801f432:	f803 bc03 	strb.w	fp, [r3, #-3]
 801f436:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f43a:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f43e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f442:	e7f2      	b.n	801f42a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801f444:	4b0d      	ldr	r3, [pc, #52]	; (801f47c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801f446:	f10e 0e01 	add.w	lr, lr, #1
 801f44a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f44c:	881b      	ldrh	r3, [r3, #0]
 801f44e:	1b5b      	subs	r3, r3, r5
 801f450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f454:	4413      	add	r3, r2
 801f456:	4418      	add	r0, r3
 801f458:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f45c:	1b5b      	subs	r3, r3, r5
 801f45e:	4443      	add	r3, r8
 801f460:	441c      	add	r4, r3
 801f462:	e79f      	b.n	801f3a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801f464:	4b06      	ldr	r3, [pc, #24]	; (801f480 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f466:	6818      	ldr	r0, [r3, #0]
 801f468:	6803      	ldr	r3, [r0, #0]
 801f46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f46c:	4798      	blx	r3
 801f46e:	e77a      	b.n	801f366 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801f470:	08028b81 	.word	0x08028b81
 801f474:	0802925e 	.word	0x0802925e
 801f478:	08028d39 	.word	0x08028d39
 801f47c:	200094d0 	.word	0x200094d0
 801f480:	200094d8 	.word	0x200094d8

0801f484 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f484:	b570      	push	{r4, r5, r6, lr}
 801f486:	780d      	ldrb	r5, [r1, #0]
 801f488:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801f48c:	2d01      	cmp	r5, #1
 801f48e:	d00d      	beq.n	801f4ac <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801f490:	d307      	bcc.n	801f4a2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801f492:	2d02      	cmp	r5, #2
 801f494:	d10f      	bne.n	801f4b6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801f496:	4b08      	ldr	r3, [pc, #32]	; (801f4b8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801f498:	215a      	movs	r1, #90	; 0x5a
 801f49a:	4a08      	ldr	r2, [pc, #32]	; (801f4bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801f49c:	4808      	ldr	r0, [pc, #32]	; (801f4c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801f49e:	f005 ff15 	bl	80252cc <__assert_func>
 801f4a2:	9404      	str	r4, [sp, #16]
 801f4a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f4a8:	f7ff be04 	b.w	801f0b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f4ac:	9404      	str	r4, [sp, #16]
 801f4ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f4b2:	f7ff bef7 	b.w	801f2a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f4b6:	bd70      	pop	{r4, r5, r6, pc}
 801f4b8:	08028b36 	.word	0x08028b36
 801f4bc:	080291dc 	.word	0x080291dc
 801f4c0:	08028d39 	.word	0x08028d39

0801f4c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801f4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4c8:	4605      	mov	r5, r0
 801f4ca:	b08f      	sub	sp, #60	; 0x3c
 801f4cc:	460c      	mov	r4, r1
 801f4ce:	461f      	mov	r7, r3
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	d04e      	beq.n	801f572 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801f4d4:	6808      	ldr	r0, [r1, #0]
 801f4d6:	ab0a      	add	r3, sp, #40	; 0x28
 801f4d8:	6849      	ldr	r1, [r1, #4]
 801f4da:	4e81      	ldr	r6, [pc, #516]	; (801f6e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801f4dc:	c303      	stmia	r3!, {r0, r1}
 801f4de:	6810      	ldr	r0, [r2, #0]
 801f4e0:	ab0c      	add	r3, sp, #48	; 0x30
 801f4e2:	6851      	ldr	r1, [r2, #4]
 801f4e4:	c303      	stmia	r3!, {r0, r1}
 801f4e6:	a80a      	add	r0, sp, #40	; 0x28
 801f4e8:	f7fa fe6a 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f4ec:	4621      	mov	r1, r4
 801f4ee:	a80c      	add	r0, sp, #48	; 0x30
 801f4f0:	f7fa fe4e 	bl	801a190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f4f4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801f4f8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801f4fc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f500:	6830      	ldr	r0, [r6, #0]
 801f502:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f506:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
 801f50a:	f9bd 8036 	ldrsh.w	r8, [sp, #54]	; 0x36
 801f50e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801f512:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801f516:	440a      	add	r2, r1
 801f518:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801f51c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801f520:	4413      	add	r3, r2
 801f522:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f526:	6803      	ldr	r3, [r0, #0]
 801f528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f52a:	4798      	blx	r3
 801f52c:	2fff      	cmp	r7, #255	; 0xff
 801f52e:	4633      	mov	r3, r6
 801f530:	4e6c      	ldr	r6, [pc, #432]	; (801f6e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801f532:	d021      	beq.n	801f578 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb4>
 801f534:	f010 0f04 	tst.w	r0, #4
 801f538:	6818      	ldr	r0, [r3, #0]
 801f53a:	d020      	beq.n	801f57e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xba>
 801f53c:	2100      	movs	r1, #0
 801f53e:	f04f 0e01 	mov.w	lr, #1
 801f542:	f8d0 c000 	ldr.w	ip, [r0]
 801f546:	b2a4      	uxth	r4, r4
 801f548:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801f54c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801f550:	e9cd 1e06 	strd	r1, lr, [sp, #24]
 801f554:	8836      	ldrh	r6, [r6, #0]
 801f556:	9703      	str	r7, [sp, #12]
 801f558:	9400      	str	r4, [sp, #0]
 801f55a:	e9cd 1604 	strd	r1, r6, [sp, #16]
 801f55e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f562:	9102      	str	r1, [sp, #8]
 801f564:	fa1f f188 	uxth.w	r1, r8
 801f568:	9101      	str	r1, [sp, #4]
 801f56a:	4629      	mov	r1, r5
 801f56c:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
 801f570:	47a0      	blx	r4
 801f572:	b00f      	add	sp, #60	; 0x3c
 801f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f578:	f010 0f01 	tst.w	r0, #1
 801f57c:	e7dc      	b.n	801f538 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x74>
 801f57e:	6803      	ldr	r3, [r0, #0]
 801f580:	6a1b      	ldr	r3, [r3, #32]
 801f582:	4798      	blx	r3
 801f584:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801f588:	8833      	ldrh	r3, [r6, #0]
 801f58a:	2fff      	cmp	r7, #255	; 0xff
 801f58c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801f590:	fb01 2303 	mla	r3, r1, r3, r2
 801f594:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 801f598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f59c:	4418      	add	r0, r3
 801f59e:	d128      	bne.n	801f5f2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x12e>
 801f5a0:	0051      	lsls	r1, r2, #1
 801f5a2:	2700      	movs	r7, #0
 801f5a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5a8:	4547      	cmp	r7, r8
 801f5aa:	f280 8092 	bge.w	801f6d2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801f5ae:	4684      	mov	ip, r0
 801f5b0:	f04f 0e00 	mov.w	lr, #0
 801f5b4:	45a6      	cmp	lr, r4
 801f5b6:	f10c 0c03 	add.w	ip, ip, #3
 801f5ba:	da7c      	bge.n	801f6b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1f2>
 801f5bc:	f835 901e 	ldrh.w	r9, [r5, lr, lsl #1]
 801f5c0:	f10e 0e01 	add.w	lr, lr, #1
 801f5c4:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801f5c8:	f3c9 0b82 	ubfx	fp, r9, #2, #3
 801f5cc:	ea4f 03e9 	mov.w	r3, r9, asr #3
 801f5d0:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801f5d4:	ea4b 09c9 	orr.w	r9, fp, r9, lsl #3
 801f5d8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f5dc:	ea4a 1a5a 	orr.w	sl, sl, sl, lsr #5
 801f5e0:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801f5e4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801f5e8:	f80c ac01 	strb.w	sl, [ip, #-1]
 801f5ec:	f80c 3c02 	strb.w	r3, [ip, #-2]
 801f5f0:	e7e0      	b.n	801f5b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xf0>
 801f5f2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801f5f6:	ea6f 0c07 	mvn.w	ip, r7
 801f5fa:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 801f5fe:	f04f 0900 	mov.w	r9, #0
 801f602:	9309      	str	r3, [sp, #36]	; 0x24
 801f604:	fa5f fc8c 	uxtb.w	ip, ip
 801f608:	b2bb      	uxth	r3, r7
 801f60a:	45c1      	cmp	r9, r8
 801f60c:	da61      	bge.n	801f6d2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x20e>
 801f60e:	4601      	mov	r1, r0
 801f610:	f04f 0e00 	mov.w	lr, #0
 801f614:	45a6      	cmp	lr, r4
 801f616:	f101 0103 	add.w	r1, r1, #3
 801f61a:	da3b      	bge.n	801f694 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d0>
 801f61c:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801f620:	f10e 0e01 	add.w	lr, lr, #1
 801f624:	f3c2 0b82 	ubfx	fp, r2, #2, #3
 801f628:	1216      	asrs	r6, r2, #8
 801f62a:	10d7      	asrs	r7, r2, #3
 801f62c:	ea4b 02c2 	orr.w	r2, fp, r2, lsl #3
 801f630:	f811 bc03 	ldrb.w	fp, [r1, #-3]
 801f634:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f638:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f63c:	fb1b fb0c 	smulbb	fp, fp, ip
 801f640:	b2d2      	uxtb	r2, r2
 801f642:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801f646:	fb02 b203 	mla	r2, r2, r3, fp
 801f64a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801f64e:	fb17 f703 	smulbb	r7, r7, r3
 801f652:	fb16 f603 	smulbb	r6, r6, r3
 801f656:	b292      	uxth	r2, r2
 801f658:	f102 0b01 	add.w	fp, r2, #1
 801f65c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f660:	1212      	asrs	r2, r2, #8
 801f662:	f801 2c03 	strb.w	r2, [r1, #-3]
 801f666:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 801f66a:	fb02 770c 	mla	r7, r2, ip, r7
 801f66e:	b2bf      	uxth	r7, r7
 801f670:	1c7a      	adds	r2, r7, #1
 801f672:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f676:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 801f67a:	fb02 660c 	mla	r6, r2, ip, r6
 801f67e:	123f      	asrs	r7, r7, #8
 801f680:	b2b6      	uxth	r6, r6
 801f682:	f801 7c02 	strb.w	r7, [r1, #-2]
 801f686:	1c72      	adds	r2, r6, #1
 801f688:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f68c:	1236      	asrs	r6, r6, #8
 801f68e:	f801 6c01 	strb.w	r6, [r1, #-1]
 801f692:	e7bf      	b.n	801f614 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x150>
 801f694:	4a13      	ldr	r2, [pc, #76]	; (801f6e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x220>)
 801f696:	f109 0901 	add.w	r9, r9, #1
 801f69a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f69c:	8812      	ldrh	r2, [r2, #0]
 801f69e:	1b12      	subs	r2, r2, r4
 801f6a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6a4:	440a      	add	r2, r1
 801f6a6:	4410      	add	r0, r2
 801f6a8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801f6ac:	1b12      	subs	r2, r2, r4
 801f6ae:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 801f6b2:	4415      	add	r5, r2
 801f6b4:	e7a9      	b.n	801f60a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x146>
 801f6b6:	8833      	ldrh	r3, [r6, #0]
 801f6b8:	3701      	adds	r7, #1
 801f6ba:	1b1b      	subs	r3, r3, r4
 801f6bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6c0:	4413      	add	r3, r2
 801f6c2:	4418      	add	r0, r3
 801f6c4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801f6c8:	1b1b      	subs	r3, r3, r4
 801f6ca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f6ce:	441d      	add	r5, r3
 801f6d0:	e76a      	b.n	801f5a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xe4>
 801f6d2:	4b03      	ldr	r3, [pc, #12]	; (801f6e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x21c>)
 801f6d4:	6818      	ldr	r0, [r3, #0]
 801f6d6:	6803      	ldr	r3, [r0, #0]
 801f6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f6da:	4798      	blx	r3
 801f6dc:	e749      	b.n	801f572 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xae>
 801f6de:	bf00      	nop
 801f6e0:	200094d8 	.word	0x200094d8
 801f6e4:	200094d0 	.word	0x200094d0

0801f6e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6ec:	b08b      	sub	sp, #44	; 0x2c
 801f6ee:	460c      	mov	r4, r1
 801f6f0:	4680      	mov	r8, r0
 801f6f2:	469a      	mov	sl, r3
 801f6f4:	6808      	ldr	r0, [r1, #0]
 801f6f6:	ab06      	add	r3, sp, #24
 801f6f8:	6849      	ldr	r1, [r1, #4]
 801f6fa:	c303      	stmia	r3!, {r0, r1}
 801f6fc:	6810      	ldr	r0, [r2, #0]
 801f6fe:	ab08      	add	r3, sp, #32
 801f700:	6851      	ldr	r1, [r2, #4]
 801f702:	c303      	stmia	r3!, {r0, r1}
 801f704:	a806      	add	r0, sp, #24
 801f706:	f7fa fd5b 	bl	801a1c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f70a:	4621      	mov	r1, r4
 801f70c:	a808      	add	r0, sp, #32
 801f70e:	4c61      	ldr	r4, [pc, #388]	; (801f894 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f710:	f7fa fd3e 	bl	801a190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f714:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f718:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f71c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f720:	6820      	ldr	r0, [r4, #0]
 801f722:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f726:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801f72a:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801f72e:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801f732:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f736:	440a      	add	r2, r1
 801f738:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f73c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f740:	4413      	add	r3, r2
 801f742:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f746:	6803      	ldr	r3, [r0, #0]
 801f748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f74a:	4798      	blx	r3
 801f74c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f750:	d118      	bne.n	801f784 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801f752:	f010 0f20 	tst.w	r0, #32
 801f756:	6820      	ldr	r0, [r4, #0]
 801f758:	d017      	beq.n	801f78a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801f75a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f75e:	b2bf      	uxth	r7, r7
 801f760:	6801      	ldr	r1, [r0, #0]
 801f762:	9402      	str	r4, [sp, #8]
 801f764:	fa1f f489 	uxth.w	r4, r9
 801f768:	f8cd a00c 	str.w	sl, [sp, #12]
 801f76c:	9401      	str	r4, [sp, #4]
 801f76e:	9700      	str	r7, [sp, #0]
 801f770:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f774:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801f776:	4641      	mov	r1, r8
 801f778:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f77c:	47a0      	blx	r4
 801f77e:	b00b      	add	sp, #44	; 0x2c
 801f780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f784:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f788:	e7e5      	b.n	801f756 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801f78a:	6803      	ldr	r3, [r0, #0]
 801f78c:	6a1b      	ldr	r3, [r3, #32]
 801f78e:	4798      	blx	r3
 801f790:	4b41      	ldr	r3, [pc, #260]	; (801f898 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801f792:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f796:	f04f 0c00 	mov.w	ip, #0
 801f79a:	881a      	ldrh	r2, [r3, #0]
 801f79c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f7a0:	fb04 1202 	mla	r2, r4, r2, r1
 801f7a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7a8:	4410      	add	r0, r2
 801f7aa:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801f7ae:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801f7b2:	0092      	lsls	r2, r2, #2
 801f7b4:	9105      	str	r1, [sp, #20]
 801f7b6:	9204      	str	r2, [sp, #16]
 801f7b8:	45cc      	cmp	ip, r9
 801f7ba:	da65      	bge.n	801f888 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801f7bc:	1cc4      	adds	r4, r0, #3
 801f7be:	f108 0504 	add.w	r5, r8, #4
 801f7c2:	f04f 0e00 	mov.w	lr, #0
 801f7c6:	45be      	cmp	lr, r7
 801f7c8:	da4d      	bge.n	801f866 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801f7ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f7ce:	b181      	cbz	r1, 801f7f2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801f7d0:	29ff      	cmp	r1, #255	; 0xff
 801f7d2:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801f7d6:	d111      	bne.n	801f7fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f7d8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f7dc:	d10e      	bne.n	801f7fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f7de:	f804 bc03 	strb.w	fp, [r4, #-3]
 801f7e2:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801f7e6:	f804 2c02 	strb.w	r2, [r4, #-2]
 801f7ea:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801f7ee:	f804 2c01 	strb.w	r2, [r4, #-1]
 801f7f2:	f10e 0e01 	add.w	lr, lr, #1
 801f7f6:	3403      	adds	r4, #3
 801f7f8:	3504      	adds	r5, #4
 801f7fa:	e7e4      	b.n	801f7c6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f7fc:	fb0a f101 	mul.w	r1, sl, r1
 801f800:	1c4a      	adds	r2, r1, #1
 801f802:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f806:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801f80a:	1212      	asrs	r2, r2, #8
 801f80c:	b296      	uxth	r6, r2
 801f80e:	43d2      	mvns	r2, r2
 801f810:	fb1b fb06 	smulbb	fp, fp, r6
 801f814:	b2d2      	uxtb	r2, r2
 801f816:	fb01 b102 	mla	r1, r1, r2, fp
 801f81a:	b289      	uxth	r1, r1
 801f81c:	f101 0b01 	add.w	fp, r1, #1
 801f820:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f824:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801f828:	fb1b fb02 	smulbb	fp, fp, r2
 801f82c:	1209      	asrs	r1, r1, #8
 801f82e:	f804 1c03 	strb.w	r1, [r4, #-3]
 801f832:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801f836:	fb01 b106 	mla	r1, r1, r6, fp
 801f83a:	b289      	uxth	r1, r1
 801f83c:	f101 0b01 	add.w	fp, r1, #1
 801f840:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801f844:	1209      	asrs	r1, r1, #8
 801f846:	f804 1c02 	strb.w	r1, [r4, #-2]
 801f84a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801f84e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801f852:	fb11 f202 	smulbb	r2, r1, r2
 801f856:	fb0b 2206 	mla	r2, fp, r6, r2
 801f85a:	b292      	uxth	r2, r2
 801f85c:	1c56      	adds	r6, r2, #1
 801f85e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f862:	1212      	asrs	r2, r2, #8
 801f864:	e7c3      	b.n	801f7ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f866:	881a      	ldrh	r2, [r3, #0]
 801f868:	f10c 0c01 	add.w	ip, ip, #1
 801f86c:	9905      	ldr	r1, [sp, #20]
 801f86e:	1bd2      	subs	r2, r2, r7
 801f870:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f874:	440a      	add	r2, r1
 801f876:	9904      	ldr	r1, [sp, #16]
 801f878:	4410      	add	r0, r2
 801f87a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f87e:	1bd2      	subs	r2, r2, r7
 801f880:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f884:	4490      	add	r8, r2
 801f886:	e797      	b.n	801f7b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801f888:	4b02      	ldr	r3, [pc, #8]	; (801f894 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f88a:	6818      	ldr	r0, [r3, #0]
 801f88c:	6803      	ldr	r3, [r0, #0]
 801f88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f890:	4798      	blx	r3
 801f892:	e774      	b.n	801f77e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801f894:	200094d8 	.word	0x200094d8
 801f898:	200094d0 	.word	0x200094d0

0801f89c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f8a0:	b085      	sub	sp, #20
 801f8a2:	4606      	mov	r6, r0
 801f8a4:	460c      	mov	r4, r1
 801f8a6:	4691      	mov	r9, r2
 801f8a8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f8ac:	4698      	mov	r8, r3
 801f8ae:	b3a5      	cbz	r5, 801f91a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801f8b0:	4608      	mov	r0, r1
 801f8b2:	f7fd fa39 	bl	801cd28 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f8b6:	4607      	mov	r7, r0
 801f8b8:	4620      	mov	r0, r4
 801f8ba:	f7fd fa6f 	bl	801cd9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f8be:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801f8c8:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f8cc:	f8ad 700c 	strh.w	r7, [sp, #12]
 801f8d0:	f7fd fb28 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f8d4:	b1a0      	cbz	r0, 801f900 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801f8d6:	4620      	mov	r0, r4
 801f8d8:	f7fd fb24 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f8dc:	2801      	cmp	r0, #1
 801f8de:	d00f      	beq.n	801f900 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801f8e0:	4620      	mov	r0, r4
 801f8e2:	f7fd fb1f 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f8e6:	2802      	cmp	r0, #2
 801f8e8:	d00a      	beq.n	801f900 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801f8ea:	4620      	mov	r0, r4
 801f8ec:	f7fd fb1a 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f8f0:	280b      	cmp	r0, #11
 801f8f2:	d005      	beq.n	801f900 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x64>
 801f8f4:	4b21      	ldr	r3, [pc, #132]	; (801f97c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe0>)
 801f8f6:	213e      	movs	r1, #62	; 0x3e
 801f8f8:	4a21      	ldr	r2, [pc, #132]	; (801f980 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe4>)
 801f8fa:	4822      	ldr	r0, [pc, #136]	; (801f984 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xe8>)
 801f8fc:	f005 fce6 	bl	80252cc <__assert_func>
 801f900:	4620      	mov	r0, r4
 801f902:	f7fd fb0f 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f906:	2802      	cmp	r0, #2
 801f908:	4620      	mov	r0, r4
 801f90a:	d109      	bne.n	801f920 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x84>
 801f90c:	f7fd fa80 	bl	801ce10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f910:	462b      	mov	r3, r5
 801f912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f914:	a902      	add	r1, sp, #8
 801f916:	f7ff fee7 	bl	801f6e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f91a:	b005      	add	sp, #20
 801f91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f920:	f7fd fb00 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f924:	280b      	cmp	r0, #11
 801f926:	4620      	mov	r0, r4
 801f928:	d10d      	bne.n	801f946 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801f92a:	f7fd fa71 	bl	801ce10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f92e:	4606      	mov	r6, r0
 801f930:	4620      	mov	r0, r4
 801f932:	f7fd fa9f 	bl	801ce74 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f936:	9500      	str	r5, [sp, #0]
 801f938:	4601      	mov	r1, r0
 801f93a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f93c:	aa02      	add	r2, sp, #8
 801f93e:	4630      	mov	r0, r6
 801f940:	f7ff fda0 	bl	801f484 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f944:	e7e9      	b.n	801f91a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801f946:	f7fd faed 	bl	801cf24 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f94a:	b940      	cbnz	r0, 801f95e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc2>
 801f94c:	4620      	mov	r0, r4
 801f94e:	f7fd fa5f 	bl	801ce10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f952:	462b      	mov	r3, r5
 801f954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f956:	a902      	add	r1, sp, #8
 801f958:	f7ff fdb4 	bl	801f4c4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f95c:	e7dd      	b.n	801f91a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801f95e:	6833      	ldr	r3, [r6, #0]
 801f960:	4620      	mov	r0, r4
 801f962:	68df      	ldr	r7, [r3, #12]
 801f964:	f7fd fa54 	bl	801ce10 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f968:	2300      	movs	r3, #0
 801f96a:	4601      	mov	r1, r0
 801f96c:	aa02      	add	r2, sp, #8
 801f96e:	4630      	mov	r0, r6
 801f970:	e9cd 5300 	strd	r5, r3, [sp]
 801f974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f976:	47b8      	blx	r7
 801f978:	e7cf      	b.n	801f91a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7e>
 801f97a:	bf00      	nop
 801f97c:	08028bcf 	.word	0x08028bcf
 801f980:	080292e7 	.word	0x080292e7
 801f984:	08028d39 	.word	0x08028d39

0801f988 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f988:	b570      	push	{r4, r5, r6, lr}
 801f98a:	9d04      	ldr	r5, [sp, #16]
 801f98c:	460c      	mov	r4, r1
 801f98e:	4619      	mov	r1, r3
 801f990:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f994:	2a0d      	cmp	r2, #13
 801f996:	d826      	bhi.n	801f9e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801f998:	e8df f002 	tbb	[pc, r2]
 801f99c:	200e1407 	.word	0x200e1407
 801f9a0:	20202020 	.word	0x20202020
 801f9a4:	20202020 	.word	0x20202020
 801f9a8:	2020      	.short	0x2020
 801f9aa:	4b0f      	ldr	r3, [pc, #60]	; (801f9e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f9ac:	f240 11cd 	movw	r1, #461	; 0x1cd
 801f9b0:	4a0e      	ldr	r2, [pc, #56]	; (801f9ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f9b2:	480f      	ldr	r0, [pc, #60]	; (801f9f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801f9b4:	f005 fc8a 	bl	80252cc <__assert_func>
 801f9b8:	462a      	mov	r2, r5
 801f9ba:	4620      	mov	r0, r4
 801f9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f9c0:	f7ff be92 	b.w	801f6e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f9c4:	6802      	ldr	r2, [r0, #0]
 801f9c6:	2600      	movs	r6, #0
 801f9c8:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f9cc:	68d6      	ldr	r6, [r2, #12]
 801f9ce:	462b      	mov	r3, r5
 801f9d0:	460a      	mov	r2, r1
 801f9d2:	4621      	mov	r1, r4
 801f9d4:	46b4      	mov	ip, r6
 801f9d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f9da:	4760      	bx	ip
 801f9dc:	4b05      	ldr	r3, [pc, #20]	; (801f9f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801f9de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801f9e2:	4a02      	ldr	r2, [pc, #8]	; (801f9ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801f9e4:	e7e5      	b.n	801f9b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801f9e6:	bd70      	pop	{r4, r5, r6, pc}
 801f9e8:	08028f10 	.word	0x08028f10
 801f9ec:	080295cf 	.word	0x080295cf
 801f9f0:	08028d39 	.word	0x08028d39
 801f9f4:	08028f51 	.word	0x08028f51

0801f9f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f9f8:	b158      	cbz	r0, 801fa12 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801f9fa:	2902      	cmp	r1, #2
 801f9fc:	d00f      	beq.n	801fa1e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801f9fe:	2903      	cmp	r1, #3
 801fa00:	d010      	beq.n	801fa24 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801fa02:	2901      	cmp	r1, #1
 801fa04:	d101      	bne.n	801fa0a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fa06:	2001      	movs	r0, #1
 801fa08:	4770      	bx	lr
 801fa0a:	4b08      	ldr	r3, [pc, #32]	; (801fa2c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801fa0c:	8819      	ldrh	r1, [r3, #0]
 801fa0e:	4248      	negs	r0, r1
 801fa10:	4770      	bx	lr
 801fa12:	2902      	cmp	r1, #2
 801fa14:	d006      	beq.n	801fa24 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801fa16:	2903      	cmp	r1, #3
 801fa18:	d0f7      	beq.n	801fa0a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fa1a:	2901      	cmp	r1, #1
 801fa1c:	d1f3      	bne.n	801fa06 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801fa1e:	4b03      	ldr	r3, [pc, #12]	; (801fa2c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801fa20:	8818      	ldrh	r0, [r3, #0]
 801fa22:	4770      	bx	lr
 801fa24:	f04f 30ff 	mov.w	r0, #4294967295
 801fa28:	4770      	bx	lr
 801fa2a:	bf00      	nop
 801fa2c:	200094d0 	.word	0x200094d0

0801fa30 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801fa30:	b170      	cbz	r0, 801fa50 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801fa32:	2902      	cmp	r1, #2
 801fa34:	d012      	beq.n	801fa5c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801fa36:	2903      	cmp	r1, #3
 801fa38:	d006      	beq.n	801fa48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801fa3a:	2901      	cmp	r1, #1
 801fa3c:	d001      	beq.n	801fa42 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801fa3e:	2001      	movs	r0, #1
 801fa40:	4770      	bx	lr
 801fa42:	4b08      	ldr	r3, [pc, #32]	; (801fa64 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801fa44:	8818      	ldrh	r0, [r3, #0]
 801fa46:	4770      	bx	lr
 801fa48:	4b06      	ldr	r3, [pc, #24]	; (801fa64 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801fa4a:	8818      	ldrh	r0, [r3, #0]
 801fa4c:	4240      	negs	r0, r0
 801fa4e:	4770      	bx	lr
 801fa50:	2902      	cmp	r1, #2
 801fa52:	d0f9      	beq.n	801fa48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801fa54:	2903      	cmp	r1, #3
 801fa56:	d0f2      	beq.n	801fa3e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801fa58:	2901      	cmp	r1, #1
 801fa5a:	d1f2      	bne.n	801fa42 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 801fa60:	4770      	bx	lr
 801fa62:	bf00      	nop
 801fa64:	200094d0 	.word	0x200094d0

0801fa68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa6c:	b097      	sub	sp, #92	; 0x5c
 801fa6e:	910b      	str	r1, [sp, #44]	; 0x2c
 801fa70:	a912      	add	r1, sp, #72	; 0x48
 801fa72:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801fa76:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801fa7a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801fa7e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801fa82:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801fa86:	e881 000c 	stmia.w	r1, {r2, r3}
 801fa8a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801fa8e:	9308      	str	r3, [sp, #32]
 801fa90:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801fa94:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801fa98:	9310      	str	r3, [sp, #64]	; 0x40
 801fa9a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801fa9e:	798d      	ldrb	r5, [r1, #6]
 801faa0:	930c      	str	r3, [sp, #48]	; 0x30
 801faa2:	7b4b      	ldrb	r3, [r1, #13]
 801faa4:	0158      	lsls	r0, r3, #5
 801faa6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801faaa:	4328      	orrs	r0, r5
 801faac:	9007      	str	r0, [sp, #28]
 801faae:	f000 8183 	beq.w	801fdb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801fab2:	011b      	lsls	r3, r3, #4
 801fab4:	79c8      	ldrb	r0, [r1, #7]
 801fab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801faba:	4303      	orrs	r3, r0
 801fabc:	9309      	str	r3, [sp, #36]	; 0x24
 801fabe:	f000 817b 	beq.w	801fdb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801fac2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801fac6:	b29b      	uxth	r3, r3
 801fac8:	2f00      	cmp	r7, #0
 801faca:	f000 8121 	beq.w	801fd10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801face:	1aff      	subs	r7, r7, r3
 801fad0:	b2bf      	uxth	r7, r7
 801fad2:	043b      	lsls	r3, r7, #16
 801fad4:	d502      	bpl.n	801fadc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801fad6:	1bf6      	subs	r6, r6, r7
 801fad8:	2700      	movs	r7, #0
 801fada:	b236      	sxth	r6, r6
 801fadc:	f9b2 1000 	ldrsh.w	r1, [r2]
 801fae0:	a812      	add	r0, sp, #72	; 0x48
 801fae2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801fae6:	428e      	cmp	r6, r1
 801fae8:	b28b      	uxth	r3, r1
 801faea:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801faee:	bfbf      	itttt	lt
 801faf0:	18ff      	addlt	r7, r7, r3
 801faf2:	1bbe      	sublt	r6, r7, r6
 801faf4:	b2b7      	uxthlt	r7, r6
 801faf6:	460e      	movlt	r6, r1
 801faf8:	8891      	ldrh	r1, [r2, #4]
 801fafa:	440b      	add	r3, r1
 801fafc:	4631      	mov	r1, r6
 801fafe:	b21b      	sxth	r3, r3
 801fb00:	930f      	str	r3, [sp, #60]	; 0x3c
 801fb02:	88d3      	ldrh	r3, [r2, #6]
 801fb04:	9a08      	ldr	r2, [sp, #32]
 801fb06:	449a      	add	sl, r3
 801fb08:	fa0f f38a 	sxth.w	r3, sl
 801fb0c:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801fb10:	930e      	str	r3, [sp, #56]	; 0x38
 801fb12:	4bb2      	ldr	r3, [pc, #712]	; (801fddc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 801fb14:	f893 b000 	ldrb.w	fp, [r3]
 801fb18:	f10b 3cff 	add.w	ip, fp, #4294967295
 801fb1c:	f1dc 0300 	rsbs	r3, ip, #0
 801fb20:	eb43 030c 	adc.w	r3, r3, ip
 801fb24:	930d      	str	r3, [sp, #52]	; 0x34
 801fb26:	464b      	mov	r3, r9
 801fb28:	f7fa f9a2 	bl	8019e70 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801fb2c:	4631      	mov	r1, r6
 801fb2e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801fb32:	464b      	mov	r3, r9
 801fb34:	9a08      	ldr	r2, [sp, #32]
 801fb36:	a812      	add	r0, sp, #72	; 0x48
 801fb38:	f7fa f9b2 	bl	8019ea0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801fb3c:	a916      	add	r1, sp, #88	; 0x58
 801fb3e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801fb42:	a815      	add	r0, sp, #84	; 0x54
 801fb44:	f7fa fb0e 	bl	801a164 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801fb48:	f1b9 0f00 	cmp.w	r9, #0
 801fb4c:	f040 80e3 	bne.w	801fd16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ae>
 801fb50:	f1bb 0f01 	cmp.w	fp, #1
 801fb54:	f040 80e7 	bne.w	801fd26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 801fb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	f040 8131 	bne.w	801fdc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35a>
 801fb60:	4b9f      	ldr	r3, [pc, #636]	; (801fde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801fb62:	6818      	ldr	r0, [r3, #0]
 801fb64:	6803      	ldr	r3, [r0, #0]
 801fb66:	6a1b      	ldr	r3, [r3, #32]
 801fb68:	4798      	blx	r3
 801fb6a:	4a9e      	ldr	r2, [pc, #632]	; (801fde4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 801fb6c:	f1b8 0f01 	cmp.w	r8, #1
 801fb70:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801fb74:	8811      	ldrh	r1, [r2, #0]
 801fb76:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801fb7a:	fb01 2303 	mla	r3, r1, r3, r2
 801fb7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb82:	4403      	add	r3, r0
 801fb84:	9309      	str	r3, [sp, #36]	; 0x24
 801fb86:	f04f 0301 	mov.w	r3, #1
 801fb8a:	fa03 f308 	lsl.w	r3, r3, r8
 801fb8e:	f103 33ff 	add.w	r3, r3, #4294967295
 801fb92:	b2db      	uxtb	r3, r3
 801fb94:	9311      	str	r3, [sp, #68]	; 0x44
 801fb96:	f000 8116 	beq.w	801fdc6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801fb9a:	f1b8 0f02 	cmp.w	r8, #2
 801fb9e:	f000 8114 	beq.w	801fdca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x362>
 801fba2:	f1b8 0f04 	cmp.w	r8, #4
 801fba6:	bf14      	ite	ne
 801fba8:	2301      	movne	r3, #1
 801fbaa:	2311      	moveq	r3, #17
 801fbac:	930a      	str	r3, [sp, #40]	; 0x28
 801fbae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbb0:	b153      	cbz	r3, 801fbc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801fbb2:	2508      	movs	r5, #8
 801fbb4:	9a07      	ldr	r2, [sp, #28]
 801fbb6:	fb95 f3f8 	sdiv	r3, r5, r8
 801fbba:	1e5d      	subs	r5, r3, #1
 801fbbc:	4415      	add	r5, r2
 801fbbe:	fb95 f5f3 	sdiv	r5, r5, r3
 801fbc2:	fb15 f503 	smulbb	r5, r5, r3
 801fbc6:	b2ad      	uxth	r5, r5
 801fbc8:	b907      	cbnz	r7, 801fbcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x164>
 801fbca:	b16c      	cbz	r4, 801fbe8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x180>
 801fbcc:	fb04 7305 	mla	r3, r4, r5, r7
 801fbd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fbd2:	ebaa 0a04 	sub.w	sl, sl, r4
 801fbd6:	fb08 f303 	mul.w	r3, r8, r3
 801fbda:	fa1f fa8a 	uxth.w	sl, sl
 801fbde:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801fbe2:	f003 0407 	and.w	r4, r3, #7
 801fbe6:	9226      	str	r2, [sp, #152]	; 0x98
 801fbe8:	4649      	mov	r1, r9
 801fbea:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fbec:	f7ff ff04 	bl	801f9f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801fbf0:	4649      	mov	r1, r9
 801fbf2:	4683      	mov	fp, r0
 801fbf4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fbf6:	f7ff ff1b 	bl	801fa30 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801fbfa:	9a08      	ldr	r2, [sp, #32]
 801fbfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fbfe:	1bf6      	subs	r6, r6, r7
 801fc00:	1a9b      	subs	r3, r3, r2
 801fc02:	459a      	cmp	sl, r3
 801fc04:	bfa8      	it	ge
 801fc06:	469a      	movge	sl, r3
 801fc08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc0a:	1b9e      	subs	r6, r3, r6
 801fc0c:	9b07      	ldr	r3, [sp, #28]
 801fc0e:	429e      	cmp	r6, r3
 801fc10:	bfd4      	ite	le
 801fc12:	ebc7 0706 	rsble	r7, r7, r6
 801fc16:	ebc7 0703 	rsbgt	r7, r7, r3
 801fc1a:	1bed      	subs	r5, r5, r7
 801fc1c:	fb0b 0017 	mls	r0, fp, r7, r0
 801fc20:	fb08 f305 	mul.w	r3, r8, r5
 801fc24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fc28:	9308      	str	r3, [sp, #32]
 801fc2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc2c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fc30:	930d      	str	r3, [sp, #52]	; 0x34
 801fc32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fc38:	930e      	str	r3, [sp, #56]	; 0x38
 801fc3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc3c:	b2de      	uxtb	r6, r3
 801fc3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fc40:	781a      	ldrb	r2, [r3, #0]
 801fc42:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801fc46:	ea27 7be7 	bic.w	fp, r7, r7, asr #31
 801fc4a:	4122      	asrs	r2, r4
 801fc4c:	9307      	str	r3, [sp, #28]
 801fc4e:	fb03 0b0b 	mla	fp, r3, fp, r0
 801fc52:	b2d2      	uxtb	r2, r2
 801fc54:	f1ba 0f00 	cmp.w	sl, #0
 801fc58:	f340 80d9 	ble.w	801fe0e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a6>
 801fc5c:	46be      	mov	lr, r7
 801fc5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fc60:	f1be 0f00 	cmp.w	lr, #0
 801fc64:	f340 80c0 	ble.w	801fde8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801fc68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fc6a:	4013      	ands	r3, r2
 801fc6c:	d03e      	beq.n	801fcec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 801fc6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fc70:	fb13 f300 	smulbb	r3, r3, r0
 801fc74:	2bfe      	cmp	r3, #254	; 0xfe
 801fc76:	dd03      	ble.n	801fc80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x218>
 801fc78:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fc7a:	28ff      	cmp	r0, #255	; 0xff
 801fc7c:	f000 80a7 	beq.w	801fdce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 801fc80:	980c      	ldr	r0, [sp, #48]	; 0x30
 801fc82:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fc84:	fb10 f303 	smulbb	r3, r0, r3
 801fc88:	b29b      	uxth	r3, r3
 801fc8a:	1c58      	adds	r0, r3, #1
 801fc8c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fc90:	7808      	ldrb	r0, [r1, #0]
 801fc92:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fc96:	fa1f fc83 	uxth.w	ip, r3
 801fc9a:	43db      	mvns	r3, r3
 801fc9c:	fb16 f90c 	smulbb	r9, r6, ip
 801fca0:	b2db      	uxtb	r3, r3
 801fca2:	fb00 9003 	mla	r0, r0, r3, r9
 801fca6:	b280      	uxth	r0, r0
 801fca8:	f100 0901 	add.w	r9, r0, #1
 801fcac:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801fcb0:	fb15 f90c 	smulbb	r9, r5, ip
 801fcb4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fcb6:	1200      	asrs	r0, r0, #8
 801fcb8:	fb15 fc0c 	smulbb	ip, r5, ip
 801fcbc:	7008      	strb	r0, [r1, #0]
 801fcbe:	7848      	ldrb	r0, [r1, #1]
 801fcc0:	fb00 9003 	mla	r0, r0, r3, r9
 801fcc4:	b280      	uxth	r0, r0
 801fcc6:	f100 0901 	add.w	r9, r0, #1
 801fcca:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801fcce:	1200      	asrs	r0, r0, #8
 801fcd0:	7048      	strb	r0, [r1, #1]
 801fcd2:	7888      	ldrb	r0, [r1, #2]
 801fcd4:	fb00 cc03 	mla	ip, r0, r3, ip
 801fcd8:	fa1f fc8c 	uxth.w	ip, ip
 801fcdc:	f10c 0301 	add.w	r3, ip, #1
 801fce0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fce4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fce8:	f881 c002 	strb.w	ip, [r1, #2]
 801fcec:	4444      	add	r4, r8
 801fcee:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fcf2:	b2a4      	uxth	r4, r4
 801fcf4:	2c07      	cmp	r4, #7
 801fcf6:	bf89      	itett	hi
 801fcf8:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801fcfa:	fa42 f208 	asrls.w	r2, r2, r8
 801fcfe:	2400      	movhi	r4, #0
 801fd00:	785a      	ldrbhi	r2, [r3, #1]
 801fd02:	bf8a      	itet	hi
 801fd04:	3301      	addhi	r3, #1
 801fd06:	b2d2      	uxtbls	r2, r2
 801fd08:	9326      	strhi	r3, [sp, #152]	; 0x98
 801fd0a:	9b07      	ldr	r3, [sp, #28]
 801fd0c:	4419      	add	r1, r3
 801fd0e:	e7a7      	b.n	801fc60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801fd10:	441e      	add	r6, r3
 801fd12:	b236      	sxth	r6, r6
 801fd14:	e6e2      	b.n	801fadc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801fd16:	f1b9 0f01 	cmp.w	r9, #1
 801fd1a:	f47f af1d 	bne.w	801fb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fd1e:	f1bb 0f01 	cmp.w	fp, #1
 801fd22:	f47f af19 	bne.w	801fb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fd26:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 801fde0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801fd2a:	f8db 0000 	ldr.w	r0, [fp]
 801fd2e:	6803      	ldr	r3, [r0, #0]
 801fd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd32:	4798      	blx	r3
 801fd34:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801fd38:	465a      	mov	r2, fp
 801fd3a:	d006      	beq.n	801fd4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801fd3c:	f1b8 0f04 	cmp.w	r8, #4
 801fd40:	d13d      	bne.n	801fdbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x356>
 801fd42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd44:	3300      	adds	r3, #0
 801fd46:	bf18      	it	ne
 801fd48:	2301      	movne	r3, #1
 801fd4a:	05c0      	lsls	r0, r0, #23
 801fd4c:	d568      	bpl.n	801fe20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801fd4e:	f1b8 0f08 	cmp.w	r8, #8
 801fd52:	d165      	bne.n	801fe20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b8>
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	bf0c      	ite	eq
 801fd58:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801fd5c:	2180      	movne	r1, #128	; 0x80
 801fd5e:	2f00      	cmp	r7, #0
 801fd60:	f47f aefa 	bne.w	801fb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fd64:	2c00      	cmp	r4, #0
 801fd66:	f47f aef7 	bne.w	801fb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fd6a:	9b07      	ldr	r3, [sp, #28]
 801fd6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fd6e:	18f3      	adds	r3, r6, r3
 801fd70:	4283      	cmp	r3, r0
 801fd72:	f73f aef1 	bgt.w	801fb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fd76:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 801fd7a:	4403      	add	r3, r0
 801fd7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fd7e:	4283      	cmp	r3, r0
 801fd80:	f73f aeea 	bgt.w	801fb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fd84:	f1b8 0f08 	cmp.w	r8, #8
 801fd88:	6810      	ldr	r0, [r2, #0]
 801fd8a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801fd8e:	bf18      	it	ne
 801fd90:	3501      	addne	r5, #1
 801fd92:	6804      	ldr	r4, [r0, #0]
 801fd94:	9105      	str	r1, [sp, #20]
 801fd96:	bf18      	it	ne
 801fd98:	f025 0501 	bicne.w	r5, r5, #1
 801fd9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fd9e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801fda2:	bf18      	it	ne
 801fda4:	b2ad      	uxthne	r5, r5
 801fda6:	9104      	str	r1, [sp, #16]
 801fda8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fdaa:	e9cd 5a00 	strd	r5, sl, [sp]
 801fdae:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801fdb2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801fdb4:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801fdb6:	47a0      	blx	r4
 801fdb8:	b017      	add	sp, #92	; 0x5c
 801fdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdbe:	2300      	movs	r3, #0
 801fdc0:	e7c3      	b.n	801fd4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801fdc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fdc4:	e6d1      	b.n	801fb6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801fdc6:	23ff      	movs	r3, #255	; 0xff
 801fdc8:	e6f0      	b.n	801fbac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801fdca:	2355      	movs	r3, #85	; 0x55
 801fdcc:	e6ee      	b.n	801fbac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x144>
 801fdce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdd0:	700e      	strb	r6, [r1, #0]
 801fdd2:	704b      	strb	r3, [r1, #1]
 801fdd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fdd6:	708b      	strb	r3, [r1, #2]
 801fdd8:	e788      	b.n	801fcec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x284>
 801fdda:	bf00      	nop
 801fddc:	200094ce 	.word	0x200094ce
 801fde0:	200094d8 	.word	0x200094d8
 801fde4:	200094d0 	.word	0x200094d0
 801fde8:	9b08      	ldr	r3, [sp, #32]
 801fdea:	b153      	cbz	r3, 801fe02 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801fdec:	441c      	add	r4, r3
 801fdee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fdf0:	b2a4      	uxth	r4, r4
 801fdf2:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801fdf6:	f004 0407 	and.w	r4, r4, #7
 801fdfa:	781a      	ldrb	r2, [r3, #0]
 801fdfc:	9326      	str	r3, [sp, #152]	; 0x98
 801fdfe:	4122      	asrs	r2, r4
 801fe00:	b2d2      	uxtb	r2, r2
 801fe02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe04:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fe08:	445b      	add	r3, fp
 801fe0a:	9309      	str	r3, [sp, #36]	; 0x24
 801fe0c:	e722      	b.n	801fc54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ec>
 801fe0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d1d1      	bne.n	801fdb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801fe14:	4b05      	ldr	r3, [pc, #20]	; (801fe2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c4>)
 801fe16:	6818      	ldr	r0, [r3, #0]
 801fe18:	6803      	ldr	r3, [r0, #0]
 801fe1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe1c:	4798      	blx	r3
 801fe1e:	e7cb      	b.n	801fdb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	f43f ae99 	beq.w	801fb58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fe26:	2180      	movs	r1, #128	; 0x80
 801fe28:	e799      	b.n	801fd5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 801fe2a:	bf00      	nop
 801fe2c:	200094d8 	.word	0x200094d8

0801fe30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801fe30:	b538      	push	{r3, r4, r5, lr}
 801fe32:	4c15      	ldr	r4, [pc, #84]	; (801fe88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801fe34:	4605      	mov	r5, r0
 801fe36:	7823      	ldrb	r3, [r4, #0]
 801fe38:	f3bf 8f5b 	dmb	ish
 801fe3c:	07da      	lsls	r2, r3, #31
 801fe3e:	d40b      	bmi.n	801fe58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fe40:	4620      	mov	r0, r4
 801fe42:	f005 fa16 	bl	8025272 <__cxa_guard_acquire>
 801fe46:	b138      	cbz	r0, 801fe58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fe48:	4620      	mov	r0, r4
 801fe4a:	f005 fa1e 	bl	802528a <__cxa_guard_release>
 801fe4e:	4a0f      	ldr	r2, [pc, #60]	; (801fe8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fe50:	490f      	ldr	r1, [pc, #60]	; (801fe90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801fe52:	4810      	ldr	r0, [pc, #64]	; (801fe94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fe54:	f005 fa06 	bl	8025264 <__aeabi_atexit>
 801fe58:	4c0f      	ldr	r4, [pc, #60]	; (801fe98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801fe5a:	7823      	ldrb	r3, [r4, #0]
 801fe5c:	f3bf 8f5b 	dmb	ish
 801fe60:	07db      	lsls	r3, r3, #31
 801fe62:	d40b      	bmi.n	801fe7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fe64:	4620      	mov	r0, r4
 801fe66:	f005 fa04 	bl	8025272 <__cxa_guard_acquire>
 801fe6a:	b138      	cbz	r0, 801fe7c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801fe6c:	4620      	mov	r0, r4
 801fe6e:	f005 fa0c 	bl	802528a <__cxa_guard_release>
 801fe72:	4a06      	ldr	r2, [pc, #24]	; (801fe8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801fe74:	4909      	ldr	r1, [pc, #36]	; (801fe9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801fe76:	480a      	ldr	r0, [pc, #40]	; (801fea0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fe78:	f005 f9f4 	bl	8025264 <__aeabi_atexit>
 801fe7c:	4b05      	ldr	r3, [pc, #20]	; (801fe94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801fe7e:	612b      	str	r3, [r5, #16]
 801fe80:	4b07      	ldr	r3, [pc, #28]	; (801fea0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801fe82:	616b      	str	r3, [r5, #20]
 801fe84:	bd38      	pop	{r3, r4, r5, pc}
 801fe86:	bf00      	nop
 801fe88:	200095a4 	.word	0x200095a4
 801fe8c:	20000000 	.word	0x20000000
 801fe90:	0801e80f 	.word	0x0801e80f
 801fe94:	200000a4 	.word	0x200000a4
 801fe98:	200095a8 	.word	0x200095a8
 801fe9c:	0801e80d 	.word	0x0801e80d
 801fea0:	200000a8 	.word	0x200000a8

0801fea4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801fea4:	b538      	push	{r3, r4, r5, lr}
 801fea6:	4c15      	ldr	r4, [pc, #84]	; (801fefc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801fea8:	4605      	mov	r5, r0
 801feaa:	7823      	ldrb	r3, [r4, #0]
 801feac:	f3bf 8f5b 	dmb	ish
 801feb0:	07da      	lsls	r2, r3, #31
 801feb2:	d40b      	bmi.n	801fecc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801feb4:	4620      	mov	r0, r4
 801feb6:	f005 f9dc 	bl	8025272 <__cxa_guard_acquire>
 801feba:	b138      	cbz	r0, 801fecc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801febc:	4620      	mov	r0, r4
 801febe:	f005 f9e4 	bl	802528a <__cxa_guard_release>
 801fec2:	4a0f      	ldr	r2, [pc, #60]	; (801ff00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fec4:	490f      	ldr	r1, [pc, #60]	; (801ff04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801fec6:	4810      	ldr	r0, [pc, #64]	; (801ff08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fec8:	f005 f9cc 	bl	8025264 <__aeabi_atexit>
 801fecc:	4c0f      	ldr	r4, [pc, #60]	; (801ff0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801fece:	7823      	ldrb	r3, [r4, #0]
 801fed0:	f3bf 8f5b 	dmb	ish
 801fed4:	07db      	lsls	r3, r3, #31
 801fed6:	d40b      	bmi.n	801fef0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fed8:	4620      	mov	r0, r4
 801feda:	f005 f9ca 	bl	8025272 <__cxa_guard_acquire>
 801fede:	b138      	cbz	r0, 801fef0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801fee0:	4620      	mov	r0, r4
 801fee2:	f005 f9d2 	bl	802528a <__cxa_guard_release>
 801fee6:	4a06      	ldr	r2, [pc, #24]	; (801ff00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801fee8:	4909      	ldr	r1, [pc, #36]	; (801ff10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801feea:	480a      	ldr	r0, [pc, #40]	; (801ff14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801feec:	f005 f9ba 	bl	8025264 <__aeabi_atexit>
 801fef0:	4b05      	ldr	r3, [pc, #20]	; (801ff08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801fef2:	60ab      	str	r3, [r5, #8]
 801fef4:	4b07      	ldr	r3, [pc, #28]	; (801ff14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801fef6:	60eb      	str	r3, [r5, #12]
 801fef8:	bd38      	pop	{r3, r4, r5, pc}
 801fefa:	bf00      	nop
 801fefc:	20009584 	.word	0x20009584
 801ff00:	20000000 	.word	0x20000000
 801ff04:	0801e813 	.word	0x0801e813
 801ff08:	20000084 	.word	0x20000084
 801ff0c:	20009588 	.word	0x20009588
 801ff10:	0801e811 	.word	0x0801e811
 801ff14:	20000088 	.word	0x20000088

0801ff18 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801ff18:	b510      	push	{r4, lr}
 801ff1a:	4604      	mov	r4, r0
 801ff1c:	f7ff ff88 	bl	801fe30 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ff20:	4620      	mov	r0, r4
 801ff22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff26:	f7ff bfbd 	b.w	801fea4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ff2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ff2c:	b538      	push	{r3, r4, r5, lr}
 801ff2e:	4c15      	ldr	r4, [pc, #84]	; (801ff84 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ff30:	4605      	mov	r5, r0
 801ff32:	7823      	ldrb	r3, [r4, #0]
 801ff34:	f3bf 8f5b 	dmb	ish
 801ff38:	07da      	lsls	r2, r3, #31
 801ff3a:	d40b      	bmi.n	801ff54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ff3c:	4620      	mov	r0, r4
 801ff3e:	f005 f998 	bl	8025272 <__cxa_guard_acquire>
 801ff42:	b138      	cbz	r0, 801ff54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ff44:	4620      	mov	r0, r4
 801ff46:	f005 f9a0 	bl	802528a <__cxa_guard_release>
 801ff4a:	4a0f      	ldr	r2, [pc, #60]	; (801ff88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ff4c:	490f      	ldr	r1, [pc, #60]	; (801ff8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ff4e:	4810      	ldr	r0, [pc, #64]	; (801ff90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ff50:	f005 f988 	bl	8025264 <__aeabi_atexit>
 801ff54:	4c0f      	ldr	r4, [pc, #60]	; (801ff94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ff56:	7823      	ldrb	r3, [r4, #0]
 801ff58:	f3bf 8f5b 	dmb	ish
 801ff5c:	07db      	lsls	r3, r3, #31
 801ff5e:	d40b      	bmi.n	801ff78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ff60:	4620      	mov	r0, r4
 801ff62:	f005 f986 	bl	8025272 <__cxa_guard_acquire>
 801ff66:	b138      	cbz	r0, 801ff78 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ff68:	4620      	mov	r0, r4
 801ff6a:	f005 f98e 	bl	802528a <__cxa_guard_release>
 801ff6e:	4a06      	ldr	r2, [pc, #24]	; (801ff88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ff70:	4909      	ldr	r1, [pc, #36]	; (801ff98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ff72:	480a      	ldr	r0, [pc, #40]	; (801ff9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ff74:	f005 f976 	bl	8025264 <__aeabi_atexit>
 801ff78:	4b05      	ldr	r3, [pc, #20]	; (801ff90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ff7a:	622b      	str	r3, [r5, #32]
 801ff7c:	4b07      	ldr	r3, [pc, #28]	; (801ff9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ff7e:	626b      	str	r3, [r5, #36]	; 0x24
 801ff80:	bd38      	pop	{r3, r4, r5, pc}
 801ff82:	bf00      	nop
 801ff84:	200095ac 	.word	0x200095ac
 801ff88:	20000000 	.word	0x20000000
 801ff8c:	0801e807 	.word	0x0801e807
 801ff90:	200000ac 	.word	0x200000ac
 801ff94:	200095b0 	.word	0x200095b0
 801ff98:	0801e805 	.word	0x0801e805
 801ff9c:	200000b0 	.word	0x200000b0

0801ffa0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ffa0:	b538      	push	{r3, r4, r5, lr}
 801ffa2:	4c15      	ldr	r4, [pc, #84]	; (801fff8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ffa4:	4605      	mov	r5, r0
 801ffa6:	7823      	ldrb	r3, [r4, #0]
 801ffa8:	f3bf 8f5b 	dmb	ish
 801ffac:	07da      	lsls	r2, r3, #31
 801ffae:	d40b      	bmi.n	801ffc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ffb0:	4620      	mov	r0, r4
 801ffb2:	f005 f95e 	bl	8025272 <__cxa_guard_acquire>
 801ffb6:	b138      	cbz	r0, 801ffc8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ffb8:	4620      	mov	r0, r4
 801ffba:	f005 f966 	bl	802528a <__cxa_guard_release>
 801ffbe:	4a0f      	ldr	r2, [pc, #60]	; (801fffc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ffc0:	490f      	ldr	r1, [pc, #60]	; (8020000 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ffc2:	4810      	ldr	r0, [pc, #64]	; (8020004 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ffc4:	f005 f94e 	bl	8025264 <__aeabi_atexit>
 801ffc8:	4c0f      	ldr	r4, [pc, #60]	; (8020008 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ffca:	7823      	ldrb	r3, [r4, #0]
 801ffcc:	f3bf 8f5b 	dmb	ish
 801ffd0:	07db      	lsls	r3, r3, #31
 801ffd2:	d40b      	bmi.n	801ffec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f005 f94c 	bl	8025272 <__cxa_guard_acquire>
 801ffda:	b138      	cbz	r0, 801ffec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ffdc:	4620      	mov	r0, r4
 801ffde:	f005 f954 	bl	802528a <__cxa_guard_release>
 801ffe2:	4a06      	ldr	r2, [pc, #24]	; (801fffc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ffe4:	4909      	ldr	r1, [pc, #36]	; (802000c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ffe6:	480a      	ldr	r0, [pc, #40]	; (8020010 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ffe8:	f005 f93c 	bl	8025264 <__aeabi_atexit>
 801ffec:	4b05      	ldr	r3, [pc, #20]	; (8020004 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ffee:	61ab      	str	r3, [r5, #24]
 801fff0:	4b07      	ldr	r3, [pc, #28]	; (8020010 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801fff2:	61eb      	str	r3, [r5, #28]
 801fff4:	bd38      	pop	{r3, r4, r5, pc}
 801fff6:	bf00      	nop
 801fff8:	2000958c 	.word	0x2000958c
 801fffc:	20000000 	.word	0x20000000
 8020000:	0801e80b 	.word	0x0801e80b
 8020004:	2000008c 	.word	0x2000008c
 8020008:	20009590 	.word	0x20009590
 802000c:	0801e809 	.word	0x0801e809
 8020010:	20000090 	.word	0x20000090

08020014 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8020014:	b510      	push	{r4, lr}
 8020016:	4604      	mov	r4, r0
 8020018:	f7ff ff88 	bl	801ff2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802001c:	4620      	mov	r0, r4
 802001e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020022:	f7ff bfbd 	b.w	801ffa0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08020028 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8020028:	b538      	push	{r3, r4, r5, lr}
 802002a:	4c15      	ldr	r4, [pc, #84]	; (8020080 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 802002c:	4605      	mov	r5, r0
 802002e:	7823      	ldrb	r3, [r4, #0]
 8020030:	f3bf 8f5b 	dmb	ish
 8020034:	07da      	lsls	r2, r3, #31
 8020036:	d40b      	bmi.n	8020050 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020038:	4620      	mov	r0, r4
 802003a:	f005 f91a 	bl	8025272 <__cxa_guard_acquire>
 802003e:	b138      	cbz	r0, 8020050 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8020040:	4620      	mov	r0, r4
 8020042:	f005 f922 	bl	802528a <__cxa_guard_release>
 8020046:	4a0f      	ldr	r2, [pc, #60]	; (8020084 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020048:	490f      	ldr	r1, [pc, #60]	; (8020088 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802004a:	4810      	ldr	r0, [pc, #64]	; (802008c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802004c:	f005 f90a 	bl	8025264 <__aeabi_atexit>
 8020050:	4c0f      	ldr	r4, [pc, #60]	; (8020090 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8020052:	7823      	ldrb	r3, [r4, #0]
 8020054:	f3bf 8f5b 	dmb	ish
 8020058:	07db      	lsls	r3, r3, #31
 802005a:	d40b      	bmi.n	8020074 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 802005c:	4620      	mov	r0, r4
 802005e:	f005 f908 	bl	8025272 <__cxa_guard_acquire>
 8020062:	b138      	cbz	r0, 8020074 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020064:	4620      	mov	r0, r4
 8020066:	f005 f910 	bl	802528a <__cxa_guard_release>
 802006a:	4a06      	ldr	r2, [pc, #24]	; (8020084 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802006c:	4909      	ldr	r1, [pc, #36]	; (8020094 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 802006e:	480a      	ldr	r0, [pc, #40]	; (8020098 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020070:	f005 f8f8 	bl	8025264 <__aeabi_atexit>
 8020074:	4b05      	ldr	r3, [pc, #20]	; (802008c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020076:	632b      	str	r3, [r5, #48]	; 0x30
 8020078:	4b07      	ldr	r3, [pc, #28]	; (8020098 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802007a:	636b      	str	r3, [r5, #52]	; 0x34
 802007c:	bd38      	pop	{r3, r4, r5, pc}
 802007e:	bf00      	nop
 8020080:	20009594 	.word	0x20009594
 8020084:	20000000 	.word	0x20000000
 8020088:	0801e7ff 	.word	0x0801e7ff
 802008c:	20000094 	.word	0x20000094
 8020090:	20009598 	.word	0x20009598
 8020094:	0801e7fd 	.word	0x0801e7fd
 8020098:	20000098 	.word	0x20000098

0802009c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 802009c:	b538      	push	{r3, r4, r5, lr}
 802009e:	4c15      	ldr	r4, [pc, #84]	; (80200f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80200a0:	4605      	mov	r5, r0
 80200a2:	7823      	ldrb	r3, [r4, #0]
 80200a4:	f3bf 8f5b 	dmb	ish
 80200a8:	07da      	lsls	r2, r3, #31
 80200aa:	d40b      	bmi.n	80200c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80200ac:	4620      	mov	r0, r4
 80200ae:	f005 f8e0 	bl	8025272 <__cxa_guard_acquire>
 80200b2:	b138      	cbz	r0, 80200c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80200b4:	4620      	mov	r0, r4
 80200b6:	f005 f8e8 	bl	802528a <__cxa_guard_release>
 80200ba:	4a0f      	ldr	r2, [pc, #60]	; (80200f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80200bc:	490f      	ldr	r1, [pc, #60]	; (80200fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80200be:	4810      	ldr	r0, [pc, #64]	; (8020100 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80200c0:	f005 f8d0 	bl	8025264 <__aeabi_atexit>
 80200c4:	4c0f      	ldr	r4, [pc, #60]	; (8020104 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80200c6:	7823      	ldrb	r3, [r4, #0]
 80200c8:	f3bf 8f5b 	dmb	ish
 80200cc:	07db      	lsls	r3, r3, #31
 80200ce:	d40b      	bmi.n	80200e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80200d0:	4620      	mov	r0, r4
 80200d2:	f005 f8ce 	bl	8025272 <__cxa_guard_acquire>
 80200d6:	b138      	cbz	r0, 80200e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80200d8:	4620      	mov	r0, r4
 80200da:	f005 f8d6 	bl	802528a <__cxa_guard_release>
 80200de:	4a06      	ldr	r2, [pc, #24]	; (80200f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80200e0:	4909      	ldr	r1, [pc, #36]	; (8020108 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80200e2:	480a      	ldr	r0, [pc, #40]	; (802010c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80200e4:	f005 f8be 	bl	8025264 <__aeabi_atexit>
 80200e8:	4b05      	ldr	r3, [pc, #20]	; (8020100 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80200ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80200ec:	4b07      	ldr	r3, [pc, #28]	; (802010c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80200ee:	62eb      	str	r3, [r5, #44]	; 0x2c
 80200f0:	bd38      	pop	{r3, r4, r5, pc}
 80200f2:	bf00      	nop
 80200f4:	2000956c 	.word	0x2000956c
 80200f8:	20000000 	.word	0x20000000
 80200fc:	0801e803 	.word	0x0801e803
 8020100:	2000006c 	.word	0x2000006c
 8020104:	20009570 	.word	0x20009570
 8020108:	0801e801 	.word	0x0801e801
 802010c:	20000070 	.word	0x20000070

08020110 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8020110:	b510      	push	{r4, lr}
 8020112:	4604      	mov	r4, r0
 8020114:	f7ff ff88 	bl	8020028 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8020118:	4620      	mov	r0, r4
 802011a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802011e:	f7ff bfbd 	b.w	802009c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08020124 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8020124:	b538      	push	{r3, r4, r5, lr}
 8020126:	4c15      	ldr	r4, [pc, #84]	; (802017c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8020128:	4605      	mov	r5, r0
 802012a:	7823      	ldrb	r3, [r4, #0]
 802012c:	f3bf 8f5b 	dmb	ish
 8020130:	07da      	lsls	r2, r3, #31
 8020132:	d40b      	bmi.n	802014c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8020134:	4620      	mov	r0, r4
 8020136:	f005 f89c 	bl	8025272 <__cxa_guard_acquire>
 802013a:	b138      	cbz	r0, 802014c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802013c:	4620      	mov	r0, r4
 802013e:	f005 f8a4 	bl	802528a <__cxa_guard_release>
 8020142:	4a0f      	ldr	r2, [pc, #60]	; (8020180 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020144:	490f      	ldr	r1, [pc, #60]	; (8020184 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8020146:	4810      	ldr	r0, [pc, #64]	; (8020188 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020148:	f005 f88c 	bl	8025264 <__aeabi_atexit>
 802014c:	4c0f      	ldr	r4, [pc, #60]	; (802018c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802014e:	7823      	ldrb	r3, [r4, #0]
 8020150:	f3bf 8f5b 	dmb	ish
 8020154:	07db      	lsls	r3, r3, #31
 8020156:	d40b      	bmi.n	8020170 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020158:	4620      	mov	r0, r4
 802015a:	f005 f88a 	bl	8025272 <__cxa_guard_acquire>
 802015e:	b138      	cbz	r0, 8020170 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020160:	4620      	mov	r0, r4
 8020162:	f005 f892 	bl	802528a <__cxa_guard_release>
 8020166:	4a06      	ldr	r2, [pc, #24]	; (8020180 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8020168:	4909      	ldr	r1, [pc, #36]	; (8020190 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802016a:	480a      	ldr	r0, [pc, #40]	; (8020194 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802016c:	f005 f87a 	bl	8025264 <__aeabi_atexit>
 8020170:	4b05      	ldr	r3, [pc, #20]	; (8020188 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020172:	642b      	str	r3, [r5, #64]	; 0x40
 8020174:	4b07      	ldr	r3, [pc, #28]	; (8020194 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020176:	646b      	str	r3, [r5, #68]	; 0x44
 8020178:	bd38      	pop	{r3, r4, r5, pc}
 802017a:	bf00      	nop
 802017c:	2000959c 	.word	0x2000959c
 8020180:	20000000 	.word	0x20000000
 8020184:	0801e7f7 	.word	0x0801e7f7
 8020188:	2000009c 	.word	0x2000009c
 802018c:	200095a0 	.word	0x200095a0
 8020190:	0801e7f5 	.word	0x0801e7f5
 8020194:	200000a0 	.word	0x200000a0

08020198 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8020198:	b538      	push	{r3, r4, r5, lr}
 802019a:	4c15      	ldr	r4, [pc, #84]	; (80201f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802019c:	4605      	mov	r5, r0
 802019e:	7823      	ldrb	r3, [r4, #0]
 80201a0:	f3bf 8f5b 	dmb	ish
 80201a4:	07da      	lsls	r2, r3, #31
 80201a6:	d40b      	bmi.n	80201c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80201a8:	4620      	mov	r0, r4
 80201aa:	f005 f862 	bl	8025272 <__cxa_guard_acquire>
 80201ae:	b138      	cbz	r0, 80201c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80201b0:	4620      	mov	r0, r4
 80201b2:	f005 f86a 	bl	802528a <__cxa_guard_release>
 80201b6:	4a0f      	ldr	r2, [pc, #60]	; (80201f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80201b8:	490f      	ldr	r1, [pc, #60]	; (80201f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80201ba:	4810      	ldr	r0, [pc, #64]	; (80201fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80201bc:	f005 f852 	bl	8025264 <__aeabi_atexit>
 80201c0:	4c0f      	ldr	r4, [pc, #60]	; (8020200 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80201c2:	7823      	ldrb	r3, [r4, #0]
 80201c4:	f3bf 8f5b 	dmb	ish
 80201c8:	07db      	lsls	r3, r3, #31
 80201ca:	d40b      	bmi.n	80201e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80201cc:	4620      	mov	r0, r4
 80201ce:	f005 f850 	bl	8025272 <__cxa_guard_acquire>
 80201d2:	b138      	cbz	r0, 80201e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80201d4:	4620      	mov	r0, r4
 80201d6:	f005 f858 	bl	802528a <__cxa_guard_release>
 80201da:	4a06      	ldr	r2, [pc, #24]	; (80201f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80201dc:	4909      	ldr	r1, [pc, #36]	; (8020204 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80201de:	480a      	ldr	r0, [pc, #40]	; (8020208 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80201e0:	f005 f840 	bl	8025264 <__aeabi_atexit>
 80201e4:	4b05      	ldr	r3, [pc, #20]	; (80201fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80201e6:	63ab      	str	r3, [r5, #56]	; 0x38
 80201e8:	4b07      	ldr	r3, [pc, #28]	; (8020208 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80201ea:	63eb      	str	r3, [r5, #60]	; 0x3c
 80201ec:	bd38      	pop	{r3, r4, r5, pc}
 80201ee:	bf00      	nop
 80201f0:	2000957c 	.word	0x2000957c
 80201f4:	20000000 	.word	0x20000000
 80201f8:	0801e7fb 	.word	0x0801e7fb
 80201fc:	2000007c 	.word	0x2000007c
 8020200:	20009580 	.word	0x20009580
 8020204:	0801e7f9 	.word	0x0801e7f9
 8020208:	20000080 	.word	0x20000080

0802020c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 802020c:	b510      	push	{r4, lr}
 802020e:	4604      	mov	r4, r0
 8020210:	f7ff ff88 	bl	8020124 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8020214:	4620      	mov	r0, r4
 8020216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802021a:	f7ff bfbd 	b.w	8020198 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08020220 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8020220:	b538      	push	{r3, r4, r5, lr}
 8020222:	4c15      	ldr	r4, [pc, #84]	; (8020278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8020224:	4605      	mov	r5, r0
 8020226:	7823      	ldrb	r3, [r4, #0]
 8020228:	f3bf 8f5b 	dmb	ish
 802022c:	07da      	lsls	r2, r3, #31
 802022e:	d40b      	bmi.n	8020248 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020230:	4620      	mov	r0, r4
 8020232:	f005 f81e 	bl	8025272 <__cxa_guard_acquire>
 8020236:	b138      	cbz	r0, 8020248 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8020238:	4620      	mov	r0, r4
 802023a:	f005 f826 	bl	802528a <__cxa_guard_release>
 802023e:	4a0f      	ldr	r2, [pc, #60]	; (802027c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020240:	490f      	ldr	r1, [pc, #60]	; (8020280 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8020242:	4810      	ldr	r0, [pc, #64]	; (8020284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020244:	f005 f80e 	bl	8025264 <__aeabi_atexit>
 8020248:	4c0f      	ldr	r4, [pc, #60]	; (8020288 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802024a:	7823      	ldrb	r3, [r4, #0]
 802024c:	f3bf 8f5b 	dmb	ish
 8020250:	07db      	lsls	r3, r3, #31
 8020252:	d40b      	bmi.n	802026c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020254:	4620      	mov	r0, r4
 8020256:	f005 f80c 	bl	8025272 <__cxa_guard_acquire>
 802025a:	b138      	cbz	r0, 802026c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802025c:	4620      	mov	r0, r4
 802025e:	f005 f814 	bl	802528a <__cxa_guard_release>
 8020262:	4a06      	ldr	r2, [pc, #24]	; (802027c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020264:	4909      	ldr	r1, [pc, #36]	; (802028c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8020266:	480a      	ldr	r0, [pc, #40]	; (8020290 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020268:	f004 fffc 	bl	8025264 <__aeabi_atexit>
 802026c:	4b05      	ldr	r3, [pc, #20]	; (8020284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802026e:	652b      	str	r3, [r5, #80]	; 0x50
 8020270:	4b07      	ldr	r3, [pc, #28]	; (8020290 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020272:	656b      	str	r3, [r5, #84]	; 0x54
 8020274:	bd38      	pop	{r3, r4, r5, pc}
 8020276:	bf00      	nop
 8020278:	20009574 	.word	0x20009574
 802027c:	20000000 	.word	0x20000000
 8020280:	0801e7ef 	.word	0x0801e7ef
 8020284:	20000074 	.word	0x20000074
 8020288:	20009578 	.word	0x20009578
 802028c:	0801e7ed 	.word	0x0801e7ed
 8020290:	20000078 	.word	0x20000078

08020294 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8020294:	b538      	push	{r3, r4, r5, lr}
 8020296:	4c15      	ldr	r4, [pc, #84]	; (80202ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8020298:	4605      	mov	r5, r0
 802029a:	7823      	ldrb	r3, [r4, #0]
 802029c:	f3bf 8f5b 	dmb	ish
 80202a0:	07da      	lsls	r2, r3, #31
 80202a2:	d40b      	bmi.n	80202bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80202a4:	4620      	mov	r0, r4
 80202a6:	f004 ffe4 	bl	8025272 <__cxa_guard_acquire>
 80202aa:	b138      	cbz	r0, 80202bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80202ac:	4620      	mov	r0, r4
 80202ae:	f004 ffec 	bl	802528a <__cxa_guard_release>
 80202b2:	4a0f      	ldr	r2, [pc, #60]	; (80202f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80202b4:	490f      	ldr	r1, [pc, #60]	; (80202f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80202b6:	4810      	ldr	r0, [pc, #64]	; (80202f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80202b8:	f004 ffd4 	bl	8025264 <__aeabi_atexit>
 80202bc:	4c0f      	ldr	r4, [pc, #60]	; (80202fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80202be:	7823      	ldrb	r3, [r4, #0]
 80202c0:	f3bf 8f5b 	dmb	ish
 80202c4:	07db      	lsls	r3, r3, #31
 80202c6:	d40b      	bmi.n	80202e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80202c8:	4620      	mov	r0, r4
 80202ca:	f004 ffd2 	bl	8025272 <__cxa_guard_acquire>
 80202ce:	b138      	cbz	r0, 80202e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80202d0:	4620      	mov	r0, r4
 80202d2:	f004 ffda 	bl	802528a <__cxa_guard_release>
 80202d6:	4a06      	ldr	r2, [pc, #24]	; (80202f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80202d8:	4909      	ldr	r1, [pc, #36]	; (8020300 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80202da:	480a      	ldr	r0, [pc, #40]	; (8020304 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80202dc:	f004 ffc2 	bl	8025264 <__aeabi_atexit>
 80202e0:	4b05      	ldr	r3, [pc, #20]	; (80202f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80202e2:	64ab      	str	r3, [r5, #72]	; 0x48
 80202e4:	4b07      	ldr	r3, [pc, #28]	; (8020304 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80202e6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80202e8:	bd38      	pop	{r3, r4, r5, pc}
 80202ea:	bf00      	nop
 80202ec:	20009564 	.word	0x20009564
 80202f0:	20000000 	.word	0x20000000
 80202f4:	0801e7f3 	.word	0x0801e7f3
 80202f8:	20000064 	.word	0x20000064
 80202fc:	20009568 	.word	0x20009568
 8020300:	0801e7f1 	.word	0x0801e7f1
 8020304:	20000068 	.word	0x20000068

08020308 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8020308:	b510      	push	{r4, lr}
 802030a:	4604      	mov	r4, r0
 802030c:	f7ff ff88 	bl	8020220 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8020310:	4620      	mov	r0, r4
 8020312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020316:	f7ff bfbd 	b.w	8020294 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0802031a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 802031a:	b510      	push	{r4, lr}
 802031c:	4604      	mov	r4, r0
 802031e:	f7ff fff3 	bl	8020308 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8020322:	4620      	mov	r0, r4
 8020324:	f7ff ff72 	bl	802020c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8020328:	4620      	mov	r0, r4
 802032a:	f7ff fe73 	bl	8020014 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 802032e:	4620      	mov	r0, r4
 8020330:	f7ff fdf2 	bl	801ff18 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8020334:	4620      	mov	r0, r4
 8020336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802033a:	f7ff bee9 	b.w	8020110 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08020340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8020340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020344:	b087      	sub	sp, #28
 8020346:	7888      	ldrb	r0, [r1, #2]
 8020348:	4616      	mov	r6, r2
 802034a:	9001      	str	r0, [sp, #4]
 802034c:	7848      	ldrb	r0, [r1, #1]
 802034e:	9100      	str	r1, [sp, #0]
 8020350:	9002      	str	r0, [sp, #8]
 8020352:	7808      	ldrb	r0, [r1, #0]
 8020354:	9901      	ldr	r1, [sp, #4]
 8020356:	9003      	str	r0, [sp, #12]
 8020358:	9802      	ldr	r0, [sp, #8]
 802035a:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 802035e:	0200      	lsls	r0, r0, #8
 8020360:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8020364:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 802036c:	9903      	ldr	r1, [sp, #12]
 802036e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020372:	4308      	orrs	r0, r1
 8020374:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020378:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 802037c:	9005      	str	r0, [sp, #20]
 802037e:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020382:	2d00      	cmp	r5, #0
 8020384:	eb06 080a 	add.w	r8, r6, sl
 8020388:	db4a      	blt.n	8020420 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 802038a:	45a9      	cmp	r9, r5
 802038c:	dd48      	ble.n	8020420 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 802038e:	f1bc 0f00 	cmp.w	ip, #0
 8020392:	db43      	blt.n	802041c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8020394:	45e6      	cmp	lr, ip
 8020396:	dd41      	ble.n	802041c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8020398:	f816 600a 	ldrb.w	r6, [r6, sl]
 802039c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80203a0:	441e      	add	r6, r3
 80203a2:	f11c 0001 	adds.w	r0, ip, #1
 80203a6:	d43e      	bmi.n	8020426 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80203a8:	4586      	cmp	lr, r0
 80203aa:	dd3c      	ble.n	8020426 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80203ac:	2a00      	cmp	r2, #0
 80203ae:	d03a      	beq.n	8020426 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 80203b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80203b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80203b8:	4418      	add	r0, r3
 80203ba:	3501      	adds	r5, #1
 80203bc:	d437      	bmi.n	802042e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80203be:	45a9      	cmp	r9, r5
 80203c0:	dd35      	ble.n	802042e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80203c2:	b3a4      	cbz	r4, 802042e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 80203c4:	f1bc 0f00 	cmp.w	ip, #0
 80203c8:	db2f      	blt.n	802042a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80203ca:	45e6      	cmp	lr, ip
 80203cc:	dd2d      	ble.n	802042a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 80203ce:	f818 500e 	ldrb.w	r5, [r8, lr]
 80203d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80203d6:	441d      	add	r5, r3
 80203d8:	f11c 0c01 	adds.w	ip, ip, #1
 80203dc:	d42a      	bmi.n	8020434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80203de:	45e6      	cmp	lr, ip
 80203e0:	dd28      	ble.n	8020434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80203e2:	b33a      	cbz	r2, 8020434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 80203e4:	44c6      	add	lr, r8
 80203e6:	f89e c001 	ldrb.w	ip, [lr, #1]
 80203ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80203ee:	4463      	add	r3, ip
 80203f0:	ea6f 0c07 	mvn.w	ip, r7
 80203f4:	2a0f      	cmp	r2, #15
 80203f6:	f896 a000 	ldrb.w	sl, [r6]
 80203fa:	fa5f fc8c 	uxtb.w	ip, ip
 80203fe:	f890 b000 	ldrb.w	fp, [r0]
 8020402:	f895 9000 	ldrb.w	r9, [r5]
 8020406:	7819      	ldrb	r1, [r3, #0]
 8020408:	d801      	bhi.n	802040e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 802040a:	2c0f      	cmp	r4, #15
 802040c:	d914      	bls.n	8020438 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 802040e:	4b40      	ldr	r3, [pc, #256]	; (8020510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8020410:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8020414:	4a3f      	ldr	r2, [pc, #252]	; (8020514 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8020416:	4840      	ldr	r0, [pc, #256]	; (8020518 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8020418:	f004 ff58 	bl	80252cc <__assert_func>
 802041c:	ae05      	add	r6, sp, #20
 802041e:	e7c0      	b.n	80203a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8020420:	a805      	add	r0, sp, #20
 8020422:	4606      	mov	r6, r0
 8020424:	e7c9      	b.n	80203ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8020426:	a805      	add	r0, sp, #20
 8020428:	e7c7      	b.n	80203ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 802042a:	ad05      	add	r5, sp, #20
 802042c:	e7d4      	b.n	80203d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 802042e:	ab05      	add	r3, sp, #20
 8020430:	461d      	mov	r5, r3
 8020432:	e7dd      	b.n	80203f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8020434:	ab05      	add	r3, sp, #20
 8020436:	e7db      	b.n	80203f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8020438:	b292      	uxth	r2, r2
 802043a:	b2a4      	uxth	r4, r4
 802043c:	fa1f fc8c 	uxth.w	ip, ip
 8020440:	fb02 f804 	mul.w	r8, r2, r4
 8020444:	0112      	lsls	r2, r2, #4
 8020446:	b2bf      	uxth	r7, r7
 8020448:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 802044c:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8020450:	eba2 0208 	sub.w	r2, r2, r8
 8020454:	b2a4      	uxth	r4, r4
 8020456:	b292      	uxth	r2, r2
 8020458:	ebae 0e04 	sub.w	lr, lr, r4
 802045c:	fb02 fb0b 	mul.w	fp, r2, fp
 8020460:	fa1f fe8e 	uxth.w	lr, lr
 8020464:	fb0e ba0a 	mla	sl, lr, sl, fp
 8020468:	fb04 aa09 	mla	sl, r4, r9, sl
 802046c:	fb08 aa01 	mla	sl, r8, r1, sl
 8020470:	9903      	ldr	r1, [sp, #12]
 8020472:	fb11 f90c 	smulbb	r9, r1, ip
 8020476:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802047a:	9900      	ldr	r1, [sp, #0]
 802047c:	fb0a 9a07 	mla	sl, sl, r7, r9
 8020480:	fa1f fa8a 	uxth.w	sl, sl
 8020484:	f10a 0901 	add.w	r9, sl, #1
 8020488:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 802048c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020490:	f881 a000 	strb.w	sl, [r1]
 8020494:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020498:	f896 9001 	ldrb.w	r9, [r6, #1]
 802049c:	fb02 fa0a 	mul.w	sl, r2, sl
 80204a0:	9902      	ldr	r1, [sp, #8]
 80204a2:	fb0e aa09 	mla	sl, lr, r9, sl
 80204a6:	f895 9001 	ldrb.w	r9, [r5, #1]
 80204aa:	fb04 aa09 	mla	sl, r4, r9, sl
 80204ae:	f893 9001 	ldrb.w	r9, [r3, #1]
 80204b2:	fb08 a909 	mla	r9, r8, r9, sl
 80204b6:	fb11 fa0c 	smulbb	sl, r1, ip
 80204ba:	9900      	ldr	r1, [sp, #0]
 80204bc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80204c0:	fb09 a907 	mla	r9, r9, r7, sl
 80204c4:	fa1f f989 	uxth.w	r9, r9
 80204c8:	f109 0a01 	add.w	sl, r9, #1
 80204cc:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80204d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80204d4:	f881 9001 	strb.w	r9, [r1, #1]
 80204d8:	7880      	ldrb	r0, [r0, #2]
 80204da:	78b6      	ldrb	r6, [r6, #2]
 80204dc:	4342      	muls	r2, r0
 80204de:	78a8      	ldrb	r0, [r5, #2]
 80204e0:	789b      	ldrb	r3, [r3, #2]
 80204e2:	fb0e 2206 	mla	r2, lr, r6, r2
 80204e6:	fb04 2400 	mla	r4, r4, r0, r2
 80204ea:	fb08 4803 	mla	r8, r8, r3, r4
 80204ee:	9b01      	ldr	r3, [sp, #4]
 80204f0:	fb13 fc0c 	smulbb	ip, r3, ip
 80204f4:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80204f8:	fb08 c707 	mla	r7, r8, r7, ip
 80204fc:	b2bf      	uxth	r7, r7
 80204fe:	f107 0c01 	add.w	ip, r7, #1
 8020502:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8020506:	123f      	asrs	r7, r7, #8
 8020508:	708f      	strb	r7, [r1, #2]
 802050a:	b007      	add	sp, #28
 802050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020510:	08028eff 	.word	0x08028eff
 8020514:	080293f6 	.word	0x080293f6
 8020518:	08028fc8 	.word	0x08028fc8

0802051c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020520:	ed2d 8b08 	vpush	{d8-d11}
 8020524:	b093      	sub	sp, #76	; 0x4c
 8020526:	eeb0 aa40 	vmov.f32	s20, s0
 802052a:	eef0 9a60 	vmov.f32	s19, s1
 802052e:	9210      	str	r2, [sp, #64]	; 0x40
 8020530:	eeb0 9a41 	vmov.f32	s18, s2
 8020534:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020536:	eeb0 8a62 	vmov.f32	s16, s5
 802053a:	9309      	str	r3, [sp, #36]	; 0x24
 802053c:	eef0 8a43 	vmov.f32	s17, s6
 8020540:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8020544:	eef0 ba44 	vmov.f32	s23, s8
 8020548:	9011      	str	r0, [sp, #68]	; 0x44
 802054a:	eeb0 ba64 	vmov.f32	s22, s9
 802054e:	930e      	str	r3, [sp, #56]	; 0x38
 8020550:	eef0 aa45 	vmov.f32	s21, s10
 8020554:	6850      	ldr	r0, [r2, #4]
 8020556:	910d      	str	r1, [sp, #52]	; 0x34
 8020558:	6812      	ldr	r2, [r2, #0]
 802055a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802055e:	fb00 1303 	mla	r3, r0, r3, r1
 8020562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020566:	18d3      	adds	r3, r2, r3
 8020568:	930a      	str	r3, [sp, #40]	; 0x28
 802056a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	930c      	str	r3, [sp, #48]	; 0x30
 8020570:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020572:	685c      	ldr	r4, [r3, #4]
 8020574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020576:	3404      	adds	r4, #4
 8020578:	43db      	mvns	r3, r3
 802057a:	b2db      	uxtb	r3, r3
 802057c:	930b      	str	r3, [sp, #44]	; 0x2c
 802057e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020580:	2b00      	cmp	r3, #0
 8020582:	dc03      	bgt.n	802058c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020586:	2b00      	cmp	r3, #0
 8020588:	f340 8250 	ble.w	8020a2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802058c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802058e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020592:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020596:	1e48      	subs	r0, r1, #1
 8020598:	1e55      	subs	r5, r2, #1
 802059a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802059c:	2b00      	cmp	r3, #0
 802059e:	f340 80ee 	ble.w	802077e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80205a2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80205a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80205a6:	1436      	asrs	r6, r6, #16
 80205a8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80205ac:	d406      	bmi.n	80205bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80205ae:	4286      	cmp	r6, r0
 80205b0:	da04      	bge.n	80205bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80205b2:	2b00      	cmp	r3, #0
 80205b4:	db02      	blt.n	80205bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80205b6:	42ab      	cmp	r3, r5
 80205b8:	f2c0 80e2 	blt.w	8020780 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80205bc:	3601      	adds	r6, #1
 80205be:	f100 80cf 	bmi.w	8020760 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80205c2:	42b1      	cmp	r1, r6
 80205c4:	f2c0 80cc 	blt.w	8020760 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80205c8:	3301      	adds	r3, #1
 80205ca:	f100 80c9 	bmi.w	8020760 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80205ce:	429a      	cmp	r2, r3
 80205d0:	f2c0 80c6 	blt.w	8020760 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 80205d4:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80205d8:	f1bb 0f00 	cmp.w	fp, #0
 80205dc:	f340 80f1 	ble.w	80207c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80205e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80205e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80205e4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80205e6:	141d      	asrs	r5, r3, #16
 80205e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80205ea:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80205ee:	68c7      	ldr	r7, [r0, #12]
 80205f0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80205f2:	1418      	asrs	r0, r3, #16
 80205f4:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80205f8:	6892      	ldr	r2, [r2, #8]
 80205fa:	f100 8137 	bmi.w	802086c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80205fe:	f102 3cff 	add.w	ip, r2, #4294967295
 8020602:	4560      	cmp	r0, ip
 8020604:	f280 8132 	bge.w	802086c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020608:	2d00      	cmp	r5, #0
 802060a:	f2c0 812f 	blt.w	802086c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802060e:	f107 3cff 	add.w	ip, r7, #4294967295
 8020612:	4565      	cmp	r5, ip
 8020614:	f280 812a 	bge.w	802086c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8020618:	b212      	sxth	r2, r2
 802061a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802061c:	fb05 0002 	mla	r0, r5, r2, r0
 8020620:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020622:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020626:	4405      	add	r5, r0
 8020628:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802062c:	eb04 0e0c 	add.w	lr, r4, ip
 8020630:	f1b8 0f00 	cmp.w	r8, #0
 8020634:	f000 810c 	beq.w	8020850 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8020638:	786f      	ldrb	r7, [r5, #1]
 802063a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802063e:	4427      	add	r7, r4
 8020640:	2900      	cmp	r1, #0
 8020642:	f000 810d 	beq.w	8020860 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020646:	18a8      	adds	r0, r5, r2
 8020648:	5caa      	ldrb	r2, [r5, r2]
 802064a:	7840      	ldrb	r0, [r0, #1]
 802064c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020654:	4422      	add	r2, r4
 8020656:	4420      	add	r0, r4
 8020658:	fa1f f388 	uxth.w	r3, r8
 802065c:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8020660:	b289      	uxth	r1, r1
 8020662:	f897 c000 	ldrb.w	ip, [r7]
 8020666:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802066a:	fb03 f901 	mul.w	r9, r3, r1
 802066e:	011b      	lsls	r3, r3, #4
 8020670:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020674:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8020678:	eba3 0309 	sub.w	r3, r3, r9
 802067c:	b289      	uxth	r1, r1
 802067e:	b29b      	uxth	r3, r3
 8020680:	eba8 0801 	sub.w	r8, r8, r1
 8020684:	fb03 fc0c 	mul.w	ip, r3, ip
 8020688:	fa1f f888 	uxth.w	r8, r8
 802068c:	930f      	str	r3, [sp, #60]	; 0x3c
 802068e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020690:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020694:	f892 a000 	ldrb.w	sl, [r2]
 8020698:	fb01 cc0a 	mla	ip, r1, sl, ip
 802069c:	f890 a000 	ldrb.w	sl, [r0]
 80206a0:	fb09 cc0a 	mla	ip, r9, sl, ip
 80206a4:	f896 a000 	ldrb.w	sl, [r6]
 80206a8:	fb1a fa03 	smulbb	sl, sl, r3
 80206ac:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80206b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206b2:	fb0c ac05 	mla	ip, ip, r5, sl
 80206b6:	fa1f fc8c 	uxth.w	ip, ip
 80206ba:	f10c 0a01 	add.w	sl, ip, #1
 80206be:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80206c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80206c6:	f886 a000 	strb.w	sl, [r6]
 80206ca:	f897 c001 	ldrb.w	ip, [r7, #1]
 80206ce:	f89e a001 	ldrb.w	sl, [lr, #1]
 80206d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80206d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80206d8:	fb08 cc0a 	mla	ip, r8, sl, ip
 80206dc:	f892 a001 	ldrb.w	sl, [r2, #1]
 80206e0:	fb01 cc0a 	mla	ip, r1, sl, ip
 80206e4:	f890 a001 	ldrb.w	sl, [r0, #1]
 80206e8:	fb09 cc0a 	mla	ip, r9, sl, ip
 80206ec:	f896 a001 	ldrb.w	sl, [r6, #1]
 80206f0:	fb1a fa03 	smulbb	sl, sl, r3
 80206f4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80206f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206fa:	fb0c ac05 	mla	ip, ip, r5, sl
 80206fe:	fa1f fc8c 	uxth.w	ip, ip
 8020702:	f10c 0a01 	add.w	sl, ip, #1
 8020706:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 802070a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802070e:	f886 c001 	strb.w	ip, [r6, #1]
 8020712:	78bf      	ldrb	r7, [r7, #2]
 8020714:	f89e c002 	ldrb.w	ip, [lr, #2]
 8020718:	437b      	muls	r3, r7
 802071a:	fb08 330c 	mla	r3, r8, ip, r3
 802071e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8020722:	7882      	ldrb	r2, [r0, #2]
 8020724:	fb01 310c 	mla	r1, r1, ip, r3
 8020728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802072a:	fb09 1902 	mla	r9, r9, r2, r1
 802072e:	78b1      	ldrb	r1, [r6, #2]
 8020730:	fb11 f103 	smulbb	r1, r1, r3
 8020734:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020738:	fb09 1505 	mla	r5, r9, r5, r1
 802073c:	b2ad      	uxth	r5, r5
 802073e:	1c6b      	adds	r3, r5, #1
 8020740:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020744:	122d      	asrs	r5, r5, #8
 8020746:	70b5      	strb	r5, [r6, #2]
 8020748:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802074a:	3603      	adds	r6, #3
 802074c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802074e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020752:	4413      	add	r3, r2
 8020754:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020756:	9325      	str	r3, [sp, #148]	; 0x94
 8020758:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802075a:	4413      	add	r3, r2
 802075c:	9326      	str	r3, [sp, #152]	; 0x98
 802075e:	e73b      	b.n	80205d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8020760:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020762:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8020764:	4433      	add	r3, r6
 8020766:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8020768:	9325      	str	r3, [sp, #148]	; 0x94
 802076a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802076c:	4433      	add	r3, r6
 802076e:	9326      	str	r3, [sp, #152]	; 0x98
 8020770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020772:	3b01      	subs	r3, #1
 8020774:	9309      	str	r3, [sp, #36]	; 0x24
 8020776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020778:	3303      	adds	r3, #3
 802077a:	930a      	str	r3, [sp, #40]	; 0x28
 802077c:	e70d      	b.n	802059a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802077e:	d028      	beq.n	80207d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020782:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020784:	3b01      	subs	r3, #1
 8020786:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8020788:	fb00 5003 	mla	r0, r0, r3, r5
 802078c:	1400      	asrs	r0, r0, #16
 802078e:	f53f af21 	bmi.w	80205d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020792:	3901      	subs	r1, #1
 8020794:	4288      	cmp	r0, r1
 8020796:	f6bf af1d 	bge.w	80205d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802079a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802079c:	9826      	ldr	r0, [sp, #152]	; 0x98
 802079e:	fb01 0303 	mla	r3, r1, r3, r0
 80207a2:	141b      	asrs	r3, r3, #16
 80207a4:	f53f af16 	bmi.w	80205d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80207a8:	3a01      	subs	r2, #1
 80207aa:	4293      	cmp	r3, r2
 80207ac:	f6bf af12 	bge.w	80205d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80207b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207b2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80207b6:	1cdf      	adds	r7, r3, #3
 80207b8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80207bc:	f1b9 0f00 	cmp.w	r9, #0
 80207c0:	dc73      	bgt.n	80208aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80207c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80207ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207ce:	441a      	add	r2, r3
 80207d0:	920a      	str	r2, [sp, #40]	; 0x28
 80207d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207d4:	2b00      	cmp	r3, #0
 80207d6:	f340 8129 	ble.w	8020a2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80207da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80207de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80207e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80207e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80207e8:	eef0 6a48 	vmov.f32	s13, s16
 80207ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80207f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80207f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207f8:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80207fc:	eef0 6a68 	vmov.f32	s13, s17
 8020800:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020804:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8020808:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802080c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020810:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020814:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020818:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802081c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020820:	ee18 2a10 	vmov	r2, s16
 8020824:	eeb0 8a47 	vmov.f32	s16, s14
 8020828:	fb92 f3f3 	sdiv	r3, r2, r3
 802082c:	ee18 2a90 	vmov	r2, s17
 8020830:	9327      	str	r3, [sp, #156]	; 0x9c
 8020832:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020834:	eef0 8a67 	vmov.f32	s17, s15
 8020838:	fb92 f3f3 	sdiv	r3, r2, r3
 802083c:	9328      	str	r3, [sp, #160]	; 0xa0
 802083e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020840:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020842:	3b01      	subs	r3, #1
 8020844:	930d      	str	r3, [sp, #52]	; 0x34
 8020846:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020848:	bf08      	it	eq
 802084a:	4613      	moveq	r3, r2
 802084c:	9309      	str	r3, [sp, #36]	; 0x24
 802084e:	e696      	b.n	802057e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020850:	b149      	cbz	r1, 8020866 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020852:	5caa      	ldrb	r2, [r5, r2]
 8020854:	4670      	mov	r0, lr
 8020856:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802085a:	4422      	add	r2, r4
 802085c:	4677      	mov	r7, lr
 802085e:	e6fb      	b.n	8020658 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8020860:	4670      	mov	r0, lr
 8020862:	4672      	mov	r2, lr
 8020864:	e6f8      	b.n	8020658 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8020866:	4670      	mov	r0, lr
 8020868:	4672      	mov	r2, lr
 802086a:	e7f7      	b.n	802085c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802086c:	f110 0c01 	adds.w	ip, r0, #1
 8020870:	f53f af6a 	bmi.w	8020748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020874:	4562      	cmp	r2, ip
 8020876:	f6ff af67 	blt.w	8020748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802087a:	f115 0c01 	adds.w	ip, r5, #1
 802087e:	f53f af63 	bmi.w	8020748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020882:	4567      	cmp	r7, ip
 8020884:	f6ff af60 	blt.w	8020748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8020888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802088a:	b23f      	sxth	r7, r7
 802088c:	b212      	sxth	r2, r2
 802088e:	9002      	str	r0, [sp, #8]
 8020890:	9701      	str	r7, [sp, #4]
 8020892:	9200      	str	r2, [sp, #0]
 8020894:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020898:	e9cd 1305 	strd	r1, r3, [sp, #20]
 802089c:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80208a0:	4623      	mov	r3, r4
 80208a2:	4631      	mov	r1, r6
 80208a4:	f7ff fd4c 	bl	8020340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80208a8:	e74e      	b.n	8020748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80208aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80208ac:	9826      	ldr	r0, [sp, #152]	; 0x98
 80208ae:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80208b2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80208b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80208b6:	1400      	asrs	r0, r0, #16
 80208b8:	142d      	asrs	r5, r5, #16
 80208ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80208bc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80208c0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80208c4:	fb02 5000 	mla	r0, r2, r0, r5
 80208c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80208ca:	f815 e000 	ldrb.w	lr, [r5, r0]
 80208ce:	eb05 0c00 	add.w	ip, r5, r0
 80208d2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80208d6:	eb04 060e 	add.w	r6, r4, lr
 80208da:	2b00      	cmp	r3, #0
 80208dc:	f000 8097 	beq.w	8020a0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80208e0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80208e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80208e8:	4425      	add	r5, r4
 80208ea:	2900      	cmp	r1, #0
 80208ec:	f000 8098 	beq.w	8020a20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80208f0:	eb0c 0002 	add.w	r0, ip, r2
 80208f4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80208f8:	7840      	ldrb	r0, [r0, #1]
 80208fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80208fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020902:	4422      	add	r2, r4
 8020904:	4420      	add	r0, r4
 8020906:	b29b      	uxth	r3, r3
 8020908:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802090c:	b289      	uxth	r1, r1
 802090e:	f895 e000 	ldrb.w	lr, [r5]
 8020912:	3703      	adds	r7, #3
 8020914:	f109 39ff 	add.w	r9, r9, #4294967295
 8020918:	fb03 f801 	mul.w	r8, r3, r1
 802091c:	011b      	lsls	r3, r3, #4
 802091e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8020922:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020926:	eba3 0308 	sub.w	r3, r3, r8
 802092a:	b289      	uxth	r1, r1
 802092c:	b29b      	uxth	r3, r3
 802092e:	ebac 0c01 	sub.w	ip, ip, r1
 8020932:	fb03 fe0e 	mul.w	lr, r3, lr
 8020936:	fa1f fc8c 	uxth.w	ip, ip
 802093a:	930f      	str	r3, [sp, #60]	; 0x3c
 802093c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802093e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020942:	f892 b000 	ldrb.w	fp, [r2]
 8020946:	fb01 ee0b 	mla	lr, r1, fp, lr
 802094a:	f890 b000 	ldrb.w	fp, [r0]
 802094e:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020952:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8020956:	fb1b fb03 	smulbb	fp, fp, r3
 802095a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802095e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020960:	fb0e be0a 	mla	lr, lr, sl, fp
 8020964:	fa1f fe8e 	uxth.w	lr, lr
 8020968:	f10e 0b01 	add.w	fp, lr, #1
 802096c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020970:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020974:	f807 ec06 	strb.w	lr, [r7, #-6]
 8020978:	f895 e001 	ldrb.w	lr, [r5, #1]
 802097c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020980:	fb03 fe0e 	mul.w	lr, r3, lr
 8020984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020986:	fb0c ee0b 	mla	lr, ip, fp, lr
 802098a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802098e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020992:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020996:	fb08 ee0b 	mla	lr, r8, fp, lr
 802099a:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 802099e:	fb1b fb03 	smulbb	fp, fp, r3
 80209a2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80209a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209a8:	fb0e be0a 	mla	lr, lr, sl, fp
 80209ac:	fa1f fe8e 	uxth.w	lr, lr
 80209b0:	f10e 0b01 	add.w	fp, lr, #1
 80209b4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80209b8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80209bc:	f807 ec05 	strb.w	lr, [r7, #-5]
 80209c0:	78ad      	ldrb	r5, [r5, #2]
 80209c2:	78b6      	ldrb	r6, [r6, #2]
 80209c4:	436b      	muls	r3, r5
 80209c6:	7895      	ldrb	r5, [r2, #2]
 80209c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80209ca:	fb0c 3306 	mla	r3, ip, r6, r3
 80209ce:	fb01 3305 	mla	r3, r1, r5, r3
 80209d2:	7885      	ldrb	r5, [r0, #2]
 80209d4:	fb08 3805 	mla	r8, r8, r5, r3
 80209d8:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80209dc:	fb13 f302 	smulbb	r3, r3, r2
 80209e0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80209e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80209e6:	fb08 380a 	mla	r8, r8, sl, r3
 80209ea:	fa1f f888 	uxth.w	r8, r8
 80209ee:	f108 0301 	add.w	r3, r8, #1
 80209f2:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80209f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80209f8:	4413      	add	r3, r2
 80209fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80209fc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020a00:	9325      	str	r3, [sp, #148]	; 0x94
 8020a02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020a04:	f807 8c04 	strb.w	r8, [r7, #-4]
 8020a08:	4413      	add	r3, r2
 8020a0a:	9326      	str	r3, [sp, #152]	; 0x98
 8020a0c:	e6d6      	b.n	80207bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020a0e:	b151      	cbz	r1, 8020a26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8020a10:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020a14:	4630      	mov	r0, r6
 8020a16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020a1a:	4422      	add	r2, r4
 8020a1c:	4635      	mov	r5, r6
 8020a1e:	e772      	b.n	8020906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8020a20:	4630      	mov	r0, r6
 8020a22:	4632      	mov	r2, r6
 8020a24:	e76f      	b.n	8020906 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8020a26:	4630      	mov	r0, r6
 8020a28:	4632      	mov	r2, r6
 8020a2a:	e7f7      	b.n	8020a1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8020a2c:	b013      	add	sp, #76	; 0x4c
 8020a2e:	ecbd 8b08 	vpop	{d8-d11}
 8020a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8020a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a3c:	784d      	ldrb	r5, [r1, #1]
 8020a3e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8020a42:	022d      	lsls	r5, r5, #8
 8020a44:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020a48:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020a4c:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8020a50:	f891 9000 	ldrb.w	r9, [r1]
 8020a54:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020a58:	ea45 0509 	orr.w	r5, r5, r9
 8020a5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020a60:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020a64:	9501      	str	r5, [sp, #4]
 8020a66:	fb06 470c 	mla	r7, r6, ip, r4
 8020a6a:	2e00      	cmp	r6, #0
 8020a6c:	eb02 0e07 	add.w	lr, r2, r7
 8020a70:	db46      	blt.n	8020b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8020a72:	45b0      	cmp	r8, r6
 8020a74:	dd44      	ble.n	8020b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8020a76:	2c00      	cmp	r4, #0
 8020a78:	db40      	blt.n	8020afc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8020a7a:	45a4      	cmp	ip, r4
 8020a7c:	dd3e      	ble.n	8020afc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8020a7e:	5dd7      	ldrb	r7, [r2, r7]
 8020a80:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020a84:	441f      	add	r7, r3
 8020a86:	1c62      	adds	r2, r4, #1
 8020a88:	d43d      	bmi.n	8020b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020a8a:	4594      	cmp	ip, r2
 8020a8c:	dd3b      	ble.n	8020b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020a8e:	f1ba 0f00 	cmp.w	sl, #0
 8020a92:	d038      	beq.n	8020b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8020a94:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a9c:	441d      	add	r5, r3
 8020a9e:	3601      	adds	r6, #1
 8020aa0:	d435      	bmi.n	8020b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020aa2:	45b0      	cmp	r8, r6
 8020aa4:	dd33      	ble.n	8020b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020aa6:	b390      	cbz	r0, 8020b0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8020aa8:	2c00      	cmp	r4, #0
 8020aaa:	db2e      	blt.n	8020b0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8020aac:	45a4      	cmp	ip, r4
 8020aae:	dd2c      	ble.n	8020b0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8020ab0:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020ab4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020ab8:	441e      	add	r6, r3
 8020aba:	1c62      	adds	r2, r4, #1
 8020abc:	d42a      	bmi.n	8020b14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8020abe:	4594      	cmp	ip, r2
 8020ac0:	dd28      	ble.n	8020b14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8020ac2:	f1ba 0f00 	cmp.w	sl, #0
 8020ac6:	d025      	beq.n	8020b14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8020ac8:	44f4      	add	ip, lr
 8020aca:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020ace:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ad2:	4413      	add	r3, r2
 8020ad4:	f1ba 0f0f 	cmp.w	sl, #15
 8020ad8:	f897 8000 	ldrb.w	r8, [r7]
 8020adc:	f895 9000 	ldrb.w	r9, [r5]
 8020ae0:	f896 e000 	ldrb.w	lr, [r6]
 8020ae4:	f893 c000 	ldrb.w	ip, [r3]
 8020ae8:	d801      	bhi.n	8020aee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 8020aea:	280f      	cmp	r0, #15
 8020aec:	d914      	bls.n	8020b18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8020aee:	4b29      	ldr	r3, [pc, #164]	; (8020b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8020af0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8020af4:	4a28      	ldr	r2, [pc, #160]	; (8020b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8020af6:	4829      	ldr	r0, [pc, #164]	; (8020b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8020af8:	f004 fbe8 	bl	80252cc <__assert_func>
 8020afc:	af01      	add	r7, sp, #4
 8020afe:	e7c2      	b.n	8020a86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8020b00:	ad01      	add	r5, sp, #4
 8020b02:	462f      	mov	r7, r5
 8020b04:	e7cb      	b.n	8020a9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8020b06:	ad01      	add	r5, sp, #4
 8020b08:	e7c9      	b.n	8020a9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 8020b0a:	ae01      	add	r6, sp, #4
 8020b0c:	e7d5      	b.n	8020aba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 8020b0e:	ab01      	add	r3, sp, #4
 8020b10:	461e      	mov	r6, r3
 8020b12:	e7df      	b.n	8020ad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8020b14:	ab01      	add	r3, sp, #4
 8020b16:	e7dd      	b.n	8020ad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8020b18:	fa1f f48a 	uxth.w	r4, sl
 8020b1c:	b280      	uxth	r0, r0
 8020b1e:	fb04 fa00 	mul.w	sl, r4, r0
 8020b22:	0124      	lsls	r4, r4, #4
 8020b24:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020b28:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8020b2c:	b282      	uxth	r2, r0
 8020b2e:	eba4 000a 	sub.w	r0, r4, sl
 8020b32:	ebab 0b02 	sub.w	fp, fp, r2
 8020b36:	b280      	uxth	r0, r0
 8020b38:	fa1f fb8b 	uxth.w	fp, fp
 8020b3c:	fb00 f909 	mul.w	r9, r0, r9
 8020b40:	fb0b 9808 	mla	r8, fp, r8, r9
 8020b44:	fb02 8e0e 	mla	lr, r2, lr, r8
 8020b48:	fb0a ec0c 	mla	ip, sl, ip, lr
 8020b4c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020b50:	f881 c000 	strb.w	ip, [r1]
 8020b54:	786c      	ldrb	r4, [r5, #1]
 8020b56:	f897 c001 	ldrb.w	ip, [r7, #1]
 8020b5a:	4344      	muls	r4, r0
 8020b5c:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8020b60:	7874      	ldrb	r4, [r6, #1]
 8020b62:	fb02 cc04 	mla	ip, r2, r4, ip
 8020b66:	785c      	ldrb	r4, [r3, #1]
 8020b68:	fb0a c404 	mla	r4, sl, r4, ip
 8020b6c:	1224      	asrs	r4, r4, #8
 8020b6e:	704c      	strb	r4, [r1, #1]
 8020b70:	78ad      	ldrb	r5, [r5, #2]
 8020b72:	78bc      	ldrb	r4, [r7, #2]
 8020b74:	4368      	muls	r0, r5
 8020b76:	fb0b 0b04 	mla	fp, fp, r4, r0
 8020b7a:	78b0      	ldrb	r0, [r6, #2]
 8020b7c:	fb02 b000 	mla	r0, r2, r0, fp
 8020b80:	789a      	ldrb	r2, [r3, #2]
 8020b82:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020b86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020b8a:	f881 a002 	strb.w	sl, [r1, #2]
 8020b8e:	b003      	add	sp, #12
 8020b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b94:	08028eff 	.word	0x08028eff
 8020b98:	080293f6 	.word	0x080293f6
 8020b9c:	08028fc8 	.word	0x08028fc8

08020ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ba4:	ed2d 8b0a 	vpush	{d8-d12}
 8020ba8:	b08d      	sub	sp, #52	; 0x34
 8020baa:	eeb0 aa40 	vmov.f32	s20, s0
 8020bae:	eef0 9a60 	vmov.f32	s19, s1
 8020bb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8020bb4:	eeb0 9a41 	vmov.f32	s18, s2
 8020bb8:	9306      	str	r3, [sp, #24]
 8020bba:	eeb0 8a62 	vmov.f32	s16, s5
 8020bbe:	eef0 8a43 	vmov.f32	s17, s6
 8020bc2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8020bc4:	eeb0 ca44 	vmov.f32	s24, s8
 8020bc8:	eef0 ba64 	vmov.f32	s23, s9
 8020bcc:	eeb0 ba45 	vmov.f32	s22, s10
 8020bd0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020bd4:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8020bd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020bda:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8020bde:	6850      	ldr	r0, [r2, #4]
 8020be0:	6812      	ldr	r2, [r2, #0]
 8020be2:	fb00 1303 	mla	r3, r0, r3, r1
 8020be6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020bea:	18d3      	adds	r3, r2, r3
 8020bec:	9307      	str	r3, [sp, #28]
 8020bee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bf0:	681b      	ldr	r3, [r3, #0]
 8020bf2:	9308      	str	r3, [sp, #32]
 8020bf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020bf6:	685d      	ldr	r5, [r3, #4]
 8020bf8:	3504      	adds	r5, #4
 8020bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	dc03      	bgt.n	8020c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	f340 81e6 	ble.w	8020fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020c08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020c12:	1e48      	subs	r0, r1, #1
 8020c14:	1e56      	subs	r6, r2, #1
 8020c16:	9b06      	ldr	r3, [sp, #24]
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	f340 80bd 	ble.w	8020d98 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8020c1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020c20:	1427      	asrs	r7, r4, #16
 8020c22:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020c26:	d406      	bmi.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020c28:	4287      	cmp	r7, r0
 8020c2a:	da04      	bge.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	db02      	blt.n	8020c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020c30:	42b3      	cmp	r3, r6
 8020c32:	f2c0 80b2 	blt.w	8020d9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020c36:	3701      	adds	r7, #1
 8020c38:	f100 80a1 	bmi.w	8020d7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020c3c:	42b9      	cmp	r1, r7
 8020c3e:	f2c0 809e 	blt.w	8020d7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020c42:	3301      	adds	r3, #1
 8020c44:	f100 809b 	bmi.w	8020d7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020c48:	429a      	cmp	r2, r3
 8020c4a:	f2c0 8098 	blt.w	8020d7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8020c4e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8020c52:	f1bb 0f00 	cmp.w	fp, #0
 8020c56:	f340 80bf 	ble.w	8020dd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020c5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020c5c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8020c5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020c60:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020c64:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8020c68:	1420      	asrs	r0, r4, #16
 8020c6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020c6c:	ea4f 4723 	mov.w	r7, r3, asr #16
 8020c70:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020c74:	6892      	ldr	r2, [r2, #8]
 8020c76:	f100 8103 	bmi.w	8020e80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020c7a:	f102 3eff 	add.w	lr, r2, #4294967295
 8020c7e:	4570      	cmp	r0, lr
 8020c80:	f280 80fe 	bge.w	8020e80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020c84:	2f00      	cmp	r7, #0
 8020c86:	f2c0 80fb 	blt.w	8020e80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020c8a:	f10c 3eff 	add.w	lr, ip, #4294967295
 8020c8e:	4577      	cmp	r7, lr
 8020c90:	f280 80f6 	bge.w	8020e80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8020c94:	b212      	sxth	r2, r2
 8020c96:	fb07 0002 	mla	r0, r7, r2, r0
 8020c9a:	9f08      	ldr	r7, [sp, #32]
 8020c9c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8020ca0:	eb07 0e00 	add.w	lr, r7, r0
 8020ca4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020ca8:	eb05 0c08 	add.w	ip, r5, r8
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	f000 80d8 	beq.w	8020e62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8020cb2:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8020cb6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020cba:	442f      	add	r7, r5
 8020cbc:	2900      	cmp	r1, #0
 8020cbe:	f000 80d9 	beq.w	8020e74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8020cc2:	eb0e 0002 	add.w	r0, lr, r2
 8020cc6:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020cca:	7840      	ldrb	r0, [r0, #1]
 8020ccc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020cd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020cd4:	442a      	add	r2, r5
 8020cd6:	4428      	add	r0, r5
 8020cd8:	b29b      	uxth	r3, r3
 8020cda:	f815 a008 	ldrb.w	sl, [r5, r8]
 8020cde:	b289      	uxth	r1, r1
 8020ce0:	f897 8000 	ldrb.w	r8, [r7]
 8020ce4:	fb03 f901 	mul.w	r9, r3, r1
 8020ce8:	011b      	lsls	r3, r3, #4
 8020cea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020cee:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020cf2:	eba3 0309 	sub.w	r3, r3, r9
 8020cf6:	b289      	uxth	r1, r1
 8020cf8:	b29b      	uxth	r3, r3
 8020cfa:	ebae 0e01 	sub.w	lr, lr, r1
 8020cfe:	fb03 f808 	mul.w	r8, r3, r8
 8020d02:	fa1f fe8e 	uxth.w	lr, lr
 8020d06:	fb0e 880a 	mla	r8, lr, sl, r8
 8020d0a:	f892 a000 	ldrb.w	sl, [r2]
 8020d0e:	fb01 880a 	mla	r8, r1, sl, r8
 8020d12:	f890 a000 	ldrb.w	sl, [r0]
 8020d16:	fb09 880a 	mla	r8, r9, sl, r8
 8020d1a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020d1e:	f886 8000 	strb.w	r8, [r6]
 8020d22:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020d26:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020d2a:	fb03 f808 	mul.w	r8, r3, r8
 8020d2e:	fb0e 880a 	mla	r8, lr, sl, r8
 8020d32:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020d36:	fb01 880a 	mla	r8, r1, sl, r8
 8020d3a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020d3e:	fb09 880a 	mla	r8, r9, sl, r8
 8020d42:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020d46:	f886 8001 	strb.w	r8, [r6, #1]
 8020d4a:	78bf      	ldrb	r7, [r7, #2]
 8020d4c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020d50:	437b      	muls	r3, r7
 8020d52:	7892      	ldrb	r2, [r2, #2]
 8020d54:	fb0e 330c 	mla	r3, lr, ip, r3
 8020d58:	fb01 3102 	mla	r1, r1, r2, r3
 8020d5c:	7882      	ldrb	r2, [r0, #2]
 8020d5e:	fb09 1902 	mla	r9, r9, r2, r1
 8020d62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020d66:	f886 9002 	strb.w	r9, [r6, #2]
 8020d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020d6c:	3603      	adds	r6, #3
 8020d6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020d70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020d74:	441c      	add	r4, r3
 8020d76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020d78:	4413      	add	r3, r2
 8020d7a:	9322      	str	r3, [sp, #136]	; 0x88
 8020d7c:	e769      	b.n	8020c52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020d7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020d80:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8020d82:	441c      	add	r4, r3
 8020d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020d86:	443b      	add	r3, r7
 8020d88:	9322      	str	r3, [sp, #136]	; 0x88
 8020d8a:	9b06      	ldr	r3, [sp, #24]
 8020d8c:	3b01      	subs	r3, #1
 8020d8e:	9306      	str	r3, [sp, #24]
 8020d90:	9b07      	ldr	r3, [sp, #28]
 8020d92:	3303      	adds	r3, #3
 8020d94:	9307      	str	r3, [sp, #28]
 8020d96:	e73e      	b.n	8020c16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d98:	d026      	beq.n	8020de8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020d9a:	9b06      	ldr	r3, [sp, #24]
 8020d9c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020d9e:	3b01      	subs	r3, #1
 8020da0:	fb00 4003 	mla	r0, r0, r3, r4
 8020da4:	1400      	asrs	r0, r0, #16
 8020da6:	f53f af52 	bmi.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020daa:	3901      	subs	r1, #1
 8020dac:	4288      	cmp	r0, r1
 8020dae:	f6bf af4e 	bge.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020db2:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020db4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020db6:	fb01 0303 	mla	r3, r1, r3, r0
 8020dba:	141b      	asrs	r3, r3, #16
 8020dbc:	f53f af47 	bmi.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020dc0:	3a01      	subs	r2, #1
 8020dc2:	4293      	cmp	r3, r2
 8020dc4:	f6bf af43 	bge.w	8020c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020dc8:	9b07      	ldr	r3, [sp, #28]
 8020dca:	f8dd a018 	ldr.w	sl, [sp, #24]
 8020dce:	f103 0803 	add.w	r8, r3, #3
 8020dd2:	f1ba 0f00 	cmp.w	sl, #0
 8020dd6:	dc71      	bgt.n	8020ebc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8020dd8:	9b06      	ldr	r3, [sp, #24]
 8020dda:	9a07      	ldr	r2, [sp, #28]
 8020ddc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020de4:	441a      	add	r2, r3
 8020de6:	9207      	str	r2, [sp, #28]
 8020de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	f340 80f2 	ble.w	8020fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020df0:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020df4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020df6:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020dfa:	eef0 6a48 	vmov.f32	s13, s16
 8020dfe:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020e02:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020e06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e0a:	ee16 4a90 	vmov	r4, s13
 8020e0e:	eef0 6a68 	vmov.f32	s13, s17
 8020e12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e16:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8020e1a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020e1e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020e22:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020e26:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020e2a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020e2e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020e32:	ee18 2a10 	vmov	r2, s16
 8020e36:	eeb0 8a47 	vmov.f32	s16, s14
 8020e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e3e:	ee18 2a90 	vmov	r2, s17
 8020e42:	9323      	str	r3, [sp, #140]	; 0x8c
 8020e44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e46:	eef0 8a67 	vmov.f32	s17, s15
 8020e4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e4e:	9324      	str	r3, [sp, #144]	; 0x90
 8020e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020e54:	3b01      	subs	r3, #1
 8020e56:	9309      	str	r3, [sp, #36]	; 0x24
 8020e58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e5a:	bf08      	it	eq
 8020e5c:	4613      	moveq	r3, r2
 8020e5e:	9306      	str	r3, [sp, #24]
 8020e60:	e6cb      	b.n	8020bfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020e62:	b151      	cbz	r1, 8020e7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020e64:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020e68:	4660      	mov	r0, ip
 8020e6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020e6e:	442a      	add	r2, r5
 8020e70:	4667      	mov	r7, ip
 8020e72:	e731      	b.n	8020cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020e74:	4660      	mov	r0, ip
 8020e76:	4662      	mov	r2, ip
 8020e78:	e72e      	b.n	8020cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020e7a:	4660      	mov	r0, ip
 8020e7c:	4662      	mov	r2, ip
 8020e7e:	e7f7      	b.n	8020e70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020e80:	f110 0e01 	adds.w	lr, r0, #1
 8020e84:	f53f af71 	bmi.w	8020d6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020e88:	4572      	cmp	r2, lr
 8020e8a:	f6ff af6e 	blt.w	8020d6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020e8e:	f117 0e01 	adds.w	lr, r7, #1
 8020e92:	f53f af6a 	bmi.w	8020d6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020e96:	45f4      	cmp	ip, lr
 8020e98:	f6ff af67 	blt.w	8020d6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020e9c:	b212      	sxth	r2, r2
 8020e9e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020ea2:	fa0f f38c 	sxth.w	r3, ip
 8020ea6:	9200      	str	r2, [sp, #0]
 8020ea8:	4631      	mov	r1, r6
 8020eaa:	9a08      	ldr	r2, [sp, #32]
 8020eac:	9301      	str	r3, [sp, #4]
 8020eae:	462b      	mov	r3, r5
 8020eb0:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020eb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020eb6:	f7ff fdbf 	bl	8020a38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8020eba:	e756      	b.n	8020d6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8020ebc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020ebe:	1426      	asrs	r6, r4, #16
 8020ec0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020ec2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020ec6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020eca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020ecc:	1400      	asrs	r0, r0, #16
 8020ece:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020ed2:	fb02 6000 	mla	r0, r2, r0, r6
 8020ed6:	9e08      	ldr	r6, [sp, #32]
 8020ed8:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020edc:	eb06 0c00 	add.w	ip, r6, r0
 8020ee0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020ee4:	eb05 070e 	add.w	r7, r5, lr
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	d064      	beq.n	8020fb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8020eec:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8020ef0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020ef4:	442e      	add	r6, r5
 8020ef6:	2900      	cmp	r1, #0
 8020ef8:	d066      	beq.n	8020fc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8020efa:	eb0c 0002 	add.w	r0, ip, r2
 8020efe:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020f02:	7840      	ldrb	r0, [r0, #1]
 8020f04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020f08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020f0c:	442a      	add	r2, r5
 8020f0e:	4428      	add	r0, r5
 8020f10:	b29b      	uxth	r3, r3
 8020f12:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8020f16:	b289      	uxth	r1, r1
 8020f18:	f896 e000 	ldrb.w	lr, [r6]
 8020f1c:	f108 0803 	add.w	r8, r8, #3
 8020f20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020f24:	fb03 f901 	mul.w	r9, r3, r1
 8020f28:	011b      	lsls	r3, r3, #4
 8020f2a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020f2e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8020f32:	eba3 0309 	sub.w	r3, r3, r9
 8020f36:	b289      	uxth	r1, r1
 8020f38:	b29b      	uxth	r3, r3
 8020f3a:	ebac 0c01 	sub.w	ip, ip, r1
 8020f3e:	fb03 fe0e 	mul.w	lr, r3, lr
 8020f42:	fa1f fc8c 	uxth.w	ip, ip
 8020f46:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020f4a:	f892 b000 	ldrb.w	fp, [r2]
 8020f4e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020f52:	f890 b000 	ldrb.w	fp, [r0]
 8020f56:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020f5a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020f5e:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020f62:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020f66:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020f6a:	fb03 fe0e 	mul.w	lr, r3, lr
 8020f6e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020f72:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020f76:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020f7a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020f7e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020f82:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020f86:	f808 ec05 	strb.w	lr, [r8, #-5]
 8020f8a:	78b6      	ldrb	r6, [r6, #2]
 8020f8c:	78bf      	ldrb	r7, [r7, #2]
 8020f8e:	4373      	muls	r3, r6
 8020f90:	7896      	ldrb	r6, [r2, #2]
 8020f92:	7882      	ldrb	r2, [r0, #2]
 8020f94:	fb0c 3307 	mla	r3, ip, r7, r3
 8020f98:	fb01 3306 	mla	r3, r1, r6, r3
 8020f9c:	fb09 3902 	mla	r9, r9, r2, r3
 8020fa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020fa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020fa4:	441c      	add	r4, r3
 8020fa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020fa8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020fac:	4413      	add	r3, r2
 8020fae:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020fb2:	9322      	str	r3, [sp, #136]	; 0x88
 8020fb4:	e70d      	b.n	8020dd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020fb6:	b151      	cbz	r1, 8020fce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8020fb8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020fbc:	4638      	mov	r0, r7
 8020fbe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020fc2:	442a      	add	r2, r5
 8020fc4:	463e      	mov	r6, r7
 8020fc6:	e7a3      	b.n	8020f10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020fc8:	4638      	mov	r0, r7
 8020fca:	463a      	mov	r2, r7
 8020fcc:	e7a0      	b.n	8020f10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020fce:	4638      	mov	r0, r7
 8020fd0:	463a      	mov	r2, r7
 8020fd2:	e7f7      	b.n	8020fc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020fd4:	b00d      	add	sp, #52	; 0x34
 8020fd6:	ecbd 8b0a 	vpop	{d8-d12}
 8020fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fe4:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8020fe8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8020fec:	2d00      	cmp	r5, #0
 8020fee:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020ff2:	fb05 040e 	mla	r4, r5, lr, r0
 8020ff6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8020ffa:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8020ffe:	eb02 0804 	add.w	r8, r2, r4
 8021002:	db40      	blt.n	8021086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8021004:	45a9      	cmp	r9, r5
 8021006:	dd3e      	ble.n	8021086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8021008:	2800      	cmp	r0, #0
 802100a:	db3a      	blt.n	8021082 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 802100c:	4586      	cmp	lr, r0
 802100e:	dd38      	ble.n	8021082 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8021010:	5d12      	ldrb	r2, [r2, r4]
 8021012:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021016:	1c42      	adds	r2, r0, #1
 8021018:	d438      	bmi.n	802108c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 802101a:	4596      	cmp	lr, r2
 802101c:	dd36      	ble.n	802108c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 802101e:	b3bf      	cbz	r7, 8021090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8021020:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021024:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8021028:	3501      	adds	r5, #1
 802102a:	d435      	bmi.n	8021098 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 802102c:	45a9      	cmp	r9, r5
 802102e:	dd33      	ble.n	8021098 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8021030:	f1bc 0f00 	cmp.w	ip, #0
 8021034:	d033      	beq.n	802109e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8021036:	2800      	cmp	r0, #0
 8021038:	db2c      	blt.n	8021094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 802103a:	4586      	cmp	lr, r0
 802103c:	dd2a      	ble.n	8021094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 802103e:	f818 200e 	ldrb.w	r2, [r8, lr]
 8021042:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8021046:	3001      	adds	r0, #1
 8021048:	d42c      	bmi.n	80210a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 802104a:	4586      	cmp	lr, r0
 802104c:	dd2a      	ble.n	80210a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 802104e:	b35f      	cbz	r7, 80210a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8021050:	44c6      	add	lr, r8
 8021052:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021056:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802105a:	2f0f      	cmp	r7, #15
 802105c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021060:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8021064:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021068:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802106c:	d802      	bhi.n	8021074 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 802106e:	f1bc 0f0f 	cmp.w	ip, #15
 8021072:	d91b      	bls.n	80210ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8021074:	4b77      	ldr	r3, [pc, #476]	; (8021254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8021076:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 802107a:	4a77      	ldr	r2, [pc, #476]	; (8021258 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 802107c:	4877      	ldr	r0, [pc, #476]	; (802125c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 802107e:	f004 f925 	bl	80252cc <__assert_func>
 8021082:	2600      	movs	r6, #0
 8021084:	e7c7      	b.n	8021016 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8021086:	2400      	movs	r4, #0
 8021088:	4626      	mov	r6, r4
 802108a:	e7cd      	b.n	8021028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 802108c:	2400      	movs	r4, #0
 802108e:	e7cb      	b.n	8021028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8021090:	463c      	mov	r4, r7
 8021092:	e7c9      	b.n	8021028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8021094:	2500      	movs	r5, #0
 8021096:	e7d6      	b.n	8021046 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8021098:	2200      	movs	r2, #0
 802109a:	4615      	mov	r5, r2
 802109c:	e7dd      	b.n	802105a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802109e:	4662      	mov	r2, ip
 80210a0:	4665      	mov	r5, ip
 80210a2:	e7da      	b.n	802105a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80210a4:	2200      	movs	r2, #0
 80210a6:	e7d8      	b.n	802105a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80210a8:	463a      	mov	r2, r7
 80210aa:	e7d6      	b.n	802105a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80210ac:	b2bf      	uxth	r7, r7
 80210ae:	fa1f f08c 	uxth.w	r0, ip
 80210b2:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 80210b6:	fb00 fe07 	mul.w	lr, r0, r7
 80210ba:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80210be:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80210c2:	ebac 070e 	sub.w	r7, ip, lr
 80210c6:	b280      	uxth	r0, r0
 80210c8:	b2bf      	uxth	r7, r7
 80210ca:	1a1b      	subs	r3, r3, r0
 80210cc:	fb07 fc0a 	mul.w	ip, r7, sl
 80210d0:	b29b      	uxth	r3, r3
 80210d2:	fb03 cc0b 	mla	ip, r3, fp, ip
 80210d6:	9300      	str	r3, [sp, #0]
 80210d8:	fb00 cc09 	mla	ip, r0, r9, ip
 80210dc:	fb0e cc08 	mla	ip, lr, r8, ip
 80210e0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80210e4:	9301      	str	r3, [sp, #4]
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	f000 80b0 	beq.w	802124c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 80210ec:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80210f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80210f4:	fb0b fc0c 	mul.w	ip, fp, ip
 80210f8:	fb0b f606 	mul.w	r6, fp, r6
 80210fc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021100:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021104:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021108:	44dc      	add	ip, fp
 802110a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802110e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021112:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021116:	fb0a fb0b 	mul.w	fp, sl, fp
 802111a:	fb0a fa04 	mul.w	sl, sl, r4
 802111e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8021122:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021126:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 802112a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802112e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021132:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021136:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 802113a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802113e:	0a36      	lsrs	r6, r6, #8
 8021140:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021144:	44dc      	add	ip, fp
 8021146:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802114a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802114e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021152:	fb09 fb0b 	mul.w	fp, r9, fp
 8021156:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802115a:	fb09 f905 	mul.w	r9, r9, r5
 802115e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021162:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8021166:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802116a:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802116e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021172:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021176:	fb0c fc07 	mul.w	ip, ip, r7
 802117a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802117e:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8021182:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021186:	445c      	add	r4, fp
 8021188:	fb08 f505 	mul.w	r5, r8, r5
 802118c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021190:	fb08 f802 	mul.w	r8, r8, r2
 8021194:	0a24      	lsrs	r4, r4, #8
 8021196:	0a2a      	lsrs	r2, r5, #8
 8021198:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802119c:	fb07 f70a 	mul.w	r7, r7, sl
 80211a0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80211a4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80211a8:	4415      	add	r5, r2
 80211aa:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80211ae:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80211b2:	9a00      	ldr	r2, [sp, #0]
 80211b4:	0a2d      	lsrs	r5, r5, #8
 80211b6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80211ba:	fb03 cc02 	mla	ip, r3, r2, ip
 80211be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80211c2:	fb02 7306 	mla	r3, r2, r6, r7
 80211c6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80211ca:	9a01      	ldr	r2, [sp, #4]
 80211cc:	fb05 c50e 	mla	r5, r5, lr, ip
 80211d0:	fb0e 3e08 	mla	lr, lr, r8, r3
 80211d4:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 80211d8:	fb04 5400 	mla	r4, r4, r0, r5
 80211dc:	fb00 e303 	mla	r3, r0, r3, lr
 80211e0:	0a24      	lsrs	r4, r4, #8
 80211e2:	0a1b      	lsrs	r3, r3, #8
 80211e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80211e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80211ec:	431c      	orrs	r4, r3
 80211ee:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80211f2:	b29b      	uxth	r3, r3
 80211f4:	b2e0      	uxtb	r0, r4
 80211f6:	435a      	muls	r2, r3
 80211f8:	fb10 f003 	smulbb	r0, r0, r3
 80211fc:	1c55      	adds	r5, r2, #1
 80211fe:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8021202:	780a      	ldrb	r2, [r1, #0]
 8021204:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8021208:	b2ed      	uxtb	r5, r5
 802120a:	fb02 0205 	mla	r2, r2, r5, r0
 802120e:	b292      	uxth	r2, r2
 8021210:	1c50      	adds	r0, r2, #1
 8021212:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021216:	7848      	ldrb	r0, [r1, #1]
 8021218:	fb10 f005 	smulbb	r0, r0, r5
 802121c:	1212      	asrs	r2, r2, #8
 802121e:	700a      	strb	r2, [r1, #0]
 8021220:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8021224:	0c24      	lsrs	r4, r4, #16
 8021226:	fb02 0203 	mla	r2, r2, r3, r0
 802122a:	b292      	uxth	r2, r2
 802122c:	1c50      	adds	r0, r2, #1
 802122e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021232:	1212      	asrs	r2, r2, #8
 8021234:	704a      	strb	r2, [r1, #1]
 8021236:	788a      	ldrb	r2, [r1, #2]
 8021238:	fb12 f505 	smulbb	r5, r2, r5
 802123c:	fb04 5303 	mla	r3, r4, r3, r5
 8021240:	b29b      	uxth	r3, r3
 8021242:	1c5a      	adds	r2, r3, #1
 8021244:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021248:	121b      	asrs	r3, r3, #8
 802124a:	708b      	strb	r3, [r1, #2]
 802124c:	b003      	add	sp, #12
 802124e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021252:	bf00      	nop
 8021254:	08028eff 	.word	0x08028eff
 8021258:	080293f6 	.word	0x080293f6
 802125c:	08028fc8 	.word	0x08028fc8

08021260 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021264:	ed2d 8b08 	vpush	{d8-d11}
 8021268:	b09f      	sub	sp, #124	; 0x7c
 802126a:	eeb0 aa40 	vmov.f32	s20, s0
 802126e:	eef0 9a60 	vmov.f32	s19, s1
 8021272:	921b      	str	r2, [sp, #108]	; 0x6c
 8021274:	eeb0 9a41 	vmov.f32	s18, s2
 8021278:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802127a:	eeb0 8a62 	vmov.f32	s16, s5
 802127e:	9309      	str	r3, [sp, #36]	; 0x24
 8021280:	eef0 8a43 	vmov.f32	s17, s6
 8021284:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8021288:	eef0 ba44 	vmov.f32	s23, s8
 802128c:	901d      	str	r0, [sp, #116]	; 0x74
 802128e:	eeb0 ba64 	vmov.f32	s22, s9
 8021292:	931c      	str	r3, [sp, #112]	; 0x70
 8021294:	eef0 aa45 	vmov.f32	s21, s10
 8021298:	6850      	ldr	r0, [r2, #4]
 802129a:	9119      	str	r1, [sp, #100]	; 0x64
 802129c:	6812      	ldr	r2, [r2, #0]
 802129e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 80212a0:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80212a4:	fb00 1303 	mla	r3, r0, r3, r1
 80212a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212ac:	18d3      	adds	r3, r2, r3
 80212ae:	930c      	str	r3, [sp, #48]	; 0x30
 80212b0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	9312      	str	r3, [sp, #72]	; 0x48
 80212b6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80212b8:	685e      	ldr	r6, [r3, #4]
 80212ba:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80212be:	3604      	adds	r6, #4
 80212c0:	930d      	str	r3, [sp, #52]	; 0x34
 80212c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	dc03      	bgt.n	80212d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80212c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	f340 8378 	ble.w	80219c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80212d0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80212d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80212d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80212da:	1e48      	subs	r0, r1, #1
 80212dc:	1e57      	subs	r7, r2, #1
 80212de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	f340 818c 	ble.w	80215fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80212e6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80212e8:	142b      	asrs	r3, r5, #16
 80212ea:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80212ee:	d406      	bmi.n	80212fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80212f0:	4584      	cmp	ip, r0
 80212f2:	da04      	bge.n	80212fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	db02      	blt.n	80212fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80212f8:	42bb      	cmp	r3, r7
 80212fa:	f2c0 8181 	blt.w	8021600 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 80212fe:	f11c 0c01 	adds.w	ip, ip, #1
 8021302:	f100 816f 	bmi.w	80215e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021306:	4561      	cmp	r1, ip
 8021308:	f2c0 816c 	blt.w	80215e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802130c:	3301      	adds	r3, #1
 802130e:	f100 8169 	bmi.w	80215e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021312:	429a      	cmp	r2, r3
 8021314:	f2c0 8166 	blt.w	80215e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802131a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802131c:	931a      	str	r3, [sp, #104]	; 0x68
 802131e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021320:	2b00      	cmp	r3, #0
 8021322:	f340 818c 	ble.w	802163e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8021326:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021328:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802132c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021330:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021334:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021336:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802133a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802133c:	141b      	asrs	r3, r3, #16
 802133e:	f100 81d0 	bmi.w	80216e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021342:	f100 38ff 	add.w	r8, r0, #4294967295
 8021346:	4543      	cmp	r3, r8
 8021348:	f280 81cb 	bge.w	80216e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802134c:	f1bc 0f00 	cmp.w	ip, #0
 8021350:	f2c0 81c7 	blt.w	80216e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8021354:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021358:	45c4      	cmp	ip, r8
 802135a:	f280 81c2 	bge.w	80216e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802135e:	b200      	sxth	r0, r0
 8021360:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021362:	fb0c 3300 	mla	r3, ip, r0, r3
 8021366:	eb04 0803 	add.w	r8, r4, r3
 802136a:	5ce3      	ldrb	r3, [r4, r3]
 802136c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021370:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021374:	2a00      	cmp	r2, #0
 8021376:	f000 81a9 	beq.w	80216cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 802137a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802137e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021382:	940e      	str	r4, [sp, #56]	; 0x38
 8021384:	0e24      	lsrs	r4, r4, #24
 8021386:	9415      	str	r4, [sp, #84]	; 0x54
 8021388:	b179      	cbz	r1, 80213aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802138a:	eb08 0c00 	add.w	ip, r8, r0
 802138e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021392:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8021396:	900a      	str	r0, [sp, #40]	; 0x28
 8021398:	0e00      	lsrs	r0, r0, #24
 802139a:	9013      	str	r0, [sp, #76]	; 0x4c
 802139c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80213a0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80213a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80213a6:	0e00      	lsrs	r0, r0, #24
 80213a8:	9016      	str	r0, [sp, #88]	; 0x58
 80213aa:	b292      	uxth	r2, r2
 80213ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 80213ae:	b289      	uxth	r1, r1
 80213b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80213b2:	fb02 f901 	mul.w	r9, r2, r1
 80213b6:	0112      	lsls	r2, r2, #4
 80213b8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80213bc:	eba2 0809 	sub.w	r8, r2, r9
 80213c0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80213c4:	b289      	uxth	r1, r1
 80213c6:	fa1f f888 	uxth.w	r8, r8
 80213ca:	1a52      	subs	r2, r2, r1
 80213cc:	fb08 f000 	mul.w	r0, r8, r0
 80213d0:	b292      	uxth	r2, r2
 80213d2:	fb02 000e 	mla	r0, r2, lr, r0
 80213d6:	fb01 0004 	mla	r0, r1, r4, r0
 80213da:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80213dc:	fb09 0004 	mla	r0, r9, r4, r0
 80213e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80213e4:	2800      	cmp	r0, #0
 80213e6:	f000 80f2 	beq.w	80215ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80213ee:	d01b      	beq.n	8021428 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80213f0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80213f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80213f8:	fb0e fa0a 	mul.w	sl, lr, sl
 80213fc:	fb0e fe03 	mul.w	lr, lr, r3
 8021400:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021404:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021408:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802140c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021410:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021414:	4453      	add	r3, sl
 8021416:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802141a:	0a1b      	lsrs	r3, r3, #8
 802141c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021420:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021424:	ea43 030c 	orr.w	r3, r3, ip
 8021428:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802142a:	2cff      	cmp	r4, #255	; 0xff
 802142c:	d021      	beq.n	8021472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802142e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021430:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021434:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021436:	fb04 fb0b 	mul.w	fp, r4, fp
 802143a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802143c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021440:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021442:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021446:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802144a:	fb04 fa0a 	mul.w	sl, r4, sl
 802144e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021452:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021456:	44de      	add	lr, fp
 8021458:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802145c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021460:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021464:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021468:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802146c:	ea4e 040a 	orr.w	r4, lr, sl
 8021470:	940e      	str	r4, [sp, #56]	; 0x38
 8021472:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021474:	2cff      	cmp	r4, #255	; 0xff
 8021476:	d021      	beq.n	80214bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8021478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802147a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802147e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021480:	fb04 fb0b 	mul.w	fp, r4, fp
 8021484:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021486:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802148a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802148c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021490:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021494:	fb04 fa0a 	mul.w	sl, r4, sl
 8021498:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802149c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80214a0:	44de      	add	lr, fp
 80214a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80214a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214b6:	ea4e 040a 	orr.w	r4, lr, sl
 80214ba:	940a      	str	r4, [sp, #40]	; 0x28
 80214bc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80214be:	2cff      	cmp	r4, #255	; 0xff
 80214c0:	d021      	beq.n	8021506 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80214c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80214c4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80214c8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80214ca:	fb04 fb0b 	mul.w	fp, r4, fp
 80214ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80214d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214d4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80214d6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80214da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80214de:	fb04 fa0a 	mul.w	sl, r4, sl
 80214e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214e6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80214ea:	44de      	add	lr, fp
 80214ec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80214f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021500:	ea4e 040a 	orr.w	r4, lr, sl
 8021504:	940f      	str	r4, [sp, #60]	; 0x3c
 8021506:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021508:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802150c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021510:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021514:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021516:	fb08 fc0c 	mul.w	ip, r8, ip
 802151a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802151e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021522:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021524:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021528:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802152c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802152e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021532:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021536:	fb08 f80e 	mul.w	r8, r8, lr
 802153a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802153e:	fb02 8303 	mla	r3, r2, r3, r8
 8021542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021544:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021548:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802154c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802154e:	fb01 330a 	mla	r3, r1, sl, r3
 8021552:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8021556:	fb09 3901 	mla	r9, r9, r1, r3
 802155a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802155c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802155e:	4343      	muls	r3, r0
 8021560:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021564:	1c58      	adds	r0, r3, #1
 8021566:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802156a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802156e:	ea4c 0c09 	orr.w	ip, ip, r9
 8021572:	783b      	ldrb	r3, [r7, #0]
 8021574:	fa5f f28c 	uxtb.w	r2, ip
 8021578:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802157c:	fb12 f201 	smulbb	r2, r2, r1
 8021580:	b2c0      	uxtb	r0, r0
 8021582:	fb03 2300 	mla	r3, r3, r0, r2
 8021586:	b29b      	uxth	r3, r3
 8021588:	1c5a      	adds	r2, r3, #1
 802158a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802158e:	787a      	ldrb	r2, [r7, #1]
 8021590:	fb12 f200 	smulbb	r2, r2, r0
 8021594:	121b      	asrs	r3, r3, #8
 8021596:	703b      	strb	r3, [r7, #0]
 8021598:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802159c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80215a0:	fb03 2301 	mla	r3, r3, r1, r2
 80215a4:	b29b      	uxth	r3, r3
 80215a6:	1c5a      	adds	r2, r3, #1
 80215a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80215ac:	121b      	asrs	r3, r3, #8
 80215ae:	707b      	strb	r3, [r7, #1]
 80215b0:	78bb      	ldrb	r3, [r7, #2]
 80215b2:	fb13 f000 	smulbb	r0, r3, r0
 80215b6:	fb0c 0c01 	mla	ip, ip, r1, r0
 80215ba:	fa1f fc8c 	uxth.w	ip, ip
 80215be:	f10c 0301 	add.w	r3, ip, #1
 80215c2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80215c6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80215ca:	f887 c002 	strb.w	ip, [r7, #2]
 80215ce:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80215d0:	3703      	adds	r7, #3
 80215d2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80215d4:	441a      	add	r2, r3
 80215d6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80215d8:	441d      	add	r5, r3
 80215da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80215dc:	9231      	str	r2, [sp, #196]	; 0xc4
 80215de:	3b01      	subs	r3, #1
 80215e0:	931a      	str	r3, [sp, #104]	; 0x68
 80215e2:	e69c      	b.n	802131e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80215e4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80215e6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80215e8:	441c      	add	r4, r3
 80215ea:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80215ec:	441d      	add	r5, r3
 80215ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215f0:	9431      	str	r4, [sp, #196]	; 0xc4
 80215f2:	3b01      	subs	r3, #1
 80215f4:	9309      	str	r3, [sp, #36]	; 0x24
 80215f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215f8:	3303      	adds	r3, #3
 80215fa:	930c      	str	r3, [sp, #48]	; 0x30
 80215fc:	e66f      	b.n	80212de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80215fe:	d026      	beq.n	802164e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021602:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021604:	3b01      	subs	r3, #1
 8021606:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8021608:	fb00 4003 	mla	r0, r0, r3, r4
 802160c:	1400      	asrs	r0, r0, #16
 802160e:	f53f ae83 	bmi.w	8021318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021612:	3901      	subs	r1, #1
 8021614:	4288      	cmp	r0, r1
 8021616:	f6bf ae7f 	bge.w	8021318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802161a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802161c:	fb01 5303 	mla	r3, r1, r3, r5
 8021620:	141b      	asrs	r3, r3, #16
 8021622:	f53f ae79 	bmi.w	8021318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021626:	3a01      	subs	r2, #1
 8021628:	4293      	cmp	r3, r2
 802162a:	f6bf ae75 	bge.w	8021318 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802162e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021630:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8021634:	f103 0e03 	add.w	lr, r3, #3
 8021638:	f1bb 0f00 	cmp.w	fp, #0
 802163c:	dc71      	bgt.n	8021722 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802163e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021640:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021646:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802164a:	4423      	add	r3, r4
 802164c:	930c      	str	r3, [sp, #48]	; 0x30
 802164e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021650:	2b00      	cmp	r3, #0
 8021652:	f340 81b5 	ble.w	80219c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8021656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802165a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802165c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021660:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021664:	eef0 6a48 	vmov.f32	s13, s16
 8021668:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802166c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021670:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021674:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8021678:	eef0 6a68 	vmov.f32	s13, s17
 802167c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021680:	ee16 5a90 	vmov	r5, s13
 8021684:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021688:	ee69 7a27 	vmul.f32	s15, s18, s15
 802168c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021690:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021694:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021698:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802169c:	ee18 2a10 	vmov	r2, s16
 80216a0:	eeb0 8a47 	vmov.f32	s16, s14
 80216a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80216a8:	ee18 2a90 	vmov	r2, s17
 80216ac:	9333      	str	r3, [sp, #204]	; 0xcc
 80216ae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80216b0:	eef0 8a67 	vmov.f32	s17, s15
 80216b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80216b8:	9334      	str	r3, [sp, #208]	; 0xd0
 80216ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80216bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80216be:	3b01      	subs	r3, #1
 80216c0:	9319      	str	r3, [sp, #100]	; 0x64
 80216c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80216c4:	bf08      	it	eq
 80216c6:	4613      	moveq	r3, r2
 80216c8:	9309      	str	r3, [sp, #36]	; 0x24
 80216ca:	e5fa      	b.n	80212c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80216cc:	2900      	cmp	r1, #0
 80216ce:	f43f ae6c 	beq.w	80213aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80216d2:	f818 0000 	ldrb.w	r0, [r8, r0]
 80216d6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80216da:	900a      	str	r0, [sp, #40]	; 0x28
 80216dc:	0e00      	lsrs	r0, r0, #24
 80216de:	9013      	str	r0, [sp, #76]	; 0x4c
 80216e0:	e663      	b.n	80213aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80216e2:	f113 0801 	adds.w	r8, r3, #1
 80216e6:	f53f af72 	bmi.w	80215ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80216ea:	4540      	cmp	r0, r8
 80216ec:	f6ff af6f 	blt.w	80215ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80216f0:	f11c 0801 	adds.w	r8, ip, #1
 80216f4:	f53f af6b 	bmi.w	80215ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80216f8:	45c6      	cmp	lr, r8
 80216fa:	f6ff af68 	blt.w	80215ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80216fe:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8021700:	b200      	sxth	r0, r0
 8021702:	9302      	str	r3, [sp, #8]
 8021704:	fa0f f38e 	sxth.w	r3, lr
 8021708:	9000      	str	r0, [sp, #0]
 802170a:	9301      	str	r3, [sp, #4]
 802170c:	4633      	mov	r3, r6
 802170e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021710:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021714:	e9cd c203 	strd	ip, r2, [sp, #12]
 8021718:	4639      	mov	r1, r7
 802171a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802171c:	f7ff fc60 	bl	8020fe0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8021720:	e755      	b.n	80215ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021722:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021724:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021728:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802172a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802172e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021730:	1427      	asrs	r7, r4, #16
 8021732:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021734:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021738:	142b      	asrs	r3, r5, #16
 802173a:	fb01 7303 	mla	r3, r1, r3, r7
 802173e:	18e7      	adds	r7, r4, r3
 8021740:	5ce3      	ldrb	r3, [r4, r3]
 8021742:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021746:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802174a:	2a00      	cmp	r2, #0
 802174c:	f000 812e 	beq.w	80219ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8021750:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021754:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021758:	9410      	str	r4, [sp, #64]	; 0x40
 802175a:	0e24      	lsrs	r4, r4, #24
 802175c:	9417      	str	r4, [sp, #92]	; 0x5c
 802175e:	b170      	cbz	r0, 802177e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8021760:	eb07 0801 	add.w	r8, r7, r1
 8021764:	5c79      	ldrb	r1, [r7, r1]
 8021766:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802176a:	910b      	str	r1, [sp, #44]	; 0x2c
 802176c:	0e09      	lsrs	r1, r1, #24
 802176e:	9114      	str	r1, [sp, #80]	; 0x50
 8021770:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021774:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021778:	9111      	str	r1, [sp, #68]	; 0x44
 802177a:	0e09      	lsrs	r1, r1, #24
 802177c:	9118      	str	r1, [sp, #96]	; 0x60
 802177e:	b292      	uxth	r2, r2
 8021780:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021782:	b280      	uxth	r0, r0
 8021784:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021786:	fb02 f900 	mul.w	r9, r2, r0
 802178a:	0112      	lsls	r2, r2, #4
 802178c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021790:	eba2 0809 	sub.w	r8, r2, r9
 8021794:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021798:	b280      	uxth	r0, r0
 802179a:	fa1f f888 	uxth.w	r8, r8
 802179e:	1a12      	subs	r2, r2, r0
 80217a0:	fb08 f101 	mul.w	r1, r8, r1
 80217a4:	b292      	uxth	r2, r2
 80217a6:	fb02 110c 	mla	r1, r2, ip, r1
 80217aa:	fb00 1104 	mla	r1, r0, r4, r1
 80217ae:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80217b0:	fb09 1104 	mla	r1, r9, r4, r1
 80217b4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80217b8:	2900      	cmp	r1, #0
 80217ba:	f000 80ec 	beq.w	8021996 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 80217be:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80217c2:	d019      	beq.n	80217f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80217c4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80217c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217cc:	fb0c fa0a 	mul.w	sl, ip, sl
 80217d0:	fb0c fc03 	mul.w	ip, ip, r3
 80217d4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80217d8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80217dc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80217e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80217e4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80217e8:	4453      	add	r3, sl
 80217ea:	0a3f      	lsrs	r7, r7, #8
 80217ec:	0a1b      	lsrs	r3, r3, #8
 80217ee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80217f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80217f6:	433b      	orrs	r3, r7
 80217f8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80217fa:	2cff      	cmp	r4, #255	; 0xff
 80217fc:	d020      	beq.n	8021840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80217fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021800:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021804:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021806:	4367      	muls	r7, r4
 8021808:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802180a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802180e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021812:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021814:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021818:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802181c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021820:	44bc      	add	ip, r7
 8021822:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021826:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802182a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802182e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021832:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021836:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802183a:	ea4c 040a 	orr.w	r4, ip, sl
 802183e:	9410      	str	r4, [sp, #64]	; 0x40
 8021840:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021842:	2cff      	cmp	r4, #255	; 0xff
 8021844:	d020      	beq.n	8021888 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 8021846:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021848:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802184c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802184e:	4367      	muls	r7, r4
 8021850:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021852:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021856:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802185a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802185c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021860:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021864:	fb04 fa0a 	mul.w	sl, r4, sl
 8021868:	44bc      	add	ip, r7
 802186a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802186e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021872:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021876:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802187a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802187e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021882:	ea4c 040a 	orr.w	r4, ip, sl
 8021886:	940b      	str	r4, [sp, #44]	; 0x2c
 8021888:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802188a:	2cff      	cmp	r4, #255	; 0xff
 802188c:	d020      	beq.n	80218d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802188e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021890:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021894:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8021896:	4367      	muls	r7, r4
 8021898:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802189a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802189e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218a2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80218a4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218ac:	fb04 fa0a 	mul.w	sl, r4, sl
 80218b0:	44bc      	add	ip, r7
 80218b2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80218c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80218ca:	ea4c 040a 	orr.w	r4, ip, sl
 80218ce:	9411      	str	r4, [sp, #68]	; 0x44
 80218d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80218d2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80218d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80218e0:	fb08 f707 	mul.w	r7, r8, r7
 80218e4:	fb02 770c 	mla	r7, r2, ip, r7
 80218e8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80218ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80218ee:	fb00 770c 	mla	r7, r0, ip, r7
 80218f2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80218f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80218f8:	fb09 770c 	mla	r7, r9, ip, r7
 80218fc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021900:	fb08 f80c 	mul.w	r8, r8, ip
 8021904:	0a3f      	lsrs	r7, r7, #8
 8021906:	fb02 8303 	mla	r3, r2, r3, r8
 802190a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802190c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021910:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021914:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021916:	fb00 330a 	mla	r3, r0, sl, r3
 802191a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802191e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021920:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021926:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802192a:	434b      	muls	r3, r1
 802192c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021930:	1c59      	adds	r1, r3, #1
 8021932:	ea47 070c 	orr.w	r7, r7, ip
 8021936:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802193a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802193e:	b2fa      	uxtb	r2, r7
 8021940:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021944:	fb12 f200 	smulbb	r2, r2, r0
 8021948:	b2c9      	uxtb	r1, r1
 802194a:	fb03 2301 	mla	r3, r3, r1, r2
 802194e:	b29b      	uxth	r3, r3
 8021950:	1c5a      	adds	r2, r3, #1
 8021952:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021956:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802195a:	fb12 f201 	smulbb	r2, r2, r1
 802195e:	121b      	asrs	r3, r3, #8
 8021960:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021964:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021968:	0c3f      	lsrs	r7, r7, #16
 802196a:	fb03 2300 	mla	r3, r3, r0, r2
 802196e:	b29b      	uxth	r3, r3
 8021970:	1c5a      	adds	r2, r3, #1
 8021972:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021976:	121b      	asrs	r3, r3, #8
 8021978:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802197c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021980:	fb13 f101 	smulbb	r1, r3, r1
 8021984:	fb07 1700 	mla	r7, r7, r0, r1
 8021988:	b2bf      	uxth	r7, r7
 802198a:	1c7b      	adds	r3, r7, #1
 802198c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8021990:	123f      	asrs	r7, r7, #8
 8021992:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021996:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021998:	f10e 0e03 	add.w	lr, lr, #3
 802199c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802199e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80219a2:	441a      	add	r2, r3
 80219a4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80219a6:	9231      	str	r2, [sp, #196]	; 0xc4
 80219a8:	441d      	add	r5, r3
 80219aa:	e645      	b.n	8021638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80219ac:	2800      	cmp	r0, #0
 80219ae:	f43f aee6 	beq.w	802177e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80219b2:	5c79      	ldrb	r1, [r7, r1]
 80219b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80219b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80219ba:	0e09      	lsrs	r1, r1, #24
 80219bc:	9114      	str	r1, [sp, #80]	; 0x50
 80219be:	e6de      	b.n	802177e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80219c0:	b01f      	add	sp, #124	; 0x7c
 80219c2:	ecbd 8b08 	vpop	{d8-d11}
 80219c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080219cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80219cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219d0:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 80219d4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80219d8:	2c00      	cmp	r4, #0
 80219da:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80219de:	fb04 060c 	mla	r6, r4, ip, r0
 80219e2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80219e6:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80219ea:	eb02 0e06 	add.w	lr, r2, r6
 80219ee:	db3d      	blt.n	8021a6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80219f0:	45a0      	cmp	r8, r4
 80219f2:	dd3b      	ble.n	8021a6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 80219f4:	2800      	cmp	r0, #0
 80219f6:	db37      	blt.n	8021a68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80219f8:	4584      	cmp	ip, r0
 80219fa:	dd35      	ble.n	8021a68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80219fc:	5d92      	ldrb	r2, [r2, r6]
 80219fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021a02:	1c46      	adds	r6, r0, #1
 8021a04:	d435      	bmi.n	8021a72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8021a06:	45b4      	cmp	ip, r6
 8021a08:	dd33      	ble.n	8021a72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8021a0a:	b3a5      	cbz	r5, 8021a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8021a0c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8021a10:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8021a14:	3401      	adds	r4, #1
 8021a16:	d432      	bmi.n	8021a7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8021a18:	45a0      	cmp	r8, r4
 8021a1a:	dd30      	ble.n	8021a7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8021a1c:	b397      	cbz	r7, 8021a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8021a1e:	2800      	cmp	r0, #0
 8021a20:	db2b      	blt.n	8021a7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8021a22:	4584      	cmp	ip, r0
 8021a24:	dd29      	ble.n	8021a7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8021a26:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021a2a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8021a2e:	3001      	adds	r0, #1
 8021a30:	d42b      	bmi.n	8021a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8021a32:	4584      	cmp	ip, r0
 8021a34:	dd29      	ble.n	8021a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8021a36:	b355      	cbz	r5, 8021a8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8021a38:	44f4      	add	ip, lr
 8021a3a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021a3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021a42:	2d0f      	cmp	r5, #15
 8021a44:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021a48:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021a4c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021a50:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8021a54:	d801      	bhi.n	8021a5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8021a56:	2f0f      	cmp	r7, #15
 8021a58:	d91b      	bls.n	8021a92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8021a5a:	4b7f      	ldr	r3, [pc, #508]	; (8021c58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8021a5c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8021a60:	4a7e      	ldr	r2, [pc, #504]	; (8021c5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8021a62:	487f      	ldr	r0, [pc, #508]	; (8021c60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8021a64:	f003 fc32 	bl	80252cc <__assert_func>
 8021a68:	2200      	movs	r2, #0
 8021a6a:	e7ca      	b.n	8021a02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8021a6c:	2600      	movs	r6, #0
 8021a6e:	4632      	mov	r2, r6
 8021a70:	e7d0      	b.n	8021a14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021a72:	2600      	movs	r6, #0
 8021a74:	e7ce      	b.n	8021a14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021a76:	462e      	mov	r6, r5
 8021a78:	e7cc      	b.n	8021a14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8021a7a:	2400      	movs	r4, #0
 8021a7c:	e7d7      	b.n	8021a2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8021a7e:	2300      	movs	r3, #0
 8021a80:	461c      	mov	r4, r3
 8021a82:	e7de      	b.n	8021a42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021a84:	463b      	mov	r3, r7
 8021a86:	463c      	mov	r4, r7
 8021a88:	e7db      	b.n	8021a42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	e7d9      	b.n	8021a42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021a8e:	462b      	mov	r3, r5
 8021a90:	e7d7      	b.n	8021a42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8021a92:	b2a8      	uxth	r0, r5
 8021a94:	b2bf      	uxth	r7, r7
 8021a96:	fb07 fe00 	mul.w	lr, r7, r0
 8021a9a:	0100      	lsls	r0, r0, #4
 8021a9c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021aa0:	eba0 0c0e 	sub.w	ip, r0, lr
 8021aa4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021aa8:	b2bf      	uxth	r7, r7
 8021aaa:	fa1f fc8c 	uxth.w	ip, ip
 8021aae:	1bc5      	subs	r5, r0, r7
 8021ab0:	fb0c f00a 	mul.w	r0, ip, sl
 8021ab4:	b2ad      	uxth	r5, r5
 8021ab6:	fb05 000b 	mla	r0, r5, fp, r0
 8021aba:	fb07 0009 	mla	r0, r7, r9, r0
 8021abe:	fb0e 0008 	mla	r0, lr, r8, r0
 8021ac2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021ac6:	9001      	str	r0, [sp, #4]
 8021ac8:	2800      	cmp	r0, #0
 8021aca:	f000 80c2 	beq.w	8021c52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8021ace:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021ad2:	d018      	beq.n	8021b06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8021ad4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8021ad8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021adc:	fb0b f000 	mul.w	r0, fp, r0
 8021ae0:	fb0b fb02 	mul.w	fp, fp, r2
 8021ae4:	0a02      	lsrs	r2, r0, #8
 8021ae6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021aea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021aee:	4402      	add	r2, r0
 8021af0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8021af4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8021af8:	0a12      	lsrs	r2, r2, #8
 8021afa:	0a00      	lsrs	r0, r0, #8
 8021afc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021b00:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021b04:	4302      	orrs	r2, r0
 8021b06:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021b0a:	d01a      	beq.n	8021b42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8021b0c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021b10:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b14:	fb0a f000 	mul.w	r0, sl, r0
 8021b18:	fb0a fa06 	mul.w	sl, sl, r6
 8021b1c:	0a06      	lsrs	r6, r0, #8
 8021b1e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8021b22:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021b26:	4406      	add	r6, r0
 8021b28:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8021b2c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8021b30:	0a36      	lsrs	r6, r6, #8
 8021b32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021b3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021b3e:	ea46 060a 	orr.w	r6, r6, sl
 8021b42:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021b46:	d01b      	beq.n	8021b80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8021b48:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021b4c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021b50:	fb09 fa0a 	mul.w	sl, r9, sl
 8021b54:	fb09 f004 	mul.w	r0, r9, r4
 8021b58:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021b5c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021b60:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8021b64:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021b68:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8021b6c:	4454      	add	r4, sl
 8021b6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021b72:	0a24      	lsrs	r4, r4, #8
 8021b74:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021b78:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021b7c:	ea44 0409 	orr.w	r4, r4, r9
 8021b80:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021b84:	d01b      	beq.n	8021bbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8021b86:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8021b8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021b8e:	fb08 f909 	mul.w	r9, r8, r9
 8021b92:	fb08 f003 	mul.w	r0, r8, r3
 8021b96:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8021b9a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021b9e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8021ba2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ba6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8021baa:	444b      	add	r3, r9
 8021bac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021bb0:	0a1b      	lsrs	r3, r3, #8
 8021bb2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021bb6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021bba:	ea43 0308 	orr.w	r3, r3, r8
 8021bbe:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8021bc2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021bc6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8021bca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021bce:	fb0c f000 	mul.w	r0, ip, r0
 8021bd2:	fb0c f606 	mul.w	r6, ip, r6
 8021bd6:	fb05 0808 	mla	r8, r5, r8, r0
 8021bda:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8021bde:	fb05 6502 	mla	r5, r5, r2, r6
 8021be2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021be6:	fb07 8800 	mla	r8, r7, r0, r8
 8021bea:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8021bee:	fb07 5704 	mla	r7, r7, r4, r5
 8021bf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021bf6:	fb0e 8000 	mla	r0, lr, r0, r8
 8021bfa:	780a      	ldrb	r2, [r1, #0]
 8021bfc:	fb0e 7e03 	mla	lr, lr, r3, r7
 8021c00:	9b01      	ldr	r3, [sp, #4]
 8021c02:	0a00      	lsrs	r0, r0, #8
 8021c04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c08:	43db      	mvns	r3, r3
 8021c0a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021c0e:	b2db      	uxtb	r3, r3
 8021c10:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021c14:	ea40 0e0e 	orr.w	lr, r0, lr
 8021c18:	fb02 f003 	mul.w	r0, r2, r3
 8021c1c:	1c42      	adds	r2, r0, #1
 8021c1e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021c22:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021c26:	700a      	strb	r2, [r1, #0]
 8021c28:	784a      	ldrb	r2, [r1, #1]
 8021c2a:	435a      	muls	r2, r3
 8021c2c:	1c50      	adds	r0, r2, #1
 8021c2e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021c32:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021c36:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021c3a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021c3e:	704a      	strb	r2, [r1, #1]
 8021c40:	788a      	ldrb	r2, [r1, #2]
 8021c42:	4353      	muls	r3, r2
 8021c44:	1c5a      	adds	r2, r3, #1
 8021c46:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021c4a:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021c4e:	f881 e002 	strb.w	lr, [r1, #2]
 8021c52:	b003      	add	sp, #12
 8021c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c58:	08028eff 	.word	0x08028eff
 8021c5c:	080293f6 	.word	0x080293f6
 8021c60:	08028fc8 	.word	0x08028fc8

08021c64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c68:	ed2d 8b0a 	vpush	{d8-d12}
 8021c6c:	b09b      	sub	sp, #108	; 0x6c
 8021c6e:	eeb0 aa40 	vmov.f32	s20, s0
 8021c72:	eef0 9a60 	vmov.f32	s19, s1
 8021c76:	9218      	str	r2, [sp, #96]	; 0x60
 8021c78:	eeb0 9a41 	vmov.f32	s18, s2
 8021c7c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8021c7e:	eeb0 8a62 	vmov.f32	s16, s5
 8021c82:	9019      	str	r0, [sp, #100]	; 0x64
 8021c84:	eef0 8a43 	vmov.f32	s17, s6
 8021c88:	6850      	ldr	r0, [r2, #4]
 8021c8a:	eeb0 ca44 	vmov.f32	s24, s8
 8021c8e:	9116      	str	r1, [sp, #88]	; 0x58
 8021c90:	eef0 ba64 	vmov.f32	s23, s9
 8021c94:	9307      	str	r3, [sp, #28]
 8021c96:	eeb0 ba45 	vmov.f32	s22, s10
 8021c9a:	6812      	ldr	r2, [r2, #0]
 8021c9c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8021ca0:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8021ca2:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8021ca6:	fb00 1303 	mla	r3, r0, r3, r1
 8021caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021cae:	18d3      	adds	r3, r2, r3
 8021cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8021cb2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021cb4:	681b      	ldr	r3, [r3, #0]
 8021cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8021cb8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021cba:	685e      	ldr	r6, [r3, #4]
 8021cbc:	3604      	adds	r6, #4
 8021cbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	dc03      	bgt.n	8021ccc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021cc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	f340 834f 	ble.w	802236a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021ccc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021cce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021cd2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021cd6:	1e48      	subs	r0, r1, #1
 8021cd8:	1e57      	subs	r7, r2, #1
 8021cda:	9b07      	ldr	r3, [sp, #28]
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	f340 8178 	ble.w	8021fd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021ce2:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021ce4:	142b      	asrs	r3, r5, #16
 8021ce6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021cea:	d406      	bmi.n	8021cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021cec:	4584      	cmp	ip, r0
 8021cee:	da04      	bge.n	8021cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	db02      	blt.n	8021cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021cf4:	42bb      	cmp	r3, r7
 8021cf6:	f2c0 816d 	blt.w	8021fd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8021cfa:	f11c 0c01 	adds.w	ip, ip, #1
 8021cfe:	f100 815b 	bmi.w	8021fb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8021d02:	4561      	cmp	r1, ip
 8021d04:	f2c0 8158 	blt.w	8021fb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8021d08:	3301      	adds	r3, #1
 8021d0a:	f100 8155 	bmi.w	8021fb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8021d0e:	429a      	cmp	r2, r3
 8021d10:	f2c0 8152 	blt.w	8021fb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8021d14:	9b07      	ldr	r3, [sp, #28]
 8021d16:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021d18:	9317      	str	r3, [sp, #92]	; 0x5c
 8021d1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	f340 8178 	ble.w	8022012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021d22:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021d24:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8021d28:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021d2c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021d30:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8021d32:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8021d36:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021d38:	141b      	asrs	r3, r3, #16
 8021d3a:	f100 81ba 	bmi.w	80220b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021d3e:	f101 38ff 	add.w	r8, r1, #4294967295
 8021d42:	4543      	cmp	r3, r8
 8021d44:	f280 81b5 	bge.w	80220b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021d48:	f1bc 0f00 	cmp.w	ip, #0
 8021d4c:	f2c0 81b1 	blt.w	80220b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021d50:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021d54:	45c4      	cmp	ip, r8
 8021d56:	f280 81ac 	bge.w	80220b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8021d5a:	b209      	sxth	r1, r1
 8021d5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021d5e:	fb0c 3301 	mla	r3, ip, r1, r3
 8021d62:	eb04 0803 	add.w	r8, r4, r3
 8021d66:	5ce3      	ldrb	r3, [r4, r3]
 8021d68:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021d6c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021d70:	2a00      	cmp	r2, #0
 8021d72:	f000 8193 	beq.w	802209c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021d76:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021d7a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021d7e:	940b      	str	r4, [sp, #44]	; 0x2c
 8021d80:	0e24      	lsrs	r4, r4, #24
 8021d82:	9412      	str	r4, [sp, #72]	; 0x48
 8021d84:	b178      	cbz	r0, 8021da6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021d86:	eb08 0c01 	add.w	ip, r8, r1
 8021d8a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021d8e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021d92:	9108      	str	r1, [sp, #32]
 8021d94:	0e09      	lsrs	r1, r1, #24
 8021d96:	9110      	str	r1, [sp, #64]	; 0x40
 8021d98:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8021d9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021da0:	910c      	str	r1, [sp, #48]	; 0x30
 8021da2:	0e09      	lsrs	r1, r1, #24
 8021da4:	9113      	str	r1, [sp, #76]	; 0x4c
 8021da6:	b292      	uxth	r2, r2
 8021da8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021daa:	b280      	uxth	r0, r0
 8021dac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021dae:	fb02 f900 	mul.w	r9, r2, r0
 8021db2:	0112      	lsls	r2, r2, #4
 8021db4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021db8:	eba2 0809 	sub.w	r8, r2, r9
 8021dbc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021dc0:	b280      	uxth	r0, r0
 8021dc2:	fa1f f888 	uxth.w	r8, r8
 8021dc6:	1a12      	subs	r2, r2, r0
 8021dc8:	fb08 f101 	mul.w	r1, r8, r1
 8021dcc:	b292      	uxth	r2, r2
 8021dce:	fb02 110e 	mla	r1, r2, lr, r1
 8021dd2:	fb00 1104 	mla	r1, r0, r4, r1
 8021dd6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021dd8:	fb09 1104 	mla	r1, r9, r4, r1
 8021ddc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021de0:	2900      	cmp	r1, #0
 8021de2:	f000 80de 	beq.w	8021fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021de6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021dea:	d01b      	beq.n	8021e24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8021dec:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021df0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021df4:	fb0e fa0a 	mul.w	sl, lr, sl
 8021df8:	fb0e fe03 	mul.w	lr, lr, r3
 8021dfc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021e00:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021e04:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021e08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e0c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021e10:	4453      	add	r3, sl
 8021e12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e16:	0a1b      	lsrs	r3, r3, #8
 8021e18:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021e1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021e20:	ea43 030c 	orr.w	r3, r3, ip
 8021e24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e26:	2cff      	cmp	r4, #255	; 0xff
 8021e28:	d021      	beq.n	8021e6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021e2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e2c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021e30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e32:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e3e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e42:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e46:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e4e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021e52:	44de      	add	lr, fp
 8021e54:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e68:	ea4e 040a 	orr.w	r4, lr, sl
 8021e6c:	940b      	str	r4, [sp, #44]	; 0x2c
 8021e6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e70:	2cff      	cmp	r4, #255	; 0xff
 8021e72:	d021      	beq.n	8021eb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8021e74:	9c08      	ldr	r4, [sp, #32]
 8021e76:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021e7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e7c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e80:	9c08      	ldr	r4, [sp, #32]
 8021e82:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021e86:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e88:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e90:	fb04 fa0a 	mul.w	sl, r4, sl
 8021e94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e98:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021e9c:	44de      	add	lr, fp
 8021e9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021ea2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ea6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021eaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021eae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021eb2:	ea4e 040a 	orr.w	r4, lr, sl
 8021eb6:	9408      	str	r4, [sp, #32]
 8021eb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021eba:	2cff      	cmp	r4, #255	; 0xff
 8021ebc:	d021      	beq.n	8021f02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8021ebe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021ec0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021ec4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ec6:	fb04 fb0b 	mul.w	fp, r4, fp
 8021eca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021ecc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021ed0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ed2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021ed6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021eda:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ede:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ee2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021ee6:	44de      	add	lr, fp
 8021ee8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021eec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021ef0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ef4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ef8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021efc:	ea4e 040a 	orr.w	r4, lr, sl
 8021f00:	940c      	str	r4, [sp, #48]	; 0x30
 8021f02:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f04:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021f08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f0c:	43c9      	mvns	r1, r1
 8021f0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f12:	9c08      	ldr	r4, [sp, #32]
 8021f14:	b2c9      	uxtb	r1, r1
 8021f16:	fb08 fc0c 	mul.w	ip, r8, ip
 8021f1a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021f1e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021f22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021f24:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021f28:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021f2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f2e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021f32:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021f36:	fb08 f80e 	mul.w	r8, r8, lr
 8021f3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f3e:	fb02 8303 	mla	r3, r2, r3, r8
 8021f42:	9a08      	ldr	r2, [sp, #32]
 8021f44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f48:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021f4e:	fb00 330a 	mla	r3, r0, sl, r3
 8021f52:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8021f56:	fb09 3900 	mla	r9, r9, r0, r3
 8021f5a:	783b      	ldrb	r3, [r7, #0]
 8021f5c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021f60:	fb03 f201 	mul.w	r2, r3, r1
 8021f64:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021f68:	1c53      	adds	r3, r2, #1
 8021f6a:	ea4c 0c09 	orr.w	ip, ip, r9
 8021f6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021f72:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021f76:	703b      	strb	r3, [r7, #0]
 8021f78:	787b      	ldrb	r3, [r7, #1]
 8021f7a:	434b      	muls	r3, r1
 8021f7c:	1c5a      	adds	r2, r3, #1
 8021f7e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021f82:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021f86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021f8a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021f8e:	707b      	strb	r3, [r7, #1]
 8021f90:	78bb      	ldrb	r3, [r7, #2]
 8021f92:	4359      	muls	r1, r3
 8021f94:	1c4b      	adds	r3, r1, #1
 8021f96:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021f9a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021f9e:	f887 c002 	strb.w	ip, [r7, #2]
 8021fa2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021fa4:	3703      	adds	r7, #3
 8021fa6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021fa8:	441a      	add	r2, r3
 8021faa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021fac:	441d      	add	r5, r3
 8021fae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021fb0:	922f      	str	r2, [sp, #188]	; 0xbc
 8021fb2:	3b01      	subs	r3, #1
 8021fb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8021fb6:	e6b0      	b.n	8021d1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021fb8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021fba:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021fbc:	441c      	add	r4, r3
 8021fbe:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021fc0:	441d      	add	r5, r3
 8021fc2:	9b07      	ldr	r3, [sp, #28]
 8021fc4:	942f      	str	r4, [sp, #188]	; 0xbc
 8021fc6:	3b01      	subs	r3, #1
 8021fc8:	9307      	str	r3, [sp, #28]
 8021fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fcc:	3303      	adds	r3, #3
 8021fce:	930a      	str	r3, [sp, #40]	; 0x28
 8021fd0:	e683      	b.n	8021cda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021fd2:	d026      	beq.n	8022022 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021fd4:	9b07      	ldr	r3, [sp, #28]
 8021fd6:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8021fd8:	3b01      	subs	r3, #1
 8021fda:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021fdc:	fb00 4003 	mla	r0, r0, r3, r4
 8021fe0:	1400      	asrs	r0, r0, #16
 8021fe2:	f53f ae97 	bmi.w	8021d14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021fe6:	3901      	subs	r1, #1
 8021fe8:	4288      	cmp	r0, r1
 8021fea:	f6bf ae93 	bge.w	8021d14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021fee:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8021ff0:	fb01 5303 	mla	r3, r1, r3, r5
 8021ff4:	141b      	asrs	r3, r3, #16
 8021ff6:	f53f ae8d 	bmi.w	8021d14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021ffa:	3a01      	subs	r2, #1
 8021ffc:	4293      	cmp	r3, r2
 8021ffe:	f6bf ae89 	bge.w	8021d14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022004:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022008:	f103 0e03 	add.w	lr, r3, #3
 802200c:	f1bb 0f00 	cmp.w	fp, #0
 8022010:	dc6d      	bgt.n	80220ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8022012:	9b07      	ldr	r3, [sp, #28]
 8022014:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802201a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802201e:	4423      	add	r3, r4
 8022020:	930a      	str	r3, [sp, #40]	; 0x28
 8022022:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022024:	2b00      	cmp	r3, #0
 8022026:	f340 81a0 	ble.w	802236a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802202a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802202e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022030:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022034:	eef0 6a48 	vmov.f32	s13, s16
 8022038:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802203c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022040:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022044:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8022048:	eef0 6a68 	vmov.f32	s13, s17
 802204c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022050:	ee16 5a90 	vmov	r5, s13
 8022054:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022058:	ee69 7a27 	vmul.f32	s15, s18, s15
 802205c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022060:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022064:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022068:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802206c:	ee18 2a10 	vmov	r2, s16
 8022070:	eeb0 8a47 	vmov.f32	s16, s14
 8022074:	fb92 f3f3 	sdiv	r3, r2, r3
 8022078:	ee18 2a90 	vmov	r2, s17
 802207c:	9331      	str	r3, [sp, #196]	; 0xc4
 802207e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022080:	eef0 8a67 	vmov.f32	s17, s15
 8022084:	fb92 f3f3 	sdiv	r3, r2, r3
 8022088:	9332      	str	r3, [sp, #200]	; 0xc8
 802208a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802208c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802208e:	3b01      	subs	r3, #1
 8022090:	9316      	str	r3, [sp, #88]	; 0x58
 8022092:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022094:	bf08      	it	eq
 8022096:	4613      	moveq	r3, r2
 8022098:	9307      	str	r3, [sp, #28]
 802209a:	e610      	b.n	8021cbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802209c:	2800      	cmp	r0, #0
 802209e:	f43f ae82 	beq.w	8021da6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80220a2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80220a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80220aa:	9108      	str	r1, [sp, #32]
 80220ac:	0e09      	lsrs	r1, r1, #24
 80220ae:	9110      	str	r1, [sp, #64]	; 0x40
 80220b0:	e679      	b.n	8021da6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80220b2:	f113 0801 	adds.w	r8, r3, #1
 80220b6:	f53f af74 	bmi.w	8021fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80220ba:	4541      	cmp	r1, r8
 80220bc:	f6ff af71 	blt.w	8021fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80220c0:	f11c 0801 	adds.w	r8, ip, #1
 80220c4:	f53f af6d 	bmi.w	8021fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80220c8:	45c6      	cmp	lr, r8
 80220ca:	f6ff af6a 	blt.w	8021fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80220ce:	b209      	sxth	r1, r1
 80220d0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80220d4:	fa0f f38e 	sxth.w	r3, lr
 80220d8:	9100      	str	r1, [sp, #0]
 80220da:	4639      	mov	r1, r7
 80220dc:	9301      	str	r3, [sp, #4]
 80220de:	4633      	mov	r3, r6
 80220e0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80220e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80220e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80220e8:	f7ff fc70 	bl	80219cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80220ec:	e759      	b.n	8021fa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80220ee:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80220f0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80220f4:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80220f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80220fa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80220fc:	1427      	asrs	r7, r4, #16
 80220fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022100:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022104:	142b      	asrs	r3, r5, #16
 8022106:	fb01 7303 	mla	r3, r1, r3, r7
 802210a:	18e7      	adds	r7, r4, r3
 802210c:	5ce3      	ldrb	r3, [r4, r3]
 802210e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8022112:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022116:	2a00      	cmp	r2, #0
 8022118:	f000 811d 	beq.w	8022356 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802211c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022120:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8022124:	940d      	str	r4, [sp, #52]	; 0x34
 8022126:	0e24      	lsrs	r4, r4, #24
 8022128:	9414      	str	r4, [sp, #80]	; 0x50
 802212a:	b170      	cbz	r0, 802214a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802212c:	eb07 0801 	add.w	r8, r7, r1
 8022130:	5c79      	ldrb	r1, [r7, r1]
 8022132:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022136:	9109      	str	r1, [sp, #36]	; 0x24
 8022138:	0e09      	lsrs	r1, r1, #24
 802213a:	9111      	str	r1, [sp, #68]	; 0x44
 802213c:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022140:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022144:	910e      	str	r1, [sp, #56]	; 0x38
 8022146:	0e09      	lsrs	r1, r1, #24
 8022148:	9115      	str	r1, [sp, #84]	; 0x54
 802214a:	b292      	uxth	r2, r2
 802214c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802214e:	b280      	uxth	r0, r0
 8022150:	fb02 f900 	mul.w	r9, r2, r0
 8022154:	0112      	lsls	r2, r2, #4
 8022156:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802215a:	eba2 0809 	sub.w	r8, r2, r9
 802215e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022162:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022164:	b280      	uxth	r0, r0
 8022166:	fa1f f888 	uxth.w	r8, r8
 802216a:	1a09      	subs	r1, r1, r0
 802216c:	fb08 f202 	mul.w	r2, r8, r2
 8022170:	b289      	uxth	r1, r1
 8022172:	fb01 220c 	mla	r2, r1, ip, r2
 8022176:	fb00 2204 	mla	r2, r0, r4, r2
 802217a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802217c:	fb09 2204 	mla	r2, r9, r4, r2
 8022180:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022184:	2a00      	cmp	r2, #0
 8022186:	f000 80db 	beq.w	8022340 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802218a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802218e:	d019      	beq.n	80221c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8022190:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022194:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022198:	fb0c fa0a 	mul.w	sl, ip, sl
 802219c:	fb0c fc03 	mul.w	ip, ip, r3
 80221a0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80221a4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80221a8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80221ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221b0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80221b4:	4453      	add	r3, sl
 80221b6:	0a3f      	lsrs	r7, r7, #8
 80221b8:	0a1b      	lsrs	r3, r3, #8
 80221ba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80221be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80221c2:	433b      	orrs	r3, r7
 80221c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221c6:	2cff      	cmp	r4, #255	; 0xff
 80221c8:	d020      	beq.n	802220c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 80221ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80221cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80221d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221d2:	4367      	muls	r7, r4
 80221d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80221d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80221da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80221de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80221e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221e8:	fb04 fa0a 	mul.w	sl, r4, sl
 80221ec:	44bc      	add	ip, r7
 80221ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80221f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80221fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022202:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022206:	ea4c 040a 	orr.w	r4, ip, sl
 802220a:	940d      	str	r4, [sp, #52]	; 0x34
 802220c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802220e:	2cff      	cmp	r4, #255	; 0xff
 8022210:	d020      	beq.n	8022254 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8022212:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022214:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022218:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802221a:	4367      	muls	r7, r4
 802221c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802221e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022222:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022226:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022228:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802222c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022230:	fb04 fa0a 	mul.w	sl, r4, sl
 8022234:	44bc      	add	ip, r7
 8022236:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802223a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802223e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022242:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022246:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802224a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802224e:	ea4c 040a 	orr.w	r4, ip, sl
 8022252:	9409      	str	r4, [sp, #36]	; 0x24
 8022254:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022256:	2cff      	cmp	r4, #255	; 0xff
 8022258:	d020      	beq.n	802229c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 802225a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802225c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022260:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022262:	4367      	muls	r7, r4
 8022264:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022266:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802226a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802226e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022270:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022274:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022278:	fb04 fa0a 	mul.w	sl, r4, sl
 802227c:	44bc      	add	ip, r7
 802227e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022282:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022286:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802228a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802228e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022292:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022296:	ea4c 040a 	orr.w	r4, ip, sl
 802229a:	940e      	str	r4, [sp, #56]	; 0x38
 802229c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802229e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80222a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222a6:	43d2      	mvns	r2, r2
 80222a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80222ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80222ae:	b2d2      	uxtb	r2, r2
 80222b0:	fb08 f707 	mul.w	r7, r8, r7
 80222b4:	fb01 770c 	mla	r7, r1, ip, r7
 80222b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80222bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80222be:	fb00 770c 	mla	r7, r0, ip, r7
 80222c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80222c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222c8:	fb09 770c 	mla	r7, r9, ip, r7
 80222cc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80222d0:	fb08 f80c 	mul.w	r8, r8, ip
 80222d4:	0a3f      	lsrs	r7, r7, #8
 80222d6:	fb01 8303 	mla	r3, r1, r3, r8
 80222da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80222dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222e0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80222e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80222e6:	fb00 330a 	mla	r3, r0, sl, r3
 80222ea:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80222ee:	fb09 3c0c 	mla	ip, r9, ip, r3
 80222f2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80222f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222fa:	fb03 f102 	mul.w	r1, r3, r2
 80222fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022302:	1c4b      	adds	r3, r1, #1
 8022304:	ea47 070c 	orr.w	r7, r7, ip
 8022308:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802230c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8022310:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022314:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8022318:	4353      	muls	r3, r2
 802231a:	1c59      	adds	r1, r3, #1
 802231c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022320:	0a3b      	lsrs	r3, r7, #8
 8022322:	0c3f      	lsrs	r7, r7, #16
 8022324:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022328:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802232c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022330:	435a      	muls	r2, r3
 8022332:	1c53      	adds	r3, r2, #1
 8022334:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022338:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802233c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022340:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022342:	f10e 0e03 	add.w	lr, lr, #3
 8022346:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022348:	f10b 3bff 	add.w	fp, fp, #4294967295
 802234c:	441a      	add	r2, r3
 802234e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022350:	922f      	str	r2, [sp, #188]	; 0xbc
 8022352:	441d      	add	r5, r3
 8022354:	e65a      	b.n	802200c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8022356:	2800      	cmp	r0, #0
 8022358:	f43f aef7 	beq.w	802214a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802235c:	5c79      	ldrb	r1, [r7, r1]
 802235e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8022362:	9109      	str	r1, [sp, #36]	; 0x24
 8022364:	0e09      	lsrs	r1, r1, #24
 8022366:	9111      	str	r1, [sp, #68]	; 0x44
 8022368:	e6ef      	b.n	802214a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802236a:	b01b      	add	sp, #108	; 0x6c
 802236c:	ecbd 8b0a 	vpop	{d8-d12}
 8022370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022374 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8022374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022378:	b08d      	sub	sp, #52	; 0x34
 802237a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802237e:	9103      	str	r1, [sp, #12]
 8022380:	fb07 5803 	mla	r8, r7, r3, r5
 8022384:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8022388:	9803      	ldr	r0, [sp, #12]
 802238a:	2f00      	cmp	r7, #0
 802238c:	910b      	str	r1, [sp, #44]	; 0x2c
 802238e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022392:	9903      	ldr	r1, [sp, #12]
 8022394:	9c03      	ldr	r4, [sp, #12]
 8022396:	eb02 0608 	add.w	r6, r2, r8
 802239a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802239e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80223a2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80223a6:	7809      	ldrb	r1, [r1, #0]
 80223a8:	7840      	ldrb	r0, [r0, #1]
 80223aa:	78a4      	ldrb	r4, [r4, #2]
 80223ac:	db51      	blt.n	8022452 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80223ae:	45be      	cmp	lr, r7
 80223b0:	dd4f      	ble.n	8022452 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80223b2:	2d00      	cmp	r5, #0
 80223b4:	db49      	blt.n	802244a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80223b6:	42ab      	cmp	r3, r5
 80223b8:	dd47      	ble.n	802244a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80223ba:	f812 2008 	ldrb.w	r2, [r2, r8]
 80223be:	9204      	str	r2, [sp, #16]
 80223c0:	7872      	ldrb	r2, [r6, #1]
 80223c2:	9205      	str	r2, [sp, #20]
 80223c4:	78b2      	ldrb	r2, [r6, #2]
 80223c6:	9206      	str	r2, [sp, #24]
 80223c8:	1c6a      	adds	r2, r5, #1
 80223ca:	d449      	bmi.n	8022460 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80223cc:	4293      	cmp	r3, r2
 80223ce:	dd47      	ble.n	8022460 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80223d0:	f1bc 0f00 	cmp.w	ip, #0
 80223d4:	d044      	beq.n	8022460 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80223d6:	7972      	ldrb	r2, [r6, #5]
 80223d8:	f896 b003 	ldrb.w	fp, [r6, #3]
 80223dc:	f896 a004 	ldrb.w	sl, [r6, #4]
 80223e0:	9201      	str	r2, [sp, #4]
 80223e2:	3701      	adds	r7, #1
 80223e4:	d444      	bmi.n	8022470 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80223e6:	45be      	cmp	lr, r7
 80223e8:	dd42      	ble.n	8022470 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80223ea:	f1b9 0f00 	cmp.w	r9, #0
 80223ee:	f000 80c1 	beq.w	8022574 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80223f2:	2d00      	cmp	r5, #0
 80223f4:	db38      	blt.n	8022468 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80223f6:	42ab      	cmp	r3, r5
 80223f8:	dd36      	ble.n	8022468 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80223fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80223fe:	f816 8002 	ldrb.w	r8, [r6, r2]
 8022402:	2203      	movs	r2, #3
 8022404:	fb03 6702 	mla	r7, r3, r2, r6
 8022408:	fb03 6202 	mla	r2, r3, r2, r6
 802240c:	787f      	ldrb	r7, [r7, #1]
 802240e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022412:	9702      	str	r7, [sp, #8]
 8022414:	3501      	adds	r5, #1
 8022416:	d432      	bmi.n	802247e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8022418:	42ab      	cmp	r3, r5
 802241a:	dd30      	ble.n	802247e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802241c:	f1bc 0f00 	cmp.w	ip, #0
 8022420:	d031      	beq.n	8022486 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8022422:	2703      	movs	r7, #3
 8022424:	fb13 7207 	smlabb	r2, r3, r7, r7
 8022428:	5cb5      	ldrb	r5, [r6, r2]
 802242a:	fb03 6207 	mla	r2, r3, r7, r6
 802242e:	fb03 6307 	mla	r3, r3, r7, r6
 8022432:	7912      	ldrb	r2, [r2, #4]
 8022434:	795e      	ldrb	r6, [r3, #5]
 8022436:	f1bc 0f0f 	cmp.w	ip, #15
 802243a:	d927      	bls.n	802248c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802243c:	4b53      	ldr	r3, [pc, #332]	; (802258c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802243e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8022442:	4a53      	ldr	r2, [pc, #332]	; (8022590 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8022444:	4853      	ldr	r0, [pc, #332]	; (8022594 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8022446:	f002 ff41 	bl	80252cc <__assert_func>
 802244a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802244e:	9104      	str	r1, [sp, #16]
 8022450:	e7ba      	b.n	80223c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8022452:	9401      	str	r4, [sp, #4]
 8022454:	4682      	mov	sl, r0
 8022456:	468b      	mov	fp, r1
 8022458:	9104      	str	r1, [sp, #16]
 802245a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802245e:	e7c0      	b.n	80223e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022460:	9401      	str	r4, [sp, #4]
 8022462:	4682      	mov	sl, r0
 8022464:	468b      	mov	fp, r1
 8022466:	e7bc      	b.n	80223e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022468:	46a6      	mov	lr, r4
 802246a:	9002      	str	r0, [sp, #8]
 802246c:	4688      	mov	r8, r1
 802246e:	e7d1      	b.n	8022414 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8022470:	4626      	mov	r6, r4
 8022472:	4602      	mov	r2, r0
 8022474:	460d      	mov	r5, r1
 8022476:	46a6      	mov	lr, r4
 8022478:	9002      	str	r0, [sp, #8]
 802247a:	4688      	mov	r8, r1
 802247c:	e7db      	b.n	8022436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802247e:	4626      	mov	r6, r4
 8022480:	4602      	mov	r2, r0
 8022482:	460d      	mov	r5, r1
 8022484:	e7d7      	b.n	8022436 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8022486:	4626      	mov	r6, r4
 8022488:	4602      	mov	r2, r0
 802248a:	460d      	mov	r5, r1
 802248c:	f1b9 0f0f 	cmp.w	r9, #15
 8022490:	d8d4      	bhi.n	802243c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8022492:	fa1f f38c 	uxth.w	r3, ip
 8022496:	fa1f fc89 	uxth.w	ip, r9
 802249a:	fb03 f70c 	mul.w	r7, r3, ip
 802249e:	011b      	lsls	r3, r3, #4
 80224a0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80224a4:	9707      	str	r7, [sp, #28]
 80224a6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80224aa:	fa1f fc8c 	uxth.w	ip, ip
 80224ae:	eba7 070c 	sub.w	r7, r7, ip
 80224b2:	b2bf      	uxth	r7, r7
 80224b4:	9709      	str	r7, [sp, #36]	; 0x24
 80224b6:	9f07      	ldr	r7, [sp, #28]
 80224b8:	1bdb      	subs	r3, r3, r7
 80224ba:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80224be:	b29b      	uxth	r3, r3
 80224c0:	9708      	str	r7, [sp, #32]
 80224c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80224c4:	930a      	str	r3, [sp, #40]	; 0x28
 80224c6:	ea6f 0907 	mvn.w	r9, r7
 80224ca:	fb03 fb0b 	mul.w	fp, r3, fp
 80224ce:	9f04      	ldr	r7, [sp, #16]
 80224d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224d2:	fa5f f989 	uxtb.w	r9, r9
 80224d6:	fb03 bb07 	mla	fp, r3, r7, fp
 80224da:	9f07      	ldr	r7, [sp, #28]
 80224dc:	fb11 f109 	smulbb	r1, r1, r9
 80224e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224e2:	fb0c b808 	mla	r8, ip, r8, fp
 80224e6:	fb10 f009 	smulbb	r0, r0, r9
 80224ea:	fb14 f409 	smulbb	r4, r4, r9
 80224ee:	fb07 8805 	mla	r8, r7, r5, r8
 80224f2:	9d08      	ldr	r5, [sp, #32]
 80224f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80224f6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80224fa:	fb08 1805 	mla	r8, r8, r5, r1
 80224fe:	9d05      	ldr	r5, [sp, #20]
 8022500:	fa1f f888 	uxth.w	r8, r8
 8022504:	f108 0101 	add.w	r1, r8, #1
 8022508:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802250c:	9903      	ldr	r1, [sp, #12]
 802250e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022512:	f881 8000 	strb.w	r8, [r1]
 8022516:	fb03 f10a 	mul.w	r1, r3, sl
 802251a:	fb07 1105 	mla	r1, r7, r5, r1
 802251e:	9d02      	ldr	r5, [sp, #8]
 8022520:	fb0c 1105 	mla	r1, ip, r5, r1
 8022524:	9d07      	ldr	r5, [sp, #28]
 8022526:	fb05 1102 	mla	r1, r5, r2, r1
 802252a:	9a08      	ldr	r2, [sp, #32]
 802252c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022530:	fb01 0102 	mla	r1, r1, r2, r0
 8022534:	9a03      	ldr	r2, [sp, #12]
 8022536:	b289      	uxth	r1, r1
 8022538:	1c48      	adds	r0, r1, #1
 802253a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802253e:	1209      	asrs	r1, r1, #8
 8022540:	7051      	strb	r1, [r2, #1]
 8022542:	9a01      	ldr	r2, [sp, #4]
 8022544:	4353      	muls	r3, r2
 8022546:	9a06      	ldr	r2, [sp, #24]
 8022548:	fb07 3702 	mla	r7, r7, r2, r3
 802254c:	9b08      	ldr	r3, [sp, #32]
 802254e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8022552:	fb05 c606 	mla	r6, r5, r6, ip
 8022556:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802255a:	fb06 4603 	mla	r6, r6, r3, r4
 802255e:	9b03      	ldr	r3, [sp, #12]
 8022560:	b2b6      	uxth	r6, r6
 8022562:	f106 0e01 	add.w	lr, r6, #1
 8022566:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802256a:	1236      	asrs	r6, r6, #8
 802256c:	709e      	strb	r6, [r3, #2]
 802256e:	b00d      	add	sp, #52	; 0x34
 8022570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022574:	f1bc 0f0f 	cmp.w	ip, #15
 8022578:	f63f af60 	bhi.w	802243c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802257c:	4626      	mov	r6, r4
 802257e:	4602      	mov	r2, r0
 8022580:	460d      	mov	r5, r1
 8022582:	46a6      	mov	lr, r4
 8022584:	9002      	str	r0, [sp, #8]
 8022586:	4688      	mov	r8, r1
 8022588:	e783      	b.n	8022492 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802258a:	bf00      	nop
 802258c:	08028eff 	.word	0x08028eff
 8022590:	080293f6 	.word	0x080293f6
 8022594:	08028fc8 	.word	0x08028fc8

08022598 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802259c:	ed2d 8b08 	vpush	{d8-d11}
 80225a0:	b09f      	sub	sp, #124	; 0x7c
 80225a2:	eeb0 aa40 	vmov.f32	s20, s0
 80225a6:	eef0 9a60 	vmov.f32	s19, s1
 80225aa:	920e      	str	r2, [sp, #56]	; 0x38
 80225ac:	eeb0 9a41 	vmov.f32	s18, s2
 80225b0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80225b2:	eeb0 8a62 	vmov.f32	s16, s5
 80225b6:	9307      	str	r3, [sp, #28]
 80225b8:	eef0 8a43 	vmov.f32	s17, s6
 80225bc:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80225c0:	eef0 ba44 	vmov.f32	s23, s8
 80225c4:	901d      	str	r0, [sp, #116]	; 0x74
 80225c6:	eeb0 ba64 	vmov.f32	s22, s9
 80225ca:	930c      	str	r3, [sp, #48]	; 0x30
 80225cc:	eef0 aa45 	vmov.f32	s21, s10
 80225d0:	6850      	ldr	r0, [r2, #4]
 80225d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80225d4:	6812      	ldr	r2, [r2, #0]
 80225d6:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 80225da:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 80225de:	fb00 1303 	mla	r3, r0, r3, r1
 80225e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225e6:	18d3      	adds	r3, r2, r3
 80225e8:	9308      	str	r3, [sp, #32]
 80225ea:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80225ec:	681b      	ldr	r3, [r3, #0]
 80225ee:	930a      	str	r3, [sp, #40]	; 0x28
 80225f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225f2:	43db      	mvns	r3, r3
 80225f4:	b2db      	uxtb	r3, r3
 80225f6:	9309      	str	r3, [sp, #36]	; 0x24
 80225f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	dc03      	bgt.n	8022606 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80225fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022600:	2b00      	cmp	r3, #0
 8022602:	f340 81f5 	ble.w	80229f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8022606:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022608:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802260c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022610:	1e48      	subs	r0, r1, #1
 8022612:	1e54      	subs	r4, r2, #1
 8022614:	9b07      	ldr	r3, [sp, #28]
 8022616:	2b00      	cmp	r3, #0
 8022618:	f340 80d5 	ble.w	80227c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802261c:	ea5f 452a 	movs.w	r5, sl, asr #16
 8022620:	ea4f 4328 	mov.w	r3, r8, asr #16
 8022624:	d406      	bmi.n	8022634 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022626:	4285      	cmp	r5, r0
 8022628:	da04      	bge.n	8022634 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802262a:	2b00      	cmp	r3, #0
 802262c:	db02      	blt.n	8022634 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802262e:	42a3      	cmp	r3, r4
 8022630:	f2c0 80ca 	blt.w	80227c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022634:	3501      	adds	r5, #1
 8022636:	f100 80bb 	bmi.w	80227b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802263a:	42a9      	cmp	r1, r5
 802263c:	f2c0 80b8 	blt.w	80227b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8022640:	3301      	adds	r3, #1
 8022642:	f100 80b5 	bmi.w	80227b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8022646:	429a      	cmp	r2, r3
 8022648:	f2c0 80b2 	blt.w	80227b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802264c:	9b07      	ldr	r3, [sp, #28]
 802264e:	9d08      	ldr	r5, [sp, #32]
 8022650:	930d      	str	r3, [sp, #52]	; 0x34
 8022652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022654:	2b00      	cmp	r3, #0
 8022656:	f340 80d6 	ble.w	8022806 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802265a:	9838      	ldr	r0, [sp, #224]	; 0xe0
 802265c:	ea4f 4428 	mov.w	r4, r8, asr #16
 8022660:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022662:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8022666:	68c6      	ldr	r6, [r0, #12]
 8022668:	ea5f 402a 	movs.w	r0, sl, asr #16
 802266c:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8022670:	689b      	ldr	r3, [r3, #8]
 8022672:	f100 810f 	bmi.w	8022894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022676:	1e5f      	subs	r7, r3, #1
 8022678:	42b8      	cmp	r0, r7
 802267a:	f280 810b 	bge.w	8022894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802267e:	2c00      	cmp	r4, #0
 8022680:	f2c0 8108 	blt.w	8022894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8022684:	1e77      	subs	r7, r6, #1
 8022686:	42bc      	cmp	r4, r7
 8022688:	f280 8104 	bge.w	8022894 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802268c:	b21b      	sxth	r3, r3
 802268e:	fb04 0003 	mla	r0, r4, r3, r0
 8022692:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022694:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022698:	1826      	adds	r6, r4, r0
 802269a:	5c24      	ldrb	r4, [r4, r0]
 802269c:	78b7      	ldrb	r7, [r6, #2]
 802269e:	7870      	ldrb	r0, [r6, #1]
 80226a0:	970f      	str	r7, [sp, #60]	; 0x3c
 80226a2:	7977      	ldrb	r7, [r6, #5]
 80226a4:	f896 e003 	ldrb.w	lr, [r6, #3]
 80226a8:	f896 c004 	ldrb.w	ip, [r6, #4]
 80226ac:	9710      	str	r7, [sp, #64]	; 0x40
 80226ae:	b1c9      	cbz	r1, 80226e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80226b0:	f04f 0b03 	mov.w	fp, #3
 80226b4:	f06f 0904 	mvn.w	r9, #4
 80226b8:	3605      	adds	r6, #5
 80226ba:	fb13 930b 	smlabb	r3, r3, fp, r9
 80226be:	eb06 0b03 	add.w	fp, r6, r3
 80226c2:	5cf3      	ldrb	r3, [r6, r3]
 80226c4:	9311      	str	r3, [sp, #68]	; 0x44
 80226c6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80226ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80226cc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80226d0:	9315      	str	r3, [sp, #84]	; 0x54
 80226d2:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80226d6:	9312      	str	r3, [sp, #72]	; 0x48
 80226d8:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80226dc:	9314      	str	r3, [sp, #80]	; 0x50
 80226de:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80226e2:	9316      	str	r3, [sp, #88]	; 0x58
 80226e4:	b292      	uxth	r2, r2
 80226e6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80226e8:	b289      	uxth	r1, r1
 80226ea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80226ee:	fb02 f601 	mul.w	r6, r2, r1
 80226f2:	0112      	lsls	r2, r2, #4
 80226f4:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80226f8:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80226fc:	1b92      	subs	r2, r2, r6
 80226fe:	b289      	uxth	r1, r1
 8022700:	b292      	uxth	r2, r2
 8022702:	eba9 0901 	sub.w	r9, r9, r1
 8022706:	fb02 fe0e 	mul.w	lr, r2, lr
 802270a:	fa1f f989 	uxth.w	r9, r9
 802270e:	fb02 fc0c 	mul.w	ip, r2, ip
 8022712:	fb09 e404 	mla	r4, r9, r4, lr
 8022716:	f895 e000 	ldrb.w	lr, [r5]
 802271a:	fb09 c000 	mla	r0, r9, r0, ip
 802271e:	fb01 4407 	mla	r4, r1, r7, r4
 8022722:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022724:	fb06 4407 	mla	r4, r6, r7, r4
 8022728:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802272a:	fb1e fe07 	smulbb	lr, lr, r7
 802272e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8022732:	fb04 e403 	mla	r4, r4, r3, lr
 8022736:	b2a4      	uxth	r4, r4
 8022738:	f104 0e01 	add.w	lr, r4, #1
 802273c:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8022740:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022742:	fb01 0004 	mla	r0, r1, r4, r0
 8022746:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022748:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802274c:	fb06 0004 	mla	r0, r6, r4, r0
 8022750:	786c      	ldrb	r4, [r5, #1]
 8022752:	f885 e000 	strb.w	lr, [r5]
 8022756:	fb14 f407 	smulbb	r4, r4, r7
 802275a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802275e:	fb00 4003 	mla	r0, r0, r3, r4
 8022762:	b280      	uxth	r0, r0
 8022764:	1c44      	adds	r4, r0, #1
 8022766:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802276a:	1200      	asrs	r0, r0, #8
 802276c:	7068      	strb	r0, [r5, #1]
 802276e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022770:	4342      	muls	r2, r0
 8022772:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022774:	fb09 2200 	mla	r2, r9, r0, r2
 8022778:	9815      	ldr	r0, [sp, #84]	; 0x54
 802277a:	fb01 2100 	mla	r1, r1, r0, r2
 802277e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022780:	fb06 1602 	mla	r6, r6, r2, r1
 8022784:	78a9      	ldrb	r1, [r5, #2]
 8022786:	fb11 f107 	smulbb	r1, r1, r7
 802278a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802278e:	fb06 1303 	mla	r3, r6, r3, r1
 8022792:	b29b      	uxth	r3, r3
 8022794:	1c5e      	adds	r6, r3, #1
 8022796:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802279a:	121b      	asrs	r3, r3, #8
 802279c:	70ab      	strb	r3, [r5, #2]
 802279e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80227a0:	3503      	adds	r5, #3
 80227a2:	449a      	add	sl, r3
 80227a4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80227a6:	4498      	add	r8, r3
 80227a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227aa:	3b01      	subs	r3, #1
 80227ac:	930d      	str	r3, [sp, #52]	; 0x34
 80227ae:	e750      	b.n	8022652 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80227b0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80227b2:	449a      	add	sl, r3
 80227b4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80227b6:	4498      	add	r8, r3
 80227b8:	9b07      	ldr	r3, [sp, #28]
 80227ba:	3b01      	subs	r3, #1
 80227bc:	9307      	str	r3, [sp, #28]
 80227be:	9b08      	ldr	r3, [sp, #32]
 80227c0:	3303      	adds	r3, #3
 80227c2:	9308      	str	r3, [sp, #32]
 80227c4:	e726      	b.n	8022614 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80227c6:	d026      	beq.n	8022816 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80227c8:	9b07      	ldr	r3, [sp, #28]
 80227ca:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80227cc:	3b01      	subs	r3, #1
 80227ce:	fb00 a003 	mla	r0, r0, r3, sl
 80227d2:	1400      	asrs	r0, r0, #16
 80227d4:	f53f af3a 	bmi.w	802264c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80227d8:	3901      	subs	r1, #1
 80227da:	4288      	cmp	r0, r1
 80227dc:	f6bf af36 	bge.w	802264c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80227e0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80227e2:	fb01 8303 	mla	r3, r1, r3, r8
 80227e6:	141b      	asrs	r3, r3, #16
 80227e8:	f53f af30 	bmi.w	802264c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80227ec:	3a01      	subs	r2, #1
 80227ee:	4293      	cmp	r3, r2
 80227f0:	f6bf af2c 	bge.w	802264c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80227f4:	9b08      	ldr	r3, [sp, #32]
 80227f6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80227fa:	1cdd      	adds	r5, r3, #3
 80227fc:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8022800:	f1bc 0f00 	cmp.w	ip, #0
 8022804:	dc5f      	bgt.n	80228c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8022806:	9b07      	ldr	r3, [sp, #28]
 8022808:	9a08      	ldr	r2, [sp, #32]
 802280a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802280e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022812:	441a      	add	r2, r3
 8022814:	9208      	str	r2, [sp, #32]
 8022816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022818:	2b00      	cmp	r3, #0
 802281a:	f340 80e9 	ble.w	80229f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 802281e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022822:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022824:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022828:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802282c:	eef0 6a48 	vmov.f32	s13, s16
 8022830:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022834:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022838:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802283c:	ee16 aa90 	vmov	sl, s13
 8022840:	eef0 6a68 	vmov.f32	s13, s17
 8022844:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022848:	ee16 8a90 	vmov	r8, s13
 802284c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022850:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022854:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022858:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802285c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022860:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022864:	ee18 2a10 	vmov	r2, s16
 8022868:	eeb0 8a47 	vmov.f32	s16, s14
 802286c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022870:	ee18 2a90 	vmov	r2, s17
 8022874:	9333      	str	r3, [sp, #204]	; 0xcc
 8022876:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022878:	eef0 8a67 	vmov.f32	s17, s15
 802287c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022880:	9334      	str	r3, [sp, #208]	; 0xd0
 8022882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022886:	3b01      	subs	r3, #1
 8022888:	930b      	str	r3, [sp, #44]	; 0x2c
 802288a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802288c:	bf08      	it	eq
 802288e:	4613      	moveq	r3, r2
 8022890:	9307      	str	r3, [sp, #28]
 8022892:	e6b1      	b.n	80225f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022894:	1c47      	adds	r7, r0, #1
 8022896:	d482      	bmi.n	802279e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022898:	42bb      	cmp	r3, r7
 802289a:	db80      	blt.n	802279e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802289c:	1c67      	adds	r7, r4, #1
 802289e:	f53f af7e 	bmi.w	802279e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228a2:	42be      	cmp	r6, r7
 80228a4:	f6ff af7b 	blt.w	802279e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80228aa:	b236      	sxth	r6, r6
 80228ac:	9001      	str	r0, [sp, #4]
 80228ae:	b21b      	sxth	r3, r3
 80228b0:	9600      	str	r6, [sp, #0]
 80228b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80228b4:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80228b8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80228bc:	4629      	mov	r1, r5
 80228be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228c0:	f7ff fd58 	bl	8022374 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80228c4:	e76b      	b.n	802279e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228c6:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80228c8:	ea4f 402a 	mov.w	r0, sl, asr #16
 80228cc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80228d0:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80228d4:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80228d8:	ea4f 4128 	mov.w	r1, r8, asr #16
 80228dc:	fb07 0101 	mla	r1, r7, r1, r0
 80228e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80228e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80228e6:	1844      	adds	r4, r0, r1
 80228e8:	5c40      	ldrb	r0, [r0, r1]
 80228ea:	78a6      	ldrb	r6, [r4, #2]
 80228ec:	7861      	ldrb	r1, [r4, #1]
 80228ee:	960f      	str	r6, [sp, #60]	; 0x3c
 80228f0:	78e6      	ldrb	r6, [r4, #3]
 80228f2:	910d      	str	r1, [sp, #52]	; 0x34
 80228f4:	9610      	str	r6, [sp, #64]	; 0x40
 80228f6:	f894 9004 	ldrb.w	r9, [r4, #4]
 80228fa:	f894 b005 	ldrb.w	fp, [r4, #5]
 80228fe:	b192      	cbz	r2, 8022926 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8022900:	f06f 0604 	mvn.w	r6, #4
 8022904:	2103      	movs	r1, #3
 8022906:	3405      	adds	r4, #5
 8022908:	fb17 6701 	smlabb	r7, r7, r1, r6
 802290c:	19e6      	adds	r6, r4, r7
 802290e:	5de4      	ldrb	r4, [r4, r7]
 8022910:	9417      	str	r4, [sp, #92]	; 0x5c
 8022912:	7874      	ldrb	r4, [r6, #1]
 8022914:	9419      	str	r4, [sp, #100]	; 0x64
 8022916:	78b4      	ldrb	r4, [r6, #2]
 8022918:	941b      	str	r4, [sp, #108]	; 0x6c
 802291a:	78f4      	ldrb	r4, [r6, #3]
 802291c:	9418      	str	r4, [sp, #96]	; 0x60
 802291e:	7934      	ldrb	r4, [r6, #4]
 8022920:	941a      	str	r4, [sp, #104]	; 0x68
 8022922:	7974      	ldrb	r4, [r6, #5]
 8022924:	941c      	str	r4, [sp, #112]	; 0x70
 8022926:	b29b      	uxth	r3, r3
 8022928:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802292a:	b292      	uxth	r2, r2
 802292c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802292e:	3503      	adds	r5, #3
 8022930:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022934:	fb03 f402 	mul.w	r4, r3, r2
 8022938:	011b      	lsls	r3, r3, #4
 802293a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802293e:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8022942:	1b1b      	subs	r3, r3, r4
 8022944:	b292      	uxth	r2, r2
 8022946:	b29b      	uxth	r3, r3
 8022948:	1ab6      	subs	r6, r6, r2
 802294a:	435f      	muls	r7, r3
 802294c:	b2b6      	uxth	r6, r6
 802294e:	fb03 f909 	mul.w	r9, r3, r9
 8022952:	fb03 fb0b 	mul.w	fp, r3, fp
 8022956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022958:	fb06 7000 	mla	r0, r6, r0, r7
 802295c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802295e:	fb06 bb03 	mla	fp, r6, r3, fp
 8022962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022964:	fb02 0007 	mla	r0, r2, r7, r0
 8022968:	9f18      	ldr	r7, [sp, #96]	; 0x60
 802296a:	fb02 bb03 	mla	fp, r2, r3, fp
 802296e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022970:	fb04 0007 	mla	r0, r4, r7, r0
 8022974:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8022978:	fb17 f701 	smulbb	r7, r7, r1
 802297c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022980:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022982:	fb00 700e 	mla	r0, r0, lr, r7
 8022986:	fb06 9101 	mla	r1, r6, r1, r9
 802298a:	b280      	uxth	r0, r0
 802298c:	1c47      	adds	r7, r0, #1
 802298e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8022992:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022994:	1200      	asrs	r0, r0, #8
 8022996:	f805 0c06 	strb.w	r0, [r5, #-6]
 802299a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802299c:	fb02 1100 	mla	r1, r2, r0, r1
 80229a0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80229a2:	fb04 1100 	mla	r1, r4, r0, r1
 80229a6:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80229aa:	fb04 b403 	mla	r4, r4, r3, fp
 80229ae:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80229b2:	fb10 f007 	smulbb	r0, r0, r7
 80229b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80229ba:	fb13 f307 	smulbb	r3, r3, r7
 80229be:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80229c2:	fb01 010e 	mla	r1, r1, lr, r0
 80229c6:	fb04 340e 	mla	r4, r4, lr, r3
 80229ca:	b289      	uxth	r1, r1
 80229cc:	b2a4      	uxth	r4, r4
 80229ce:	1c48      	adds	r0, r1, #1
 80229d0:	1c63      	adds	r3, r4, #1
 80229d2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80229d6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80229da:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80229dc:	1209      	asrs	r1, r1, #8
 80229de:	1224      	asrs	r4, r4, #8
 80229e0:	449a      	add	sl, r3
 80229e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80229e4:	f805 1c05 	strb.w	r1, [r5, #-5]
 80229e8:	f805 4c04 	strb.w	r4, [r5, #-4]
 80229ec:	4498      	add	r8, r3
 80229ee:	e707      	b.n	8022800 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80229f0:	b01f      	add	sp, #124	; 0x7c
 80229f2:	ecbd 8b08 	vpop	{d8-d11}
 80229f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080229fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80229fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a00:	b085      	sub	sp, #20
 8022a02:	784d      	ldrb	r5, [r1, #1]
 8022a04:	788e      	ldrb	r6, [r1, #2]
 8022a06:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8022a0a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8022a0e:	9403      	str	r4, [sp, #12]
 8022a10:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022a14:	780c      	ldrb	r4, [r1, #0]
 8022a16:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8022a1a:	fb07 ce03 	mla	lr, r7, r3, ip
 8022a1e:	2f00      	cmp	r7, #0
 8022a20:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022a24:	eb02 0b0e 	add.w	fp, r2, lr
 8022a28:	db56      	blt.n	8022ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022a2a:	45b9      	cmp	r9, r7
 8022a2c:	dd54      	ble.n	8022ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022a2e:	f1bc 0f00 	cmp.w	ip, #0
 8022a32:	db4d      	blt.n	8022ad0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022a34:	4563      	cmp	r3, ip
 8022a36:	dd4b      	ble.n	8022ad0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022a38:	f812 200e 	ldrb.w	r2, [r2, lr]
 8022a3c:	9200      	str	r2, [sp, #0]
 8022a3e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8022a42:	9201      	str	r2, [sp, #4]
 8022a44:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8022a48:	9202      	str	r2, [sp, #8]
 8022a4a:	f11c 0201 	adds.w	r2, ip, #1
 8022a4e:	d44a      	bmi.n	8022ae6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022a50:	4293      	cmp	r3, r2
 8022a52:	dd48      	ble.n	8022ae6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022a54:	2800      	cmp	r0, #0
 8022a56:	d046      	beq.n	8022ae6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022a58:	f89b e003 	ldrb.w	lr, [fp, #3]
 8022a5c:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8022a60:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022a64:	3701      	adds	r7, #1
 8022a66:	d446      	bmi.n	8022af6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022a68:	45b9      	cmp	r9, r7
 8022a6a:	dd44      	ble.n	8022af6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022a6c:	9a03      	ldr	r2, [sp, #12]
 8022a6e:	2a00      	cmp	r2, #0
 8022a70:	d045      	beq.n	8022afe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8022a72:	f1bc 0f00 	cmp.w	ip, #0
 8022a76:	db3a      	blt.n	8022aee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022a78:	4563      	cmp	r3, ip
 8022a7a:	dd38      	ble.n	8022aee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022a7c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022a80:	f04f 0903 	mov.w	r9, #3
 8022a84:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022a88:	fb03 b209 	mla	r2, r3, r9, fp
 8022a8c:	fb03 b909 	mla	r9, r3, r9, fp
 8022a90:	7852      	ldrb	r2, [r2, #1]
 8022a92:	f899 9002 	ldrb.w	r9, [r9, #2]
 8022a96:	f11c 0c01 	adds.w	ip, ip, #1
 8022a9a:	d40d      	bmi.n	8022ab8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022a9c:	4563      	cmp	r3, ip
 8022a9e:	dd0b      	ble.n	8022ab8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022aa0:	b160      	cbz	r0, 8022abc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8022aa2:	2603      	movs	r6, #3
 8022aa4:	fb13 6406 	smlabb	r4, r3, r6, r6
 8022aa8:	fb03 b506 	mla	r5, r3, r6, fp
 8022aac:	fb03 b306 	mla	r3, r3, r6, fp
 8022ab0:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8022ab4:	792d      	ldrb	r5, [r5, #4]
 8022ab6:	795e      	ldrb	r6, [r3, #5]
 8022ab8:	280f      	cmp	r0, #15
 8022aba:	d802      	bhi.n	8022ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022abc:	9b03      	ldr	r3, [sp, #12]
 8022abe:	2b0f      	cmp	r3, #15
 8022ac0:	d922      	bls.n	8022b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8022ac2:	4b2f      	ldr	r3, [pc, #188]	; (8022b80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8022ac4:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8022ac8:	4a2e      	ldr	r2, [pc, #184]	; (8022b84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8022aca:	482f      	ldr	r0, [pc, #188]	; (8022b88 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8022acc:	f002 fbfe 	bl	80252cc <__assert_func>
 8022ad0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022ad4:	9400      	str	r4, [sp, #0]
 8022ad6:	e7b8      	b.n	8022a4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8022ad8:	46b2      	mov	sl, r6
 8022ada:	46a8      	mov	r8, r5
 8022adc:	46a6      	mov	lr, r4
 8022ade:	9400      	str	r4, [sp, #0]
 8022ae0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022ae4:	e7be      	b.n	8022a64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022ae6:	46b2      	mov	sl, r6
 8022ae8:	46a8      	mov	r8, r5
 8022aea:	46a6      	mov	lr, r4
 8022aec:	e7ba      	b.n	8022a64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022aee:	46b1      	mov	r9, r6
 8022af0:	462a      	mov	r2, r5
 8022af2:	4627      	mov	r7, r4
 8022af4:	e7cf      	b.n	8022a96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8022af6:	46b1      	mov	r9, r6
 8022af8:	462a      	mov	r2, r5
 8022afa:	4627      	mov	r7, r4
 8022afc:	e7dc      	b.n	8022ab8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022afe:	280f      	cmp	r0, #15
 8022b00:	d8df      	bhi.n	8022ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022b02:	46b1      	mov	r9, r6
 8022b04:	462a      	mov	r2, r5
 8022b06:	4627      	mov	r7, r4
 8022b08:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8022b0c:	b280      	uxth	r0, r0
 8022b0e:	fb00 f30b 	mul.w	r3, r0, fp
 8022b12:	0100      	lsls	r0, r0, #4
 8022b14:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8022b18:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8022b1c:	1ac0      	subs	r0, r0, r3
 8022b1e:	fa1f fb8b 	uxth.w	fp, fp
 8022b22:	b280      	uxth	r0, r0
 8022b24:	ebac 0c0b 	sub.w	ip, ip, fp
 8022b28:	9003      	str	r0, [sp, #12]
 8022b2a:	fa1f fc8c 	uxth.w	ip, ip
 8022b2e:	fb00 fe0e 	mul.w	lr, r0, lr
 8022b32:	9800      	ldr	r0, [sp, #0]
 8022b34:	fb0c ee00 	mla	lr, ip, r0, lr
 8022b38:	9803      	ldr	r0, [sp, #12]
 8022b3a:	fb00 f808 	mul.w	r8, r0, r8
 8022b3e:	9801      	ldr	r0, [sp, #4]
 8022b40:	fb0b ee07 	mla	lr, fp, r7, lr
 8022b44:	fb0c 8800 	mla	r8, ip, r0, r8
 8022b48:	fb03 ee04 	mla	lr, r3, r4, lr
 8022b4c:	fb0b 8202 	mla	r2, fp, r2, r8
 8022b50:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022b54:	fb03 2505 	mla	r5, r3, r5, r2
 8022b58:	9a03      	ldr	r2, [sp, #12]
 8022b5a:	f881 e000 	strb.w	lr, [r1]
 8022b5e:	fb02 f00a 	mul.w	r0, r2, sl
 8022b62:	9a02      	ldr	r2, [sp, #8]
 8022b64:	122d      	asrs	r5, r5, #8
 8022b66:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022b6a:	704d      	strb	r5, [r1, #1]
 8022b6c:	fb0b c909 	mla	r9, fp, r9, ip
 8022b70:	fb03 9606 	mla	r6, r3, r6, r9
 8022b74:	1236      	asrs	r6, r6, #8
 8022b76:	708e      	strb	r6, [r1, #2]
 8022b78:	b005      	add	sp, #20
 8022b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b7e:	bf00      	nop
 8022b80:	08028eff 	.word	0x08028eff
 8022b84:	080293f6 	.word	0x080293f6
 8022b88:	08028fc8 	.word	0x08028fc8

08022b8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b90:	ed2d 8b08 	vpush	{d8-d11}
 8022b94:	b09b      	sub	sp, #108	; 0x6c
 8022b96:	eeb0 aa40 	vmov.f32	s20, s0
 8022b9a:	eef0 9a60 	vmov.f32	s19, s1
 8022b9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8022ba0:	eeb0 9a41 	vmov.f32	s18, s2
 8022ba4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022ba6:	eeb0 8a62 	vmov.f32	s16, s5
 8022baa:	9019      	str	r0, [sp, #100]	; 0x64
 8022bac:	eef0 8a43 	vmov.f32	s17, s6
 8022bb0:	6850      	ldr	r0, [r2, #4]
 8022bb2:	eef0 ba44 	vmov.f32	s23, s8
 8022bb6:	9109      	str	r1, [sp, #36]	; 0x24
 8022bb8:	eeb0 ba64 	vmov.f32	s22, s9
 8022bbc:	9306      	str	r3, [sp, #24]
 8022bbe:	eef0 aa45 	vmov.f32	s21, s10
 8022bc2:	6812      	ldr	r2, [r2, #0]
 8022bc4:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8022bc8:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8022bcc:	fb00 1303 	mla	r3, r0, r3, r1
 8022bd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022bd4:	18d3      	adds	r3, r2, r3
 8022bd6:	9307      	str	r3, [sp, #28]
 8022bd8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022bda:	681b      	ldr	r3, [r3, #0]
 8022bdc:	9308      	str	r3, [sp, #32]
 8022bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	dc03      	bgt.n	8022bec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	f340 81ab 	ble.w	8022f42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022bec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022bee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022bf2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022bf6:	1e48      	subs	r0, r1, #1
 8022bf8:	1e55      	subs	r5, r2, #1
 8022bfa:	9b06      	ldr	r3, [sp, #24]
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	f340 80b1 	ble.w	8022d64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8022c02:	ea5f 462b 	movs.w	r6, fp, asr #16
 8022c06:	ea4f 4324 	mov.w	r3, r4, asr #16
 8022c0a:	d406      	bmi.n	8022c1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022c0c:	4286      	cmp	r6, r0
 8022c0e:	da04      	bge.n	8022c1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	db02      	blt.n	8022c1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022c14:	42ab      	cmp	r3, r5
 8022c16:	f2c0 80a6 	blt.w	8022d66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022c1a:	3601      	adds	r6, #1
 8022c1c:	f100 8097 	bmi.w	8022d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022c20:	42b1      	cmp	r1, r6
 8022c22:	f2c0 8094 	blt.w	8022d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022c26:	3301      	adds	r3, #1
 8022c28:	f100 8091 	bmi.w	8022d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022c2c:	429a      	cmp	r2, r3
 8022c2e:	f2c0 808e 	blt.w	8022d4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022c32:	9b06      	ldr	r3, [sp, #24]
 8022c34:	9e07      	ldr	r6, [sp, #28]
 8022c36:	930a      	str	r3, [sp, #40]	; 0x28
 8022c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	f340 80b0 	ble.w	8022da0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022c40:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8022c42:	1425      	asrs	r5, r4, #16
 8022c44:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022c46:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8022c4a:	68c7      	ldr	r7, [r0, #12]
 8022c4c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8022c50:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022c54:	689b      	ldr	r3, [r3, #8]
 8022c56:	f100 80ea 	bmi.w	8022e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022c5a:	f103 3cff 	add.w	ip, r3, #4294967295
 8022c5e:	4560      	cmp	r0, ip
 8022c60:	f280 80e5 	bge.w	8022e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022c64:	2d00      	cmp	r5, #0
 8022c66:	f2c0 80e2 	blt.w	8022e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022c6a:	f107 3cff 	add.w	ip, r7, #4294967295
 8022c6e:	4565      	cmp	r5, ip
 8022c70:	f280 80dd 	bge.w	8022e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022c74:	b21b      	sxth	r3, r3
 8022c76:	fb05 0003 	mla	r0, r5, r3, r0
 8022c7a:	9d08      	ldr	r5, [sp, #32]
 8022c7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022c80:	182f      	adds	r7, r5, r0
 8022c82:	5c2d      	ldrb	r5, [r5, r0]
 8022c84:	7878      	ldrb	r0, [r7, #1]
 8022c86:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022c8a:	900c      	str	r0, [sp, #48]	; 0x30
 8022c8c:	f897 9003 	ldrb.w	r9, [r7, #3]
 8022c90:	f897 8004 	ldrb.w	r8, [r7, #4]
 8022c94:	f897 a005 	ldrb.w	sl, [r7, #5]
 8022c98:	b1c9      	cbz	r1, 8022cce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022c9a:	f04f 0c03 	mov.w	ip, #3
 8022c9e:	f06f 0004 	mvn.w	r0, #4
 8022ca2:	3705      	adds	r7, #5
 8022ca4:	fb13 030c 	smlabb	r3, r3, ip, r0
 8022ca8:	eb07 0c03 	add.w	ip, r7, r3
 8022cac:	5cfb      	ldrb	r3, [r7, r3]
 8022cae:	930d      	str	r3, [sp, #52]	; 0x34
 8022cb0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8022cb6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8022cba:	9311      	str	r3, [sp, #68]	; 0x44
 8022cbc:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022cc0:	930e      	str	r3, [sp, #56]	; 0x38
 8022cc2:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8022cc6:	9310      	str	r3, [sp, #64]	; 0x40
 8022cc8:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8022ccc:	9312      	str	r3, [sp, #72]	; 0x48
 8022cce:	b292      	uxth	r2, r2
 8022cd0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022cd2:	b289      	uxth	r1, r1
 8022cd4:	fb02 f301 	mul.w	r3, r2, r1
 8022cd8:	0112      	lsls	r2, r2, #4
 8022cda:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022cde:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8022ce2:	1ad2      	subs	r2, r2, r3
 8022ce4:	b289      	uxth	r1, r1
 8022ce6:	b292      	uxth	r2, r2
 8022ce8:	1a7f      	subs	r7, r7, r1
 8022cea:	fb02 f909 	mul.w	r9, r2, r9
 8022cee:	b2bf      	uxth	r7, r7
 8022cf0:	fb02 f808 	mul.w	r8, r2, r8
 8022cf4:	fb02 fa0a 	mul.w	sl, r2, sl
 8022cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022cfa:	fb07 9905 	mla	r9, r7, r5, r9
 8022cfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022d00:	fb07 8800 	mla	r8, r7, r0, r8
 8022d04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022d06:	fb07 aa0e 	mla	sl, r7, lr, sl
 8022d0a:	fb01 9905 	mla	r9, r1, r5, r9
 8022d0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022d10:	fb01 8800 	mla	r8, r1, r0, r8
 8022d14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022d16:	fb01 a102 	mla	r1, r1, r2, sl
 8022d1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022d1c:	fb03 9905 	mla	r9, r3, r5, r9
 8022d20:	fb03 8800 	mla	r8, r3, r0, r8
 8022d24:	fb03 1302 	mla	r3, r3, r2, r1
 8022d28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022d2c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022d30:	121b      	asrs	r3, r3, #8
 8022d32:	f886 9000 	strb.w	r9, [r6]
 8022d36:	f886 8001 	strb.w	r8, [r6, #1]
 8022d3a:	70b3      	strb	r3, [r6, #2]
 8022d3c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022d3e:	3603      	adds	r6, #3
 8022d40:	449b      	add	fp, r3
 8022d42:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022d44:	441c      	add	r4, r3
 8022d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d48:	3b01      	subs	r3, #1
 8022d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8022d4c:	e774      	b.n	8022c38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8022d4e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022d50:	449b      	add	fp, r3
 8022d52:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022d54:	441c      	add	r4, r3
 8022d56:	9b06      	ldr	r3, [sp, #24]
 8022d58:	3b01      	subs	r3, #1
 8022d5a:	9306      	str	r3, [sp, #24]
 8022d5c:	9b07      	ldr	r3, [sp, #28]
 8022d5e:	3303      	adds	r3, #3
 8022d60:	9307      	str	r3, [sp, #28]
 8022d62:	e74a      	b.n	8022bfa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022d64:	d024      	beq.n	8022db0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022d66:	9b06      	ldr	r3, [sp, #24]
 8022d68:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8022d6a:	3b01      	subs	r3, #1
 8022d6c:	fb00 b003 	mla	r0, r0, r3, fp
 8022d70:	1400      	asrs	r0, r0, #16
 8022d72:	f53f af5e 	bmi.w	8022c32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022d76:	3901      	subs	r1, #1
 8022d78:	4288      	cmp	r0, r1
 8022d7a:	f6bf af5a 	bge.w	8022c32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022d7e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8022d80:	fb01 4303 	mla	r3, r1, r3, r4
 8022d84:	141b      	asrs	r3, r3, #16
 8022d86:	f53f af54 	bmi.w	8022c32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022d8a:	3a01      	subs	r2, #1
 8022d8c:	4293      	cmp	r3, r2
 8022d8e:	f6bf af50 	bge.w	8022c32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022d92:	9b07      	ldr	r3, [sp, #28]
 8022d94:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022d98:	1cde      	adds	r6, r3, #3
 8022d9a:	f1be 0f00 	cmp.w	lr, #0
 8022d9e:	dc5f      	bgt.n	8022e60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8022da0:	9b06      	ldr	r3, [sp, #24]
 8022da2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022da6:	9b07      	ldr	r3, [sp, #28]
 8022da8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022dac:	4423      	add	r3, r4
 8022dae:	9307      	str	r3, [sp, #28]
 8022db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022db2:	2b00      	cmp	r3, #0
 8022db4:	f340 80c5 	ble.w	8022f42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8022db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022dbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022dbe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022dc2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022dc6:	eef0 6a48 	vmov.f32	s13, s16
 8022dca:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022dce:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022dd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022dd6:	ee16 ba90 	vmov	fp, s13
 8022dda:	eef0 6a68 	vmov.f32	s13, s17
 8022dde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022de2:	ee16 4a90 	vmov	r4, s13
 8022de6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022dea:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022dee:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022df2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022df6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022dfa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022dfe:	ee18 2a10 	vmov	r2, s16
 8022e02:	eeb0 8a47 	vmov.f32	s16, s14
 8022e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e0a:	ee18 2a90 	vmov	r2, s17
 8022e0e:	932f      	str	r3, [sp, #188]	; 0xbc
 8022e10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022e12:	eef0 8a67 	vmov.f32	s17, s15
 8022e16:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e1a:	9330      	str	r3, [sp, #192]	; 0xc0
 8022e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e20:	3b01      	subs	r3, #1
 8022e22:	9309      	str	r3, [sp, #36]	; 0x24
 8022e24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022e26:	bf08      	it	eq
 8022e28:	4613      	moveq	r3, r2
 8022e2a:	9306      	str	r3, [sp, #24]
 8022e2c:	e6d7      	b.n	8022bde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022e2e:	f110 0c01 	adds.w	ip, r0, #1
 8022e32:	d483      	bmi.n	8022d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022e34:	4563      	cmp	r3, ip
 8022e36:	db81      	blt.n	8022d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022e38:	f115 0c01 	adds.w	ip, r5, #1
 8022e3c:	f53f af7e 	bmi.w	8022d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022e40:	4567      	cmp	r7, ip
 8022e42:	f6ff af7b 	blt.w	8022d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022e46:	b23f      	sxth	r7, r7
 8022e48:	b21b      	sxth	r3, r3
 8022e4a:	9700      	str	r7, [sp, #0]
 8022e4c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8022e50:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022e54:	9a08      	ldr	r2, [sp, #32]
 8022e56:	4631      	mov	r1, r6
 8022e58:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022e5a:	f7ff fdcf 	bl	80229fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022e5e:	e76d      	b.n	8022d3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8022e60:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8022e62:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022e66:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022e6a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022e6e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022e72:	1421      	asrs	r1, r4, #16
 8022e74:	930a      	str	r3, [sp, #40]	; 0x28
 8022e76:	fb0c 0101 	mla	r1, ip, r1, r0
 8022e7a:	9808      	ldr	r0, [sp, #32]
 8022e7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022e80:	1845      	adds	r5, r0, r1
 8022e82:	5c40      	ldrb	r0, [r0, r1]
 8022e84:	796f      	ldrb	r7, [r5, #5]
 8022e86:	7869      	ldrb	r1, [r5, #1]
 8022e88:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022e8c:	f895 a003 	ldrb.w	sl, [r5, #3]
 8022e90:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022e94:	970c      	str	r7, [sp, #48]	; 0x30
 8022e96:	b1a2      	cbz	r2, 8022ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8022e98:	2703      	movs	r7, #3
 8022e9a:	f06f 0304 	mvn.w	r3, #4
 8022e9e:	3505      	adds	r5, #5
 8022ea0:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022ea4:	eb05 070c 	add.w	r7, r5, ip
 8022ea8:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022eac:	9513      	str	r5, [sp, #76]	; 0x4c
 8022eae:	787d      	ldrb	r5, [r7, #1]
 8022eb0:	9515      	str	r5, [sp, #84]	; 0x54
 8022eb2:	78bd      	ldrb	r5, [r7, #2]
 8022eb4:	9517      	str	r5, [sp, #92]	; 0x5c
 8022eb6:	78fd      	ldrb	r5, [r7, #3]
 8022eb8:	9514      	str	r5, [sp, #80]	; 0x50
 8022eba:	793d      	ldrb	r5, [r7, #4]
 8022ebc:	9516      	str	r5, [sp, #88]	; 0x58
 8022ebe:	797d      	ldrb	r5, [r7, #5]
 8022ec0:	9518      	str	r5, [sp, #96]	; 0x60
 8022ec2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022ec6:	b292      	uxth	r2, r2
 8022ec8:	3603      	adds	r6, #3
 8022eca:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022ece:	fb03 f502 	mul.w	r5, r3, r2
 8022ed2:	011b      	lsls	r3, r3, #4
 8022ed4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8022ed8:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022edc:	1b5b      	subs	r3, r3, r5
 8022ede:	b292      	uxth	r2, r2
 8022ee0:	b29b      	uxth	r3, r3
 8022ee2:	1abf      	subs	r7, r7, r2
 8022ee4:	fb03 f909 	mul.w	r9, r3, r9
 8022ee8:	b2bf      	uxth	r7, r7
 8022eea:	fb03 fa0a 	mul.w	sl, r3, sl
 8022eee:	fb07 9901 	mla	r9, r7, r1, r9
 8022ef2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022ef4:	fb07 aa00 	mla	sl, r7, r0, sl
 8022ef8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022efa:	fb02 9901 	mla	r9, r2, r1, r9
 8022efe:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022f00:	fb02 aa00 	mla	sl, r2, r0, sl
 8022f04:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022f06:	fb05 9901 	mla	r9, r5, r1, r9
 8022f0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022f0c:	fb05 aa00 	mla	sl, r5, r0, sl
 8022f10:	434b      	muls	r3, r1
 8022f12:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8022f14:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022f18:	fb07 3308 	mla	r3, r7, r8, r3
 8022f1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022f20:	f806 ac06 	strb.w	sl, [r6, #-6]
 8022f24:	fb02 3201 	mla	r2, r2, r1, r3
 8022f28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022f2a:	f806 9c05 	strb.w	r9, [r6, #-5]
 8022f2e:	fb05 2503 	mla	r5, r5, r3, r2
 8022f32:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022f34:	122d      	asrs	r5, r5, #8
 8022f36:	449b      	add	fp, r3
 8022f38:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022f3a:	f806 5c04 	strb.w	r5, [r6, #-4]
 8022f3e:	441c      	add	r4, r3
 8022f40:	e72b      	b.n	8022d9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8022f42:	b01b      	add	sp, #108	; 0x6c
 8022f44:	ecbd 8b08 	vpop	{d8-d11}
 8022f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f50:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8022f54:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022f58:	fb04 5603 	mla	r6, r4, r3, r5
 8022f5c:	2c00      	cmp	r4, #0
 8022f5e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8022f62:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8022f66:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8022f6a:	db36      	blt.n	8022fda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022f6c:	45a6      	cmp	lr, r4
 8022f6e:	dd34      	ble.n	8022fda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8022f70:	2d00      	cmp	r5, #0
 8022f72:	db30      	blt.n	8022fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022f74:	42ab      	cmp	r3, r5
 8022f76:	dd2e      	ble.n	8022fd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8022f78:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022f7c:	1c6e      	adds	r6, r5, #1
 8022f7e:	d42f      	bmi.n	8022fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022f80:	42b3      	cmp	r3, r6
 8022f82:	dd2d      	ble.n	8022fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8022f84:	b370      	cbz	r0, 8022fe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8022f86:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022f8a:	3401      	adds	r4, #1
 8022f8c:	d42e      	bmi.n	8022fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8022f8e:	45a6      	cmp	lr, r4
 8022f90:	dd2c      	ble.n	8022fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8022f92:	b377      	cbz	r7, 8022ff2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8022f94:	2d00      	cmp	r5, #0
 8022f96:	db27      	blt.n	8022fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022f98:	42ab      	cmp	r3, r5
 8022f9a:	dd25      	ble.n	8022fe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022f9c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022fa0:	3501      	adds	r5, #1
 8022fa2:	d429      	bmi.n	8022ff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022fa4:	42ab      	cmp	r3, r5
 8022fa6:	dd27      	ble.n	8022ff8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022fa8:	b340      	cbz	r0, 8022ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 8022faa:	3301      	adds	r3, #1
 8022fac:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022fb0:	280f      	cmp	r0, #15
 8022fb2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022fb6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022fba:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022fbe:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022fc2:	d801      	bhi.n	8022fc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8022fc4:	2f0f      	cmp	r7, #15
 8022fc6:	d91b      	bls.n	8023000 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8022fc8:	4b89      	ldr	r3, [pc, #548]	; (80231f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 8022fca:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8022fce:	4a89      	ldr	r2, [pc, #548]	; (80231f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022fd0:	4889      	ldr	r0, [pc, #548]	; (80231f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8022fd2:	f002 f97b 	bl	80252cc <__assert_func>
 8022fd6:	2200      	movs	r2, #0
 8022fd8:	e7d0      	b.n	8022f7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 8022fda:	2600      	movs	r6, #0
 8022fdc:	4632      	mov	r2, r6
 8022fde:	e7d4      	b.n	8022f8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022fe0:	2600      	movs	r6, #0
 8022fe2:	e7d2      	b.n	8022f8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022fe4:	4606      	mov	r6, r0
 8022fe6:	e7d0      	b.n	8022f8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022fe8:	2400      	movs	r4, #0
 8022fea:	e7d9      	b.n	8022fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8022fec:	2300      	movs	r3, #0
 8022fee:	461c      	mov	r4, r3
 8022ff0:	e7de      	b.n	8022fb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022ff2:	463b      	mov	r3, r7
 8022ff4:	463c      	mov	r4, r7
 8022ff6:	e7db      	b.n	8022fb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022ff8:	2300      	movs	r3, #0
 8022ffa:	e7d9      	b.n	8022fb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022ffc:	4603      	mov	r3, r0
 8022ffe:	e7d7      	b.n	8022fb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8023000:	b280      	uxth	r0, r0
 8023002:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023006:	b2bf      	uxth	r7, r7
 8023008:	fb00 fe07 	mul.w	lr, r0, r7
 802300c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8023010:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023014:	eba0 0c0e 	sub.w	ip, r0, lr
 8023018:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802301c:	b2bf      	uxth	r7, r7
 802301e:	fa1f fc8c 	uxth.w	ip, ip
 8023022:	eba5 0507 	sub.w	r5, r5, r7
 8023026:	fb0c f00a 	mul.w	r0, ip, sl
 802302a:	b2ad      	uxth	r5, r5
 802302c:	fb05 000b 	mla	r0, r5, fp, r0
 8023030:	fb07 0009 	mla	r0, r7, r9, r0
 8023034:	fb0e 0008 	mla	r0, lr, r8, r0
 8023038:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802303c:	9001      	str	r0, [sp, #4]
 802303e:	d018      	beq.n	8023072 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8023040:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023044:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023048:	fb0b f000 	mul.w	r0, fp, r0
 802304c:	fb0b fb02 	mul.w	fp, fp, r2
 8023050:	0a02      	lsrs	r2, r0, #8
 8023052:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023056:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802305a:	4402      	add	r2, r0
 802305c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023060:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023064:	0a12      	lsrs	r2, r2, #8
 8023066:	0a00      	lsrs	r0, r0, #8
 8023068:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802306c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023070:	4302      	orrs	r2, r0
 8023072:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023076:	d01a      	beq.n	80230ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8023078:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802307c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023080:	fb0a f000 	mul.w	r0, sl, r0
 8023084:	fb0a fa06 	mul.w	sl, sl, r6
 8023088:	0a06      	lsrs	r6, r0, #8
 802308a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802308e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023092:	4406      	add	r6, r0
 8023094:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023098:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802309c:	0a36      	lsrs	r6, r6, #8
 802309e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80230a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230aa:	ea46 060a 	orr.w	r6, r6, sl
 80230ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80230b2:	d01b      	beq.n	80230ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 80230b4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80230b8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230bc:	fb09 fa0a 	mul.w	sl, r9, sl
 80230c0:	fb09 f004 	mul.w	r0, r9, r4
 80230c4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80230c8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80230cc:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80230d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80230d4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80230d8:	4454      	add	r4, sl
 80230da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80230de:	0a24      	lsrs	r4, r4, #8
 80230e0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80230e4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80230e8:	ea44 0409 	orr.w	r4, r4, r9
 80230ec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80230f0:	d01b      	beq.n	802312a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 80230f2:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80230f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80230fa:	fb08 f909 	mul.w	r9, r8, r9
 80230fe:	fb08 f003 	mul.w	r0, r8, r3
 8023102:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8023106:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802310a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802310e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023112:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8023116:	444b      	add	r3, r9
 8023118:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802311c:	0a1b      	lsrs	r3, r3, #8
 802311e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023122:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023126:	ea43 0308 	orr.w	r3, r3, r8
 802312a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802312e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023132:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8023136:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802313a:	fb0c f000 	mul.w	r0, ip, r0
 802313e:	fb0c f606 	mul.w	r6, ip, r6
 8023142:	fb05 0808 	mla	r8, r5, r8, r0
 8023146:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802314a:	fb05 6502 	mla	r5, r5, r2, r6
 802314e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023152:	fb07 8800 	mla	r8, r7, r0, r8
 8023156:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 802315a:	fb07 5704 	mla	r7, r7, r4, r5
 802315e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023162:	fb0e 8000 	mla	r0, lr, r0, r8
 8023166:	fb0e 7e03 	mla	lr, lr, r3, r7
 802316a:	9b01      	ldr	r3, [sp, #4]
 802316c:	0a00      	lsrs	r0, r0, #8
 802316e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023172:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023176:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802317a:	ea40 0e0e 	orr.w	lr, r0, lr
 802317e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8023182:	b280      	uxth	r0, r0
 8023184:	fa5f f48e 	uxtb.w	r4, lr
 8023188:	4343      	muls	r3, r0
 802318a:	fb14 f400 	smulbb	r4, r4, r0
 802318e:	1c5a      	adds	r2, r3, #1
 8023190:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023194:	780b      	ldrb	r3, [r1, #0]
 8023196:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802319a:	b2d2      	uxtb	r2, r2
 802319c:	fb03 4302 	mla	r3, r3, r2, r4
 80231a0:	b29b      	uxth	r3, r3
 80231a2:	1c5c      	adds	r4, r3, #1
 80231a4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80231a8:	784c      	ldrb	r4, [r1, #1]
 80231aa:	fb14 f402 	smulbb	r4, r4, r2
 80231ae:	121b      	asrs	r3, r3, #8
 80231b0:	700b      	strb	r3, [r1, #0]
 80231b2:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80231b6:	fb03 4300 	mla	r3, r3, r0, r4
 80231ba:	b29b      	uxth	r3, r3
 80231bc:	1c5c      	adds	r4, r3, #1
 80231be:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80231c2:	121b      	asrs	r3, r3, #8
 80231c4:	704b      	strb	r3, [r1, #1]
 80231c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80231ca:	f891 e002 	ldrb.w	lr, [r1, #2]
 80231ce:	fb1e fe02 	smulbb	lr, lr, r2
 80231d2:	fb03 ee00 	mla	lr, r3, r0, lr
 80231d6:	fa1f fe8e 	uxth.w	lr, lr
 80231da:	f10e 0301 	add.w	r3, lr, #1
 80231de:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80231e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80231e6:	f881 e002 	strb.w	lr, [r1, #2]
 80231ea:	b003      	add	sp, #12
 80231ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231f0:	08028eff 	.word	0x08028eff
 80231f4:	080293f6 	.word	0x080293f6
 80231f8:	08028fc8 	.word	0x08028fc8

080231fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023200:	ed2d 8b08 	vpush	{d8-d11}
 8023204:	b09d      	sub	sp, #116	; 0x74
 8023206:	eeb0 aa40 	vmov.f32	s20, s0
 802320a:	eef0 9a60 	vmov.f32	s19, s1
 802320e:	9219      	str	r2, [sp, #100]	; 0x64
 8023210:	eeb0 9a41 	vmov.f32	s18, s2
 8023214:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8023216:	eeb0 8a62 	vmov.f32	s16, s5
 802321a:	9307      	str	r3, [sp, #28]
 802321c:	eef0 8a43 	vmov.f32	s17, s6
 8023220:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8023224:	eef0 ba44 	vmov.f32	s23, s8
 8023228:	901b      	str	r0, [sp, #108]	; 0x6c
 802322a:	eeb0 ba64 	vmov.f32	s22, s9
 802322e:	931a      	str	r3, [sp, #104]	; 0x68
 8023230:	eef0 aa45 	vmov.f32	s21, s10
 8023234:	6850      	ldr	r0, [r2, #4]
 8023236:	9117      	str	r1, [sp, #92]	; 0x5c
 8023238:	6812      	ldr	r2, [r2, #0]
 802323a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802323e:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8023242:	fb00 1303 	mla	r3, r0, r3, r1
 8023246:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802324a:	18d3      	adds	r3, r2, r3
 802324c:	930a      	str	r3, [sp, #40]	; 0x28
 802324e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023250:	681b      	ldr	r3, [r3, #0]
 8023252:	9310      	str	r3, [sp, #64]	; 0x40
 8023254:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8023258:	930b      	str	r3, [sp, #44]	; 0x2c
 802325a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802325c:	2b00      	cmp	r3, #0
 802325e:	dc03      	bgt.n	8023268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023262:	2b00      	cmp	r3, #0
 8023264:	f340 8368 	ble.w	8023938 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8023268:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802326a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802326e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023272:	1e48      	subs	r0, r1, #1
 8023274:	1e57      	subs	r7, r2, #1
 8023276:	9b07      	ldr	r3, [sp, #28]
 8023278:	2b00      	cmp	r3, #0
 802327a:	f340 8187 	ble.w	802358c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802327e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023282:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023286:	d406      	bmi.n	8023296 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023288:	4584      	cmp	ip, r0
 802328a:	da04      	bge.n	8023296 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802328c:	2b00      	cmp	r3, #0
 802328e:	db02      	blt.n	8023296 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8023290:	42bb      	cmp	r3, r7
 8023292:	f2c0 817c 	blt.w	802358e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8023296:	f11c 0c01 	adds.w	ip, ip, #1
 802329a:	f100 816c 	bmi.w	8023576 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802329e:	4561      	cmp	r1, ip
 80232a0:	f2c0 8169 	blt.w	8023576 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80232a4:	3301      	adds	r3, #1
 80232a6:	f100 8166 	bmi.w	8023576 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80232aa:	429a      	cmp	r2, r3
 80232ac:	f2c0 8163 	blt.w	8023576 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80232b0:	9b07      	ldr	r3, [sp, #28]
 80232b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80232b4:	9318      	str	r3, [sp, #96]	; 0x60
 80232b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80232b8:	2b00      	cmp	r3, #0
 80232ba:	f340 8186 	ble.w	80235ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80232be:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80232c0:	142a      	asrs	r2, r5, #16
 80232c2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80232c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80232ca:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80232ce:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80232d2:	f100 81cb 	bmi.w	802366c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80232d6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80232da:	4542      	cmp	r2, r8
 80232dc:	f280 81c6 	bge.w	802366c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80232e0:	2800      	cmp	r0, #0
 80232e2:	f2c0 81c3 	blt.w	802366c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80232e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80232ea:	4540      	cmp	r0, r8
 80232ec:	f280 81be 	bge.w	802366c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80232f0:	fa0f f38e 	sxth.w	r3, lr
 80232f4:	fb00 2203 	mla	r2, r0, r3, r2
 80232f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80232fa:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80232fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8023302:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023306:	2900      	cmp	r1, #0
 8023308:	f000 81a6 	beq.w	8023658 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 802330c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8023310:	900c      	str	r0, [sp, #48]	; 0x30
 8023312:	0e00      	lsrs	r0, r0, #24
 8023314:	9013      	str	r0, [sp, #76]	; 0x4c
 8023316:	f1bc 0f00 	cmp.w	ip, #0
 802331a:	d00f      	beq.n	802333c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802331c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023320:	3b01      	subs	r3, #1
 8023322:	009b      	lsls	r3, r3, #2
 8023324:	3304      	adds	r3, #4
 8023326:	eb08 0003 	add.w	r0, r8, r3
 802332a:	f858 3003 	ldr.w	r3, [r8, r3]
 802332e:	9308      	str	r3, [sp, #32]
 8023330:	0e1b      	lsrs	r3, r3, #24
 8023332:	9311      	str	r3, [sp, #68]	; 0x44
 8023334:	6843      	ldr	r3, [r0, #4]
 8023336:	930d      	str	r3, [sp, #52]	; 0x34
 8023338:	0e1b      	lsrs	r3, r3, #24
 802333a:	9314      	str	r3, [sp, #80]	; 0x50
 802333c:	b289      	uxth	r1, r1
 802333e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023340:	fa1f fc8c 	uxth.w	ip, ip
 8023344:	0108      	lsls	r0, r1, #4
 8023346:	fb01 f90c 	mul.w	r9, r1, ip
 802334a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802334e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8023352:	eba0 0809 	sub.w	r8, r0, r9
 8023356:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023358:	fa1f f18c 	uxth.w	r1, ip
 802335c:	fa1f f888 	uxth.w	r8, r8
 8023360:	1a5b      	subs	r3, r3, r1
 8023362:	fb08 f000 	mul.w	r0, r8, r0
 8023366:	b29b      	uxth	r3, r3
 8023368:	fb03 000e 	mla	r0, r3, lr, r0
 802336c:	fb01 0004 	mla	r0, r1, r4, r0
 8023370:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023372:	fb09 0004 	mla	r0, r9, r4, r0
 8023376:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802337a:	2800      	cmp	r0, #0
 802337c:	f000 80f2 	beq.w	8023564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023380:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023384:	d01b      	beq.n	80233be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023386:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802338a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802338e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023392:	fb0e fe02 	mul.w	lr, lr, r2
 8023396:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802339a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802339e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80233a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80233a6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80233aa:	4452      	add	r2, sl
 80233ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80233b0:	0a12      	lsrs	r2, r2, #8
 80233b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80233b6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80233ba:	ea42 020c 	orr.w	r2, r2, ip
 80233be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80233c0:	2cff      	cmp	r4, #255	; 0xff
 80233c2:	d021      	beq.n	8023408 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80233c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80233c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80233ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80233cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80233d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80233d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80233d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80233d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80233dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80233e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80233e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80233ec:	44de      	add	lr, fp
 80233ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80233f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80233fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023402:	ea4e 040a 	orr.w	r4, lr, sl
 8023406:	940c      	str	r4, [sp, #48]	; 0x30
 8023408:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802340a:	2cff      	cmp	r4, #255	; 0xff
 802340c:	d021      	beq.n	8023452 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 802340e:	9c08      	ldr	r4, [sp, #32]
 8023410:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023414:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023416:	fb04 fb0b 	mul.w	fp, r4, fp
 802341a:	9c08      	ldr	r4, [sp, #32]
 802341c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023420:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023422:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023426:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802342a:	fb04 fa0a 	mul.w	sl, r4, sl
 802342e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023432:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023436:	44de      	add	lr, fp
 8023438:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802343c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023440:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023444:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023448:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802344c:	ea4e 040a 	orr.w	r4, lr, sl
 8023450:	9408      	str	r4, [sp, #32]
 8023452:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023454:	2cff      	cmp	r4, #255	; 0xff
 8023456:	d021      	beq.n	802349c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023458:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802345a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802345e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023460:	fb04 fb0b 	mul.w	fp, r4, fp
 8023464:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023466:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802346a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802346c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023470:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023474:	fb04 fa0a 	mul.w	sl, r4, sl
 8023478:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802347c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023480:	44de      	add	lr, fp
 8023482:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023486:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802348a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802348e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023492:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023496:	ea4e 040a 	orr.w	r4, lr, sl
 802349a:	940d      	str	r4, [sp, #52]	; 0x34
 802349c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802349e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80234a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80234a6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80234aa:	9c08      	ldr	r4, [sp, #32]
 80234ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80234b0:	fb03 cc0e 	mla	ip, r3, lr, ip
 80234b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80234b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80234ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80234be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80234c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80234c4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80234c8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80234cc:	fb08 f80e 	mul.w	r8, r8, lr
 80234d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234d4:	fb03 8202 	mla	r2, r3, r2, r8
 80234d8:	9b08      	ldr	r3, [sp, #32]
 80234da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234de:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80234e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234e4:	fb01 220a 	mla	r2, r1, sl, r2
 80234e8:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80234ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80234ee:	fb09 2901 	mla	r9, r9, r1, r2
 80234f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80234f4:	4343      	muls	r3, r0
 80234f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80234fa:	1c58      	adds	r0, r3, #1
 80234fc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023500:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023504:	783b      	ldrb	r3, [r7, #0]
 8023506:	ea4c 0c09 	orr.w	ip, ip, r9
 802350a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802350e:	fa5f f28c 	uxtb.w	r2, ip
 8023512:	b2c0      	uxtb	r0, r0
 8023514:	fb12 f201 	smulbb	r2, r2, r1
 8023518:	fb03 2300 	mla	r3, r3, r0, r2
 802351c:	b29b      	uxth	r3, r3
 802351e:	1c5a      	adds	r2, r3, #1
 8023520:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023524:	787a      	ldrb	r2, [r7, #1]
 8023526:	fb12 f200 	smulbb	r2, r2, r0
 802352a:	121b      	asrs	r3, r3, #8
 802352c:	703b      	strb	r3, [r7, #0]
 802352e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023532:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023536:	fb03 2301 	mla	r3, r3, r1, r2
 802353a:	b29b      	uxth	r3, r3
 802353c:	1c5a      	adds	r2, r3, #1
 802353e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023542:	121b      	asrs	r3, r3, #8
 8023544:	707b      	strb	r3, [r7, #1]
 8023546:	78bb      	ldrb	r3, [r7, #2]
 8023548:	fb13 f000 	smulbb	r0, r3, r0
 802354c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8023550:	fa1f fc8c 	uxth.w	ip, ip
 8023554:	f10c 0301 	add.w	r3, ip, #1
 8023558:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802355c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023560:	f887 c002 	strb.w	ip, [r7, #2]
 8023564:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023566:	3703      	adds	r7, #3
 8023568:	441d      	add	r5, r3
 802356a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802356c:	441e      	add	r6, r3
 802356e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023570:	3b01      	subs	r3, #1
 8023572:	9318      	str	r3, [sp, #96]	; 0x60
 8023574:	e69f      	b.n	80232b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023576:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023578:	441d      	add	r5, r3
 802357a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802357c:	441e      	add	r6, r3
 802357e:	9b07      	ldr	r3, [sp, #28]
 8023580:	3b01      	subs	r3, #1
 8023582:	9307      	str	r3, [sp, #28]
 8023584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023586:	3303      	adds	r3, #3
 8023588:	930a      	str	r3, [sp, #40]	; 0x28
 802358a:	e674      	b.n	8023276 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802358c:	d025      	beq.n	80235da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802358e:	9b07      	ldr	r3, [sp, #28]
 8023590:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8023592:	3b01      	subs	r3, #1
 8023594:	fb00 5003 	mla	r0, r0, r3, r5
 8023598:	1400      	asrs	r0, r0, #16
 802359a:	f53f ae89 	bmi.w	80232b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802359e:	3901      	subs	r1, #1
 80235a0:	4288      	cmp	r0, r1
 80235a2:	f6bf ae85 	bge.w	80232b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80235a6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80235a8:	fb01 6303 	mla	r3, r1, r3, r6
 80235ac:	141b      	asrs	r3, r3, #16
 80235ae:	f53f ae7f 	bmi.w	80232b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80235b2:	3a01      	subs	r2, #1
 80235b4:	4293      	cmp	r3, r2
 80235b6:	f6bf ae7b 	bge.w	80232b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80235ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80235c0:	f103 0e03 	add.w	lr, r3, #3
 80235c4:	f1bb 0f00 	cmp.w	fp, #0
 80235c8:	dc6e      	bgt.n	80236a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80235ca:	9b07      	ldr	r3, [sp, #28]
 80235cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80235d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80235d6:	4423      	add	r3, r4
 80235d8:	930a      	str	r3, [sp, #40]	; 0x28
 80235da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80235dc:	2b00      	cmp	r3, #0
 80235de:	f340 81ab 	ble.w	8023938 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80235e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80235e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80235e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80235ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80235f0:	eef0 6a48 	vmov.f32	s13, s16
 80235f4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80235f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80235fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023600:	ee16 5a90 	vmov	r5, s13
 8023604:	eef0 6a68 	vmov.f32	s13, s17
 8023608:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802360c:	ee16 6a90 	vmov	r6, s13
 8023610:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023614:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023618:	ee37 8a48 	vsub.f32	s16, s14, s16
 802361c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023620:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023624:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023628:	ee18 2a10 	vmov	r2, s16
 802362c:	eeb0 8a47 	vmov.f32	s16, s14
 8023630:	fb92 f3f3 	sdiv	r3, r2, r3
 8023634:	ee18 2a90 	vmov	r2, s17
 8023638:	9331      	str	r3, [sp, #196]	; 0xc4
 802363a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802363c:	eef0 8a67 	vmov.f32	s17, s15
 8023640:	fb92 f3f3 	sdiv	r3, r2, r3
 8023644:	9332      	str	r3, [sp, #200]	; 0xc8
 8023646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023648:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802364a:	3b01      	subs	r3, #1
 802364c:	9317      	str	r3, [sp, #92]	; 0x5c
 802364e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023650:	bf08      	it	eq
 8023652:	4613      	moveq	r3, r2
 8023654:	9307      	str	r3, [sp, #28]
 8023656:	e600      	b.n	802325a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023658:	f1bc 0f00 	cmp.w	ip, #0
 802365c:	f43f ae6e 	beq.w	802333c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023660:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023664:	9308      	str	r3, [sp, #32]
 8023666:	0e1b      	lsrs	r3, r3, #24
 8023668:	9311      	str	r3, [sp, #68]	; 0x44
 802366a:	e667      	b.n	802333c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802366c:	f112 0801 	adds.w	r8, r2, #1
 8023670:	f53f af78 	bmi.w	8023564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023674:	45c6      	cmp	lr, r8
 8023676:	f6ff af75 	blt.w	8023564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802367a:	f110 0801 	adds.w	r8, r0, #1
 802367e:	f53f af71 	bmi.w	8023564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023682:	4543      	cmp	r3, r8
 8023684:	f6ff af6e 	blt.w	8023564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8023688:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802368a:	b21b      	sxth	r3, r3
 802368c:	9201      	str	r2, [sp, #4]
 802368e:	9300      	str	r3, [sp, #0]
 8023690:	fa0f f38e 	sxth.w	r3, lr
 8023694:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802369a:	e9cd c404 	strd	ip, r4, [sp, #16]
 802369e:	4639      	mov	r1, r7
 80236a0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80236a2:	f7ff fc53 	bl	8022f4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80236a6:	e75d      	b.n	8023564 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80236a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80236aa:	142f      	asrs	r7, r5, #16
 80236ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80236ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80236b2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80236b6:	1433      	asrs	r3, r6, #16
 80236b8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80236bc:	fb02 7303 	mla	r3, r2, r3, r7
 80236c0:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80236c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80236c8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80236cc:	2900      	cmp	r1, #0
 80236ce:	f000 812a 	beq.w	8023926 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 80236d2:	687c      	ldr	r4, [r7, #4]
 80236d4:	940e      	str	r4, [sp, #56]	; 0x38
 80236d6:	0e24      	lsrs	r4, r4, #24
 80236d8:	9415      	str	r4, [sp, #84]	; 0x54
 80236da:	b178      	cbz	r0, 80236fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80236dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80236e0:	3a01      	subs	r2, #1
 80236e2:	0092      	lsls	r2, r2, #2
 80236e4:	3204      	adds	r2, #4
 80236e6:	eb07 0802 	add.w	r8, r7, r2
 80236ea:	58ba      	ldr	r2, [r7, r2]
 80236ec:	9209      	str	r2, [sp, #36]	; 0x24
 80236ee:	0e12      	lsrs	r2, r2, #24
 80236f0:	9212      	str	r2, [sp, #72]	; 0x48
 80236f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80236f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80236f8:	0e12      	lsrs	r2, r2, #24
 80236fa:	9216      	str	r2, [sp, #88]	; 0x58
 80236fc:	b289      	uxth	r1, r1
 80236fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023700:	b280      	uxth	r0, r0
 8023702:	fb01 f900 	mul.w	r9, r1, r0
 8023706:	0109      	lsls	r1, r1, #4
 8023708:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802370c:	eba1 0809 	sub.w	r8, r1, r9
 8023710:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8023714:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023716:	b280      	uxth	r0, r0
 8023718:	fa1f f888 	uxth.w	r8, r8
 802371c:	1a12      	subs	r2, r2, r0
 802371e:	fb08 f101 	mul.w	r1, r8, r1
 8023722:	b292      	uxth	r2, r2
 8023724:	fb02 110c 	mla	r1, r2, ip, r1
 8023728:	fb00 1104 	mla	r1, r0, r4, r1
 802372c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802372e:	fb09 1104 	mla	r1, r9, r4, r1
 8023732:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023736:	2900      	cmp	r1, #0
 8023738:	f000 80ec 	beq.w	8023914 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802373c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023740:	d019      	beq.n	8023776 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 8023742:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802374a:	fb0c fa0a 	mul.w	sl, ip, sl
 802374e:	fb0c fc03 	mul.w	ip, ip, r3
 8023752:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023756:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802375a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802375e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023762:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023766:	4453      	add	r3, sl
 8023768:	0a3f      	lsrs	r7, r7, #8
 802376a:	0a1b      	lsrs	r3, r3, #8
 802376c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023770:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023774:	433b      	orrs	r3, r7
 8023776:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023778:	2cff      	cmp	r4, #255	; 0xff
 802377a:	d020      	beq.n	80237be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 802377c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802377e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023782:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023784:	4367      	muls	r7, r4
 8023786:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023788:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802378c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023790:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023792:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023796:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802379a:	fb04 fa0a 	mul.w	sl, r4, sl
 802379e:	44bc      	add	ip, r7
 80237a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80237a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80237b8:	ea4c 040a 	orr.w	r4, ip, sl
 80237bc:	940e      	str	r4, [sp, #56]	; 0x38
 80237be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80237c0:	2cff      	cmp	r4, #255	; 0xff
 80237c2:	d020      	beq.n	8023806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80237c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80237c6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80237ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80237cc:	4367      	muls	r7, r4
 80237ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80237d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80237d4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80237d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80237da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80237de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80237e6:	44bc      	add	ip, r7
 80237e8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80237ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80237f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80237fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023800:	ea4c 040a 	orr.w	r4, ip, sl
 8023804:	9409      	str	r4, [sp, #36]	; 0x24
 8023806:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023808:	2cff      	cmp	r4, #255	; 0xff
 802380a:	d020      	beq.n	802384e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 802380c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802380e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023812:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023814:	4367      	muls	r7, r4
 8023816:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023818:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802381c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023820:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023822:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023826:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802382a:	fb04 fa0a 	mul.w	sl, r4, sl
 802382e:	44bc      	add	ip, r7
 8023830:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023834:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023838:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802383c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023840:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023844:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023848:	ea4c 040a 	orr.w	r4, ip, sl
 802384c:	940f      	str	r4, [sp, #60]	; 0x3c
 802384e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023850:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023854:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023858:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802385c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802385e:	fb08 f707 	mul.w	r7, r8, r7
 8023862:	fb02 770c 	mla	r7, r2, ip, r7
 8023866:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802386a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802386c:	fb00 770c 	mla	r7, r0, ip, r7
 8023870:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023874:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023876:	fb09 770c 	mla	r7, r9, ip, r7
 802387a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802387e:	fb08 f80c 	mul.w	r8, r8, ip
 8023882:	0a3f      	lsrs	r7, r7, #8
 8023884:	fb02 8303 	mla	r3, r2, r3, r8
 8023888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802388a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802388e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023892:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023894:	fb00 330a 	mla	r3, r0, sl, r3
 8023898:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802389c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802389e:	fb09 3c0c 	mla	ip, r9, ip, r3
 80238a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80238a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80238a8:	434b      	muls	r3, r1
 80238aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80238ae:	1c59      	adds	r1, r3, #1
 80238b0:	ea47 070c 	orr.w	r7, r7, ip
 80238b4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80238b8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80238bc:	b2fa      	uxtb	r2, r7
 80238be:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80238c2:	fb12 f200 	smulbb	r2, r2, r0
 80238c6:	b2c9      	uxtb	r1, r1
 80238c8:	fb03 2301 	mla	r3, r3, r1, r2
 80238cc:	b29b      	uxth	r3, r3
 80238ce:	1c5a      	adds	r2, r3, #1
 80238d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80238d4:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80238d8:	fb12 f201 	smulbb	r2, r2, r1
 80238dc:	121b      	asrs	r3, r3, #8
 80238de:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80238e2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80238e6:	0c3f      	lsrs	r7, r7, #16
 80238e8:	fb03 2300 	mla	r3, r3, r0, r2
 80238ec:	b29b      	uxth	r3, r3
 80238ee:	1c5a      	adds	r2, r3, #1
 80238f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80238f4:	121b      	asrs	r3, r3, #8
 80238f6:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80238fa:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80238fe:	fb13 f101 	smulbb	r1, r3, r1
 8023902:	fb07 1700 	mla	r7, r7, r0, r1
 8023906:	b2bf      	uxth	r7, r7
 8023908:	1c79      	adds	r1, r7, #1
 802390a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802390e:	123f      	asrs	r7, r7, #8
 8023910:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8023914:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8023916:	f10e 0e03 	add.w	lr, lr, #3
 802391a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802391e:	441d      	add	r5, r3
 8023920:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023922:	441e      	add	r6, r3
 8023924:	e64e      	b.n	80235c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8023926:	2800      	cmp	r0, #0
 8023928:	f43f aee8 	beq.w	80236fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802392c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8023930:	9209      	str	r2, [sp, #36]	; 0x24
 8023932:	0e12      	lsrs	r2, r2, #24
 8023934:	9212      	str	r2, [sp, #72]	; 0x48
 8023936:	e6e1      	b.n	80236fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8023938:	b01d      	add	sp, #116	; 0x74
 802393a:	ecbd 8b08 	vpop	{d8-d11}
 802393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8023944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023948:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802394c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023950:	fb04 5603 	mla	r6, r4, r3, r5
 8023954:	2c00      	cmp	r4, #0
 8023956:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802395a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802395e:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8023962:	db36      	blt.n	80239d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023964:	45a6      	cmp	lr, r4
 8023966:	dd34      	ble.n	80239d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8023968:	2d00      	cmp	r5, #0
 802396a:	db30      	blt.n	80239ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 802396c:	42ab      	cmp	r3, r5
 802396e:	dd2e      	ble.n	80239ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8023970:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8023974:	1c6e      	adds	r6, r5, #1
 8023976:	d42f      	bmi.n	80239d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8023978:	42b3      	cmp	r3, r6
 802397a:	dd2d      	ble.n	80239d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 802397c:	b370      	cbz	r0, 80239dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 802397e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8023982:	3401      	adds	r4, #1
 8023984:	d42e      	bmi.n	80239e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 8023986:	45a6      	cmp	lr, r4
 8023988:	dd2c      	ble.n	80239e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 802398a:	b377      	cbz	r7, 80239ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 802398c:	2d00      	cmp	r5, #0
 802398e:	db27      	blt.n	80239e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8023990:	42ab      	cmp	r3, r5
 8023992:	dd25      	ble.n	80239e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8023994:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8023998:	3501      	adds	r5, #1
 802399a:	d429      	bmi.n	80239f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 802399c:	42ab      	cmp	r3, r5
 802399e:	dd27      	ble.n	80239f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 80239a0:	b340      	cbz	r0, 80239f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 80239a2:	3301      	adds	r3, #1
 80239a4:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80239a8:	280f      	cmp	r0, #15
 80239aa:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80239ae:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80239b2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80239b6:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80239ba:	d801      	bhi.n	80239c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 80239bc:	2f0f      	cmp	r7, #15
 80239be:	d91b      	bls.n	80239f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 80239c0:	4b7e      	ldr	r3, [pc, #504]	; (8023bbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 80239c2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80239c6:	4a7e      	ldr	r2, [pc, #504]	; (8023bc0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 80239c8:	487e      	ldr	r0, [pc, #504]	; (8023bc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 80239ca:	f001 fc7f 	bl	80252cc <__assert_func>
 80239ce:	2200      	movs	r2, #0
 80239d0:	e7d0      	b.n	8023974 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 80239d2:	2600      	movs	r6, #0
 80239d4:	4632      	mov	r2, r6
 80239d6:	e7d4      	b.n	8023982 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80239d8:	2600      	movs	r6, #0
 80239da:	e7d2      	b.n	8023982 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80239dc:	4606      	mov	r6, r0
 80239de:	e7d0      	b.n	8023982 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80239e0:	2400      	movs	r4, #0
 80239e2:	e7d9      	b.n	8023998 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 80239e4:	2300      	movs	r3, #0
 80239e6:	461c      	mov	r4, r3
 80239e8:	e7de      	b.n	80239a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80239ea:	463b      	mov	r3, r7
 80239ec:	463c      	mov	r4, r7
 80239ee:	e7db      	b.n	80239a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80239f0:	2300      	movs	r3, #0
 80239f2:	e7d9      	b.n	80239a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80239f4:	4603      	mov	r3, r0
 80239f6:	e7d7      	b.n	80239a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80239f8:	b280      	uxth	r0, r0
 80239fa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80239fe:	b2bf      	uxth	r7, r7
 8023a00:	fb00 fe07 	mul.w	lr, r0, r7
 8023a04:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8023a08:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023a0c:	eba0 0c0e 	sub.w	ip, r0, lr
 8023a10:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8023a14:	b2bf      	uxth	r7, r7
 8023a16:	fa1f fc8c 	uxth.w	ip, ip
 8023a1a:	eba0 0507 	sub.w	r5, r0, r7
 8023a1e:	fb0c f00a 	mul.w	r0, ip, sl
 8023a22:	b2ad      	uxth	r5, r5
 8023a24:	fb05 000b 	mla	r0, r5, fp, r0
 8023a28:	fb07 0009 	mla	r0, r7, r9, r0
 8023a2c:	fb0e 0008 	mla	r0, lr, r8, r0
 8023a30:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023a34:	9001      	str	r0, [sp, #4]
 8023a36:	d018      	beq.n	8023a6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8023a38:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8023a3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023a40:	fb0b f000 	mul.w	r0, fp, r0
 8023a44:	fb0b fb02 	mul.w	fp, fp, r2
 8023a48:	0a02      	lsrs	r2, r0, #8
 8023a4a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023a4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023a52:	4402      	add	r2, r0
 8023a54:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8023a58:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023a5c:	0a12      	lsrs	r2, r2, #8
 8023a5e:	0a00      	lsrs	r0, r0, #8
 8023a60:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023a64:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023a68:	4302      	orrs	r2, r0
 8023a6a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023a6e:	d01a      	beq.n	8023aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8023a70:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8023a74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023a78:	fb0a f000 	mul.w	r0, sl, r0
 8023a7c:	fb0a fa06 	mul.w	sl, sl, r6
 8023a80:	0a06      	lsrs	r6, r0, #8
 8023a82:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8023a86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023a8a:	4406      	add	r6, r0
 8023a8c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023a90:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8023a94:	0a36      	lsrs	r6, r6, #8
 8023a96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a9a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023a9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023aa2:	ea46 060a 	orr.w	r6, r6, sl
 8023aa6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023aaa:	d01b      	beq.n	8023ae4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8023aac:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023ab0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023ab4:	fb09 fa0a 	mul.w	sl, r9, sl
 8023ab8:	fb09 f004 	mul.w	r0, r9, r4
 8023abc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023ac0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ac4:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8023ac8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023acc:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8023ad0:	4454      	add	r4, sl
 8023ad2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023ad6:	0a24      	lsrs	r4, r4, #8
 8023ad8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023adc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023ae0:	ea44 0409 	orr.w	r4, r4, r9
 8023ae4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023ae8:	d01b      	beq.n	8023b22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8023aea:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8023aee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023af2:	fb08 f909 	mul.w	r9, r8, r9
 8023af6:	fb08 f003 	mul.w	r0, r8, r3
 8023afa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8023afe:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023b02:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8023b06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b0a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8023b0e:	444b      	add	r3, r9
 8023b10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023b14:	0a1b      	lsrs	r3, r3, #8
 8023b16:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023b1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b1e:	ea43 0308 	orr.w	r3, r3, r8
 8023b22:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8023b26:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023b2a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8023b2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b32:	fb0c f000 	mul.w	r0, ip, r0
 8023b36:	fb0c f606 	mul.w	r6, ip, r6
 8023b3a:	fb05 0808 	mla	r8, r5, r8, r0
 8023b3e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8023b42:	fb05 6502 	mla	r5, r5, r2, r6
 8023b46:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b4a:	fb07 8800 	mla	r8, r7, r0, r8
 8023b4e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8023b52:	fb07 5704 	mla	r7, r7, r4, r5
 8023b56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b5a:	fb0e 8000 	mla	r0, lr, r0, r8
 8023b5e:	780a      	ldrb	r2, [r1, #0]
 8023b60:	fb0e 7e03 	mla	lr, lr, r3, r7
 8023b64:	9b01      	ldr	r3, [sp, #4]
 8023b66:	0a00      	lsrs	r0, r0, #8
 8023b68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b6c:	43db      	mvns	r3, r3
 8023b6e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023b72:	b2db      	uxtb	r3, r3
 8023b74:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023b78:	ea40 0e0e 	orr.w	lr, r0, lr
 8023b7c:	fb02 f003 	mul.w	r0, r2, r3
 8023b80:	1c42      	adds	r2, r0, #1
 8023b82:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023b86:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023b8a:	700a      	strb	r2, [r1, #0]
 8023b8c:	784a      	ldrb	r2, [r1, #1]
 8023b8e:	435a      	muls	r2, r3
 8023b90:	1c50      	adds	r0, r2, #1
 8023b92:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023b96:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023b9a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8023b9e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023ba2:	704a      	strb	r2, [r1, #1]
 8023ba4:	788a      	ldrb	r2, [r1, #2]
 8023ba6:	4353      	muls	r3, r2
 8023ba8:	1c5a      	adds	r2, r3, #1
 8023baa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023bae:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023bb2:	f881 e002 	strb.w	lr, [r1, #2]
 8023bb6:	b003      	add	sp, #12
 8023bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bbc:	08028eff 	.word	0x08028eff
 8023bc0:	080293f6 	.word	0x080293f6
 8023bc4:	08028fc8 	.word	0x08028fc8

08023bc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bcc:	ed2d 8b08 	vpush	{d8-d11}
 8023bd0:	b099      	sub	sp, #100	; 0x64
 8023bd2:	eeb0 aa40 	vmov.f32	s20, s0
 8023bd6:	eef0 9a60 	vmov.f32	s19, s1
 8023bda:	9017      	str	r0, [sp, #92]	; 0x5c
 8023bdc:	eeb0 9a41 	vmov.f32	s18, s2
 8023be0:	9306      	str	r3, [sp, #24]
 8023be2:	eeb0 8a62 	vmov.f32	s16, s5
 8023be6:	eef0 8a43 	vmov.f32	s17, s6
 8023bea:	eef0 ba44 	vmov.f32	s23, s8
 8023bee:	eeb0 ba64 	vmov.f32	s22, s9
 8023bf2:	eef0 aa45 	vmov.f32	s21, s10
 8023bf6:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8023bfa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023bfc:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023c00:	6850      	ldr	r0, [r2, #4]
 8023c02:	6812      	ldr	r2, [r2, #0]
 8023c04:	fb00 1303 	mla	r3, r0, r3, r1
 8023c08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c0c:	18d3      	adds	r3, r2, r3
 8023c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8023c10:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023c12:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	930e      	str	r3, [sp, #56]	; 0x38
 8023c1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023c1c:	2b00      	cmp	r3, #0
 8023c1e:	dc03      	bgt.n	8023c28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023c20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	f340 8360 	ble.w	80242e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023c28:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023c2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c32:	1e48      	subs	r0, r1, #1
 8023c34:	1e57      	subs	r7, r2, #1
 8023c36:	9b06      	ldr	r3, [sp, #24]
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	f340 817b 	ble.w	8023f34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8023c3e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023c42:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023c46:	d406      	bmi.n	8023c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023c48:	4584      	cmp	ip, r0
 8023c4a:	da04      	bge.n	8023c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	db02      	blt.n	8023c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023c50:	42bb      	cmp	r3, r7
 8023c52:	f2c0 8170 	blt.w	8023f36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023c56:	f11c 0c01 	adds.w	ip, ip, #1
 8023c5a:	f100 8160 	bmi.w	8023f1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023c5e:	4561      	cmp	r1, ip
 8023c60:	f2c0 815d 	blt.w	8023f1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023c64:	3301      	adds	r3, #1
 8023c66:	f100 815a 	bmi.w	8023f1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023c6a:	429a      	cmp	r2, r3
 8023c6c:	f2c0 8157 	blt.w	8023f1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023c70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023c74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023c76:	f1b8 0f00 	cmp.w	r8, #0
 8023c7a:	f340 8179 	ble.w	8023f70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8023c7e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8023c80:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023c84:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023c86:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023c8a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023c8e:	142a      	asrs	r2, r5, #16
 8023c90:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023c94:	689b      	ldr	r3, [r3, #8]
 8023c96:	f100 81be 	bmi.w	8024016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023c9a:	f103 39ff 	add.w	r9, r3, #4294967295
 8023c9e:	454a      	cmp	r2, r9
 8023ca0:	f280 81b9 	bge.w	8024016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023ca4:	f1bc 0f00 	cmp.w	ip, #0
 8023ca8:	f2c0 81b5 	blt.w	8024016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023cac:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023cb0:	45cc      	cmp	ip, r9
 8023cb2:	f280 81b0 	bge.w	8024016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8023cb6:	b21b      	sxth	r3, r3
 8023cb8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023cba:	fb0c 2203 	mla	r2, ip, r3, r2
 8023cbe:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8023cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023cc6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8023cca:	2900      	cmp	r1, #0
 8023ccc:	f000 8197 	beq.w	8023ffe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8023cd0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8023cd4:	940a      	str	r4, [sp, #40]	; 0x28
 8023cd6:	0e24      	lsrs	r4, r4, #24
 8023cd8:	9411      	str	r4, [sp, #68]	; 0x44
 8023cda:	b180      	cbz	r0, 8023cfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023ce0:	3b01      	subs	r3, #1
 8023ce2:	009b      	lsls	r3, r3, #2
 8023ce4:	3304      	adds	r3, #4
 8023ce6:	eb09 0c03 	add.w	ip, r9, r3
 8023cea:	f859 3003 	ldr.w	r3, [r9, r3]
 8023cee:	9307      	str	r3, [sp, #28]
 8023cf0:	0e1b      	lsrs	r3, r3, #24
 8023cf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cf4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8023cfa:	0e1b      	lsrs	r3, r3, #24
 8023cfc:	9312      	str	r3, [sp, #72]	; 0x48
 8023cfe:	b289      	uxth	r1, r1
 8023d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023d02:	b280      	uxth	r0, r0
 8023d04:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023d06:	fb01 fa00 	mul.w	sl, r1, r0
 8023d0a:	0109      	lsls	r1, r1, #4
 8023d0c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023d10:	eba1 090a 	sub.w	r9, r1, sl
 8023d14:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023d18:	b280      	uxth	r0, r0
 8023d1a:	fa1f f989 	uxth.w	r9, r9
 8023d1e:	1a09      	subs	r1, r1, r0
 8023d20:	fb09 f303 	mul.w	r3, r9, r3
 8023d24:	b289      	uxth	r1, r1
 8023d26:	fb01 330e 	mla	r3, r1, lr, r3
 8023d2a:	fb00 3304 	mla	r3, r0, r4, r3
 8023d2e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023d30:	fb0a 3304 	mla	r3, sl, r4, r3
 8023d34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d38:	2b00      	cmp	r3, #0
 8023d3a:	f000 80e8 	beq.w	8023f0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023d3e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023d42:	d01b      	beq.n	8023d7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023d44:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8023d48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023d4c:	fb0e fb0b 	mul.w	fp, lr, fp
 8023d50:	fb0e fe02 	mul.w	lr, lr, r2
 8023d54:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8023d58:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023d5c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023d60:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023d64:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023d68:	445a      	add	r2, fp
 8023d6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023d6e:	0a12      	lsrs	r2, r2, #8
 8023d70:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023d74:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023d78:	ea42 020c 	orr.w	r2, r2, ip
 8023d7c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023d7e:	2cff      	cmp	r4, #255	; 0xff
 8023d80:	d021      	beq.n	8023dc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8023d82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023d84:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023d88:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023d8a:	fb04 fc0c 	mul.w	ip, r4, ip
 8023d8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023d90:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023d94:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023d98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023d9a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023d9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023da2:	fb04 fb0b 	mul.w	fp, r4, fp
 8023da6:	44e6      	add	lr, ip
 8023da8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023dac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023db0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023db4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023db8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023dbc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023dc0:	ea4e 040b 	orr.w	r4, lr, fp
 8023dc4:	940a      	str	r4, [sp, #40]	; 0x28
 8023dc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023dc8:	2cff      	cmp	r4, #255	; 0xff
 8023dca:	d021      	beq.n	8023e10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8023dcc:	9c07      	ldr	r4, [sp, #28]
 8023dce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023dd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023dd4:	fb04 fc0c 	mul.w	ip, r4, ip
 8023dd8:	9c07      	ldr	r4, [sp, #28]
 8023dda:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023dde:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023de2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023de4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023de8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023dec:	fb04 fb0b 	mul.w	fp, r4, fp
 8023df0:	44e6      	add	lr, ip
 8023df2:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023df6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023dfa:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023dfe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e02:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023e06:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023e0a:	ea4e 040b 	orr.w	r4, lr, fp
 8023e0e:	9407      	str	r4, [sp, #28]
 8023e10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023e12:	2cff      	cmp	r4, #255	; 0xff
 8023e14:	d021      	beq.n	8023e5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023e16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e18:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023e1c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023e1e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023e22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e24:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023e28:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8023e2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023e2e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023e32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e36:	fb04 fb0b 	mul.w	fp, r4, fp
 8023e3a:	44e6      	add	lr, ip
 8023e3c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023e40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e44:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023e48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023e4c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023e50:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023e54:	ea4e 040b 	orr.w	r4, lr, fp
 8023e58:	940b      	str	r4, [sp, #44]	; 0x2c
 8023e5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023e5c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023e60:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023e64:	2bff      	cmp	r3, #255	; 0xff
 8023e66:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023e6a:	9c07      	ldr	r4, [sp, #28]
 8023e6c:	fb09 fc0c 	mul.w	ip, r9, ip
 8023e70:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023e74:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023e78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023e7a:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023e7e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023e82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023e84:	fb0a cc0e 	mla	ip, sl, lr, ip
 8023e88:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023e8c:	fb09 f90e 	mul.w	r9, r9, lr
 8023e90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023e94:	fb01 9202 	mla	r2, r1, r2, r9
 8023e98:	9907      	ldr	r1, [sp, #28]
 8023e9a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e9e:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8023ea2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023ea4:	fb00 220b 	mla	r2, r0, fp, r2
 8023ea8:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023eac:	fb0a 2a00 	mla	sl, sl, r0, r2
 8023eb0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023eb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023eb8:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023ebc:	fa5f f08c 	uxtb.w	r0, ip
 8023ec0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023ec4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023ec8:	f000 80a2 	beq.w	8024010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8023ecc:	43db      	mvns	r3, r3
 8023ece:	783a      	ldrb	r2, [r7, #0]
 8023ed0:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023ed4:	b2db      	uxtb	r3, r3
 8023ed6:	fb02 fe03 	mul.w	lr, r2, r3
 8023eda:	fb0a fa03 	mul.w	sl, sl, r3
 8023ede:	f10e 0201 	add.w	r2, lr, #1
 8023ee2:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023ee6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023eea:	703a      	strb	r2, [r7, #0]
 8023eec:	787a      	ldrb	r2, [r7, #1]
 8023eee:	fb02 f003 	mul.w	r0, r2, r3
 8023ef2:	f10a 0301 	add.w	r3, sl, #1
 8023ef6:	1c42      	adds	r2, r0, #1
 8023ef8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023efc:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023f00:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023f04:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023f08:	707a      	strb	r2, [r7, #1]
 8023f0a:	f887 c002 	strb.w	ip, [r7, #2]
 8023f0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023f10:	3703      	adds	r7, #3
 8023f12:	f108 38ff 	add.w	r8, r8, #4294967295
 8023f16:	441d      	add	r5, r3
 8023f18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f1a:	441e      	add	r6, r3
 8023f1c:	e6ab      	b.n	8023c76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8023f1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023f20:	441d      	add	r5, r3
 8023f22:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f24:	441e      	add	r6, r3
 8023f26:	9b06      	ldr	r3, [sp, #24]
 8023f28:	3b01      	subs	r3, #1
 8023f2a:	9306      	str	r3, [sp, #24]
 8023f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f2e:	3303      	adds	r3, #3
 8023f30:	9309      	str	r3, [sp, #36]	; 0x24
 8023f32:	e680      	b.n	8023c36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023f34:	d024      	beq.n	8023f80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023f36:	9b06      	ldr	r3, [sp, #24]
 8023f38:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8023f3a:	3b01      	subs	r3, #1
 8023f3c:	fb00 5003 	mla	r0, r0, r3, r5
 8023f40:	1400      	asrs	r0, r0, #16
 8023f42:	f53f ae95 	bmi.w	8023c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f46:	3901      	subs	r1, #1
 8023f48:	4288      	cmp	r0, r1
 8023f4a:	f6bf ae91 	bge.w	8023c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f4e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023f50:	fb01 6303 	mla	r3, r1, r3, r6
 8023f54:	141b      	asrs	r3, r3, #16
 8023f56:	f53f ae8b 	bmi.w	8023c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f5a:	3a01      	subs	r2, #1
 8023f5c:	4293      	cmp	r3, r2
 8023f5e:	f6bf ae87 	bge.w	8023c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f64:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023f68:	1cdf      	adds	r7, r3, #3
 8023f6a:	f1bb 0f00 	cmp.w	fp, #0
 8023f6e:	dc6e      	bgt.n	802404e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8023f70:	9b06      	ldr	r3, [sp, #24]
 8023f72:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023f7c:	4423      	add	r3, r4
 8023f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8023f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023f82:	2b00      	cmp	r3, #0
 8023f84:	f340 81b0 	ble.w	80242e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8023f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023f8e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023f92:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023f96:	eef0 6a48 	vmov.f32	s13, s16
 8023f9a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023f9e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023fa2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fa6:	ee16 5a90 	vmov	r5, s13
 8023faa:	eef0 6a68 	vmov.f32	s13, s17
 8023fae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023fb2:	ee16 6a90 	vmov	r6, s13
 8023fb6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023fba:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023fbe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023fc2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023fc6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023fca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023fce:	ee18 2a10 	vmov	r2, s16
 8023fd2:	eeb0 8a47 	vmov.f32	s16, s14
 8023fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fda:	ee18 2a90 	vmov	r2, s17
 8023fde:	932d      	str	r3, [sp, #180]	; 0xb4
 8023fe0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023fe2:	eef0 8a67 	vmov.f32	s17, s15
 8023fe6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fea:	932e      	str	r3, [sp, #184]	; 0xb8
 8023fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023fee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023ff0:	3b01      	subs	r3, #1
 8023ff2:	9315      	str	r3, [sp, #84]	; 0x54
 8023ff4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ff6:	bf08      	it	eq
 8023ff8:	4613      	moveq	r3, r2
 8023ffa:	9306      	str	r3, [sp, #24]
 8023ffc:	e60d      	b.n	8023c1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023ffe:	2800      	cmp	r0, #0
 8024000:	f43f ae7d 	beq.w	8023cfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8024004:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8024008:	9307      	str	r3, [sp, #28]
 802400a:	0e1b      	lsrs	r3, r3, #24
 802400c:	930f      	str	r3, [sp, #60]	; 0x3c
 802400e:	e676      	b.n	8023cfe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8024010:	7038      	strb	r0, [r7, #0]
 8024012:	7079      	strb	r1, [r7, #1]
 8024014:	e779      	b.n	8023f0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024016:	f112 0901 	adds.w	r9, r2, #1
 802401a:	f53f af78 	bmi.w	8023f0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802401e:	454b      	cmp	r3, r9
 8024020:	f6ff af75 	blt.w	8023f0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8024024:	f11c 0901 	adds.w	r9, ip, #1
 8024028:	f53f af71 	bmi.w	8023f0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802402c:	45ce      	cmp	lr, r9
 802402e:	f6ff af6e 	blt.w	8023f0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8024032:	b21b      	sxth	r3, r3
 8024034:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8024038:	fa0f f28e 	sxth.w	r2, lr
 802403c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024040:	9200      	str	r2, [sp, #0]
 8024042:	4639      	mov	r1, r7
 8024044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024046:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024048:	f7ff fc7c 	bl	8023944 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802404c:	e75f      	b.n	8023f0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802404e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024050:	1429      	asrs	r1, r5, #16
 8024052:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024054:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024058:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802405c:	1433      	asrs	r3, r6, #16
 802405e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024062:	fb0c 1303 	mla	r3, ip, r3, r1
 8024066:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024068:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802406c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8024070:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024074:	2a00      	cmp	r2, #0
 8024076:	f000 8129 	beq.w	80242cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802407a:	684c      	ldr	r4, [r1, #4]
 802407c:	940c      	str	r4, [sp, #48]	; 0x30
 802407e:	0e24      	lsrs	r4, r4, #24
 8024080:	9413      	str	r4, [sp, #76]	; 0x4c
 8024082:	b198      	cbz	r0, 80240ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8024084:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8024088:	f10c 3cff 	add.w	ip, ip, #4294967295
 802408c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8024090:	f10c 0c04 	add.w	ip, ip, #4
 8024094:	eb01 080c 	add.w	r8, r1, ip
 8024098:	f851 100c 	ldr.w	r1, [r1, ip]
 802409c:	9108      	str	r1, [sp, #32]
 802409e:	0e09      	lsrs	r1, r1, #24
 80240a0:	9110      	str	r1, [sp, #64]	; 0x40
 80240a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80240a6:	910d      	str	r1, [sp, #52]	; 0x34
 80240a8:	0e09      	lsrs	r1, r1, #24
 80240aa:	9114      	str	r1, [sp, #80]	; 0x50
 80240ac:	b292      	uxth	r2, r2
 80240ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80240b0:	b280      	uxth	r0, r0
 80240b2:	fb02 f900 	mul.w	r9, r2, r0
 80240b6:	0112      	lsls	r2, r2, #4
 80240b8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80240bc:	eba2 0809 	sub.w	r8, r2, r9
 80240c0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80240c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80240c6:	b280      	uxth	r0, r0
 80240c8:	fa1f f888 	uxth.w	r8, r8
 80240cc:	1a09      	subs	r1, r1, r0
 80240ce:	fb08 f202 	mul.w	r2, r8, r2
 80240d2:	b289      	uxth	r1, r1
 80240d4:	fb01 220e 	mla	r2, r1, lr, r2
 80240d8:	fb00 2204 	mla	r2, r0, r4, r2
 80240dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80240de:	fb09 2204 	mla	r2, r9, r4, r2
 80240e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80240e6:	2a00      	cmp	r2, #0
 80240e8:	f000 80e8 	beq.w	80242bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80240ec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80240f0:	d01b      	beq.n	802412a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 80240f2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80240f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80240fa:	fb0e fa0a 	mul.w	sl, lr, sl
 80240fe:	fb0e fe03 	mul.w	lr, lr, r3
 8024102:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024106:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802410a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802410e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024112:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024116:	4453      	add	r3, sl
 8024118:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802411c:	0a1b      	lsrs	r3, r3, #8
 802411e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024122:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024126:	ea43 030c 	orr.w	r3, r3, ip
 802412a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802412c:	2cff      	cmp	r4, #255	; 0xff
 802412e:	d021      	beq.n	8024174 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8024130:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024132:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024136:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024138:	fb04 fc0c 	mul.w	ip, r4, ip
 802413c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802413e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024142:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024146:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024148:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802414c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024150:	fb04 fa0a 	mul.w	sl, r4, sl
 8024154:	44e6      	add	lr, ip
 8024156:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802415a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802415e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024162:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024166:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802416a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802416e:	ea4e 040a 	orr.w	r4, lr, sl
 8024172:	940c      	str	r4, [sp, #48]	; 0x30
 8024174:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024176:	2cff      	cmp	r4, #255	; 0xff
 8024178:	d021      	beq.n	80241be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 802417a:	9c08      	ldr	r4, [sp, #32]
 802417c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024180:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024182:	fb04 fc0c 	mul.w	ip, r4, ip
 8024186:	9c08      	ldr	r4, [sp, #32]
 8024188:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802418c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802418e:	fb04 fa0e 	mul.w	sl, r4, lr
 8024192:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024196:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802419a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802419e:	44e6      	add	lr, ip
 80241a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80241a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80241a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80241ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80241b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80241b8:	ea4e 040a 	orr.w	r4, lr, sl
 80241bc:	9408      	str	r4, [sp, #32]
 80241be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80241c0:	2cff      	cmp	r4, #255	; 0xff
 80241c2:	d021      	beq.n	8024208 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 80241c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80241c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80241ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80241cc:	fb04 fc0c 	mul.w	ip, r4, ip
 80241d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80241d2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80241d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80241da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80241dc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80241e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80241e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80241e8:	44e6      	add	lr, ip
 80241ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80241ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80241f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80241f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80241fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024202:	ea4e 040a 	orr.w	r4, lr, sl
 8024206:	940d      	str	r4, [sp, #52]	; 0x34
 8024208:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802420a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802420e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024212:	2aff      	cmp	r2, #255	; 0xff
 8024214:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024218:	9c08      	ldr	r4, [sp, #32]
 802421a:	fb08 fc0c 	mul.w	ip, r8, ip
 802421e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024222:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024226:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024228:	fb00 cc0e 	mla	ip, r0, lr, ip
 802422c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024230:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024232:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024236:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802423a:	fb08 f80e 	mul.w	r8, r8, lr
 802423e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024242:	fb01 8303 	mla	r3, r1, r3, r8
 8024246:	9908      	ldr	r1, [sp, #32]
 8024248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802424c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8024250:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024252:	fb00 330a 	mla	r3, r0, sl, r3
 8024256:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802425a:	fb09 3e0e 	mla	lr, r9, lr, r3
 802425e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024262:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024266:	ea4c 0c0e 	orr.w	ip, ip, lr
 802426a:	fa5f f08c 	uxtb.w	r0, ip
 802426e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8024272:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8024276:	d032      	beq.n	80242de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8024278:	43d2      	mvns	r2, r2
 802427a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802427e:	b2d2      	uxtb	r2, r2
 8024280:	fb0e fe02 	mul.w	lr, lr, r2
 8024284:	f10e 0301 	add.w	r3, lr, #1
 8024288:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802428c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024290:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8024294:	4350      	muls	r0, r2
 8024296:	f807 3c03 	strb.w	r3, [r7, #-3]
 802429a:	1c43      	adds	r3, r0, #1
 802429c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80242a0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80242a4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80242a8:	4353      	muls	r3, r2
 80242aa:	f807 1c02 	strb.w	r1, [r7, #-2]
 80242ae:	1c5a      	adds	r2, r3, #1
 80242b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80242b4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80242b8:	f807 cc01 	strb.w	ip, [r7, #-1]
 80242bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80242be:	3703      	adds	r7, #3
 80242c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80242c4:	441d      	add	r5, r3
 80242c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80242c8:	441e      	add	r6, r3
 80242ca:	e64e      	b.n	8023f6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 80242cc:	2800      	cmp	r0, #0
 80242ce:	f43f aeed 	beq.w	80240ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80242d2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80242d6:	9108      	str	r1, [sp, #32]
 80242d8:	0e09      	lsrs	r1, r1, #24
 80242da:	9110      	str	r1, [sp, #64]	; 0x40
 80242dc:	e6e6      	b.n	80240ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80242de:	f807 0c03 	strb.w	r0, [r7, #-3]
 80242e2:	f807 1c02 	strb.w	r1, [r7, #-2]
 80242e6:	e7e7      	b.n	80242b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 80242e8:	b019      	add	sp, #100	; 0x64
 80242ea:	ecbd 8b08 	vpop	{d8-d11}
 80242ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080242f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80242f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242f8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80242fc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024300:	2800      	cmp	r0, #0
 8024302:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024306:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802430a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802430e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024312:	db6b      	blt.n	80243ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024314:	4580      	cmp	r8, r0
 8024316:	dd69      	ble.n	80243ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024318:	f1bc 0f00 	cmp.w	ip, #0
 802431c:	db66      	blt.n	80243ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802431e:	45e1      	cmp	r9, ip
 8024320:	dd64      	ble.n	80243ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024322:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024326:	f01e 0f01 	tst.w	lr, #1
 802432a:	5d16      	ldrb	r6, [r2, r4]
 802432c:	bf0c      	ite	eq
 802432e:	f006 060f 	andeq.w	r6, r6, #15
 8024332:	1136      	asrne	r6, r6, #4
 8024334:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024338:	b2f6      	uxtb	r6, r6
 802433a:	f110 0a01 	adds.w	sl, r0, #1
 802433e:	d457      	bmi.n	80243f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024340:	45d0      	cmp	r8, sl
 8024342:	dd55      	ble.n	80243f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8024344:	f1bc 0f00 	cmp.w	ip, #0
 8024348:	db52      	blt.n	80243f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802434a:	45e1      	cmp	r9, ip
 802434c:	dd50      	ble.n	80243f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802434e:	2f00      	cmp	r7, #0
 8024350:	f000 80ac 	beq.w	80244ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8024354:	f10e 0b01 	add.w	fp, lr, #1
 8024358:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802435c:	f01b 0f01 	tst.w	fp, #1
 8024360:	5d14      	ldrb	r4, [r2, r4]
 8024362:	bf0c      	ite	eq
 8024364:	f004 040f 	andeq.w	r4, r4, #15
 8024368:	1124      	asrne	r4, r4, #4
 802436a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802436e:	b2e4      	uxtb	r4, r4
 8024370:	2d00      	cmp	r5, #0
 8024372:	f000 8096 	beq.w	80244a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8024376:	2800      	cmp	r0, #0
 8024378:	f10c 0c01 	add.w	ip, ip, #1
 802437c:	db3c      	blt.n	80243f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802437e:	4580      	cmp	r8, r0
 8024380:	dd3a      	ble.n	80243f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024382:	f1bc 0f00 	cmp.w	ip, #0
 8024386:	db37      	blt.n	80243f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8024388:	45e1      	cmp	r9, ip
 802438a:	dd35      	ble.n	80243f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802438c:	eb03 0b0e 	add.w	fp, r3, lr
 8024390:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024394:	f01b 0f01 	tst.w	fp, #1
 8024398:	5c10      	ldrb	r0, [r2, r0]
 802439a:	bf0c      	ite	eq
 802439c:	f000 000f 	andeq.w	r0, r0, #15
 80243a0:	1100      	asrne	r0, r0, #4
 80243a2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80243a6:	b2c0      	uxtb	r0, r0
 80243a8:	f1ba 0f00 	cmp.w	sl, #0
 80243ac:	db26      	blt.n	80243fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80243ae:	45d0      	cmp	r8, sl
 80243b0:	dd24      	ble.n	80243fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80243b2:	f1bc 0f00 	cmp.w	ip, #0
 80243b6:	db21      	blt.n	80243fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80243b8:	45e1      	cmp	r9, ip
 80243ba:	dd1f      	ble.n	80243fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80243bc:	b307      	cbz	r7, 8024400 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80243be:	3301      	adds	r3, #1
 80243c0:	449e      	add	lr, r3
 80243c2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80243c6:	f01e 0f01 	tst.w	lr, #1
 80243ca:	5cd3      	ldrb	r3, [r2, r3]
 80243cc:	bf0c      	ite	eq
 80243ce:	f003 030f 	andeq.w	r3, r3, #15
 80243d2:	111b      	asrne	r3, r3, #4
 80243d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80243d8:	b2db      	uxtb	r3, r3
 80243da:	2f0f      	cmp	r7, #15
 80243dc:	d911      	bls.n	8024402 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80243de:	4b35      	ldr	r3, [pc, #212]	; (80244b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80243e0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80243e4:	4a34      	ldr	r2, [pc, #208]	; (80244b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80243e6:	4835      	ldr	r0, [pc, #212]	; (80244bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80243e8:	f000 ff70 	bl	80252cc <__assert_func>
 80243ec:	2600      	movs	r6, #0
 80243ee:	e7a4      	b.n	802433a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80243f0:	2400      	movs	r4, #0
 80243f2:	e7bd      	b.n	8024370 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80243f4:	463c      	mov	r4, r7
 80243f6:	e7be      	b.n	8024376 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80243f8:	2000      	movs	r0, #0
 80243fa:	e7d5      	b.n	80243a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80243fc:	2300      	movs	r3, #0
 80243fe:	e7ec      	b.n	80243da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8024400:	463b      	mov	r3, r7
 8024402:	2d0f      	cmp	r5, #15
 8024404:	d8eb      	bhi.n	80243de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8024406:	b2bf      	uxth	r7, r7
 8024408:	b2ad      	uxth	r5, r5
 802440a:	fb07 f205 	mul.w	r2, r7, r5
 802440e:	013f      	lsls	r7, r7, #4
 8024410:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024414:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024418:	1abf      	subs	r7, r7, r2
 802441a:	b2ad      	uxth	r5, r5
 802441c:	b2bf      	uxth	r7, r7
 802441e:	ebac 0c05 	sub.w	ip, ip, r5
 8024422:	437c      	muls	r4, r7
 8024424:	fa1f fc8c 	uxth.w	ip, ip
 8024428:	fb06 440c 	mla	r4, r6, ip, r4
 802442c:	fb05 4400 	mla	r4, r5, r0, r4
 8024430:	fb02 4203 	mla	r2, r2, r3, r4
 8024434:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024438:	b38a      	cbz	r2, 802449e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802443a:	4b21      	ldr	r3, [pc, #132]	; (80244c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 802443c:	681c      	ldr	r4, [r3, #0]
 802443e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8024442:	b2e5      	uxtb	r5, r4
 8024444:	4353      	muls	r3, r2
 8024446:	1c5a      	adds	r2, r3, #1
 8024448:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802444c:	1212      	asrs	r2, r2, #8
 802444e:	b290      	uxth	r0, r2
 8024450:	43d2      	mvns	r2, r2
 8024452:	fb15 f500 	smulbb	r5, r5, r0
 8024456:	b2d3      	uxtb	r3, r2
 8024458:	780a      	ldrb	r2, [r1, #0]
 802445a:	fb02 5203 	mla	r2, r2, r3, r5
 802445e:	b292      	uxth	r2, r2
 8024460:	1c55      	adds	r5, r2, #1
 8024462:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024466:	784d      	ldrb	r5, [r1, #1]
 8024468:	fb15 f503 	smulbb	r5, r5, r3
 802446c:	1212      	asrs	r2, r2, #8
 802446e:	700a      	strb	r2, [r1, #0]
 8024470:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8024474:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024478:	fb02 5200 	mla	r2, r2, r0, r5
 802447c:	b292      	uxth	r2, r2
 802447e:	1c55      	adds	r5, r2, #1
 8024480:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8024484:	1212      	asrs	r2, r2, #8
 8024486:	704a      	strb	r2, [r1, #1]
 8024488:	788a      	ldrb	r2, [r1, #2]
 802448a:	fb12 f303 	smulbb	r3, r2, r3
 802448e:	fb04 3300 	mla	r3, r4, r0, r3
 8024492:	b29b      	uxth	r3, r3
 8024494:	1c5a      	adds	r2, r3, #1
 8024496:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802449a:	121b      	asrs	r3, r3, #8
 802449c:	708b      	strb	r3, [r1, #2]
 802449e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244a2:	2f0f      	cmp	r7, #15
 80244a4:	d89b      	bhi.n	80243de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80244a6:	462b      	mov	r3, r5
 80244a8:	4628      	mov	r0, r5
 80244aa:	e7ac      	b.n	8024406 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80244ac:	2d00      	cmp	r5, #0
 80244ae:	d1a1      	bne.n	80243f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80244b0:	462c      	mov	r4, r5
 80244b2:	e7f8      	b.n	80244a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80244b4:	08028eff 	.word	0x08028eff
 80244b8:	080293f6 	.word	0x080293f6
 80244bc:	08028fc8 	.word	0x08028fc8
 80244c0:	200094e0 	.word	0x200094e0

080244c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80244c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244c8:	ed2d 8b08 	vpush	{d8-d11}
 80244cc:	b097      	sub	sp, #92	; 0x5c
 80244ce:	eeb0 aa40 	vmov.f32	s20, s0
 80244d2:	eef0 9a60 	vmov.f32	s19, s1
 80244d6:	9214      	str	r2, [sp, #80]	; 0x50
 80244d8:	eeb0 9a41 	vmov.f32	s18, s2
 80244dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80244de:	eeb0 8a62 	vmov.f32	s16, s5
 80244e2:	9309      	str	r3, [sp, #36]	; 0x24
 80244e4:	eef0 8a43 	vmov.f32	s17, s6
 80244e8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80244ec:	eef0 ba44 	vmov.f32	s23, s8
 80244f0:	9015      	str	r0, [sp, #84]	; 0x54
 80244f2:	eeb0 ba64 	vmov.f32	s22, s9
 80244f6:	6850      	ldr	r0, [r2, #4]
 80244f8:	eef0 aa45 	vmov.f32	s21, s10
 80244fc:	910c      	str	r1, [sp, #48]	; 0x30
 80244fe:	930e      	str	r3, [sp, #56]	; 0x38
 8024500:	6812      	ldr	r2, [r2, #0]
 8024502:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024506:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802450a:	fb00 1303 	mla	r3, r0, r3, r1
 802450e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024512:	eb02 0a03 	add.w	sl, r2, r3
 8024516:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024518:	689b      	ldr	r3, [r3, #8]
 802451a:	3301      	adds	r3, #1
 802451c:	f023 0301 	bic.w	r3, r3, #1
 8024520:	930f      	str	r3, [sp, #60]	; 0x3c
 8024522:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024524:	681f      	ldr	r7, [r3, #0]
 8024526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024528:	2b00      	cmp	r3, #0
 802452a:	dc03      	bgt.n	8024534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802452c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802452e:	2b00      	cmp	r3, #0
 8024530:	f340 8247 	ble.w	80249c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8024534:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024536:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802453a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802453e:	1e48      	subs	r0, r1, #1
 8024540:	f102 3cff 	add.w	ip, r2, #4294967295
 8024544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024546:	2b00      	cmp	r3, #0
 8024548:	f340 80e5 	ble.w	8024716 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802454c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8024550:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024554:	d406      	bmi.n	8024564 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024556:	4586      	cmp	lr, r0
 8024558:	da04      	bge.n	8024564 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802455a:	2b00      	cmp	r3, #0
 802455c:	db02      	blt.n	8024564 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802455e:	4563      	cmp	r3, ip
 8024560:	f2c0 80da 	blt.w	8024718 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8024564:	f11e 0e01 	adds.w	lr, lr, #1
 8024568:	f100 80cb 	bmi.w	8024702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802456c:	4571      	cmp	r1, lr
 802456e:	f2c0 80c8 	blt.w	8024702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024572:	3301      	adds	r3, #1
 8024574:	f100 80c5 	bmi.w	8024702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8024578:	429a      	cmp	r2, r3
 802457a:	f2c0 80c2 	blt.w	8024702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 802457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024580:	46d0      	mov	r8, sl
 8024582:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8024586:	930d      	str	r3, [sp, #52]	; 0x34
 8024588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802458a:	2b00      	cmp	r3, #0
 802458c:	f340 80e3 	ble.w	8024756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8024590:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024592:	1430      	asrs	r0, r6, #16
 8024594:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024598:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802459c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80245a0:	142b      	asrs	r3, r5, #16
 80245a2:	f100 812e 	bmi.w	8024802 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80245a6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80245aa:	455b      	cmp	r3, fp
 80245ac:	f280 8129 	bge.w	8024802 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80245b0:	2800      	cmp	r0, #0
 80245b2:	f2c0 8126 	blt.w	8024802 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80245b6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80245ba:	4558      	cmp	r0, fp
 80245bc:	f280 8121 	bge.w	8024802 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80245c0:	fb00 3309 	mla	r3, r0, r9, r3
 80245c4:	0858      	lsrs	r0, r3, #1
 80245c6:	07dc      	lsls	r4, r3, #31
 80245c8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80245cc:	bf54      	ite	pl
 80245ce:	f00c 0c0f 	andpl.w	ip, ip, #15
 80245d2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80245d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80245da:	fa5f fc8c 	uxtb.w	ip, ip
 80245de:	2a00      	cmp	r2, #0
 80245e0:	f000 80fe 	beq.w	80247e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80245e4:	1c58      	adds	r0, r3, #1
 80245e6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80245ea:	07c0      	lsls	r0, r0, #31
 80245ec:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80245f0:	bf54      	ite	pl
 80245f2:	f00e 0e0f 	andpl.w	lr, lr, #15
 80245f6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80245fa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80245fe:	fa5f f08e 	uxtb.w	r0, lr
 8024602:	9010      	str	r0, [sp, #64]	; 0x40
 8024604:	b1d9      	cbz	r1, 802463e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8024606:	444b      	add	r3, r9
 8024608:	0858      	lsrs	r0, r3, #1
 802460a:	07dc      	lsls	r4, r3, #31
 802460c:	f103 0301 	add.w	r3, r3, #1
 8024610:	5c38      	ldrb	r0, [r7, r0]
 8024612:	bf54      	ite	pl
 8024614:	f000 000f 	andpl.w	r0, r0, #15
 8024618:	1100      	asrmi	r0, r0, #4
 802461a:	07dc      	lsls	r4, r3, #31
 802461c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024620:	b2c0      	uxtb	r0, r0
 8024622:	900a      	str	r0, [sp, #40]	; 0x28
 8024624:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8024628:	f817 e000 	ldrb.w	lr, [r7, r0]
 802462c:	bf54      	ite	pl
 802462e:	f00e 030f 	andpl.w	r3, lr, #15
 8024632:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8024636:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802463a:	b2db      	uxtb	r3, r3
 802463c:	9311      	str	r3, [sp, #68]	; 0x44
 802463e:	b292      	uxth	r2, r2
 8024640:	b289      	uxth	r1, r1
 8024642:	0113      	lsls	r3, r2, #4
 8024644:	fb02 f001 	mul.w	r0, r2, r1
 8024648:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802464a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802464e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8024652:	1a1b      	subs	r3, r3, r0
 8024654:	b289      	uxth	r1, r1
 8024656:	b29b      	uxth	r3, r3
 8024658:	ebae 0e01 	sub.w	lr, lr, r1
 802465c:	4353      	muls	r3, r2
 802465e:	fa1f fe8e 	uxth.w	lr, lr
 8024662:	fb0c 320e 	mla	r2, ip, lr, r3
 8024666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024668:	fb01 2203 	mla	r2, r1, r3, r2
 802466c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802466e:	fb00 2203 	mla	r2, r0, r3, r2
 8024672:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024676:	2a00      	cmp	r2, #0
 8024678:	d039      	beq.n	80246ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802467a:	4bc7      	ldr	r3, [pc, #796]	; (8024998 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802467c:	6819      	ldr	r1, [r3, #0]
 802467e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024680:	fa5f fc81 	uxtb.w	ip, r1
 8024684:	435a      	muls	r2, r3
 8024686:	1c53      	adds	r3, r2, #1
 8024688:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802468c:	1212      	asrs	r2, r2, #8
 802468e:	b290      	uxth	r0, r2
 8024690:	43d2      	mvns	r2, r2
 8024692:	fb1c fc00 	smulbb	ip, ip, r0
 8024696:	b2d3      	uxtb	r3, r2
 8024698:	f898 2000 	ldrb.w	r2, [r8]
 802469c:	fb02 c203 	mla	r2, r2, r3, ip
 80246a0:	b292      	uxth	r2, r2
 80246a2:	f102 0c01 	add.w	ip, r2, #1
 80246a6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80246aa:	f898 c001 	ldrb.w	ip, [r8, #1]
 80246ae:	fb1c fc03 	smulbb	ip, ip, r3
 80246b2:	1212      	asrs	r2, r2, #8
 80246b4:	f888 2000 	strb.w	r2, [r8]
 80246b8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80246bc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80246c0:	fb02 c200 	mla	r2, r2, r0, ip
 80246c4:	b292      	uxth	r2, r2
 80246c6:	f102 0c01 	add.w	ip, r2, #1
 80246ca:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80246ce:	1212      	asrs	r2, r2, #8
 80246d0:	f888 2001 	strb.w	r2, [r8, #1]
 80246d4:	f898 2002 	ldrb.w	r2, [r8, #2]
 80246d8:	fb12 f303 	smulbb	r3, r2, r3
 80246dc:	fb01 3300 	mla	r3, r1, r0, r3
 80246e0:	b29b      	uxth	r3, r3
 80246e2:	1c5a      	adds	r2, r3, #1
 80246e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80246e8:	121b      	asrs	r3, r3, #8
 80246ea:	f888 3002 	strb.w	r3, [r8, #2]
 80246ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80246f0:	f108 0803 	add.w	r8, r8, #3
 80246f4:	441d      	add	r5, r3
 80246f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246f8:	441e      	add	r6, r3
 80246fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80246fc:	3b01      	subs	r3, #1
 80246fe:	930d      	str	r3, [sp, #52]	; 0x34
 8024700:	e742      	b.n	8024588 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024702:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024704:	f10a 0a03 	add.w	sl, sl, #3
 8024708:	441d      	add	r5, r3
 802470a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802470c:	441e      	add	r6, r3
 802470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024710:	3b01      	subs	r3, #1
 8024712:	9309      	str	r3, [sp, #36]	; 0x24
 8024714:	e716      	b.n	8024544 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8024716:	d024      	beq.n	8024762 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8024718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802471a:	982b      	ldr	r0, [sp, #172]	; 0xac
 802471c:	3b01      	subs	r3, #1
 802471e:	fb00 5003 	mla	r0, r0, r3, r5
 8024722:	1400      	asrs	r0, r0, #16
 8024724:	f53f af2b 	bmi.w	802457e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024728:	3901      	subs	r1, #1
 802472a:	4288      	cmp	r0, r1
 802472c:	f6bf af27 	bge.w	802457e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024730:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024732:	fb01 6303 	mla	r3, r1, r3, r6
 8024736:	141b      	asrs	r3, r3, #16
 8024738:	f53f af21 	bmi.w	802457e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802473c:	3a01      	subs	r2, #1
 802473e:	4293      	cmp	r3, r2
 8024740:	f6bf af1d 	bge.w	802457e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024744:	f10a 0e03 	add.w	lr, sl, #3
 8024748:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 802474c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8024750:	f1b8 0f00 	cmp.w	r8, #0
 8024754:	dc76      	bgt.n	8024844 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8024756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024758:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802475c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024760:	44a2      	add	sl, r4
 8024762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024764:	2b00      	cmp	r3, #0
 8024766:	f340 812c 	ble.w	80249c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 802476a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802476e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024770:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024774:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024778:	eef0 6a48 	vmov.f32	s13, s16
 802477c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024780:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024784:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024788:	ee16 5a90 	vmov	r5, s13
 802478c:	eef0 6a68 	vmov.f32	s13, s17
 8024790:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024794:	ee16 6a90 	vmov	r6, s13
 8024798:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802479c:	ee69 7a27 	vmul.f32	s15, s18, s15
 80247a0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80247a4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80247a8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80247ac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80247b0:	ee18 2a10 	vmov	r2, s16
 80247b4:	eeb0 8a47 	vmov.f32	s16, s14
 80247b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80247bc:	ee18 2a90 	vmov	r2, s17
 80247c0:	932b      	str	r3, [sp, #172]	; 0xac
 80247c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247c4:	eef0 8a67 	vmov.f32	s17, s15
 80247c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80247cc:	932c      	str	r3, [sp, #176]	; 0xb0
 80247ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80247d2:	3b01      	subs	r3, #1
 80247d4:	930c      	str	r3, [sp, #48]	; 0x30
 80247d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247d8:	bf08      	it	eq
 80247da:	4613      	moveq	r3, r2
 80247dc:	9309      	str	r3, [sp, #36]	; 0x24
 80247de:	e6a2      	b.n	8024526 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80247e0:	2900      	cmp	r1, #0
 80247e2:	f43f af2c 	beq.w	802463e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80247e6:	eb09 0003 	add.w	r0, r9, r3
 80247ea:	0843      	lsrs	r3, r0, #1
 80247ec:	07c0      	lsls	r0, r0, #31
 80247ee:	5cfb      	ldrb	r3, [r7, r3]
 80247f0:	bf54      	ite	pl
 80247f2:	f003 030f 	andpl.w	r3, r3, #15
 80247f6:	111b      	asrmi	r3, r3, #4
 80247f8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80247fc:	b2db      	uxtb	r3, r3
 80247fe:	930a      	str	r3, [sp, #40]	; 0x28
 8024800:	e71d      	b.n	802463e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8024802:	f113 0b01 	adds.w	fp, r3, #1
 8024806:	f53f af72 	bmi.w	80246ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802480a:	45dc      	cmp	ip, fp
 802480c:	f6ff af6f 	blt.w	80246ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024810:	f110 0b01 	adds.w	fp, r0, #1
 8024814:	f53f af6b 	bmi.w	80246ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024818:	45de      	cmp	lr, fp
 802481a:	f6ff af68 	blt.w	80246ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802481e:	9302      	str	r3, [sp, #8]
 8024820:	fa0f f38e 	sxth.w	r3, lr
 8024824:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024826:	9301      	str	r3, [sp, #4]
 8024828:	fa0f f38c 	sxth.w	r3, ip
 802482c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024830:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024834:	9300      	str	r3, [sp, #0]
 8024836:	463a      	mov	r2, r7
 8024838:	464b      	mov	r3, r9
 802483a:	4641      	mov	r1, r8
 802483c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802483e:	f7ff fd59 	bl	80242f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8024842:	e754      	b.n	80246ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024844:	142a      	asrs	r2, r5, #16
 8024846:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802484a:	1433      	asrs	r3, r6, #16
 802484c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024850:	fb09 2303 	mla	r3, r9, r3, r2
 8024854:	085a      	lsrs	r2, r3, #1
 8024856:	07dc      	lsls	r4, r3, #31
 8024858:	5cba      	ldrb	r2, [r7, r2]
 802485a:	bf54      	ite	pl
 802485c:	f002 020f 	andpl.w	r2, r2, #15
 8024860:	1112      	asrmi	r2, r2, #4
 8024862:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024866:	b2d2      	uxtb	r2, r2
 8024868:	2900      	cmp	r1, #0
 802486a:	f000 8097 	beq.w	802499c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802486e:	f103 0b01 	add.w	fp, r3, #1
 8024872:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8024876:	f01b 0f01 	tst.w	fp, #1
 802487a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802487e:	bf0c      	ite	eq
 8024880:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024884:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024888:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802488c:	fa5f f48c 	uxtb.w	r4, ip
 8024890:	9412      	str	r4, [sp, #72]	; 0x48
 8024892:	b300      	cbz	r0, 80248d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8024894:	444b      	add	r3, r9
 8024896:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802489a:	07dc      	lsls	r4, r3, #31
 802489c:	f103 0301 	add.w	r3, r3, #1
 80248a0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80248a4:	bf54      	ite	pl
 80248a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80248aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80248ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80248b2:	fa5f f48c 	uxtb.w	r4, ip
 80248b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80248ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80248bc:	07dc      	lsls	r4, r3, #31
 80248be:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80248c2:	bf54      	ite	pl
 80248c4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80248c8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80248cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80248d0:	fa5f f38c 	uxtb.w	r3, ip
 80248d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80248d6:	b289      	uxth	r1, r1
 80248d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80248da:	b280      	uxth	r0, r0
 80248dc:	fb01 f300 	mul.w	r3, r1, r0
 80248e0:	0109      	lsls	r1, r1, #4
 80248e2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80248e6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80248ea:	1ac9      	subs	r1, r1, r3
 80248ec:	b280      	uxth	r0, r0
 80248ee:	b289      	uxth	r1, r1
 80248f0:	ebac 0c00 	sub.w	ip, ip, r0
 80248f4:	4361      	muls	r1, r4
 80248f6:	fa1f fc8c 	uxth.w	ip, ip
 80248fa:	fb02 120c 	mla	r2, r2, ip, r1
 80248fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024900:	fb00 2001 	mla	r0, r0, r1, r2
 8024904:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024906:	fb03 0302 	mla	r3, r3, r2, r0
 802490a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802490e:	2b00      	cmp	r3, #0
 8024910:	d039      	beq.n	8024986 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024912:	4a21      	ldr	r2, [pc, #132]	; (8024998 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8024914:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024918:	6810      	ldr	r0, [r2, #0]
 802491a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802491c:	fa5f fc80 	uxtb.w	ip, r0
 8024920:	4353      	muls	r3, r2
 8024922:	1c5a      	adds	r2, r3, #1
 8024924:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024928:	121b      	asrs	r3, r3, #8
 802492a:	b29a      	uxth	r2, r3
 802492c:	43db      	mvns	r3, r3
 802492e:	fb1c fc02 	smulbb	ip, ip, r2
 8024932:	b2db      	uxtb	r3, r3
 8024934:	fb01 c103 	mla	r1, r1, r3, ip
 8024938:	b289      	uxth	r1, r1
 802493a:	f101 0c01 	add.w	ip, r1, #1
 802493e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024942:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8024946:	fb1c fc03 	smulbb	ip, ip, r3
 802494a:	1209      	asrs	r1, r1, #8
 802494c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8024950:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024954:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8024958:	fb01 c102 	mla	r1, r1, r2, ip
 802495c:	b289      	uxth	r1, r1
 802495e:	f101 0c01 	add.w	ip, r1, #1
 8024962:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024966:	1209      	asrs	r1, r1, #8
 8024968:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802496c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8024970:	fb11 f303 	smulbb	r3, r1, r3
 8024974:	fb00 3002 	mla	r0, r0, r2, r3
 8024978:	b280      	uxth	r0, r0
 802497a:	1c42      	adds	r2, r0, #1
 802497c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024980:	1200      	asrs	r0, r0, #8
 8024982:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024986:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024988:	f10e 0e03 	add.w	lr, lr, #3
 802498c:	f108 38ff 	add.w	r8, r8, #4294967295
 8024990:	441d      	add	r5, r3
 8024992:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024994:	441e      	add	r6, r3
 8024996:	e6db      	b.n	8024750 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024998:	200094e0 	.word	0x200094e0
 802499c:	2800      	cmp	r0, #0
 802499e:	d09a      	beq.n	80248d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80249a0:	444b      	add	r3, r9
 80249a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80249a6:	07db      	lsls	r3, r3, #31
 80249a8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80249ac:	bf54      	ite	pl
 80249ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 80249b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80249b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80249ba:	fa5f f38c 	uxtb.w	r3, ip
 80249be:	930b      	str	r3, [sp, #44]	; 0x2c
 80249c0:	e789      	b.n	80248d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80249c2:	b017      	add	sp, #92	; 0x5c
 80249c4:	ecbd 8b08 	vpop	{d8-d11}
 80249c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080249cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80249cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249d0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80249d4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80249d8:	2800      	cmp	r0, #0
 80249da:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80249de:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80249e2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80249e6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80249ea:	db6b      	blt.n	8024ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80249ec:	4580      	cmp	r8, r0
 80249ee:	dd69      	ble.n	8024ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80249f0:	f1bc 0f00 	cmp.w	ip, #0
 80249f4:	db66      	blt.n	8024ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80249f6:	45e1      	cmp	r9, ip
 80249f8:	dd64      	ble.n	8024ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80249fa:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80249fe:	f01e 0f01 	tst.w	lr, #1
 8024a02:	5d16      	ldrb	r6, [r2, r4]
 8024a04:	bf0c      	ite	eq
 8024a06:	f006 060f 	andeq.w	r6, r6, #15
 8024a0a:	1136      	asrne	r6, r6, #4
 8024a0c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024a10:	b2f6      	uxtb	r6, r6
 8024a12:	f110 0a01 	adds.w	sl, r0, #1
 8024a16:	d457      	bmi.n	8024ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a18:	45d0      	cmp	r8, sl
 8024a1a:	dd55      	ble.n	8024ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a1c:	f1bc 0f00 	cmp.w	ip, #0
 8024a20:	db52      	blt.n	8024ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a22:	45e1      	cmp	r9, ip
 8024a24:	dd50      	ble.n	8024ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a26:	2f00      	cmp	r7, #0
 8024a28:	f000 80a5 	beq.w	8024b76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8024a2c:	f10e 0b01 	add.w	fp, lr, #1
 8024a30:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024a34:	f01b 0f01 	tst.w	fp, #1
 8024a38:	5d14      	ldrb	r4, [r2, r4]
 8024a3a:	bf0c      	ite	eq
 8024a3c:	f004 040f 	andeq.w	r4, r4, #15
 8024a40:	1124      	asrne	r4, r4, #4
 8024a42:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024a46:	b2e4      	uxtb	r4, r4
 8024a48:	2d00      	cmp	r5, #0
 8024a4a:	f000 808f 	beq.w	8024b6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8024a4e:	2800      	cmp	r0, #0
 8024a50:	f10c 0c01 	add.w	ip, ip, #1
 8024a54:	db3c      	blt.n	8024ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024a56:	4580      	cmp	r8, r0
 8024a58:	dd3a      	ble.n	8024ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024a5a:	f1bc 0f00 	cmp.w	ip, #0
 8024a5e:	db37      	blt.n	8024ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024a60:	45e1      	cmp	r9, ip
 8024a62:	dd35      	ble.n	8024ad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024a64:	eb03 0b0e 	add.w	fp, r3, lr
 8024a68:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024a6c:	f01b 0f01 	tst.w	fp, #1
 8024a70:	5c10      	ldrb	r0, [r2, r0]
 8024a72:	bf0c      	ite	eq
 8024a74:	f000 000f 	andeq.w	r0, r0, #15
 8024a78:	1100      	asrne	r0, r0, #4
 8024a7a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024a7e:	b2c0      	uxtb	r0, r0
 8024a80:	f1ba 0f00 	cmp.w	sl, #0
 8024a84:	db26      	blt.n	8024ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024a86:	45d0      	cmp	r8, sl
 8024a88:	dd24      	ble.n	8024ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024a8a:	f1bc 0f00 	cmp.w	ip, #0
 8024a8e:	db21      	blt.n	8024ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024a90:	45e1      	cmp	r9, ip
 8024a92:	dd1f      	ble.n	8024ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024a94:	b307      	cbz	r7, 8024ad8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8024a96:	3301      	adds	r3, #1
 8024a98:	449e      	add	lr, r3
 8024a9a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024a9e:	f01e 0f01 	tst.w	lr, #1
 8024aa2:	5cd3      	ldrb	r3, [r2, r3]
 8024aa4:	bf0c      	ite	eq
 8024aa6:	f003 030f 	andeq.w	r3, r3, #15
 8024aaa:	111b      	asrne	r3, r3, #4
 8024aac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024ab0:	b2db      	uxtb	r3, r3
 8024ab2:	2f0f      	cmp	r7, #15
 8024ab4:	d911      	bls.n	8024ada <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8024ab6:	4b32      	ldr	r3, [pc, #200]	; (8024b80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024ab8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8024abc:	4a31      	ldr	r2, [pc, #196]	; (8024b84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8024abe:	4832      	ldr	r0, [pc, #200]	; (8024b88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8024ac0:	f000 fc04 	bl	80252cc <__assert_func>
 8024ac4:	2600      	movs	r6, #0
 8024ac6:	e7a4      	b.n	8024a12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024ac8:	2400      	movs	r4, #0
 8024aca:	e7bd      	b.n	8024a48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024acc:	463c      	mov	r4, r7
 8024ace:	e7be      	b.n	8024a4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8024ad0:	2000      	movs	r0, #0
 8024ad2:	e7d5      	b.n	8024a80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8024ad4:	2300      	movs	r3, #0
 8024ad6:	e7ec      	b.n	8024ab2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024ad8:	463b      	mov	r3, r7
 8024ada:	2d0f      	cmp	r5, #15
 8024adc:	d8eb      	bhi.n	8024ab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024ade:	b2bf      	uxth	r7, r7
 8024ae0:	b2ad      	uxth	r5, r5
 8024ae2:	fb07 f205 	mul.w	r2, r7, r5
 8024ae6:	013f      	lsls	r7, r7, #4
 8024ae8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024aec:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024af0:	1abf      	subs	r7, r7, r2
 8024af2:	b2ad      	uxth	r5, r5
 8024af4:	b2bf      	uxth	r7, r7
 8024af6:	ebac 0c05 	sub.w	ip, ip, r5
 8024afa:	437c      	muls	r4, r7
 8024afc:	fa1f fc8c 	uxth.w	ip, ip
 8024b00:	fb06 440c 	mla	r4, r6, ip, r4
 8024b04:	fb05 4400 	mla	r4, r5, r0, r4
 8024b08:	fb02 4303 	mla	r3, r2, r3, r4
 8024b0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024b10:	b353      	cbz	r3, 8024b68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8024b12:	4a1e      	ldr	r2, [pc, #120]	; (8024b8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8024b14:	7808      	ldrb	r0, [r1, #0]
 8024b16:	6814      	ldr	r4, [r2, #0]
 8024b18:	b29a      	uxth	r2, r3
 8024b1a:	43db      	mvns	r3, r3
 8024b1c:	b2e5      	uxtb	r5, r4
 8024b1e:	b2db      	uxtb	r3, r3
 8024b20:	fb15 f502 	smulbb	r5, r5, r2
 8024b24:	fb00 5003 	mla	r0, r0, r3, r5
 8024b28:	b280      	uxth	r0, r0
 8024b2a:	1c45      	adds	r5, r0, #1
 8024b2c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024b30:	784d      	ldrb	r5, [r1, #1]
 8024b32:	fb15 f503 	smulbb	r5, r5, r3
 8024b36:	1200      	asrs	r0, r0, #8
 8024b38:	7008      	strb	r0, [r1, #0]
 8024b3a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024b3e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024b42:	fb00 5002 	mla	r0, r0, r2, r5
 8024b46:	b280      	uxth	r0, r0
 8024b48:	1c45      	adds	r5, r0, #1
 8024b4a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024b4e:	1200      	asrs	r0, r0, #8
 8024b50:	7048      	strb	r0, [r1, #1]
 8024b52:	7888      	ldrb	r0, [r1, #2]
 8024b54:	fb10 f303 	smulbb	r3, r0, r3
 8024b58:	fb04 3202 	mla	r2, r4, r2, r3
 8024b5c:	b292      	uxth	r2, r2
 8024b5e:	1c53      	adds	r3, r2, #1
 8024b60:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024b64:	1212      	asrs	r2, r2, #8
 8024b66:	708a      	strb	r2, [r1, #2]
 8024b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b6c:	2f0f      	cmp	r7, #15
 8024b6e:	d8a2      	bhi.n	8024ab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024b70:	462b      	mov	r3, r5
 8024b72:	4628      	mov	r0, r5
 8024b74:	e7b3      	b.n	8024ade <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8024b76:	2d00      	cmp	r5, #0
 8024b78:	d1a8      	bne.n	8024acc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8024b7a:	462c      	mov	r4, r5
 8024b7c:	e7f8      	b.n	8024b70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8024b7e:	bf00      	nop
 8024b80:	08028eff 	.word	0x08028eff
 8024b84:	080293f6 	.word	0x080293f6
 8024b88:	08028fc8 	.word	0x08028fc8
 8024b8c:	200094e0 	.word	0x200094e0

08024b90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b94:	ed2d 8b08 	vpush	{d8-d11}
 8024b98:	b093      	sub	sp, #76	; 0x4c
 8024b9a:	461c      	mov	r4, r3
 8024b9c:	eeb0 aa40 	vmov.f32	s20, s0
 8024ba0:	920c      	str	r2, [sp, #48]	; 0x30
 8024ba2:	eef0 9a60 	vmov.f32	s19, s1
 8024ba6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024ba8:	eeb0 9a41 	vmov.f32	s18, s2
 8024bac:	9011      	str	r0, [sp, #68]	; 0x44
 8024bae:	eeb0 8a62 	vmov.f32	s16, s5
 8024bb2:	6850      	ldr	r0, [r2, #4]
 8024bb4:	eef0 8a43 	vmov.f32	s17, s6
 8024bb8:	9107      	str	r1, [sp, #28]
 8024bba:	eef0 ba44 	vmov.f32	s23, s8
 8024bbe:	6812      	ldr	r2, [r2, #0]
 8024bc0:	eeb0 ba64 	vmov.f32	s22, s9
 8024bc4:	eef0 aa45 	vmov.f32	s21, s10
 8024bc8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024bcc:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8024bd0:	fb00 1303 	mla	r3, r0, r3, r1
 8024bd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024bd8:	eb02 0b03 	add.w	fp, r2, r3
 8024bdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024bde:	689b      	ldr	r3, [r3, #8]
 8024be0:	3301      	adds	r3, #1
 8024be2:	f023 0301 	bic.w	r3, r3, #1
 8024be6:	9309      	str	r3, [sp, #36]	; 0x24
 8024be8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024bea:	f8d3 8000 	ldr.w	r8, [r3]
 8024bee:	9b07      	ldr	r3, [sp, #28]
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	dc03      	bgt.n	8024bfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024bf6:	2b00      	cmp	r3, #0
 8024bf8:	f340 822b 	ble.w	8025052 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024bfc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024bfe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c06:	1e48      	subs	r0, r1, #1
 8024c08:	1e57      	subs	r7, r2, #1
 8024c0a:	2c00      	cmp	r4, #0
 8024c0c:	f340 80d7 	ble.w	8024dbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8024c10:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8024c14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024c18:	d406      	bmi.n	8024c28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024c1a:	4584      	cmp	ip, r0
 8024c1c:	da04      	bge.n	8024c28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	db02      	blt.n	8024c28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8024c22:	42bb      	cmp	r3, r7
 8024c24:	f2c0 80cc 	blt.w	8024dc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024c28:	f11c 0c01 	adds.w	ip, ip, #1
 8024c2c:	f100 80bf 	bmi.w	8024dae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8024c30:	4561      	cmp	r1, ip
 8024c32:	f2c0 80bc 	blt.w	8024dae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8024c36:	3301      	adds	r3, #1
 8024c38:	f100 80b9 	bmi.w	8024dae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8024c3c:	429a      	cmp	r2, r3
 8024c3e:	f2c0 80b6 	blt.w	8024dae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8024c42:	46a2      	mov	sl, r4
 8024c44:	465f      	mov	r7, fp
 8024c46:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024c4a:	f1ba 0f00 	cmp.w	sl, #0
 8024c4e:	f340 80d4 	ble.w	8024dfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8024c52:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8024c56:	1430      	asrs	r0, r6, #16
 8024c58:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024c5c:	9308      	str	r3, [sp, #32]
 8024c5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024c60:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8024c64:	142b      	asrs	r3, r5, #16
 8024c66:	f100 8124 	bmi.w	8024eb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024c6a:	f10c 32ff 	add.w	r2, ip, #4294967295
 8024c6e:	4293      	cmp	r3, r2
 8024c70:	f280 811f 	bge.w	8024eb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024c74:	2800      	cmp	r0, #0
 8024c76:	f2c0 811c 	blt.w	8024eb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024c7a:	f10e 32ff 	add.w	r2, lr, #4294967295
 8024c7e:	4290      	cmp	r0, r2
 8024c80:	f280 8117 	bge.w	8024eb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8024c84:	fb00 3309 	mla	r3, r0, r9, r3
 8024c88:	0858      	lsrs	r0, r3, #1
 8024c8a:	07da      	lsls	r2, r3, #31
 8024c8c:	9a08      	ldr	r2, [sp, #32]
 8024c8e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8024c92:	bf54      	ite	pl
 8024c94:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024c98:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024c9c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024ca0:	fa5f fc8c 	uxtb.w	ip, ip
 8024ca4:	2a00      	cmp	r2, #0
 8024ca6:	f000 80ed 	beq.w	8024e84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024caa:	1c58      	adds	r0, r3, #1
 8024cac:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024cb0:	07c0      	lsls	r0, r0, #31
 8024cb2:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8024cb6:	bf54      	ite	pl
 8024cb8:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024cbc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024cc0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024cc4:	fa5f fe8e 	uxtb.w	lr, lr
 8024cc8:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8024ccc:	b1c9      	cbz	r1, 8024d02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024cce:	444b      	add	r3, r9
 8024cd0:	0858      	lsrs	r0, r3, #1
 8024cd2:	07da      	lsls	r2, r3, #31
 8024cd4:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024cd8:	bf54      	ite	pl
 8024cda:	f000 000f 	andpl.w	r0, r0, #15
 8024cde:	1100      	asrmi	r0, r0, #4
 8024ce0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024ce4:	b2c0      	uxtb	r0, r0
 8024ce6:	900a      	str	r0, [sp, #40]	; 0x28
 8024ce8:	1c58      	adds	r0, r3, #1
 8024cea:	0843      	lsrs	r3, r0, #1
 8024cec:	07c2      	lsls	r2, r0, #31
 8024cee:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024cf2:	bf54      	ite	pl
 8024cf4:	f003 030f 	andpl.w	r3, r3, #15
 8024cf8:	111b      	asrmi	r3, r3, #4
 8024cfa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024cfe:	b2db      	uxtb	r3, r3
 8024d00:	930e      	str	r3, [sp, #56]	; 0x38
 8024d02:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024d06:	b289      	uxth	r1, r1
 8024d08:	fb02 f301 	mul.w	r3, r2, r1
 8024d0c:	0112      	lsls	r2, r2, #4
 8024d0e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024d12:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024d16:	1ad2      	subs	r2, r2, r3
 8024d18:	b289      	uxth	r1, r1
 8024d1a:	b292      	uxth	r2, r2
 8024d1c:	1a40      	subs	r0, r0, r1
 8024d1e:	fa1f fe80 	uxth.w	lr, r0
 8024d22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024d24:	4342      	muls	r2, r0
 8024d26:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d2c:	fb01 c102 	mla	r1, r1, r2, ip
 8024d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024d32:	fb03 1302 	mla	r3, r3, r2, r1
 8024d36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024d3a:	b383      	cbz	r3, 8024d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024d3c:	4ac7      	ldr	r2, [pc, #796]	; (802505c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8024d3e:	2bff      	cmp	r3, #255	; 0xff
 8024d40:	6812      	ldr	r2, [r2, #0]
 8024d42:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8024d46:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8024d4a:	b2d2      	uxtb	r2, r2
 8024d4c:	f000 80ac 	beq.w	8024ea8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8024d50:	b299      	uxth	r1, r3
 8024d52:	43db      	mvns	r3, r3
 8024d54:	f897 c000 	ldrb.w	ip, [r7]
 8024d58:	fb12 f201 	smulbb	r2, r2, r1
 8024d5c:	b2db      	uxtb	r3, r3
 8024d5e:	fb10 f001 	smulbb	r0, r0, r1
 8024d62:	fb0c 2203 	mla	r2, ip, r3, r2
 8024d66:	fb1e f101 	smulbb	r1, lr, r1
 8024d6a:	b292      	uxth	r2, r2
 8024d6c:	f102 0c01 	add.w	ip, r2, #1
 8024d70:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024d74:	1212      	asrs	r2, r2, #8
 8024d76:	703a      	strb	r2, [r7, #0]
 8024d78:	787a      	ldrb	r2, [r7, #1]
 8024d7a:	fb02 0003 	mla	r0, r2, r3, r0
 8024d7e:	b280      	uxth	r0, r0
 8024d80:	1c42      	adds	r2, r0, #1
 8024d82:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024d86:	78ba      	ldrb	r2, [r7, #2]
 8024d88:	fb02 1303 	mla	r3, r2, r3, r1
 8024d8c:	1200      	asrs	r0, r0, #8
 8024d8e:	b29b      	uxth	r3, r3
 8024d90:	7078      	strb	r0, [r7, #1]
 8024d92:	f103 0e01 	add.w	lr, r3, #1
 8024d96:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024d9a:	121b      	asrs	r3, r3, #8
 8024d9c:	70bb      	strb	r3, [r7, #2]
 8024d9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024da0:	3703      	adds	r7, #3
 8024da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024da6:	441d      	add	r5, r3
 8024da8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024daa:	441e      	add	r6, r3
 8024dac:	e74d      	b.n	8024c4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8024dae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024db0:	3c01      	subs	r4, #1
 8024db2:	f10b 0b03 	add.w	fp, fp, #3
 8024db6:	441d      	add	r5, r3
 8024db8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024dba:	441e      	add	r6, r3
 8024dbc:	e725      	b.n	8024c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024dbe:	d021      	beq.n	8024e04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8024dc0:	1e63      	subs	r3, r4, #1
 8024dc2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024dc4:	fb00 5003 	mla	r0, r0, r3, r5
 8024dc8:	1400      	asrs	r0, r0, #16
 8024dca:	f53f af3a 	bmi.w	8024c42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024dce:	3901      	subs	r1, #1
 8024dd0:	4288      	cmp	r0, r1
 8024dd2:	f6bf af36 	bge.w	8024c42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024dd6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024dd8:	fb01 6303 	mla	r3, r1, r3, r6
 8024ddc:	141b      	asrs	r3, r3, #16
 8024dde:	f53f af30 	bmi.w	8024c42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024de2:	3a01      	subs	r2, #1
 8024de4:	4293      	cmp	r3, r2
 8024de6:	f6bf af2c 	bge.w	8024c42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024dea:	f10b 0c03 	add.w	ip, fp, #3
 8024dee:	46a6      	mov	lr, r4
 8024df0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024df4:	f1be 0f00 	cmp.w	lr, #0
 8024df8:	dc79      	bgt.n	8024eee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8024dfa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8024dfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024e02:	44a3      	add	fp, r4
 8024e04:	9b07      	ldr	r3, [sp, #28]
 8024e06:	2b00      	cmp	r3, #0
 8024e08:	f340 8123 	ble.w	8025052 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8024e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e12:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024e16:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024e1a:	eef0 6a48 	vmov.f32	s13, s16
 8024e1e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024e22:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024e26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e2a:	ee16 5a90 	vmov	r5, s13
 8024e2e:	eef0 6a68 	vmov.f32	s13, s17
 8024e32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e36:	ee16 6a90 	vmov	r6, s13
 8024e3a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024e3e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024e42:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024e46:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024e4a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024e4e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024e52:	ee18 2a10 	vmov	r2, s16
 8024e56:	eeb0 8a47 	vmov.f32	s16, s14
 8024e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e5e:	ee18 2a90 	vmov	r2, s17
 8024e62:	9327      	str	r3, [sp, #156]	; 0x9c
 8024e64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e66:	eef0 8a67 	vmov.f32	s17, s15
 8024e6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8024e6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8024e70:	9b07      	ldr	r3, [sp, #28]
 8024e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024e74:	3b01      	subs	r3, #1
 8024e76:	9307      	str	r3, [sp, #28]
 8024e78:	bf08      	it	eq
 8024e7a:	4614      	moveq	r4, r2
 8024e7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e7e:	bf18      	it	ne
 8024e80:	461c      	movne	r4, r3
 8024e82:	e6b4      	b.n	8024bee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024e84:	2900      	cmp	r1, #0
 8024e86:	f43f af3c 	beq.w	8024d02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024e8a:	eb09 0003 	add.w	r0, r9, r3
 8024e8e:	0843      	lsrs	r3, r0, #1
 8024e90:	07c0      	lsls	r0, r0, #31
 8024e92:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024e96:	bf54      	ite	pl
 8024e98:	f003 030f 	andpl.w	r3, r3, #15
 8024e9c:	111b      	asrmi	r3, r3, #4
 8024e9e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024ea2:	b2db      	uxtb	r3, r3
 8024ea4:	930a      	str	r3, [sp, #40]	; 0x28
 8024ea6:	e72c      	b.n	8024d02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8024ea8:	703a      	strb	r2, [r7, #0]
 8024eaa:	7078      	strb	r0, [r7, #1]
 8024eac:	f887 e002 	strb.w	lr, [r7, #2]
 8024eb0:	e775      	b.n	8024d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024eb2:	1c5a      	adds	r2, r3, #1
 8024eb4:	f53f af73 	bmi.w	8024d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024eb8:	4594      	cmp	ip, r2
 8024eba:	f6ff af70 	blt.w	8024d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024ebe:	1c42      	adds	r2, r0, #1
 8024ec0:	f53f af6d 	bmi.w	8024d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024ec4:	4596      	cmp	lr, r2
 8024ec6:	f6ff af6a 	blt.w	8024d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024eca:	9302      	str	r3, [sp, #8]
 8024ecc:	fa0f f38e 	sxth.w	r3, lr
 8024ed0:	9a08      	ldr	r2, [sp, #32]
 8024ed2:	9301      	str	r3, [sp, #4]
 8024ed4:	fa0f f38c 	sxth.w	r3, ip
 8024ed8:	9105      	str	r1, [sp, #20]
 8024eda:	4639      	mov	r1, r7
 8024edc:	9300      	str	r3, [sp, #0]
 8024ede:	464b      	mov	r3, r9
 8024ee0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024ee4:	4642      	mov	r2, r8
 8024ee6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024ee8:	f7ff fd70 	bl	80249cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024eec:	e757      	b.n	8024d9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8024eee:	142a      	asrs	r2, r5, #16
 8024ef0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024ef4:	1433      	asrs	r3, r6, #16
 8024ef6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8024efa:	fb09 2303 	mla	r3, r9, r3, r2
 8024efe:	085a      	lsrs	r2, r3, #1
 8024f00:	07d9      	lsls	r1, r3, #31
 8024f02:	f818 2002 	ldrb.w	r2, [r8, r2]
 8024f06:	bf54      	ite	pl
 8024f08:	f002 020f 	andpl.w	r2, r2, #15
 8024f0c:	1112      	asrmi	r2, r2, #4
 8024f0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024f12:	b2d2      	uxtb	r2, r2
 8024f14:	2800      	cmp	r0, #0
 8024f16:	f000 8085 	beq.w	8025024 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024f1a:	f103 0a01 	add.w	sl, r3, #1
 8024f1e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8024f22:	f01a 0f01 	tst.w	sl, #1
 8024f26:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024f2a:	bf0c      	ite	eq
 8024f2c:	f001 010f 	andeq.w	r1, r1, #15
 8024f30:	1109      	asrne	r1, r1, #4
 8024f32:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f36:	b2c9      	uxtb	r1, r1
 8024f38:	910f      	str	r1, [sp, #60]	; 0x3c
 8024f3a:	b1df      	cbz	r7, 8024f74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024f3c:	444b      	add	r3, r9
 8024f3e:	0859      	lsrs	r1, r3, #1
 8024f40:	f013 0f01 	tst.w	r3, #1
 8024f44:	f103 0301 	add.w	r3, r3, #1
 8024f48:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024f4c:	bf0c      	ite	eq
 8024f4e:	f001 010f 	andeq.w	r1, r1, #15
 8024f52:	1109      	asrne	r1, r1, #4
 8024f54:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f58:	b2c9      	uxtb	r1, r1
 8024f5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8024f5c:	0859      	lsrs	r1, r3, #1
 8024f5e:	07db      	lsls	r3, r3, #31
 8024f60:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024f64:	bf54      	ite	pl
 8024f66:	f001 010f 	andpl.w	r1, r1, #15
 8024f6a:	1109      	asrmi	r1, r1, #4
 8024f6c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f70:	b2c9      	uxtb	r1, r1
 8024f72:	9110      	str	r1, [sp, #64]	; 0x40
 8024f74:	b280      	uxth	r0, r0
 8024f76:	b2bf      	uxth	r7, r7
 8024f78:	fb00 f307 	mul.w	r3, r0, r7
 8024f7c:	0100      	lsls	r0, r0, #4
 8024f7e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8024f82:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024f86:	1ac0      	subs	r0, r0, r3
 8024f88:	b2bf      	uxth	r7, r7
 8024f8a:	b280      	uxth	r0, r0
 8024f8c:	1bc9      	subs	r1, r1, r7
 8024f8e:	fa1f fa81 	uxth.w	sl, r1
 8024f92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024f94:	4348      	muls	r0, r1
 8024f96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024f98:	fb02 020a 	mla	r2, r2, sl, r0
 8024f9c:	fb07 2701 	mla	r7, r7, r1, r2
 8024fa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024fa2:	fb03 7302 	mla	r3, r3, r2, r7
 8024fa6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024faa:	b393      	cbz	r3, 8025012 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8024fac:	4a2b      	ldr	r2, [pc, #172]	; (802505c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8024fae:	2bff      	cmp	r3, #255	; 0xff
 8024fb0:	6811      	ldr	r1, [r2, #0]
 8024fb2:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024fb6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024fba:	b2c9      	uxtb	r1, r1
 8024fbc:	d042      	beq.n	8025044 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024fbe:	b298      	uxth	r0, r3
 8024fc0:	43db      	mvns	r3, r3
 8024fc2:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024fc6:	fb11 f100 	smulbb	r1, r1, r0
 8024fca:	b2db      	uxtb	r3, r3
 8024fcc:	fb17 f700 	smulbb	r7, r7, r0
 8024fd0:	fb02 1103 	mla	r1, r2, r3, r1
 8024fd4:	fb1a f000 	smulbb	r0, sl, r0
 8024fd8:	b289      	uxth	r1, r1
 8024fda:	1c4a      	adds	r2, r1, #1
 8024fdc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024fe0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024fe4:	fb02 7703 	mla	r7, r2, r3, r7
 8024fe8:	1209      	asrs	r1, r1, #8
 8024fea:	b2bf      	uxth	r7, r7
 8024fec:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024ff0:	1c7a      	adds	r2, r7, #1
 8024ff2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024ff6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8024ffa:	fb02 0303 	mla	r3, r2, r3, r0
 8024ffe:	123f      	asrs	r7, r7, #8
 8025000:	b29b      	uxth	r3, r3
 8025002:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8025006:	1c5a      	adds	r2, r3, #1
 8025008:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802500c:	121b      	asrs	r3, r3, #8
 802500e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8025012:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025014:	f10c 0c03 	add.w	ip, ip, #3
 8025018:	f10e 3eff 	add.w	lr, lr, #4294967295
 802501c:	441d      	add	r5, r3
 802501e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025020:	441e      	add	r6, r3
 8025022:	e6e7      	b.n	8024df4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8025024:	2f00      	cmp	r7, #0
 8025026:	d0a5      	beq.n	8024f74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025028:	444b      	add	r3, r9
 802502a:	0859      	lsrs	r1, r3, #1
 802502c:	07db      	lsls	r3, r3, #31
 802502e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025032:	bf54      	ite	pl
 8025034:	f001 010f 	andpl.w	r1, r1, #15
 8025038:	1109      	asrmi	r1, r1, #4
 802503a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802503e:	b2c9      	uxtb	r1, r1
 8025040:	910b      	str	r1, [sp, #44]	; 0x2c
 8025042:	e797      	b.n	8024f74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025044:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8025048:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802504c:	f80c ac01 	strb.w	sl, [ip, #-1]
 8025050:	e7df      	b.n	8025012 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025052:	b013      	add	sp, #76	; 0x4c
 8025054:	ecbd 8b08 	vpop	{d8-d11}
 8025058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802505c:	200094e0 	.word	0x200094e0

08025060 <CRC_Lock>:
 8025060:	4a1d      	ldr	r2, [pc, #116]	; (80250d8 <CRC_Lock+0x78>)
 8025062:	b530      	push	{r4, r5, lr}
 8025064:	6813      	ldr	r3, [r2, #0]
 8025066:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802506a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802506e:	f023 0301 	bic.w	r3, r3, #1
 8025072:	6013      	str	r3, [r2, #0]
 8025074:	4b19      	ldr	r3, [pc, #100]	; (80250dc <CRC_Lock+0x7c>)
 8025076:	681a      	ldr	r2, [r3, #0]
 8025078:	4022      	ands	r2, r4
 802507a:	42aa      	cmp	r2, r5
 802507c:	d005      	beq.n	802508a <CRC_Lock+0x2a>
 802507e:	681b      	ldr	r3, [r3, #0]
 8025080:	f24c 2270 	movw	r2, #49776	; 0xc270
 8025084:	4023      	ands	r3, r4
 8025086:	4293      	cmp	r3, r2
 8025088:	d11d      	bne.n	80250c6 <CRC_Lock+0x66>
 802508a:	4b15      	ldr	r3, [pc, #84]	; (80250e0 <CRC_Lock+0x80>)
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	b9d3      	cbnz	r3, 80250c6 <CRC_Lock+0x66>
 8025090:	4a14      	ldr	r2, [pc, #80]	; (80250e4 <CRC_Lock+0x84>)
 8025092:	6813      	ldr	r3, [r2, #0]
 8025094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025098:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 802509c:	d006      	beq.n	80250ac <CRC_Lock+0x4c>
 802509e:	6813      	ldr	r3, [r2, #0]
 80250a0:	f240 4283 	movw	r2, #1155	; 0x483
 80250a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80250a8:	4293      	cmp	r3, r2
 80250aa:	d10c      	bne.n	80250c6 <CRC_Lock+0x66>
 80250ac:	4b0e      	ldr	r3, [pc, #56]	; (80250e8 <CRC_Lock+0x88>)
 80250ae:	2201      	movs	r2, #1
 80250b0:	601a      	str	r2, [r3, #0]
 80250b2:	681a      	ldr	r2, [r3, #0]
 80250b4:	2a00      	cmp	r2, #0
 80250b6:	d1fc      	bne.n	80250b2 <CRC_Lock+0x52>
 80250b8:	4b0c      	ldr	r3, [pc, #48]	; (80250ec <CRC_Lock+0x8c>)
 80250ba:	6018      	str	r0, [r3, #0]
 80250bc:	6818      	ldr	r0, [r3, #0]
 80250be:	1a43      	subs	r3, r0, r1
 80250c0:	4258      	negs	r0, r3
 80250c2:	4158      	adcs	r0, r3
 80250c4:	bd30      	pop	{r4, r5, pc}
 80250c6:	4b0a      	ldr	r3, [pc, #40]	; (80250f0 <CRC_Lock+0x90>)
 80250c8:	2201      	movs	r2, #1
 80250ca:	601a      	str	r2, [r3, #0]
 80250cc:	681a      	ldr	r2, [r3, #0]
 80250ce:	2a00      	cmp	r2, #0
 80250d0:	d1fc      	bne.n	80250cc <CRC_Lock+0x6c>
 80250d2:	4b08      	ldr	r3, [pc, #32]	; (80250f4 <CRC_Lock+0x94>)
 80250d4:	e7f1      	b.n	80250ba <CRC_Lock+0x5a>
 80250d6:	bf00      	nop
 80250d8:	e0002000 	.word	0xe0002000
 80250dc:	e000ed00 	.word	0xe000ed00
 80250e0:	e0042000 	.word	0xe0042000
 80250e4:	5c001000 	.word	0x5c001000
 80250e8:	58024c08 	.word	0x58024c08
 80250ec:	58024c00 	.word	0x58024c00
 80250f0:	40023008 	.word	0x40023008
 80250f4:	40023000 	.word	0x40023000

080250f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80250f8:	6101      	str	r1, [r0, #16]
 80250fa:	4770      	bx	lr

080250fc <_ZN8touchgfx8Gestures4tickEv>:
 80250fc:	7b83      	ldrb	r3, [r0, #14]
 80250fe:	b14b      	cbz	r3, 8025114 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025100:	8903      	ldrh	r3, [r0, #8]
 8025102:	3301      	adds	r3, #1
 8025104:	b29b      	uxth	r3, r3
 8025106:	2b07      	cmp	r3, #7
 8025108:	8103      	strh	r3, [r0, #8]
 802510a:	bf81      	itttt	hi
 802510c:	2300      	movhi	r3, #0
 802510e:	8143      	strhhi	r3, [r0, #10]
 8025110:	8183      	strhhi	r3, [r0, #12]
 8025112:	7383      	strbhi	r3, [r0, #14]
 8025114:	4770      	bx	lr
	...

08025118 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8025118:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802511c:	4604      	mov	r4, r0
 802511e:	4698      	mov	r8, r3
 8025120:	8880      	ldrh	r0, [r0, #4]
 8025122:	4617      	mov	r7, r2
 8025124:	4b1d      	ldr	r3, [pc, #116]	; (802519c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8025126:	460e      	mov	r6, r1
 8025128:	f8ad 0006 	strh.w	r0, [sp, #6]
 802512c:	eba8 0000 	sub.w	r0, r8, r0
 8025130:	9300      	str	r3, [sp, #0]
 8025132:	2300      	movs	r3, #0
 8025134:	b280      	uxth	r0, r0
 8025136:	8aa2      	ldrh	r2, [r4, #20]
 8025138:	f88d 3004 	strb.w	r3, [sp, #4]
 802513c:	b203      	sxth	r3, r0
 802513e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8025142:	88e1      	ldrh	r1, [r4, #6]
 8025144:	2b00      	cmp	r3, #0
 8025146:	f8ad 800a 	strh.w	r8, [sp, #10]
 802514a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802514e:	bfb8      	it	lt
 8025150:	4240      	neglt	r0, r0
 8025152:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025156:	bfb8      	it	lt
 8025158:	b203      	sxthlt	r3, r0
 802515a:	4293      	cmp	r3, r2
 802515c:	dc08      	bgt.n	8025170 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802515e:	1a69      	subs	r1, r5, r1
 8025160:	b289      	uxth	r1, r1
 8025162:	b20b      	sxth	r3, r1
 8025164:	2b00      	cmp	r3, #0
 8025166:	bfbc      	itt	lt
 8025168:	4249      	neglt	r1, r1
 802516a:	b20b      	sxthlt	r3, r1
 802516c:	429a      	cmp	r2, r3
 802516e:	da13      	bge.n	8025198 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8025170:	6920      	ldr	r0, [r4, #16]
 8025172:	4669      	mov	r1, sp
 8025174:	eba8 0606 	sub.w	r6, r8, r6
 8025178:	1bef      	subs	r7, r5, r7
 802517a:	6803      	ldr	r3, [r0, #0]
 802517c:	685b      	ldr	r3, [r3, #4]
 802517e:	4798      	blx	r3
 8025180:	2300      	movs	r3, #0
 8025182:	2001      	movs	r0, #1
 8025184:	8166      	strh	r6, [r4, #10]
 8025186:	8123      	strh	r3, [r4, #8]
 8025188:	81a7      	strh	r7, [r4, #12]
 802518a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802518e:	80e5      	strh	r5, [r4, #6]
 8025190:	73a0      	strb	r0, [r4, #14]
 8025192:	b004      	add	sp, #16
 8025194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025198:	2000      	movs	r0, #0
 802519a:	e7fa      	b.n	8025192 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802519c:	080282d4 	.word	0x080282d4

080251a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80251a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80251a2:	461e      	mov	r6, r3
 80251a4:	1e4b      	subs	r3, r1, #1
 80251a6:	b085      	sub	sp, #20
 80251a8:	4604      	mov	r4, r0
 80251aa:	2b01      	cmp	r3, #1
 80251ac:	460d      	mov	r5, r1
 80251ae:	4617      	mov	r7, r2
 80251b0:	d84b      	bhi.n	802524a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80251b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80251b6:	1cd3      	adds	r3, r2, #3
 80251b8:	b29b      	uxth	r3, r3
 80251ba:	2b06      	cmp	r3, #6
 80251bc:	d916      	bls.n	80251ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80251be:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8025260 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80251c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80251c6:	f8cd c004 	str.w	ip, [sp, #4]
 80251ca:	f04f 0c00 	mov.w	ip, #0
 80251ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80251d2:	6900      	ldr	r0, [r0, #16]
 80251d4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80251d8:	a901      	add	r1, sp, #4
 80251da:	f88d c008 	strb.w	ip, [sp, #8]
 80251de:	f8ad 200a 	strh.w	r2, [sp, #10]
 80251e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251e6:	6803      	ldr	r3, [r0, #0]
 80251e8:	689b      	ldr	r3, [r3, #8]
 80251ea:	4798      	blx	r3
 80251ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80251f0:	1cd3      	adds	r3, r2, #3
 80251f2:	b29b      	uxth	r3, r3
 80251f4:	2b06      	cmp	r3, #6
 80251f6:	d916      	bls.n	8025226 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80251f8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8025260 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80251fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025200:	f8cd c004 	str.w	ip, [sp, #4]
 8025204:	f04f 0c01 	mov.w	ip, #1
 8025208:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802520c:	6920      	ldr	r0, [r4, #16]
 802520e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025212:	a901      	add	r1, sp, #4
 8025214:	f88d c008 	strb.w	ip, [sp, #8]
 8025218:	f8ad 200a 	strh.w	r2, [sp, #10]
 802521c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025220:	6803      	ldr	r3, [r0, #0]
 8025222:	689b      	ldr	r3, [r3, #8]
 8025224:	4798      	blx	r3
 8025226:	4b0d      	ldr	r3, [pc, #52]	; (802525c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8025228:	a901      	add	r1, sp, #4
 802522a:	6920      	ldr	r0, [r4, #16]
 802522c:	9301      	str	r3, [sp, #4]
 802522e:	2300      	movs	r3, #0
 8025230:	f88d 5008 	strb.w	r5, [sp, #8]
 8025234:	f8ad 700a 	strh.w	r7, [sp, #10]
 8025238:	f8ad 600c 	strh.w	r6, [sp, #12]
 802523c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025240:	6803      	ldr	r3, [r0, #0]
 8025242:	681b      	ldr	r3, [r3, #0]
 8025244:	4798      	blx	r3
 8025246:	b005      	add	sp, #20
 8025248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802524a:	2900      	cmp	r1, #0
 802524c:	d1eb      	bne.n	8025226 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802524e:	80a2      	strh	r2, [r4, #4]
 8025250:	80c6      	strh	r6, [r0, #6]
 8025252:	60a1      	str	r1, [r4, #8]
 8025254:	81a1      	strh	r1, [r4, #12]
 8025256:	73a1      	strb	r1, [r4, #14]
 8025258:	e7e5      	b.n	8025226 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802525a:	bf00      	nop
 802525c:	080282c0 	.word	0x080282c0
 8025260:	080282e8 	.word	0x080282e8

08025264 <__aeabi_atexit>:
 8025264:	460b      	mov	r3, r1
 8025266:	4601      	mov	r1, r0
 8025268:	4618      	mov	r0, r3
 802526a:	f000 b853 	b.w	8025314 <__cxa_atexit>

0802526e <_ZdlPvj>:
 802526e:	f000 b812 	b.w	8025296 <_ZdlPv>

08025272 <__cxa_guard_acquire>:
 8025272:	6803      	ldr	r3, [r0, #0]
 8025274:	07db      	lsls	r3, r3, #31
 8025276:	d406      	bmi.n	8025286 <__cxa_guard_acquire+0x14>
 8025278:	7843      	ldrb	r3, [r0, #1]
 802527a:	b103      	cbz	r3, 802527e <__cxa_guard_acquire+0xc>
 802527c:	deff      	udf	#255	; 0xff
 802527e:	2301      	movs	r3, #1
 8025280:	7043      	strb	r3, [r0, #1]
 8025282:	4618      	mov	r0, r3
 8025284:	4770      	bx	lr
 8025286:	2000      	movs	r0, #0
 8025288:	4770      	bx	lr

0802528a <__cxa_guard_release>:
 802528a:	2301      	movs	r3, #1
 802528c:	6003      	str	r3, [r0, #0]
 802528e:	4770      	bx	lr

08025290 <__cxa_pure_virtual>:
 8025290:	b508      	push	{r3, lr}
 8025292:	f000 f80f 	bl	80252b4 <_ZSt9terminatev>

08025296 <_ZdlPv>:
 8025296:	f000 b88f 	b.w	80253b8 <free>

0802529a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802529a:	b508      	push	{r3, lr}
 802529c:	4780      	blx	r0
 802529e:	f000 f80e 	bl	80252be <abort>
	...

080252a4 <_ZSt13get_terminatev>:
 80252a4:	4b02      	ldr	r3, [pc, #8]	; (80252b0 <_ZSt13get_terminatev+0xc>)
 80252a6:	6818      	ldr	r0, [r3, #0]
 80252a8:	f3bf 8f5b 	dmb	ish
 80252ac:	4770      	bx	lr
 80252ae:	bf00      	nop
 80252b0:	200000b4 	.word	0x200000b4

080252b4 <_ZSt9terminatev>:
 80252b4:	b508      	push	{r3, lr}
 80252b6:	f7ff fff5 	bl	80252a4 <_ZSt13get_terminatev>
 80252ba:	f7ff ffee 	bl	802529a <_ZN10__cxxabiv111__terminateEPFvvE>

080252be <abort>:
 80252be:	b508      	push	{r3, lr}
 80252c0:	2006      	movs	r0, #6
 80252c2:	f000 fc67 	bl	8025b94 <raise>
 80252c6:	2001      	movs	r0, #1
 80252c8:	f7dd f874 	bl	80023b4 <_exit>

080252cc <__assert_func>:
 80252cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80252ce:	4614      	mov	r4, r2
 80252d0:	461a      	mov	r2, r3
 80252d2:	4b09      	ldr	r3, [pc, #36]	; (80252f8 <__assert_func+0x2c>)
 80252d4:	681b      	ldr	r3, [r3, #0]
 80252d6:	4605      	mov	r5, r0
 80252d8:	68d8      	ldr	r0, [r3, #12]
 80252da:	b14c      	cbz	r4, 80252f0 <__assert_func+0x24>
 80252dc:	4b07      	ldr	r3, [pc, #28]	; (80252fc <__assert_func+0x30>)
 80252de:	9100      	str	r1, [sp, #0]
 80252e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80252e4:	4906      	ldr	r1, [pc, #24]	; (8025300 <__assert_func+0x34>)
 80252e6:	462b      	mov	r3, r5
 80252e8:	f000 f828 	bl	802533c <fiprintf>
 80252ec:	f7ff ffe7 	bl	80252be <abort>
 80252f0:	4b04      	ldr	r3, [pc, #16]	; (8025304 <__assert_func+0x38>)
 80252f2:	461c      	mov	r4, r3
 80252f4:	e7f3      	b.n	80252de <__assert_func+0x12>
 80252f6:	bf00      	nop
 80252f8:	200000b8 	.word	0x200000b8
 80252fc:	08029666 	.word	0x08029666
 8025300:	08029673 	.word	0x08029673
 8025304:	080296a1 	.word	0x080296a1

08025308 <atexit>:
 8025308:	2300      	movs	r3, #0
 802530a:	4601      	mov	r1, r0
 802530c:	461a      	mov	r2, r3
 802530e:	4618      	mov	r0, r3
 8025310:	f000 bd1c 	b.w	8025d4c <__register_exitproc>

08025314 <__cxa_atexit>:
 8025314:	b510      	push	{r4, lr}
 8025316:	4c05      	ldr	r4, [pc, #20]	; (802532c <__cxa_atexit+0x18>)
 8025318:	4613      	mov	r3, r2
 802531a:	b12c      	cbz	r4, 8025328 <__cxa_atexit+0x14>
 802531c:	460a      	mov	r2, r1
 802531e:	4601      	mov	r1, r0
 8025320:	2002      	movs	r0, #2
 8025322:	f000 fd13 	bl	8025d4c <__register_exitproc>
 8025326:	bd10      	pop	{r4, pc}
 8025328:	4620      	mov	r0, r4
 802532a:	e7fc      	b.n	8025326 <__cxa_atexit+0x12>
 802532c:	08025d4d 	.word	0x08025d4d

08025330 <__errno>:
 8025330:	4b01      	ldr	r3, [pc, #4]	; (8025338 <__errno+0x8>)
 8025332:	6818      	ldr	r0, [r3, #0]
 8025334:	4770      	bx	lr
 8025336:	bf00      	nop
 8025338:	200000b8 	.word	0x200000b8

0802533c <fiprintf>:
 802533c:	b40e      	push	{r1, r2, r3}
 802533e:	b503      	push	{r0, r1, lr}
 8025340:	4601      	mov	r1, r0
 8025342:	ab03      	add	r3, sp, #12
 8025344:	4805      	ldr	r0, [pc, #20]	; (802535c <fiprintf+0x20>)
 8025346:	f853 2b04 	ldr.w	r2, [r3], #4
 802534a:	6800      	ldr	r0, [r0, #0]
 802534c:	9301      	str	r3, [sp, #4]
 802534e:	f000 f925 	bl	802559c <_vfiprintf_r>
 8025352:	b002      	add	sp, #8
 8025354:	f85d eb04 	ldr.w	lr, [sp], #4
 8025358:	b003      	add	sp, #12
 802535a:	4770      	bx	lr
 802535c:	200000b8 	.word	0x200000b8

08025360 <__libc_init_array>:
 8025360:	b570      	push	{r4, r5, r6, lr}
 8025362:	4d0d      	ldr	r5, [pc, #52]	; (8025398 <__libc_init_array+0x38>)
 8025364:	4c0d      	ldr	r4, [pc, #52]	; (802539c <__libc_init_array+0x3c>)
 8025366:	1b64      	subs	r4, r4, r5
 8025368:	10a4      	asrs	r4, r4, #2
 802536a:	2600      	movs	r6, #0
 802536c:	42a6      	cmp	r6, r4
 802536e:	d109      	bne.n	8025384 <__libc_init_array+0x24>
 8025370:	4d0b      	ldr	r5, [pc, #44]	; (80253a0 <__libc_init_array+0x40>)
 8025372:	4c0c      	ldr	r4, [pc, #48]	; (80253a4 <__libc_init_array+0x44>)
 8025374:	f001 f824 	bl	80263c0 <_init>
 8025378:	1b64      	subs	r4, r4, r5
 802537a:	10a4      	asrs	r4, r4, #2
 802537c:	2600      	movs	r6, #0
 802537e:	42a6      	cmp	r6, r4
 8025380:	d105      	bne.n	802538e <__libc_init_array+0x2e>
 8025382:	bd70      	pop	{r4, r5, r6, pc}
 8025384:	f855 3b04 	ldr.w	r3, [r5], #4
 8025388:	4798      	blx	r3
 802538a:	3601      	adds	r6, #1
 802538c:	e7ee      	b.n	802536c <__libc_init_array+0xc>
 802538e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025392:	4798      	blx	r3
 8025394:	3601      	adds	r6, #1
 8025396:	e7f2      	b.n	802537e <__libc_init_array+0x1e>
 8025398:	08029908 	.word	0x08029908
 802539c:	08029908 	.word	0x08029908
 80253a0:	08029908 	.word	0x08029908
 80253a4:	0802991c 	.word	0x0802991c

080253a8 <malloc>:
 80253a8:	4b02      	ldr	r3, [pc, #8]	; (80253b4 <malloc+0xc>)
 80253aa:	4601      	mov	r1, r0
 80253ac:	6818      	ldr	r0, [r3, #0]
 80253ae:	f000 b871 	b.w	8025494 <_malloc_r>
 80253b2:	bf00      	nop
 80253b4:	200000b8 	.word	0x200000b8

080253b8 <free>:
 80253b8:	4b02      	ldr	r3, [pc, #8]	; (80253c4 <free+0xc>)
 80253ba:	4601      	mov	r1, r0
 80253bc:	6818      	ldr	r0, [r3, #0]
 80253be:	f000 b819 	b.w	80253f4 <_free_r>
 80253c2:	bf00      	nop
 80253c4:	200000b8 	.word	0x200000b8

080253c8 <memcpy>:
 80253c8:	440a      	add	r2, r1
 80253ca:	4291      	cmp	r1, r2
 80253cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80253d0:	d100      	bne.n	80253d4 <memcpy+0xc>
 80253d2:	4770      	bx	lr
 80253d4:	b510      	push	{r4, lr}
 80253d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80253da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80253de:	4291      	cmp	r1, r2
 80253e0:	d1f9      	bne.n	80253d6 <memcpy+0xe>
 80253e2:	bd10      	pop	{r4, pc}

080253e4 <memset>:
 80253e4:	4402      	add	r2, r0
 80253e6:	4603      	mov	r3, r0
 80253e8:	4293      	cmp	r3, r2
 80253ea:	d100      	bne.n	80253ee <memset+0xa>
 80253ec:	4770      	bx	lr
 80253ee:	f803 1b01 	strb.w	r1, [r3], #1
 80253f2:	e7f9      	b.n	80253e8 <memset+0x4>

080253f4 <_free_r>:
 80253f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80253f6:	2900      	cmp	r1, #0
 80253f8:	d048      	beq.n	802548c <_free_r+0x98>
 80253fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80253fe:	9001      	str	r0, [sp, #4]
 8025400:	2b00      	cmp	r3, #0
 8025402:	f1a1 0404 	sub.w	r4, r1, #4
 8025406:	bfb8      	it	lt
 8025408:	18e4      	addlt	r4, r4, r3
 802540a:	f000 ff21 	bl	8026250 <__malloc_lock>
 802540e:	4a20      	ldr	r2, [pc, #128]	; (8025490 <_free_r+0x9c>)
 8025410:	9801      	ldr	r0, [sp, #4]
 8025412:	6813      	ldr	r3, [r2, #0]
 8025414:	4615      	mov	r5, r2
 8025416:	b933      	cbnz	r3, 8025426 <_free_r+0x32>
 8025418:	6063      	str	r3, [r4, #4]
 802541a:	6014      	str	r4, [r2, #0]
 802541c:	b003      	add	sp, #12
 802541e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025422:	f000 bf1b 	b.w	802625c <__malloc_unlock>
 8025426:	42a3      	cmp	r3, r4
 8025428:	d90b      	bls.n	8025442 <_free_r+0x4e>
 802542a:	6821      	ldr	r1, [r4, #0]
 802542c:	1862      	adds	r2, r4, r1
 802542e:	4293      	cmp	r3, r2
 8025430:	bf04      	itt	eq
 8025432:	681a      	ldreq	r2, [r3, #0]
 8025434:	685b      	ldreq	r3, [r3, #4]
 8025436:	6063      	str	r3, [r4, #4]
 8025438:	bf04      	itt	eq
 802543a:	1852      	addeq	r2, r2, r1
 802543c:	6022      	streq	r2, [r4, #0]
 802543e:	602c      	str	r4, [r5, #0]
 8025440:	e7ec      	b.n	802541c <_free_r+0x28>
 8025442:	461a      	mov	r2, r3
 8025444:	685b      	ldr	r3, [r3, #4]
 8025446:	b10b      	cbz	r3, 802544c <_free_r+0x58>
 8025448:	42a3      	cmp	r3, r4
 802544a:	d9fa      	bls.n	8025442 <_free_r+0x4e>
 802544c:	6811      	ldr	r1, [r2, #0]
 802544e:	1855      	adds	r5, r2, r1
 8025450:	42a5      	cmp	r5, r4
 8025452:	d10b      	bne.n	802546c <_free_r+0x78>
 8025454:	6824      	ldr	r4, [r4, #0]
 8025456:	4421      	add	r1, r4
 8025458:	1854      	adds	r4, r2, r1
 802545a:	42a3      	cmp	r3, r4
 802545c:	6011      	str	r1, [r2, #0]
 802545e:	d1dd      	bne.n	802541c <_free_r+0x28>
 8025460:	681c      	ldr	r4, [r3, #0]
 8025462:	685b      	ldr	r3, [r3, #4]
 8025464:	6053      	str	r3, [r2, #4]
 8025466:	4421      	add	r1, r4
 8025468:	6011      	str	r1, [r2, #0]
 802546a:	e7d7      	b.n	802541c <_free_r+0x28>
 802546c:	d902      	bls.n	8025474 <_free_r+0x80>
 802546e:	230c      	movs	r3, #12
 8025470:	6003      	str	r3, [r0, #0]
 8025472:	e7d3      	b.n	802541c <_free_r+0x28>
 8025474:	6825      	ldr	r5, [r4, #0]
 8025476:	1961      	adds	r1, r4, r5
 8025478:	428b      	cmp	r3, r1
 802547a:	bf04      	itt	eq
 802547c:	6819      	ldreq	r1, [r3, #0]
 802547e:	685b      	ldreq	r3, [r3, #4]
 8025480:	6063      	str	r3, [r4, #4]
 8025482:	bf04      	itt	eq
 8025484:	1949      	addeq	r1, r1, r5
 8025486:	6021      	streq	r1, [r4, #0]
 8025488:	6054      	str	r4, [r2, #4]
 802548a:	e7c7      	b.n	802541c <_free_r+0x28>
 802548c:	b003      	add	sp, #12
 802548e:	bd30      	pop	{r4, r5, pc}
 8025490:	200095b4 	.word	0x200095b4

08025494 <_malloc_r>:
 8025494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025496:	1ccd      	adds	r5, r1, #3
 8025498:	f025 0503 	bic.w	r5, r5, #3
 802549c:	3508      	adds	r5, #8
 802549e:	2d0c      	cmp	r5, #12
 80254a0:	bf38      	it	cc
 80254a2:	250c      	movcc	r5, #12
 80254a4:	2d00      	cmp	r5, #0
 80254a6:	4606      	mov	r6, r0
 80254a8:	db01      	blt.n	80254ae <_malloc_r+0x1a>
 80254aa:	42a9      	cmp	r1, r5
 80254ac:	d903      	bls.n	80254b6 <_malloc_r+0x22>
 80254ae:	230c      	movs	r3, #12
 80254b0:	6033      	str	r3, [r6, #0]
 80254b2:	2000      	movs	r0, #0
 80254b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80254b6:	f000 fecb 	bl	8026250 <__malloc_lock>
 80254ba:	4921      	ldr	r1, [pc, #132]	; (8025540 <_malloc_r+0xac>)
 80254bc:	680a      	ldr	r2, [r1, #0]
 80254be:	4614      	mov	r4, r2
 80254c0:	b99c      	cbnz	r4, 80254ea <_malloc_r+0x56>
 80254c2:	4f20      	ldr	r7, [pc, #128]	; (8025544 <_malloc_r+0xb0>)
 80254c4:	683b      	ldr	r3, [r7, #0]
 80254c6:	b923      	cbnz	r3, 80254d2 <_malloc_r+0x3e>
 80254c8:	4621      	mov	r1, r4
 80254ca:	4630      	mov	r0, r6
 80254cc:	f000 fb2a 	bl	8025b24 <_sbrk_r>
 80254d0:	6038      	str	r0, [r7, #0]
 80254d2:	4629      	mov	r1, r5
 80254d4:	4630      	mov	r0, r6
 80254d6:	f000 fb25 	bl	8025b24 <_sbrk_r>
 80254da:	1c43      	adds	r3, r0, #1
 80254dc:	d123      	bne.n	8025526 <_malloc_r+0x92>
 80254de:	230c      	movs	r3, #12
 80254e0:	6033      	str	r3, [r6, #0]
 80254e2:	4630      	mov	r0, r6
 80254e4:	f000 feba 	bl	802625c <__malloc_unlock>
 80254e8:	e7e3      	b.n	80254b2 <_malloc_r+0x1e>
 80254ea:	6823      	ldr	r3, [r4, #0]
 80254ec:	1b5b      	subs	r3, r3, r5
 80254ee:	d417      	bmi.n	8025520 <_malloc_r+0x8c>
 80254f0:	2b0b      	cmp	r3, #11
 80254f2:	d903      	bls.n	80254fc <_malloc_r+0x68>
 80254f4:	6023      	str	r3, [r4, #0]
 80254f6:	441c      	add	r4, r3
 80254f8:	6025      	str	r5, [r4, #0]
 80254fa:	e004      	b.n	8025506 <_malloc_r+0x72>
 80254fc:	6863      	ldr	r3, [r4, #4]
 80254fe:	42a2      	cmp	r2, r4
 8025500:	bf0c      	ite	eq
 8025502:	600b      	streq	r3, [r1, #0]
 8025504:	6053      	strne	r3, [r2, #4]
 8025506:	4630      	mov	r0, r6
 8025508:	f000 fea8 	bl	802625c <__malloc_unlock>
 802550c:	f104 000b 	add.w	r0, r4, #11
 8025510:	1d23      	adds	r3, r4, #4
 8025512:	f020 0007 	bic.w	r0, r0, #7
 8025516:	1ac2      	subs	r2, r0, r3
 8025518:	d0cc      	beq.n	80254b4 <_malloc_r+0x20>
 802551a:	1a1b      	subs	r3, r3, r0
 802551c:	50a3      	str	r3, [r4, r2]
 802551e:	e7c9      	b.n	80254b4 <_malloc_r+0x20>
 8025520:	4622      	mov	r2, r4
 8025522:	6864      	ldr	r4, [r4, #4]
 8025524:	e7cc      	b.n	80254c0 <_malloc_r+0x2c>
 8025526:	1cc4      	adds	r4, r0, #3
 8025528:	f024 0403 	bic.w	r4, r4, #3
 802552c:	42a0      	cmp	r0, r4
 802552e:	d0e3      	beq.n	80254f8 <_malloc_r+0x64>
 8025530:	1a21      	subs	r1, r4, r0
 8025532:	4630      	mov	r0, r6
 8025534:	f000 faf6 	bl	8025b24 <_sbrk_r>
 8025538:	3001      	adds	r0, #1
 802553a:	d1dd      	bne.n	80254f8 <_malloc_r+0x64>
 802553c:	e7cf      	b.n	80254de <_malloc_r+0x4a>
 802553e:	bf00      	nop
 8025540:	200095b4 	.word	0x200095b4
 8025544:	200095b8 	.word	0x200095b8

08025548 <__sfputc_r>:
 8025548:	6893      	ldr	r3, [r2, #8]
 802554a:	3b01      	subs	r3, #1
 802554c:	2b00      	cmp	r3, #0
 802554e:	b410      	push	{r4}
 8025550:	6093      	str	r3, [r2, #8]
 8025552:	da08      	bge.n	8025566 <__sfputc_r+0x1e>
 8025554:	6994      	ldr	r4, [r2, #24]
 8025556:	42a3      	cmp	r3, r4
 8025558:	db01      	blt.n	802555e <__sfputc_r+0x16>
 802555a:	290a      	cmp	r1, #10
 802555c:	d103      	bne.n	8025566 <__sfputc_r+0x1e>
 802555e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025562:	f000 bb33 	b.w	8025bcc <__swbuf_r>
 8025566:	6813      	ldr	r3, [r2, #0]
 8025568:	1c58      	adds	r0, r3, #1
 802556a:	6010      	str	r0, [r2, #0]
 802556c:	7019      	strb	r1, [r3, #0]
 802556e:	4608      	mov	r0, r1
 8025570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025574:	4770      	bx	lr

08025576 <__sfputs_r>:
 8025576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025578:	4606      	mov	r6, r0
 802557a:	460f      	mov	r7, r1
 802557c:	4614      	mov	r4, r2
 802557e:	18d5      	adds	r5, r2, r3
 8025580:	42ac      	cmp	r4, r5
 8025582:	d101      	bne.n	8025588 <__sfputs_r+0x12>
 8025584:	2000      	movs	r0, #0
 8025586:	e007      	b.n	8025598 <__sfputs_r+0x22>
 8025588:	f814 1b01 	ldrb.w	r1, [r4], #1
 802558c:	463a      	mov	r2, r7
 802558e:	4630      	mov	r0, r6
 8025590:	f7ff ffda 	bl	8025548 <__sfputc_r>
 8025594:	1c43      	adds	r3, r0, #1
 8025596:	d1f3      	bne.n	8025580 <__sfputs_r+0xa>
 8025598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802559c <_vfiprintf_r>:
 802559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255a0:	460d      	mov	r5, r1
 80255a2:	b09d      	sub	sp, #116	; 0x74
 80255a4:	4614      	mov	r4, r2
 80255a6:	4698      	mov	r8, r3
 80255a8:	4606      	mov	r6, r0
 80255aa:	b118      	cbz	r0, 80255b4 <_vfiprintf_r+0x18>
 80255ac:	6983      	ldr	r3, [r0, #24]
 80255ae:	b90b      	cbnz	r3, 80255b4 <_vfiprintf_r+0x18>
 80255b0:	f000 fd48 	bl	8026044 <__sinit>
 80255b4:	4b89      	ldr	r3, [pc, #548]	; (80257dc <_vfiprintf_r+0x240>)
 80255b6:	429d      	cmp	r5, r3
 80255b8:	d11b      	bne.n	80255f2 <_vfiprintf_r+0x56>
 80255ba:	6875      	ldr	r5, [r6, #4]
 80255bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80255be:	07d9      	lsls	r1, r3, #31
 80255c0:	d405      	bmi.n	80255ce <_vfiprintf_r+0x32>
 80255c2:	89ab      	ldrh	r3, [r5, #12]
 80255c4:	059a      	lsls	r2, r3, #22
 80255c6:	d402      	bmi.n	80255ce <_vfiprintf_r+0x32>
 80255c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80255ca:	f000 fdd9 	bl	8026180 <__retarget_lock_acquire_recursive>
 80255ce:	89ab      	ldrh	r3, [r5, #12]
 80255d0:	071b      	lsls	r3, r3, #28
 80255d2:	d501      	bpl.n	80255d8 <_vfiprintf_r+0x3c>
 80255d4:	692b      	ldr	r3, [r5, #16]
 80255d6:	b9eb      	cbnz	r3, 8025614 <_vfiprintf_r+0x78>
 80255d8:	4629      	mov	r1, r5
 80255da:	4630      	mov	r0, r6
 80255dc:	f000 fb48 	bl	8025c70 <__swsetup_r>
 80255e0:	b1c0      	cbz	r0, 8025614 <_vfiprintf_r+0x78>
 80255e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80255e4:	07dc      	lsls	r4, r3, #31
 80255e6:	d50e      	bpl.n	8025606 <_vfiprintf_r+0x6a>
 80255e8:	f04f 30ff 	mov.w	r0, #4294967295
 80255ec:	b01d      	add	sp, #116	; 0x74
 80255ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255f2:	4b7b      	ldr	r3, [pc, #492]	; (80257e0 <_vfiprintf_r+0x244>)
 80255f4:	429d      	cmp	r5, r3
 80255f6:	d101      	bne.n	80255fc <_vfiprintf_r+0x60>
 80255f8:	68b5      	ldr	r5, [r6, #8]
 80255fa:	e7df      	b.n	80255bc <_vfiprintf_r+0x20>
 80255fc:	4b79      	ldr	r3, [pc, #484]	; (80257e4 <_vfiprintf_r+0x248>)
 80255fe:	429d      	cmp	r5, r3
 8025600:	bf08      	it	eq
 8025602:	68f5      	ldreq	r5, [r6, #12]
 8025604:	e7da      	b.n	80255bc <_vfiprintf_r+0x20>
 8025606:	89ab      	ldrh	r3, [r5, #12]
 8025608:	0598      	lsls	r0, r3, #22
 802560a:	d4ed      	bmi.n	80255e8 <_vfiprintf_r+0x4c>
 802560c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802560e:	f000 fdb9 	bl	8026184 <__retarget_lock_release_recursive>
 8025612:	e7e9      	b.n	80255e8 <_vfiprintf_r+0x4c>
 8025614:	2300      	movs	r3, #0
 8025616:	9309      	str	r3, [sp, #36]	; 0x24
 8025618:	2320      	movs	r3, #32
 802561a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802561e:	f8cd 800c 	str.w	r8, [sp, #12]
 8025622:	2330      	movs	r3, #48	; 0x30
 8025624:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80257e8 <_vfiprintf_r+0x24c>
 8025628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802562c:	f04f 0901 	mov.w	r9, #1
 8025630:	4623      	mov	r3, r4
 8025632:	469a      	mov	sl, r3
 8025634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025638:	b10a      	cbz	r2, 802563e <_vfiprintf_r+0xa2>
 802563a:	2a25      	cmp	r2, #37	; 0x25
 802563c:	d1f9      	bne.n	8025632 <_vfiprintf_r+0x96>
 802563e:	ebba 0b04 	subs.w	fp, sl, r4
 8025642:	d00b      	beq.n	802565c <_vfiprintf_r+0xc0>
 8025644:	465b      	mov	r3, fp
 8025646:	4622      	mov	r2, r4
 8025648:	4629      	mov	r1, r5
 802564a:	4630      	mov	r0, r6
 802564c:	f7ff ff93 	bl	8025576 <__sfputs_r>
 8025650:	3001      	adds	r0, #1
 8025652:	f000 80aa 	beq.w	80257aa <_vfiprintf_r+0x20e>
 8025656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025658:	445a      	add	r2, fp
 802565a:	9209      	str	r2, [sp, #36]	; 0x24
 802565c:	f89a 3000 	ldrb.w	r3, [sl]
 8025660:	2b00      	cmp	r3, #0
 8025662:	f000 80a2 	beq.w	80257aa <_vfiprintf_r+0x20e>
 8025666:	2300      	movs	r3, #0
 8025668:	f04f 32ff 	mov.w	r2, #4294967295
 802566c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025670:	f10a 0a01 	add.w	sl, sl, #1
 8025674:	9304      	str	r3, [sp, #16]
 8025676:	9307      	str	r3, [sp, #28]
 8025678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802567c:	931a      	str	r3, [sp, #104]	; 0x68
 802567e:	4654      	mov	r4, sl
 8025680:	2205      	movs	r2, #5
 8025682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025686:	4858      	ldr	r0, [pc, #352]	; (80257e8 <_vfiprintf_r+0x24c>)
 8025688:	f7da fdc2 	bl	8000210 <memchr>
 802568c:	9a04      	ldr	r2, [sp, #16]
 802568e:	b9d8      	cbnz	r0, 80256c8 <_vfiprintf_r+0x12c>
 8025690:	06d1      	lsls	r1, r2, #27
 8025692:	bf44      	itt	mi
 8025694:	2320      	movmi	r3, #32
 8025696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802569a:	0713      	lsls	r3, r2, #28
 802569c:	bf44      	itt	mi
 802569e:	232b      	movmi	r3, #43	; 0x2b
 80256a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80256a4:	f89a 3000 	ldrb.w	r3, [sl]
 80256a8:	2b2a      	cmp	r3, #42	; 0x2a
 80256aa:	d015      	beq.n	80256d8 <_vfiprintf_r+0x13c>
 80256ac:	9a07      	ldr	r2, [sp, #28]
 80256ae:	4654      	mov	r4, sl
 80256b0:	2000      	movs	r0, #0
 80256b2:	f04f 0c0a 	mov.w	ip, #10
 80256b6:	4621      	mov	r1, r4
 80256b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80256bc:	3b30      	subs	r3, #48	; 0x30
 80256be:	2b09      	cmp	r3, #9
 80256c0:	d94e      	bls.n	8025760 <_vfiprintf_r+0x1c4>
 80256c2:	b1b0      	cbz	r0, 80256f2 <_vfiprintf_r+0x156>
 80256c4:	9207      	str	r2, [sp, #28]
 80256c6:	e014      	b.n	80256f2 <_vfiprintf_r+0x156>
 80256c8:	eba0 0308 	sub.w	r3, r0, r8
 80256cc:	fa09 f303 	lsl.w	r3, r9, r3
 80256d0:	4313      	orrs	r3, r2
 80256d2:	9304      	str	r3, [sp, #16]
 80256d4:	46a2      	mov	sl, r4
 80256d6:	e7d2      	b.n	802567e <_vfiprintf_r+0xe2>
 80256d8:	9b03      	ldr	r3, [sp, #12]
 80256da:	1d19      	adds	r1, r3, #4
 80256dc:	681b      	ldr	r3, [r3, #0]
 80256de:	9103      	str	r1, [sp, #12]
 80256e0:	2b00      	cmp	r3, #0
 80256e2:	bfbb      	ittet	lt
 80256e4:	425b      	neglt	r3, r3
 80256e6:	f042 0202 	orrlt.w	r2, r2, #2
 80256ea:	9307      	strge	r3, [sp, #28]
 80256ec:	9307      	strlt	r3, [sp, #28]
 80256ee:	bfb8      	it	lt
 80256f0:	9204      	strlt	r2, [sp, #16]
 80256f2:	7823      	ldrb	r3, [r4, #0]
 80256f4:	2b2e      	cmp	r3, #46	; 0x2e
 80256f6:	d10c      	bne.n	8025712 <_vfiprintf_r+0x176>
 80256f8:	7863      	ldrb	r3, [r4, #1]
 80256fa:	2b2a      	cmp	r3, #42	; 0x2a
 80256fc:	d135      	bne.n	802576a <_vfiprintf_r+0x1ce>
 80256fe:	9b03      	ldr	r3, [sp, #12]
 8025700:	1d1a      	adds	r2, r3, #4
 8025702:	681b      	ldr	r3, [r3, #0]
 8025704:	9203      	str	r2, [sp, #12]
 8025706:	2b00      	cmp	r3, #0
 8025708:	bfb8      	it	lt
 802570a:	f04f 33ff 	movlt.w	r3, #4294967295
 802570e:	3402      	adds	r4, #2
 8025710:	9305      	str	r3, [sp, #20]
 8025712:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80257f8 <_vfiprintf_r+0x25c>
 8025716:	7821      	ldrb	r1, [r4, #0]
 8025718:	2203      	movs	r2, #3
 802571a:	4650      	mov	r0, sl
 802571c:	f7da fd78 	bl	8000210 <memchr>
 8025720:	b140      	cbz	r0, 8025734 <_vfiprintf_r+0x198>
 8025722:	2340      	movs	r3, #64	; 0x40
 8025724:	eba0 000a 	sub.w	r0, r0, sl
 8025728:	fa03 f000 	lsl.w	r0, r3, r0
 802572c:	9b04      	ldr	r3, [sp, #16]
 802572e:	4303      	orrs	r3, r0
 8025730:	3401      	adds	r4, #1
 8025732:	9304      	str	r3, [sp, #16]
 8025734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025738:	482c      	ldr	r0, [pc, #176]	; (80257ec <_vfiprintf_r+0x250>)
 802573a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802573e:	2206      	movs	r2, #6
 8025740:	f7da fd66 	bl	8000210 <memchr>
 8025744:	2800      	cmp	r0, #0
 8025746:	d03f      	beq.n	80257c8 <_vfiprintf_r+0x22c>
 8025748:	4b29      	ldr	r3, [pc, #164]	; (80257f0 <_vfiprintf_r+0x254>)
 802574a:	bb1b      	cbnz	r3, 8025794 <_vfiprintf_r+0x1f8>
 802574c:	9b03      	ldr	r3, [sp, #12]
 802574e:	3307      	adds	r3, #7
 8025750:	f023 0307 	bic.w	r3, r3, #7
 8025754:	3308      	adds	r3, #8
 8025756:	9303      	str	r3, [sp, #12]
 8025758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802575a:	443b      	add	r3, r7
 802575c:	9309      	str	r3, [sp, #36]	; 0x24
 802575e:	e767      	b.n	8025630 <_vfiprintf_r+0x94>
 8025760:	fb0c 3202 	mla	r2, ip, r2, r3
 8025764:	460c      	mov	r4, r1
 8025766:	2001      	movs	r0, #1
 8025768:	e7a5      	b.n	80256b6 <_vfiprintf_r+0x11a>
 802576a:	2300      	movs	r3, #0
 802576c:	3401      	adds	r4, #1
 802576e:	9305      	str	r3, [sp, #20]
 8025770:	4619      	mov	r1, r3
 8025772:	f04f 0c0a 	mov.w	ip, #10
 8025776:	4620      	mov	r0, r4
 8025778:	f810 2b01 	ldrb.w	r2, [r0], #1
 802577c:	3a30      	subs	r2, #48	; 0x30
 802577e:	2a09      	cmp	r2, #9
 8025780:	d903      	bls.n	802578a <_vfiprintf_r+0x1ee>
 8025782:	2b00      	cmp	r3, #0
 8025784:	d0c5      	beq.n	8025712 <_vfiprintf_r+0x176>
 8025786:	9105      	str	r1, [sp, #20]
 8025788:	e7c3      	b.n	8025712 <_vfiprintf_r+0x176>
 802578a:	fb0c 2101 	mla	r1, ip, r1, r2
 802578e:	4604      	mov	r4, r0
 8025790:	2301      	movs	r3, #1
 8025792:	e7f0      	b.n	8025776 <_vfiprintf_r+0x1da>
 8025794:	ab03      	add	r3, sp, #12
 8025796:	9300      	str	r3, [sp, #0]
 8025798:	462a      	mov	r2, r5
 802579a:	4b16      	ldr	r3, [pc, #88]	; (80257f4 <_vfiprintf_r+0x258>)
 802579c:	a904      	add	r1, sp, #16
 802579e:	4630      	mov	r0, r6
 80257a0:	f3af 8000 	nop.w
 80257a4:	4607      	mov	r7, r0
 80257a6:	1c78      	adds	r0, r7, #1
 80257a8:	d1d6      	bne.n	8025758 <_vfiprintf_r+0x1bc>
 80257aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80257ac:	07d9      	lsls	r1, r3, #31
 80257ae:	d405      	bmi.n	80257bc <_vfiprintf_r+0x220>
 80257b0:	89ab      	ldrh	r3, [r5, #12]
 80257b2:	059a      	lsls	r2, r3, #22
 80257b4:	d402      	bmi.n	80257bc <_vfiprintf_r+0x220>
 80257b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80257b8:	f000 fce4 	bl	8026184 <__retarget_lock_release_recursive>
 80257bc:	89ab      	ldrh	r3, [r5, #12]
 80257be:	065b      	lsls	r3, r3, #25
 80257c0:	f53f af12 	bmi.w	80255e8 <_vfiprintf_r+0x4c>
 80257c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80257c6:	e711      	b.n	80255ec <_vfiprintf_r+0x50>
 80257c8:	ab03      	add	r3, sp, #12
 80257ca:	9300      	str	r3, [sp, #0]
 80257cc:	462a      	mov	r2, r5
 80257ce:	4b09      	ldr	r3, [pc, #36]	; (80257f4 <_vfiprintf_r+0x258>)
 80257d0:	a904      	add	r1, sp, #16
 80257d2:	4630      	mov	r0, r6
 80257d4:	f000 f880 	bl	80258d8 <_printf_i>
 80257d8:	e7e4      	b.n	80257a4 <_vfiprintf_r+0x208>
 80257da:	bf00      	nop
 80257dc:	08029700 	.word	0x08029700
 80257e0:	08029720 	.word	0x08029720
 80257e4:	080296e0 	.word	0x080296e0
 80257e8:	080296a8 	.word	0x080296a8
 80257ec:	080296b2 	.word	0x080296b2
 80257f0:	00000000 	.word	0x00000000
 80257f4:	08025577 	.word	0x08025577
 80257f8:	080296ae 	.word	0x080296ae

080257fc <_printf_common>:
 80257fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025800:	4616      	mov	r6, r2
 8025802:	4699      	mov	r9, r3
 8025804:	688a      	ldr	r2, [r1, #8]
 8025806:	690b      	ldr	r3, [r1, #16]
 8025808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802580c:	4293      	cmp	r3, r2
 802580e:	bfb8      	it	lt
 8025810:	4613      	movlt	r3, r2
 8025812:	6033      	str	r3, [r6, #0]
 8025814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025818:	4607      	mov	r7, r0
 802581a:	460c      	mov	r4, r1
 802581c:	b10a      	cbz	r2, 8025822 <_printf_common+0x26>
 802581e:	3301      	adds	r3, #1
 8025820:	6033      	str	r3, [r6, #0]
 8025822:	6823      	ldr	r3, [r4, #0]
 8025824:	0699      	lsls	r1, r3, #26
 8025826:	bf42      	ittt	mi
 8025828:	6833      	ldrmi	r3, [r6, #0]
 802582a:	3302      	addmi	r3, #2
 802582c:	6033      	strmi	r3, [r6, #0]
 802582e:	6825      	ldr	r5, [r4, #0]
 8025830:	f015 0506 	ands.w	r5, r5, #6
 8025834:	d106      	bne.n	8025844 <_printf_common+0x48>
 8025836:	f104 0a19 	add.w	sl, r4, #25
 802583a:	68e3      	ldr	r3, [r4, #12]
 802583c:	6832      	ldr	r2, [r6, #0]
 802583e:	1a9b      	subs	r3, r3, r2
 8025840:	42ab      	cmp	r3, r5
 8025842:	dc26      	bgt.n	8025892 <_printf_common+0x96>
 8025844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025848:	1e13      	subs	r3, r2, #0
 802584a:	6822      	ldr	r2, [r4, #0]
 802584c:	bf18      	it	ne
 802584e:	2301      	movne	r3, #1
 8025850:	0692      	lsls	r2, r2, #26
 8025852:	d42b      	bmi.n	80258ac <_printf_common+0xb0>
 8025854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025858:	4649      	mov	r1, r9
 802585a:	4638      	mov	r0, r7
 802585c:	47c0      	blx	r8
 802585e:	3001      	adds	r0, #1
 8025860:	d01e      	beq.n	80258a0 <_printf_common+0xa4>
 8025862:	6823      	ldr	r3, [r4, #0]
 8025864:	68e5      	ldr	r5, [r4, #12]
 8025866:	6832      	ldr	r2, [r6, #0]
 8025868:	f003 0306 	and.w	r3, r3, #6
 802586c:	2b04      	cmp	r3, #4
 802586e:	bf08      	it	eq
 8025870:	1aad      	subeq	r5, r5, r2
 8025872:	68a3      	ldr	r3, [r4, #8]
 8025874:	6922      	ldr	r2, [r4, #16]
 8025876:	bf0c      	ite	eq
 8025878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802587c:	2500      	movne	r5, #0
 802587e:	4293      	cmp	r3, r2
 8025880:	bfc4      	itt	gt
 8025882:	1a9b      	subgt	r3, r3, r2
 8025884:	18ed      	addgt	r5, r5, r3
 8025886:	2600      	movs	r6, #0
 8025888:	341a      	adds	r4, #26
 802588a:	42b5      	cmp	r5, r6
 802588c:	d11a      	bne.n	80258c4 <_printf_common+0xc8>
 802588e:	2000      	movs	r0, #0
 8025890:	e008      	b.n	80258a4 <_printf_common+0xa8>
 8025892:	2301      	movs	r3, #1
 8025894:	4652      	mov	r2, sl
 8025896:	4649      	mov	r1, r9
 8025898:	4638      	mov	r0, r7
 802589a:	47c0      	blx	r8
 802589c:	3001      	adds	r0, #1
 802589e:	d103      	bne.n	80258a8 <_printf_common+0xac>
 80258a0:	f04f 30ff 	mov.w	r0, #4294967295
 80258a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80258a8:	3501      	adds	r5, #1
 80258aa:	e7c6      	b.n	802583a <_printf_common+0x3e>
 80258ac:	18e1      	adds	r1, r4, r3
 80258ae:	1c5a      	adds	r2, r3, #1
 80258b0:	2030      	movs	r0, #48	; 0x30
 80258b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80258b6:	4422      	add	r2, r4
 80258b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80258bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80258c0:	3302      	adds	r3, #2
 80258c2:	e7c7      	b.n	8025854 <_printf_common+0x58>
 80258c4:	2301      	movs	r3, #1
 80258c6:	4622      	mov	r2, r4
 80258c8:	4649      	mov	r1, r9
 80258ca:	4638      	mov	r0, r7
 80258cc:	47c0      	blx	r8
 80258ce:	3001      	adds	r0, #1
 80258d0:	d0e6      	beq.n	80258a0 <_printf_common+0xa4>
 80258d2:	3601      	adds	r6, #1
 80258d4:	e7d9      	b.n	802588a <_printf_common+0x8e>
	...

080258d8 <_printf_i>:
 80258d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80258dc:	460c      	mov	r4, r1
 80258de:	4691      	mov	r9, r2
 80258e0:	7e27      	ldrb	r7, [r4, #24]
 80258e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80258e4:	2f78      	cmp	r7, #120	; 0x78
 80258e6:	4680      	mov	r8, r0
 80258e8:	469a      	mov	sl, r3
 80258ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80258ee:	d807      	bhi.n	8025900 <_printf_i+0x28>
 80258f0:	2f62      	cmp	r7, #98	; 0x62
 80258f2:	d80a      	bhi.n	802590a <_printf_i+0x32>
 80258f4:	2f00      	cmp	r7, #0
 80258f6:	f000 80d8 	beq.w	8025aaa <_printf_i+0x1d2>
 80258fa:	2f58      	cmp	r7, #88	; 0x58
 80258fc:	f000 80a3 	beq.w	8025a46 <_printf_i+0x16e>
 8025900:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025908:	e03a      	b.n	8025980 <_printf_i+0xa8>
 802590a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802590e:	2b15      	cmp	r3, #21
 8025910:	d8f6      	bhi.n	8025900 <_printf_i+0x28>
 8025912:	a001      	add	r0, pc, #4	; (adr r0, 8025918 <_printf_i+0x40>)
 8025914:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025918:	08025971 	.word	0x08025971
 802591c:	08025985 	.word	0x08025985
 8025920:	08025901 	.word	0x08025901
 8025924:	08025901 	.word	0x08025901
 8025928:	08025901 	.word	0x08025901
 802592c:	08025901 	.word	0x08025901
 8025930:	08025985 	.word	0x08025985
 8025934:	08025901 	.word	0x08025901
 8025938:	08025901 	.word	0x08025901
 802593c:	08025901 	.word	0x08025901
 8025940:	08025901 	.word	0x08025901
 8025944:	08025a91 	.word	0x08025a91
 8025948:	080259b5 	.word	0x080259b5
 802594c:	08025a73 	.word	0x08025a73
 8025950:	08025901 	.word	0x08025901
 8025954:	08025901 	.word	0x08025901
 8025958:	08025ab3 	.word	0x08025ab3
 802595c:	08025901 	.word	0x08025901
 8025960:	080259b5 	.word	0x080259b5
 8025964:	08025901 	.word	0x08025901
 8025968:	08025901 	.word	0x08025901
 802596c:	08025a7b 	.word	0x08025a7b
 8025970:	680b      	ldr	r3, [r1, #0]
 8025972:	1d1a      	adds	r2, r3, #4
 8025974:	681b      	ldr	r3, [r3, #0]
 8025976:	600a      	str	r2, [r1, #0]
 8025978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802597c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025980:	2301      	movs	r3, #1
 8025982:	e0a3      	b.n	8025acc <_printf_i+0x1f4>
 8025984:	6825      	ldr	r5, [r4, #0]
 8025986:	6808      	ldr	r0, [r1, #0]
 8025988:	062e      	lsls	r6, r5, #24
 802598a:	f100 0304 	add.w	r3, r0, #4
 802598e:	d50a      	bpl.n	80259a6 <_printf_i+0xce>
 8025990:	6805      	ldr	r5, [r0, #0]
 8025992:	600b      	str	r3, [r1, #0]
 8025994:	2d00      	cmp	r5, #0
 8025996:	da03      	bge.n	80259a0 <_printf_i+0xc8>
 8025998:	232d      	movs	r3, #45	; 0x2d
 802599a:	426d      	negs	r5, r5
 802599c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80259a0:	485e      	ldr	r0, [pc, #376]	; (8025b1c <_printf_i+0x244>)
 80259a2:	230a      	movs	r3, #10
 80259a4:	e019      	b.n	80259da <_printf_i+0x102>
 80259a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80259aa:	6805      	ldr	r5, [r0, #0]
 80259ac:	600b      	str	r3, [r1, #0]
 80259ae:	bf18      	it	ne
 80259b0:	b22d      	sxthne	r5, r5
 80259b2:	e7ef      	b.n	8025994 <_printf_i+0xbc>
 80259b4:	680b      	ldr	r3, [r1, #0]
 80259b6:	6825      	ldr	r5, [r4, #0]
 80259b8:	1d18      	adds	r0, r3, #4
 80259ba:	6008      	str	r0, [r1, #0]
 80259bc:	0628      	lsls	r0, r5, #24
 80259be:	d501      	bpl.n	80259c4 <_printf_i+0xec>
 80259c0:	681d      	ldr	r5, [r3, #0]
 80259c2:	e002      	b.n	80259ca <_printf_i+0xf2>
 80259c4:	0669      	lsls	r1, r5, #25
 80259c6:	d5fb      	bpl.n	80259c0 <_printf_i+0xe8>
 80259c8:	881d      	ldrh	r5, [r3, #0]
 80259ca:	4854      	ldr	r0, [pc, #336]	; (8025b1c <_printf_i+0x244>)
 80259cc:	2f6f      	cmp	r7, #111	; 0x6f
 80259ce:	bf0c      	ite	eq
 80259d0:	2308      	moveq	r3, #8
 80259d2:	230a      	movne	r3, #10
 80259d4:	2100      	movs	r1, #0
 80259d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80259da:	6866      	ldr	r6, [r4, #4]
 80259dc:	60a6      	str	r6, [r4, #8]
 80259de:	2e00      	cmp	r6, #0
 80259e0:	bfa2      	ittt	ge
 80259e2:	6821      	ldrge	r1, [r4, #0]
 80259e4:	f021 0104 	bicge.w	r1, r1, #4
 80259e8:	6021      	strge	r1, [r4, #0]
 80259ea:	b90d      	cbnz	r5, 80259f0 <_printf_i+0x118>
 80259ec:	2e00      	cmp	r6, #0
 80259ee:	d04d      	beq.n	8025a8c <_printf_i+0x1b4>
 80259f0:	4616      	mov	r6, r2
 80259f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80259f6:	fb03 5711 	mls	r7, r3, r1, r5
 80259fa:	5dc7      	ldrb	r7, [r0, r7]
 80259fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025a00:	462f      	mov	r7, r5
 8025a02:	42bb      	cmp	r3, r7
 8025a04:	460d      	mov	r5, r1
 8025a06:	d9f4      	bls.n	80259f2 <_printf_i+0x11a>
 8025a08:	2b08      	cmp	r3, #8
 8025a0a:	d10b      	bne.n	8025a24 <_printf_i+0x14c>
 8025a0c:	6823      	ldr	r3, [r4, #0]
 8025a0e:	07df      	lsls	r7, r3, #31
 8025a10:	d508      	bpl.n	8025a24 <_printf_i+0x14c>
 8025a12:	6923      	ldr	r3, [r4, #16]
 8025a14:	6861      	ldr	r1, [r4, #4]
 8025a16:	4299      	cmp	r1, r3
 8025a18:	bfde      	ittt	le
 8025a1a:	2330      	movle	r3, #48	; 0x30
 8025a1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025a20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025a24:	1b92      	subs	r2, r2, r6
 8025a26:	6122      	str	r2, [r4, #16]
 8025a28:	f8cd a000 	str.w	sl, [sp]
 8025a2c:	464b      	mov	r3, r9
 8025a2e:	aa03      	add	r2, sp, #12
 8025a30:	4621      	mov	r1, r4
 8025a32:	4640      	mov	r0, r8
 8025a34:	f7ff fee2 	bl	80257fc <_printf_common>
 8025a38:	3001      	adds	r0, #1
 8025a3a:	d14c      	bne.n	8025ad6 <_printf_i+0x1fe>
 8025a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8025a40:	b004      	add	sp, #16
 8025a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a46:	4835      	ldr	r0, [pc, #212]	; (8025b1c <_printf_i+0x244>)
 8025a48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025a4c:	6823      	ldr	r3, [r4, #0]
 8025a4e:	680e      	ldr	r6, [r1, #0]
 8025a50:	061f      	lsls	r7, r3, #24
 8025a52:	f856 5b04 	ldr.w	r5, [r6], #4
 8025a56:	600e      	str	r6, [r1, #0]
 8025a58:	d514      	bpl.n	8025a84 <_printf_i+0x1ac>
 8025a5a:	07d9      	lsls	r1, r3, #31
 8025a5c:	bf44      	itt	mi
 8025a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8025a62:	6023      	strmi	r3, [r4, #0]
 8025a64:	b91d      	cbnz	r5, 8025a6e <_printf_i+0x196>
 8025a66:	6823      	ldr	r3, [r4, #0]
 8025a68:	f023 0320 	bic.w	r3, r3, #32
 8025a6c:	6023      	str	r3, [r4, #0]
 8025a6e:	2310      	movs	r3, #16
 8025a70:	e7b0      	b.n	80259d4 <_printf_i+0xfc>
 8025a72:	6823      	ldr	r3, [r4, #0]
 8025a74:	f043 0320 	orr.w	r3, r3, #32
 8025a78:	6023      	str	r3, [r4, #0]
 8025a7a:	2378      	movs	r3, #120	; 0x78
 8025a7c:	4828      	ldr	r0, [pc, #160]	; (8025b20 <_printf_i+0x248>)
 8025a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025a82:	e7e3      	b.n	8025a4c <_printf_i+0x174>
 8025a84:	065e      	lsls	r6, r3, #25
 8025a86:	bf48      	it	mi
 8025a88:	b2ad      	uxthmi	r5, r5
 8025a8a:	e7e6      	b.n	8025a5a <_printf_i+0x182>
 8025a8c:	4616      	mov	r6, r2
 8025a8e:	e7bb      	b.n	8025a08 <_printf_i+0x130>
 8025a90:	680b      	ldr	r3, [r1, #0]
 8025a92:	6826      	ldr	r6, [r4, #0]
 8025a94:	6960      	ldr	r0, [r4, #20]
 8025a96:	1d1d      	adds	r5, r3, #4
 8025a98:	600d      	str	r5, [r1, #0]
 8025a9a:	0635      	lsls	r5, r6, #24
 8025a9c:	681b      	ldr	r3, [r3, #0]
 8025a9e:	d501      	bpl.n	8025aa4 <_printf_i+0x1cc>
 8025aa0:	6018      	str	r0, [r3, #0]
 8025aa2:	e002      	b.n	8025aaa <_printf_i+0x1d2>
 8025aa4:	0671      	lsls	r1, r6, #25
 8025aa6:	d5fb      	bpl.n	8025aa0 <_printf_i+0x1c8>
 8025aa8:	8018      	strh	r0, [r3, #0]
 8025aaa:	2300      	movs	r3, #0
 8025aac:	6123      	str	r3, [r4, #16]
 8025aae:	4616      	mov	r6, r2
 8025ab0:	e7ba      	b.n	8025a28 <_printf_i+0x150>
 8025ab2:	680b      	ldr	r3, [r1, #0]
 8025ab4:	1d1a      	adds	r2, r3, #4
 8025ab6:	600a      	str	r2, [r1, #0]
 8025ab8:	681e      	ldr	r6, [r3, #0]
 8025aba:	6862      	ldr	r2, [r4, #4]
 8025abc:	2100      	movs	r1, #0
 8025abe:	4630      	mov	r0, r6
 8025ac0:	f7da fba6 	bl	8000210 <memchr>
 8025ac4:	b108      	cbz	r0, 8025aca <_printf_i+0x1f2>
 8025ac6:	1b80      	subs	r0, r0, r6
 8025ac8:	6060      	str	r0, [r4, #4]
 8025aca:	6863      	ldr	r3, [r4, #4]
 8025acc:	6123      	str	r3, [r4, #16]
 8025ace:	2300      	movs	r3, #0
 8025ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025ad4:	e7a8      	b.n	8025a28 <_printf_i+0x150>
 8025ad6:	6923      	ldr	r3, [r4, #16]
 8025ad8:	4632      	mov	r2, r6
 8025ada:	4649      	mov	r1, r9
 8025adc:	4640      	mov	r0, r8
 8025ade:	47d0      	blx	sl
 8025ae0:	3001      	adds	r0, #1
 8025ae2:	d0ab      	beq.n	8025a3c <_printf_i+0x164>
 8025ae4:	6823      	ldr	r3, [r4, #0]
 8025ae6:	079b      	lsls	r3, r3, #30
 8025ae8:	d413      	bmi.n	8025b12 <_printf_i+0x23a>
 8025aea:	68e0      	ldr	r0, [r4, #12]
 8025aec:	9b03      	ldr	r3, [sp, #12]
 8025aee:	4298      	cmp	r0, r3
 8025af0:	bfb8      	it	lt
 8025af2:	4618      	movlt	r0, r3
 8025af4:	e7a4      	b.n	8025a40 <_printf_i+0x168>
 8025af6:	2301      	movs	r3, #1
 8025af8:	4632      	mov	r2, r6
 8025afa:	4649      	mov	r1, r9
 8025afc:	4640      	mov	r0, r8
 8025afe:	47d0      	blx	sl
 8025b00:	3001      	adds	r0, #1
 8025b02:	d09b      	beq.n	8025a3c <_printf_i+0x164>
 8025b04:	3501      	adds	r5, #1
 8025b06:	68e3      	ldr	r3, [r4, #12]
 8025b08:	9903      	ldr	r1, [sp, #12]
 8025b0a:	1a5b      	subs	r3, r3, r1
 8025b0c:	42ab      	cmp	r3, r5
 8025b0e:	dcf2      	bgt.n	8025af6 <_printf_i+0x21e>
 8025b10:	e7eb      	b.n	8025aea <_printf_i+0x212>
 8025b12:	2500      	movs	r5, #0
 8025b14:	f104 0619 	add.w	r6, r4, #25
 8025b18:	e7f5      	b.n	8025b06 <_printf_i+0x22e>
 8025b1a:	bf00      	nop
 8025b1c:	080296b9 	.word	0x080296b9
 8025b20:	080296ca 	.word	0x080296ca

08025b24 <_sbrk_r>:
 8025b24:	b538      	push	{r3, r4, r5, lr}
 8025b26:	4d06      	ldr	r5, [pc, #24]	; (8025b40 <_sbrk_r+0x1c>)
 8025b28:	2300      	movs	r3, #0
 8025b2a:	4604      	mov	r4, r0
 8025b2c:	4608      	mov	r0, r1
 8025b2e:	602b      	str	r3, [r5, #0]
 8025b30:	f7dc fcb8 	bl	80024a4 <_sbrk>
 8025b34:	1c43      	adds	r3, r0, #1
 8025b36:	d102      	bne.n	8025b3e <_sbrk_r+0x1a>
 8025b38:	682b      	ldr	r3, [r5, #0]
 8025b3a:	b103      	cbz	r3, 8025b3e <_sbrk_r+0x1a>
 8025b3c:	6023      	str	r3, [r4, #0]
 8025b3e:	bd38      	pop	{r3, r4, r5, pc}
 8025b40:	2000ab38 	.word	0x2000ab38

08025b44 <_raise_r>:
 8025b44:	291f      	cmp	r1, #31
 8025b46:	b538      	push	{r3, r4, r5, lr}
 8025b48:	4604      	mov	r4, r0
 8025b4a:	460d      	mov	r5, r1
 8025b4c:	d904      	bls.n	8025b58 <_raise_r+0x14>
 8025b4e:	2316      	movs	r3, #22
 8025b50:	6003      	str	r3, [r0, #0]
 8025b52:	f04f 30ff 	mov.w	r0, #4294967295
 8025b56:	bd38      	pop	{r3, r4, r5, pc}
 8025b58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025b5a:	b112      	cbz	r2, 8025b62 <_raise_r+0x1e>
 8025b5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025b60:	b94b      	cbnz	r3, 8025b76 <_raise_r+0x32>
 8025b62:	4620      	mov	r0, r4
 8025b64:	f000 f830 	bl	8025bc8 <_getpid_r>
 8025b68:	462a      	mov	r2, r5
 8025b6a:	4601      	mov	r1, r0
 8025b6c:	4620      	mov	r0, r4
 8025b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025b72:	f000 b817 	b.w	8025ba4 <_kill_r>
 8025b76:	2b01      	cmp	r3, #1
 8025b78:	d00a      	beq.n	8025b90 <_raise_r+0x4c>
 8025b7a:	1c59      	adds	r1, r3, #1
 8025b7c:	d103      	bne.n	8025b86 <_raise_r+0x42>
 8025b7e:	2316      	movs	r3, #22
 8025b80:	6003      	str	r3, [r0, #0]
 8025b82:	2001      	movs	r0, #1
 8025b84:	e7e7      	b.n	8025b56 <_raise_r+0x12>
 8025b86:	2400      	movs	r4, #0
 8025b88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025b8c:	4628      	mov	r0, r5
 8025b8e:	4798      	blx	r3
 8025b90:	2000      	movs	r0, #0
 8025b92:	e7e0      	b.n	8025b56 <_raise_r+0x12>

08025b94 <raise>:
 8025b94:	4b02      	ldr	r3, [pc, #8]	; (8025ba0 <raise+0xc>)
 8025b96:	4601      	mov	r1, r0
 8025b98:	6818      	ldr	r0, [r3, #0]
 8025b9a:	f7ff bfd3 	b.w	8025b44 <_raise_r>
 8025b9e:	bf00      	nop
 8025ba0:	200000b8 	.word	0x200000b8

08025ba4 <_kill_r>:
 8025ba4:	b538      	push	{r3, r4, r5, lr}
 8025ba6:	4d07      	ldr	r5, [pc, #28]	; (8025bc4 <_kill_r+0x20>)
 8025ba8:	2300      	movs	r3, #0
 8025baa:	4604      	mov	r4, r0
 8025bac:	4608      	mov	r0, r1
 8025bae:	4611      	mov	r1, r2
 8025bb0:	602b      	str	r3, [r5, #0]
 8025bb2:	f7dc fbef 	bl	8002394 <_kill>
 8025bb6:	1c43      	adds	r3, r0, #1
 8025bb8:	d102      	bne.n	8025bc0 <_kill_r+0x1c>
 8025bba:	682b      	ldr	r3, [r5, #0]
 8025bbc:	b103      	cbz	r3, 8025bc0 <_kill_r+0x1c>
 8025bbe:	6023      	str	r3, [r4, #0]
 8025bc0:	bd38      	pop	{r3, r4, r5, pc}
 8025bc2:	bf00      	nop
 8025bc4:	2000ab38 	.word	0x2000ab38

08025bc8 <_getpid_r>:
 8025bc8:	f7dc bbdc 	b.w	8002384 <_getpid>

08025bcc <__swbuf_r>:
 8025bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bce:	460e      	mov	r6, r1
 8025bd0:	4614      	mov	r4, r2
 8025bd2:	4605      	mov	r5, r0
 8025bd4:	b118      	cbz	r0, 8025bde <__swbuf_r+0x12>
 8025bd6:	6983      	ldr	r3, [r0, #24]
 8025bd8:	b90b      	cbnz	r3, 8025bde <__swbuf_r+0x12>
 8025bda:	f000 fa33 	bl	8026044 <__sinit>
 8025bde:	4b21      	ldr	r3, [pc, #132]	; (8025c64 <__swbuf_r+0x98>)
 8025be0:	429c      	cmp	r4, r3
 8025be2:	d12b      	bne.n	8025c3c <__swbuf_r+0x70>
 8025be4:	686c      	ldr	r4, [r5, #4]
 8025be6:	69a3      	ldr	r3, [r4, #24]
 8025be8:	60a3      	str	r3, [r4, #8]
 8025bea:	89a3      	ldrh	r3, [r4, #12]
 8025bec:	071a      	lsls	r2, r3, #28
 8025bee:	d52f      	bpl.n	8025c50 <__swbuf_r+0x84>
 8025bf0:	6923      	ldr	r3, [r4, #16]
 8025bf2:	b36b      	cbz	r3, 8025c50 <__swbuf_r+0x84>
 8025bf4:	6923      	ldr	r3, [r4, #16]
 8025bf6:	6820      	ldr	r0, [r4, #0]
 8025bf8:	1ac0      	subs	r0, r0, r3
 8025bfa:	6963      	ldr	r3, [r4, #20]
 8025bfc:	b2f6      	uxtb	r6, r6
 8025bfe:	4283      	cmp	r3, r0
 8025c00:	4637      	mov	r7, r6
 8025c02:	dc04      	bgt.n	8025c0e <__swbuf_r+0x42>
 8025c04:	4621      	mov	r1, r4
 8025c06:	4628      	mov	r0, r5
 8025c08:	f000 f988 	bl	8025f1c <_fflush_r>
 8025c0c:	bb30      	cbnz	r0, 8025c5c <__swbuf_r+0x90>
 8025c0e:	68a3      	ldr	r3, [r4, #8]
 8025c10:	3b01      	subs	r3, #1
 8025c12:	60a3      	str	r3, [r4, #8]
 8025c14:	6823      	ldr	r3, [r4, #0]
 8025c16:	1c5a      	adds	r2, r3, #1
 8025c18:	6022      	str	r2, [r4, #0]
 8025c1a:	701e      	strb	r6, [r3, #0]
 8025c1c:	6963      	ldr	r3, [r4, #20]
 8025c1e:	3001      	adds	r0, #1
 8025c20:	4283      	cmp	r3, r0
 8025c22:	d004      	beq.n	8025c2e <__swbuf_r+0x62>
 8025c24:	89a3      	ldrh	r3, [r4, #12]
 8025c26:	07db      	lsls	r3, r3, #31
 8025c28:	d506      	bpl.n	8025c38 <__swbuf_r+0x6c>
 8025c2a:	2e0a      	cmp	r6, #10
 8025c2c:	d104      	bne.n	8025c38 <__swbuf_r+0x6c>
 8025c2e:	4621      	mov	r1, r4
 8025c30:	4628      	mov	r0, r5
 8025c32:	f000 f973 	bl	8025f1c <_fflush_r>
 8025c36:	b988      	cbnz	r0, 8025c5c <__swbuf_r+0x90>
 8025c38:	4638      	mov	r0, r7
 8025c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c3c:	4b0a      	ldr	r3, [pc, #40]	; (8025c68 <__swbuf_r+0x9c>)
 8025c3e:	429c      	cmp	r4, r3
 8025c40:	d101      	bne.n	8025c46 <__swbuf_r+0x7a>
 8025c42:	68ac      	ldr	r4, [r5, #8]
 8025c44:	e7cf      	b.n	8025be6 <__swbuf_r+0x1a>
 8025c46:	4b09      	ldr	r3, [pc, #36]	; (8025c6c <__swbuf_r+0xa0>)
 8025c48:	429c      	cmp	r4, r3
 8025c4a:	bf08      	it	eq
 8025c4c:	68ec      	ldreq	r4, [r5, #12]
 8025c4e:	e7ca      	b.n	8025be6 <__swbuf_r+0x1a>
 8025c50:	4621      	mov	r1, r4
 8025c52:	4628      	mov	r0, r5
 8025c54:	f000 f80c 	bl	8025c70 <__swsetup_r>
 8025c58:	2800      	cmp	r0, #0
 8025c5a:	d0cb      	beq.n	8025bf4 <__swbuf_r+0x28>
 8025c5c:	f04f 37ff 	mov.w	r7, #4294967295
 8025c60:	e7ea      	b.n	8025c38 <__swbuf_r+0x6c>
 8025c62:	bf00      	nop
 8025c64:	08029700 	.word	0x08029700
 8025c68:	08029720 	.word	0x08029720
 8025c6c:	080296e0 	.word	0x080296e0

08025c70 <__swsetup_r>:
 8025c70:	4b32      	ldr	r3, [pc, #200]	; (8025d3c <__swsetup_r+0xcc>)
 8025c72:	b570      	push	{r4, r5, r6, lr}
 8025c74:	681d      	ldr	r5, [r3, #0]
 8025c76:	4606      	mov	r6, r0
 8025c78:	460c      	mov	r4, r1
 8025c7a:	b125      	cbz	r5, 8025c86 <__swsetup_r+0x16>
 8025c7c:	69ab      	ldr	r3, [r5, #24]
 8025c7e:	b913      	cbnz	r3, 8025c86 <__swsetup_r+0x16>
 8025c80:	4628      	mov	r0, r5
 8025c82:	f000 f9df 	bl	8026044 <__sinit>
 8025c86:	4b2e      	ldr	r3, [pc, #184]	; (8025d40 <__swsetup_r+0xd0>)
 8025c88:	429c      	cmp	r4, r3
 8025c8a:	d10f      	bne.n	8025cac <__swsetup_r+0x3c>
 8025c8c:	686c      	ldr	r4, [r5, #4]
 8025c8e:	89a3      	ldrh	r3, [r4, #12]
 8025c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025c94:	0719      	lsls	r1, r3, #28
 8025c96:	d42c      	bmi.n	8025cf2 <__swsetup_r+0x82>
 8025c98:	06dd      	lsls	r5, r3, #27
 8025c9a:	d411      	bmi.n	8025cc0 <__swsetup_r+0x50>
 8025c9c:	2309      	movs	r3, #9
 8025c9e:	6033      	str	r3, [r6, #0]
 8025ca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025ca4:	81a3      	strh	r3, [r4, #12]
 8025ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8025caa:	e03e      	b.n	8025d2a <__swsetup_r+0xba>
 8025cac:	4b25      	ldr	r3, [pc, #148]	; (8025d44 <__swsetup_r+0xd4>)
 8025cae:	429c      	cmp	r4, r3
 8025cb0:	d101      	bne.n	8025cb6 <__swsetup_r+0x46>
 8025cb2:	68ac      	ldr	r4, [r5, #8]
 8025cb4:	e7eb      	b.n	8025c8e <__swsetup_r+0x1e>
 8025cb6:	4b24      	ldr	r3, [pc, #144]	; (8025d48 <__swsetup_r+0xd8>)
 8025cb8:	429c      	cmp	r4, r3
 8025cba:	bf08      	it	eq
 8025cbc:	68ec      	ldreq	r4, [r5, #12]
 8025cbe:	e7e6      	b.n	8025c8e <__swsetup_r+0x1e>
 8025cc0:	0758      	lsls	r0, r3, #29
 8025cc2:	d512      	bpl.n	8025cea <__swsetup_r+0x7a>
 8025cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025cc6:	b141      	cbz	r1, 8025cda <__swsetup_r+0x6a>
 8025cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025ccc:	4299      	cmp	r1, r3
 8025cce:	d002      	beq.n	8025cd6 <__swsetup_r+0x66>
 8025cd0:	4630      	mov	r0, r6
 8025cd2:	f7ff fb8f 	bl	80253f4 <_free_r>
 8025cd6:	2300      	movs	r3, #0
 8025cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8025cda:	89a3      	ldrh	r3, [r4, #12]
 8025cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025ce0:	81a3      	strh	r3, [r4, #12]
 8025ce2:	2300      	movs	r3, #0
 8025ce4:	6063      	str	r3, [r4, #4]
 8025ce6:	6923      	ldr	r3, [r4, #16]
 8025ce8:	6023      	str	r3, [r4, #0]
 8025cea:	89a3      	ldrh	r3, [r4, #12]
 8025cec:	f043 0308 	orr.w	r3, r3, #8
 8025cf0:	81a3      	strh	r3, [r4, #12]
 8025cf2:	6923      	ldr	r3, [r4, #16]
 8025cf4:	b94b      	cbnz	r3, 8025d0a <__swsetup_r+0x9a>
 8025cf6:	89a3      	ldrh	r3, [r4, #12]
 8025cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025d00:	d003      	beq.n	8025d0a <__swsetup_r+0x9a>
 8025d02:	4621      	mov	r1, r4
 8025d04:	4630      	mov	r0, r6
 8025d06:	f000 fa63 	bl	80261d0 <__smakebuf_r>
 8025d0a:	89a0      	ldrh	r0, [r4, #12]
 8025d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025d10:	f010 0301 	ands.w	r3, r0, #1
 8025d14:	d00a      	beq.n	8025d2c <__swsetup_r+0xbc>
 8025d16:	2300      	movs	r3, #0
 8025d18:	60a3      	str	r3, [r4, #8]
 8025d1a:	6963      	ldr	r3, [r4, #20]
 8025d1c:	425b      	negs	r3, r3
 8025d1e:	61a3      	str	r3, [r4, #24]
 8025d20:	6923      	ldr	r3, [r4, #16]
 8025d22:	b943      	cbnz	r3, 8025d36 <__swsetup_r+0xc6>
 8025d24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025d28:	d1ba      	bne.n	8025ca0 <__swsetup_r+0x30>
 8025d2a:	bd70      	pop	{r4, r5, r6, pc}
 8025d2c:	0781      	lsls	r1, r0, #30
 8025d2e:	bf58      	it	pl
 8025d30:	6963      	ldrpl	r3, [r4, #20]
 8025d32:	60a3      	str	r3, [r4, #8]
 8025d34:	e7f4      	b.n	8025d20 <__swsetup_r+0xb0>
 8025d36:	2000      	movs	r0, #0
 8025d38:	e7f7      	b.n	8025d2a <__swsetup_r+0xba>
 8025d3a:	bf00      	nop
 8025d3c:	200000b8 	.word	0x200000b8
 8025d40:	08029700 	.word	0x08029700
 8025d44:	08029720 	.word	0x08029720
 8025d48:	080296e0 	.word	0x080296e0

08025d4c <__register_exitproc>:
 8025d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8025e0c <__register_exitproc+0xc0>
 8025d54:	4606      	mov	r6, r0
 8025d56:	f8d8 0000 	ldr.w	r0, [r8]
 8025d5a:	461f      	mov	r7, r3
 8025d5c:	460d      	mov	r5, r1
 8025d5e:	4691      	mov	r9, r2
 8025d60:	f000 fa0e 	bl	8026180 <__retarget_lock_acquire_recursive>
 8025d64:	4b25      	ldr	r3, [pc, #148]	; (8025dfc <__register_exitproc+0xb0>)
 8025d66:	681c      	ldr	r4, [r3, #0]
 8025d68:	b934      	cbnz	r4, 8025d78 <__register_exitproc+0x2c>
 8025d6a:	4c25      	ldr	r4, [pc, #148]	; (8025e00 <__register_exitproc+0xb4>)
 8025d6c:	601c      	str	r4, [r3, #0]
 8025d6e:	4b25      	ldr	r3, [pc, #148]	; (8025e04 <__register_exitproc+0xb8>)
 8025d70:	b113      	cbz	r3, 8025d78 <__register_exitproc+0x2c>
 8025d72:	681b      	ldr	r3, [r3, #0]
 8025d74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025d78:	6863      	ldr	r3, [r4, #4]
 8025d7a:	2b1f      	cmp	r3, #31
 8025d7c:	dd07      	ble.n	8025d8e <__register_exitproc+0x42>
 8025d7e:	f8d8 0000 	ldr.w	r0, [r8]
 8025d82:	f000 f9ff 	bl	8026184 <__retarget_lock_release_recursive>
 8025d86:	f04f 30ff 	mov.w	r0, #4294967295
 8025d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d8e:	b34e      	cbz	r6, 8025de4 <__register_exitproc+0x98>
 8025d90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025d94:	b988      	cbnz	r0, 8025dba <__register_exitproc+0x6e>
 8025d96:	4b1c      	ldr	r3, [pc, #112]	; (8025e08 <__register_exitproc+0xbc>)
 8025d98:	b923      	cbnz	r3, 8025da4 <__register_exitproc+0x58>
 8025d9a:	f8d8 0000 	ldr.w	r0, [r8]
 8025d9e:	f000 f9f0 	bl	8026182 <__retarget_lock_release>
 8025da2:	e7f0      	b.n	8025d86 <__register_exitproc+0x3a>
 8025da4:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025da8:	f7ff fafe 	bl	80253a8 <malloc>
 8025dac:	2800      	cmp	r0, #0
 8025dae:	d0f4      	beq.n	8025d9a <__register_exitproc+0x4e>
 8025db0:	2300      	movs	r3, #0
 8025db2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025db6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025dba:	6863      	ldr	r3, [r4, #4]
 8025dbc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025dc0:	2201      	movs	r2, #1
 8025dc2:	409a      	lsls	r2, r3
 8025dc4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025dc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025dcc:	4313      	orrs	r3, r2
 8025dce:	2e02      	cmp	r6, #2
 8025dd0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025dd4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025dd8:	bf02      	ittt	eq
 8025dda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025dde:	431a      	orreq	r2, r3
 8025de0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8025de4:	6863      	ldr	r3, [r4, #4]
 8025de6:	f8d8 0000 	ldr.w	r0, [r8]
 8025dea:	1c5a      	adds	r2, r3, #1
 8025dec:	3302      	adds	r3, #2
 8025dee:	6062      	str	r2, [r4, #4]
 8025df0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025df4:	f000 f9c6 	bl	8026184 <__retarget_lock_release_recursive>
 8025df8:	2000      	movs	r0, #0
 8025dfa:	e7c6      	b.n	8025d8a <__register_exitproc+0x3e>
 8025dfc:	20009750 	.word	0x20009750
 8025e00:	200096c4 	.word	0x200096c4
 8025e04:	080296dc 	.word	0x080296dc
 8025e08:	080253a9 	.word	0x080253a9
 8025e0c:	2000011c 	.word	0x2000011c

08025e10 <__sflush_r>:
 8025e10:	898a      	ldrh	r2, [r1, #12]
 8025e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e16:	4605      	mov	r5, r0
 8025e18:	0710      	lsls	r0, r2, #28
 8025e1a:	460c      	mov	r4, r1
 8025e1c:	d458      	bmi.n	8025ed0 <__sflush_r+0xc0>
 8025e1e:	684b      	ldr	r3, [r1, #4]
 8025e20:	2b00      	cmp	r3, #0
 8025e22:	dc05      	bgt.n	8025e30 <__sflush_r+0x20>
 8025e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025e26:	2b00      	cmp	r3, #0
 8025e28:	dc02      	bgt.n	8025e30 <__sflush_r+0x20>
 8025e2a:	2000      	movs	r0, #0
 8025e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025e32:	2e00      	cmp	r6, #0
 8025e34:	d0f9      	beq.n	8025e2a <__sflush_r+0x1a>
 8025e36:	2300      	movs	r3, #0
 8025e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025e3c:	682f      	ldr	r7, [r5, #0]
 8025e3e:	602b      	str	r3, [r5, #0]
 8025e40:	d032      	beq.n	8025ea8 <__sflush_r+0x98>
 8025e42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025e44:	89a3      	ldrh	r3, [r4, #12]
 8025e46:	075a      	lsls	r2, r3, #29
 8025e48:	d505      	bpl.n	8025e56 <__sflush_r+0x46>
 8025e4a:	6863      	ldr	r3, [r4, #4]
 8025e4c:	1ac0      	subs	r0, r0, r3
 8025e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025e50:	b10b      	cbz	r3, 8025e56 <__sflush_r+0x46>
 8025e52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025e54:	1ac0      	subs	r0, r0, r3
 8025e56:	2300      	movs	r3, #0
 8025e58:	4602      	mov	r2, r0
 8025e5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025e5c:	6a21      	ldr	r1, [r4, #32]
 8025e5e:	4628      	mov	r0, r5
 8025e60:	47b0      	blx	r6
 8025e62:	1c43      	adds	r3, r0, #1
 8025e64:	89a3      	ldrh	r3, [r4, #12]
 8025e66:	d106      	bne.n	8025e76 <__sflush_r+0x66>
 8025e68:	6829      	ldr	r1, [r5, #0]
 8025e6a:	291d      	cmp	r1, #29
 8025e6c:	d82c      	bhi.n	8025ec8 <__sflush_r+0xb8>
 8025e6e:	4a2a      	ldr	r2, [pc, #168]	; (8025f18 <__sflush_r+0x108>)
 8025e70:	40ca      	lsrs	r2, r1
 8025e72:	07d6      	lsls	r6, r2, #31
 8025e74:	d528      	bpl.n	8025ec8 <__sflush_r+0xb8>
 8025e76:	2200      	movs	r2, #0
 8025e78:	6062      	str	r2, [r4, #4]
 8025e7a:	04d9      	lsls	r1, r3, #19
 8025e7c:	6922      	ldr	r2, [r4, #16]
 8025e7e:	6022      	str	r2, [r4, #0]
 8025e80:	d504      	bpl.n	8025e8c <__sflush_r+0x7c>
 8025e82:	1c42      	adds	r2, r0, #1
 8025e84:	d101      	bne.n	8025e8a <__sflush_r+0x7a>
 8025e86:	682b      	ldr	r3, [r5, #0]
 8025e88:	b903      	cbnz	r3, 8025e8c <__sflush_r+0x7c>
 8025e8a:	6560      	str	r0, [r4, #84]	; 0x54
 8025e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025e8e:	602f      	str	r7, [r5, #0]
 8025e90:	2900      	cmp	r1, #0
 8025e92:	d0ca      	beq.n	8025e2a <__sflush_r+0x1a>
 8025e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025e98:	4299      	cmp	r1, r3
 8025e9a:	d002      	beq.n	8025ea2 <__sflush_r+0x92>
 8025e9c:	4628      	mov	r0, r5
 8025e9e:	f7ff faa9 	bl	80253f4 <_free_r>
 8025ea2:	2000      	movs	r0, #0
 8025ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8025ea6:	e7c1      	b.n	8025e2c <__sflush_r+0x1c>
 8025ea8:	6a21      	ldr	r1, [r4, #32]
 8025eaa:	2301      	movs	r3, #1
 8025eac:	4628      	mov	r0, r5
 8025eae:	47b0      	blx	r6
 8025eb0:	1c41      	adds	r1, r0, #1
 8025eb2:	d1c7      	bne.n	8025e44 <__sflush_r+0x34>
 8025eb4:	682b      	ldr	r3, [r5, #0]
 8025eb6:	2b00      	cmp	r3, #0
 8025eb8:	d0c4      	beq.n	8025e44 <__sflush_r+0x34>
 8025eba:	2b1d      	cmp	r3, #29
 8025ebc:	d001      	beq.n	8025ec2 <__sflush_r+0xb2>
 8025ebe:	2b16      	cmp	r3, #22
 8025ec0:	d101      	bne.n	8025ec6 <__sflush_r+0xb6>
 8025ec2:	602f      	str	r7, [r5, #0]
 8025ec4:	e7b1      	b.n	8025e2a <__sflush_r+0x1a>
 8025ec6:	89a3      	ldrh	r3, [r4, #12]
 8025ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025ecc:	81a3      	strh	r3, [r4, #12]
 8025ece:	e7ad      	b.n	8025e2c <__sflush_r+0x1c>
 8025ed0:	690f      	ldr	r7, [r1, #16]
 8025ed2:	2f00      	cmp	r7, #0
 8025ed4:	d0a9      	beq.n	8025e2a <__sflush_r+0x1a>
 8025ed6:	0793      	lsls	r3, r2, #30
 8025ed8:	680e      	ldr	r6, [r1, #0]
 8025eda:	bf08      	it	eq
 8025edc:	694b      	ldreq	r3, [r1, #20]
 8025ede:	600f      	str	r7, [r1, #0]
 8025ee0:	bf18      	it	ne
 8025ee2:	2300      	movne	r3, #0
 8025ee4:	eba6 0807 	sub.w	r8, r6, r7
 8025ee8:	608b      	str	r3, [r1, #8]
 8025eea:	f1b8 0f00 	cmp.w	r8, #0
 8025eee:	dd9c      	ble.n	8025e2a <__sflush_r+0x1a>
 8025ef0:	6a21      	ldr	r1, [r4, #32]
 8025ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025ef4:	4643      	mov	r3, r8
 8025ef6:	463a      	mov	r2, r7
 8025ef8:	4628      	mov	r0, r5
 8025efa:	47b0      	blx	r6
 8025efc:	2800      	cmp	r0, #0
 8025efe:	dc06      	bgt.n	8025f0e <__sflush_r+0xfe>
 8025f00:	89a3      	ldrh	r3, [r4, #12]
 8025f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025f06:	81a3      	strh	r3, [r4, #12]
 8025f08:	f04f 30ff 	mov.w	r0, #4294967295
 8025f0c:	e78e      	b.n	8025e2c <__sflush_r+0x1c>
 8025f0e:	4407      	add	r7, r0
 8025f10:	eba8 0800 	sub.w	r8, r8, r0
 8025f14:	e7e9      	b.n	8025eea <__sflush_r+0xda>
 8025f16:	bf00      	nop
 8025f18:	20400001 	.word	0x20400001

08025f1c <_fflush_r>:
 8025f1c:	b538      	push	{r3, r4, r5, lr}
 8025f1e:	690b      	ldr	r3, [r1, #16]
 8025f20:	4605      	mov	r5, r0
 8025f22:	460c      	mov	r4, r1
 8025f24:	b913      	cbnz	r3, 8025f2c <_fflush_r+0x10>
 8025f26:	2500      	movs	r5, #0
 8025f28:	4628      	mov	r0, r5
 8025f2a:	bd38      	pop	{r3, r4, r5, pc}
 8025f2c:	b118      	cbz	r0, 8025f36 <_fflush_r+0x1a>
 8025f2e:	6983      	ldr	r3, [r0, #24]
 8025f30:	b90b      	cbnz	r3, 8025f36 <_fflush_r+0x1a>
 8025f32:	f000 f887 	bl	8026044 <__sinit>
 8025f36:	4b14      	ldr	r3, [pc, #80]	; (8025f88 <_fflush_r+0x6c>)
 8025f38:	429c      	cmp	r4, r3
 8025f3a:	d11b      	bne.n	8025f74 <_fflush_r+0x58>
 8025f3c:	686c      	ldr	r4, [r5, #4]
 8025f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025f42:	2b00      	cmp	r3, #0
 8025f44:	d0ef      	beq.n	8025f26 <_fflush_r+0xa>
 8025f46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025f48:	07d0      	lsls	r0, r2, #31
 8025f4a:	d404      	bmi.n	8025f56 <_fflush_r+0x3a>
 8025f4c:	0599      	lsls	r1, r3, #22
 8025f4e:	d402      	bmi.n	8025f56 <_fflush_r+0x3a>
 8025f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025f52:	f000 f915 	bl	8026180 <__retarget_lock_acquire_recursive>
 8025f56:	4628      	mov	r0, r5
 8025f58:	4621      	mov	r1, r4
 8025f5a:	f7ff ff59 	bl	8025e10 <__sflush_r>
 8025f5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025f60:	07da      	lsls	r2, r3, #31
 8025f62:	4605      	mov	r5, r0
 8025f64:	d4e0      	bmi.n	8025f28 <_fflush_r+0xc>
 8025f66:	89a3      	ldrh	r3, [r4, #12]
 8025f68:	059b      	lsls	r3, r3, #22
 8025f6a:	d4dd      	bmi.n	8025f28 <_fflush_r+0xc>
 8025f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025f6e:	f000 f909 	bl	8026184 <__retarget_lock_release_recursive>
 8025f72:	e7d9      	b.n	8025f28 <_fflush_r+0xc>
 8025f74:	4b05      	ldr	r3, [pc, #20]	; (8025f8c <_fflush_r+0x70>)
 8025f76:	429c      	cmp	r4, r3
 8025f78:	d101      	bne.n	8025f7e <_fflush_r+0x62>
 8025f7a:	68ac      	ldr	r4, [r5, #8]
 8025f7c:	e7df      	b.n	8025f3e <_fflush_r+0x22>
 8025f7e:	4b04      	ldr	r3, [pc, #16]	; (8025f90 <_fflush_r+0x74>)
 8025f80:	429c      	cmp	r4, r3
 8025f82:	bf08      	it	eq
 8025f84:	68ec      	ldreq	r4, [r5, #12]
 8025f86:	e7da      	b.n	8025f3e <_fflush_r+0x22>
 8025f88:	08029700 	.word	0x08029700
 8025f8c:	08029720 	.word	0x08029720
 8025f90:	080296e0 	.word	0x080296e0

08025f94 <std>:
 8025f94:	2300      	movs	r3, #0
 8025f96:	b510      	push	{r4, lr}
 8025f98:	4604      	mov	r4, r0
 8025f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8025f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025fa2:	6083      	str	r3, [r0, #8]
 8025fa4:	8181      	strh	r1, [r0, #12]
 8025fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8025fa8:	81c2      	strh	r2, [r0, #14]
 8025faa:	6183      	str	r3, [r0, #24]
 8025fac:	4619      	mov	r1, r3
 8025fae:	2208      	movs	r2, #8
 8025fb0:	305c      	adds	r0, #92	; 0x5c
 8025fb2:	f7ff fa17 	bl	80253e4 <memset>
 8025fb6:	4b05      	ldr	r3, [pc, #20]	; (8025fcc <std+0x38>)
 8025fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8025fba:	4b05      	ldr	r3, [pc, #20]	; (8025fd0 <std+0x3c>)
 8025fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8025fbe:	4b05      	ldr	r3, [pc, #20]	; (8025fd4 <std+0x40>)
 8025fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025fc2:	4b05      	ldr	r3, [pc, #20]	; (8025fd8 <std+0x44>)
 8025fc4:	6224      	str	r4, [r4, #32]
 8025fc6:	6323      	str	r3, [r4, #48]	; 0x30
 8025fc8:	bd10      	pop	{r4, pc}
 8025fca:	bf00      	nop
 8025fcc:	08026269 	.word	0x08026269
 8025fd0:	0802628b 	.word	0x0802628b
 8025fd4:	080262c3 	.word	0x080262c3
 8025fd8:	080262e7 	.word	0x080262e7

08025fdc <_cleanup_r>:
 8025fdc:	4901      	ldr	r1, [pc, #4]	; (8025fe4 <_cleanup_r+0x8>)
 8025fde:	f000 b8af 	b.w	8026140 <_fwalk_reent>
 8025fe2:	bf00      	nop
 8025fe4:	08025f1d 	.word	0x08025f1d

08025fe8 <__sfmoreglue>:
 8025fe8:	b570      	push	{r4, r5, r6, lr}
 8025fea:	1e4a      	subs	r2, r1, #1
 8025fec:	2568      	movs	r5, #104	; 0x68
 8025fee:	4355      	muls	r5, r2
 8025ff0:	460e      	mov	r6, r1
 8025ff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025ff6:	f7ff fa4d 	bl	8025494 <_malloc_r>
 8025ffa:	4604      	mov	r4, r0
 8025ffc:	b140      	cbz	r0, 8026010 <__sfmoreglue+0x28>
 8025ffe:	2100      	movs	r1, #0
 8026000:	e9c0 1600 	strd	r1, r6, [r0]
 8026004:	300c      	adds	r0, #12
 8026006:	60a0      	str	r0, [r4, #8]
 8026008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802600c:	f7ff f9ea 	bl	80253e4 <memset>
 8026010:	4620      	mov	r0, r4
 8026012:	bd70      	pop	{r4, r5, r6, pc}

08026014 <__sfp_lock_acquire>:
 8026014:	4801      	ldr	r0, [pc, #4]	; (802601c <__sfp_lock_acquire+0x8>)
 8026016:	f000 b8b3 	b.w	8026180 <__retarget_lock_acquire_recursive>
 802601a:	bf00      	nop
 802601c:	2000ab34 	.word	0x2000ab34

08026020 <__sfp_lock_release>:
 8026020:	4801      	ldr	r0, [pc, #4]	; (8026028 <__sfp_lock_release+0x8>)
 8026022:	f000 b8af 	b.w	8026184 <__retarget_lock_release_recursive>
 8026026:	bf00      	nop
 8026028:	2000ab34 	.word	0x2000ab34

0802602c <__sinit_lock_acquire>:
 802602c:	4801      	ldr	r0, [pc, #4]	; (8026034 <__sinit_lock_acquire+0x8>)
 802602e:	f000 b8a7 	b.w	8026180 <__retarget_lock_acquire_recursive>
 8026032:	bf00      	nop
 8026034:	2000ab2f 	.word	0x2000ab2f

08026038 <__sinit_lock_release>:
 8026038:	4801      	ldr	r0, [pc, #4]	; (8026040 <__sinit_lock_release+0x8>)
 802603a:	f000 b8a3 	b.w	8026184 <__retarget_lock_release_recursive>
 802603e:	bf00      	nop
 8026040:	2000ab2f 	.word	0x2000ab2f

08026044 <__sinit>:
 8026044:	b510      	push	{r4, lr}
 8026046:	4604      	mov	r4, r0
 8026048:	f7ff fff0 	bl	802602c <__sinit_lock_acquire>
 802604c:	69a3      	ldr	r3, [r4, #24]
 802604e:	b11b      	cbz	r3, 8026058 <__sinit+0x14>
 8026050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026054:	f7ff bff0 	b.w	8026038 <__sinit_lock_release>
 8026058:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802605c:	6523      	str	r3, [r4, #80]	; 0x50
 802605e:	4b13      	ldr	r3, [pc, #76]	; (80260ac <__sinit+0x68>)
 8026060:	4a13      	ldr	r2, [pc, #76]	; (80260b0 <__sinit+0x6c>)
 8026062:	681b      	ldr	r3, [r3, #0]
 8026064:	62a2      	str	r2, [r4, #40]	; 0x28
 8026066:	42a3      	cmp	r3, r4
 8026068:	bf04      	itt	eq
 802606a:	2301      	moveq	r3, #1
 802606c:	61a3      	streq	r3, [r4, #24]
 802606e:	4620      	mov	r0, r4
 8026070:	f000 f820 	bl	80260b4 <__sfp>
 8026074:	6060      	str	r0, [r4, #4]
 8026076:	4620      	mov	r0, r4
 8026078:	f000 f81c 	bl	80260b4 <__sfp>
 802607c:	60a0      	str	r0, [r4, #8]
 802607e:	4620      	mov	r0, r4
 8026080:	f000 f818 	bl	80260b4 <__sfp>
 8026084:	2200      	movs	r2, #0
 8026086:	60e0      	str	r0, [r4, #12]
 8026088:	2104      	movs	r1, #4
 802608a:	6860      	ldr	r0, [r4, #4]
 802608c:	f7ff ff82 	bl	8025f94 <std>
 8026090:	68a0      	ldr	r0, [r4, #8]
 8026092:	2201      	movs	r2, #1
 8026094:	2109      	movs	r1, #9
 8026096:	f7ff ff7d 	bl	8025f94 <std>
 802609a:	68e0      	ldr	r0, [r4, #12]
 802609c:	2202      	movs	r2, #2
 802609e:	2112      	movs	r1, #18
 80260a0:	f7ff ff78 	bl	8025f94 <std>
 80260a4:	2301      	movs	r3, #1
 80260a6:	61a3      	str	r3, [r4, #24]
 80260a8:	e7d2      	b.n	8026050 <__sinit+0xc>
 80260aa:	bf00      	nop
 80260ac:	080296a4 	.word	0x080296a4
 80260b0:	08025fdd 	.word	0x08025fdd

080260b4 <__sfp>:
 80260b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80260b6:	4607      	mov	r7, r0
 80260b8:	f7ff ffac 	bl	8026014 <__sfp_lock_acquire>
 80260bc:	4b1e      	ldr	r3, [pc, #120]	; (8026138 <__sfp+0x84>)
 80260be:	681e      	ldr	r6, [r3, #0]
 80260c0:	69b3      	ldr	r3, [r6, #24]
 80260c2:	b913      	cbnz	r3, 80260ca <__sfp+0x16>
 80260c4:	4630      	mov	r0, r6
 80260c6:	f7ff ffbd 	bl	8026044 <__sinit>
 80260ca:	3648      	adds	r6, #72	; 0x48
 80260cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80260d0:	3b01      	subs	r3, #1
 80260d2:	d503      	bpl.n	80260dc <__sfp+0x28>
 80260d4:	6833      	ldr	r3, [r6, #0]
 80260d6:	b30b      	cbz	r3, 802611c <__sfp+0x68>
 80260d8:	6836      	ldr	r6, [r6, #0]
 80260da:	e7f7      	b.n	80260cc <__sfp+0x18>
 80260dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80260e0:	b9d5      	cbnz	r5, 8026118 <__sfp+0x64>
 80260e2:	4b16      	ldr	r3, [pc, #88]	; (802613c <__sfp+0x88>)
 80260e4:	60e3      	str	r3, [r4, #12]
 80260e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80260ea:	6665      	str	r5, [r4, #100]	; 0x64
 80260ec:	f000 f847 	bl	802617e <__retarget_lock_init_recursive>
 80260f0:	f7ff ff96 	bl	8026020 <__sfp_lock_release>
 80260f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80260f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80260fc:	6025      	str	r5, [r4, #0]
 80260fe:	61a5      	str	r5, [r4, #24]
 8026100:	2208      	movs	r2, #8
 8026102:	4629      	mov	r1, r5
 8026104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026108:	f7ff f96c 	bl	80253e4 <memset>
 802610c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026114:	4620      	mov	r0, r4
 8026116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026118:	3468      	adds	r4, #104	; 0x68
 802611a:	e7d9      	b.n	80260d0 <__sfp+0x1c>
 802611c:	2104      	movs	r1, #4
 802611e:	4638      	mov	r0, r7
 8026120:	f7ff ff62 	bl	8025fe8 <__sfmoreglue>
 8026124:	4604      	mov	r4, r0
 8026126:	6030      	str	r0, [r6, #0]
 8026128:	2800      	cmp	r0, #0
 802612a:	d1d5      	bne.n	80260d8 <__sfp+0x24>
 802612c:	f7ff ff78 	bl	8026020 <__sfp_lock_release>
 8026130:	230c      	movs	r3, #12
 8026132:	603b      	str	r3, [r7, #0]
 8026134:	e7ee      	b.n	8026114 <__sfp+0x60>
 8026136:	bf00      	nop
 8026138:	080296a4 	.word	0x080296a4
 802613c:	ffff0001 	.word	0xffff0001

08026140 <_fwalk_reent>:
 8026140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026144:	4606      	mov	r6, r0
 8026146:	4688      	mov	r8, r1
 8026148:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802614c:	2700      	movs	r7, #0
 802614e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026152:	f1b9 0901 	subs.w	r9, r9, #1
 8026156:	d505      	bpl.n	8026164 <_fwalk_reent+0x24>
 8026158:	6824      	ldr	r4, [r4, #0]
 802615a:	2c00      	cmp	r4, #0
 802615c:	d1f7      	bne.n	802614e <_fwalk_reent+0xe>
 802615e:	4638      	mov	r0, r7
 8026160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026164:	89ab      	ldrh	r3, [r5, #12]
 8026166:	2b01      	cmp	r3, #1
 8026168:	d907      	bls.n	802617a <_fwalk_reent+0x3a>
 802616a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802616e:	3301      	adds	r3, #1
 8026170:	d003      	beq.n	802617a <_fwalk_reent+0x3a>
 8026172:	4629      	mov	r1, r5
 8026174:	4630      	mov	r0, r6
 8026176:	47c0      	blx	r8
 8026178:	4307      	orrs	r7, r0
 802617a:	3568      	adds	r5, #104	; 0x68
 802617c:	e7e9      	b.n	8026152 <_fwalk_reent+0x12>

0802617e <__retarget_lock_init_recursive>:
 802617e:	4770      	bx	lr

08026180 <__retarget_lock_acquire_recursive>:
 8026180:	4770      	bx	lr

08026182 <__retarget_lock_release>:
 8026182:	4770      	bx	lr

08026184 <__retarget_lock_release_recursive>:
 8026184:	4770      	bx	lr

08026186 <__swhatbuf_r>:
 8026186:	b570      	push	{r4, r5, r6, lr}
 8026188:	460e      	mov	r6, r1
 802618a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802618e:	2900      	cmp	r1, #0
 8026190:	b096      	sub	sp, #88	; 0x58
 8026192:	4614      	mov	r4, r2
 8026194:	461d      	mov	r5, r3
 8026196:	da07      	bge.n	80261a8 <__swhatbuf_r+0x22>
 8026198:	2300      	movs	r3, #0
 802619a:	602b      	str	r3, [r5, #0]
 802619c:	89b3      	ldrh	r3, [r6, #12]
 802619e:	061a      	lsls	r2, r3, #24
 80261a0:	d410      	bmi.n	80261c4 <__swhatbuf_r+0x3e>
 80261a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80261a6:	e00e      	b.n	80261c6 <__swhatbuf_r+0x40>
 80261a8:	466a      	mov	r2, sp
 80261aa:	f000 f8c3 	bl	8026334 <_fstat_r>
 80261ae:	2800      	cmp	r0, #0
 80261b0:	dbf2      	blt.n	8026198 <__swhatbuf_r+0x12>
 80261b2:	9a01      	ldr	r2, [sp, #4]
 80261b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80261b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80261bc:	425a      	negs	r2, r3
 80261be:	415a      	adcs	r2, r3
 80261c0:	602a      	str	r2, [r5, #0]
 80261c2:	e7ee      	b.n	80261a2 <__swhatbuf_r+0x1c>
 80261c4:	2340      	movs	r3, #64	; 0x40
 80261c6:	2000      	movs	r0, #0
 80261c8:	6023      	str	r3, [r4, #0]
 80261ca:	b016      	add	sp, #88	; 0x58
 80261cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080261d0 <__smakebuf_r>:
 80261d0:	898b      	ldrh	r3, [r1, #12]
 80261d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80261d4:	079d      	lsls	r5, r3, #30
 80261d6:	4606      	mov	r6, r0
 80261d8:	460c      	mov	r4, r1
 80261da:	d507      	bpl.n	80261ec <__smakebuf_r+0x1c>
 80261dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80261e0:	6023      	str	r3, [r4, #0]
 80261e2:	6123      	str	r3, [r4, #16]
 80261e4:	2301      	movs	r3, #1
 80261e6:	6163      	str	r3, [r4, #20]
 80261e8:	b002      	add	sp, #8
 80261ea:	bd70      	pop	{r4, r5, r6, pc}
 80261ec:	ab01      	add	r3, sp, #4
 80261ee:	466a      	mov	r2, sp
 80261f0:	f7ff ffc9 	bl	8026186 <__swhatbuf_r>
 80261f4:	9900      	ldr	r1, [sp, #0]
 80261f6:	4605      	mov	r5, r0
 80261f8:	4630      	mov	r0, r6
 80261fa:	f7ff f94b 	bl	8025494 <_malloc_r>
 80261fe:	b948      	cbnz	r0, 8026214 <__smakebuf_r+0x44>
 8026200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026204:	059a      	lsls	r2, r3, #22
 8026206:	d4ef      	bmi.n	80261e8 <__smakebuf_r+0x18>
 8026208:	f023 0303 	bic.w	r3, r3, #3
 802620c:	f043 0302 	orr.w	r3, r3, #2
 8026210:	81a3      	strh	r3, [r4, #12]
 8026212:	e7e3      	b.n	80261dc <__smakebuf_r+0xc>
 8026214:	4b0d      	ldr	r3, [pc, #52]	; (802624c <__smakebuf_r+0x7c>)
 8026216:	62b3      	str	r3, [r6, #40]	; 0x28
 8026218:	89a3      	ldrh	r3, [r4, #12]
 802621a:	6020      	str	r0, [r4, #0]
 802621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026220:	81a3      	strh	r3, [r4, #12]
 8026222:	9b00      	ldr	r3, [sp, #0]
 8026224:	6163      	str	r3, [r4, #20]
 8026226:	9b01      	ldr	r3, [sp, #4]
 8026228:	6120      	str	r0, [r4, #16]
 802622a:	b15b      	cbz	r3, 8026244 <__smakebuf_r+0x74>
 802622c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026230:	4630      	mov	r0, r6
 8026232:	f000 f891 	bl	8026358 <_isatty_r>
 8026236:	b128      	cbz	r0, 8026244 <__smakebuf_r+0x74>
 8026238:	89a3      	ldrh	r3, [r4, #12]
 802623a:	f023 0303 	bic.w	r3, r3, #3
 802623e:	f043 0301 	orr.w	r3, r3, #1
 8026242:	81a3      	strh	r3, [r4, #12]
 8026244:	89a0      	ldrh	r0, [r4, #12]
 8026246:	4305      	orrs	r5, r0
 8026248:	81a5      	strh	r5, [r4, #12]
 802624a:	e7cd      	b.n	80261e8 <__smakebuf_r+0x18>
 802624c:	08025fdd 	.word	0x08025fdd

08026250 <__malloc_lock>:
 8026250:	4801      	ldr	r0, [pc, #4]	; (8026258 <__malloc_lock+0x8>)
 8026252:	f7ff bf95 	b.w	8026180 <__retarget_lock_acquire_recursive>
 8026256:	bf00      	nop
 8026258:	2000ab30 	.word	0x2000ab30

0802625c <__malloc_unlock>:
 802625c:	4801      	ldr	r0, [pc, #4]	; (8026264 <__malloc_unlock+0x8>)
 802625e:	f7ff bf91 	b.w	8026184 <__retarget_lock_release_recursive>
 8026262:	bf00      	nop
 8026264:	2000ab30 	.word	0x2000ab30

08026268 <__sread>:
 8026268:	b510      	push	{r4, lr}
 802626a:	460c      	mov	r4, r1
 802626c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026270:	f000 f894 	bl	802639c <_read_r>
 8026274:	2800      	cmp	r0, #0
 8026276:	bfab      	itete	ge
 8026278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802627a:	89a3      	ldrhlt	r3, [r4, #12]
 802627c:	181b      	addge	r3, r3, r0
 802627e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026282:	bfac      	ite	ge
 8026284:	6563      	strge	r3, [r4, #84]	; 0x54
 8026286:	81a3      	strhlt	r3, [r4, #12]
 8026288:	bd10      	pop	{r4, pc}

0802628a <__swrite>:
 802628a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802628e:	461f      	mov	r7, r3
 8026290:	898b      	ldrh	r3, [r1, #12]
 8026292:	05db      	lsls	r3, r3, #23
 8026294:	4605      	mov	r5, r0
 8026296:	460c      	mov	r4, r1
 8026298:	4616      	mov	r6, r2
 802629a:	d505      	bpl.n	80262a8 <__swrite+0x1e>
 802629c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80262a0:	2302      	movs	r3, #2
 80262a2:	2200      	movs	r2, #0
 80262a4:	f000 f868 	bl	8026378 <_lseek_r>
 80262a8:	89a3      	ldrh	r3, [r4, #12]
 80262aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80262ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80262b2:	81a3      	strh	r3, [r4, #12]
 80262b4:	4632      	mov	r2, r6
 80262b6:	463b      	mov	r3, r7
 80262b8:	4628      	mov	r0, r5
 80262ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80262be:	f000 b817 	b.w	80262f0 <_write_r>

080262c2 <__sseek>:
 80262c2:	b510      	push	{r4, lr}
 80262c4:	460c      	mov	r4, r1
 80262c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80262ca:	f000 f855 	bl	8026378 <_lseek_r>
 80262ce:	1c43      	adds	r3, r0, #1
 80262d0:	89a3      	ldrh	r3, [r4, #12]
 80262d2:	bf15      	itete	ne
 80262d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80262d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80262da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80262de:	81a3      	strheq	r3, [r4, #12]
 80262e0:	bf18      	it	ne
 80262e2:	81a3      	strhne	r3, [r4, #12]
 80262e4:	bd10      	pop	{r4, pc}

080262e6 <__sclose>:
 80262e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80262ea:	f000 b813 	b.w	8026314 <_close_r>
	...

080262f0 <_write_r>:
 80262f0:	b538      	push	{r3, r4, r5, lr}
 80262f2:	4d07      	ldr	r5, [pc, #28]	; (8026310 <_write_r+0x20>)
 80262f4:	4604      	mov	r4, r0
 80262f6:	4608      	mov	r0, r1
 80262f8:	4611      	mov	r1, r2
 80262fa:	2200      	movs	r2, #0
 80262fc:	602a      	str	r2, [r5, #0]
 80262fe:	461a      	mov	r2, r3
 8026300:	f7dc f87f 	bl	8002402 <_write>
 8026304:	1c43      	adds	r3, r0, #1
 8026306:	d102      	bne.n	802630e <_write_r+0x1e>
 8026308:	682b      	ldr	r3, [r5, #0]
 802630a:	b103      	cbz	r3, 802630e <_write_r+0x1e>
 802630c:	6023      	str	r3, [r4, #0]
 802630e:	bd38      	pop	{r3, r4, r5, pc}
 8026310:	2000ab38 	.word	0x2000ab38

08026314 <_close_r>:
 8026314:	b538      	push	{r3, r4, r5, lr}
 8026316:	4d06      	ldr	r5, [pc, #24]	; (8026330 <_close_r+0x1c>)
 8026318:	2300      	movs	r3, #0
 802631a:	4604      	mov	r4, r0
 802631c:	4608      	mov	r0, r1
 802631e:	602b      	str	r3, [r5, #0]
 8026320:	f7dc f88b 	bl	800243a <_close>
 8026324:	1c43      	adds	r3, r0, #1
 8026326:	d102      	bne.n	802632e <_close_r+0x1a>
 8026328:	682b      	ldr	r3, [r5, #0]
 802632a:	b103      	cbz	r3, 802632e <_close_r+0x1a>
 802632c:	6023      	str	r3, [r4, #0]
 802632e:	bd38      	pop	{r3, r4, r5, pc}
 8026330:	2000ab38 	.word	0x2000ab38

08026334 <_fstat_r>:
 8026334:	b538      	push	{r3, r4, r5, lr}
 8026336:	4d07      	ldr	r5, [pc, #28]	; (8026354 <_fstat_r+0x20>)
 8026338:	2300      	movs	r3, #0
 802633a:	4604      	mov	r4, r0
 802633c:	4608      	mov	r0, r1
 802633e:	4611      	mov	r1, r2
 8026340:	602b      	str	r3, [r5, #0]
 8026342:	f7dc f886 	bl	8002452 <_fstat>
 8026346:	1c43      	adds	r3, r0, #1
 8026348:	d102      	bne.n	8026350 <_fstat_r+0x1c>
 802634a:	682b      	ldr	r3, [r5, #0]
 802634c:	b103      	cbz	r3, 8026350 <_fstat_r+0x1c>
 802634e:	6023      	str	r3, [r4, #0]
 8026350:	bd38      	pop	{r3, r4, r5, pc}
 8026352:	bf00      	nop
 8026354:	2000ab38 	.word	0x2000ab38

08026358 <_isatty_r>:
 8026358:	b538      	push	{r3, r4, r5, lr}
 802635a:	4d06      	ldr	r5, [pc, #24]	; (8026374 <_isatty_r+0x1c>)
 802635c:	2300      	movs	r3, #0
 802635e:	4604      	mov	r4, r0
 8026360:	4608      	mov	r0, r1
 8026362:	602b      	str	r3, [r5, #0]
 8026364:	f7dc f885 	bl	8002472 <_isatty>
 8026368:	1c43      	adds	r3, r0, #1
 802636a:	d102      	bne.n	8026372 <_isatty_r+0x1a>
 802636c:	682b      	ldr	r3, [r5, #0]
 802636e:	b103      	cbz	r3, 8026372 <_isatty_r+0x1a>
 8026370:	6023      	str	r3, [r4, #0]
 8026372:	bd38      	pop	{r3, r4, r5, pc}
 8026374:	2000ab38 	.word	0x2000ab38

08026378 <_lseek_r>:
 8026378:	b538      	push	{r3, r4, r5, lr}
 802637a:	4d07      	ldr	r5, [pc, #28]	; (8026398 <_lseek_r+0x20>)
 802637c:	4604      	mov	r4, r0
 802637e:	4608      	mov	r0, r1
 8026380:	4611      	mov	r1, r2
 8026382:	2200      	movs	r2, #0
 8026384:	602a      	str	r2, [r5, #0]
 8026386:	461a      	mov	r2, r3
 8026388:	f7dc f87e 	bl	8002488 <_lseek>
 802638c:	1c43      	adds	r3, r0, #1
 802638e:	d102      	bne.n	8026396 <_lseek_r+0x1e>
 8026390:	682b      	ldr	r3, [r5, #0]
 8026392:	b103      	cbz	r3, 8026396 <_lseek_r+0x1e>
 8026394:	6023      	str	r3, [r4, #0]
 8026396:	bd38      	pop	{r3, r4, r5, pc}
 8026398:	2000ab38 	.word	0x2000ab38

0802639c <_read_r>:
 802639c:	b538      	push	{r3, r4, r5, lr}
 802639e:	4d07      	ldr	r5, [pc, #28]	; (80263bc <_read_r+0x20>)
 80263a0:	4604      	mov	r4, r0
 80263a2:	4608      	mov	r0, r1
 80263a4:	4611      	mov	r1, r2
 80263a6:	2200      	movs	r2, #0
 80263a8:	602a      	str	r2, [r5, #0]
 80263aa:	461a      	mov	r2, r3
 80263ac:	f7dc f80c 	bl	80023c8 <_read>
 80263b0:	1c43      	adds	r3, r0, #1
 80263b2:	d102      	bne.n	80263ba <_read_r+0x1e>
 80263b4:	682b      	ldr	r3, [r5, #0]
 80263b6:	b103      	cbz	r3, 80263ba <_read_r+0x1e>
 80263b8:	6023      	str	r3, [r4, #0]
 80263ba:	bd38      	pop	{r3, r4, r5, pc}
 80263bc:	2000ab38 	.word	0x2000ab38

080263c0 <_init>:
 80263c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263c2:	bf00      	nop
 80263c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80263c6:	bc08      	pop	{r3}
 80263c8:	469e      	mov	lr, r3
 80263ca:	4770      	bx	lr

080263cc <_fini>:
 80263cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263ce:	bf00      	nop
 80263d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80263d2:	bc08      	pop	{r3}
 80263d4:	469e      	mov	lr, r3
 80263d6:	4770      	bx	lr
